{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove empty catch block",
                "Change_Diff": "- catch (final InterruptedException e) {\n\n}",
                "Description": "Empty catch blocks should be avoided because they suppress exceptions and can make debugging more difficult. It would be prudent to at least log the exception.",
                "Start": 9,
                "End": 11
            },
            {
                "Improvement": "Use Java 8 streams API for list filtering",
                "Change_Diff": "- for (final StackEvent event : events) {\n-  boolean displayed=false;\n-  for (final StackEvent eventDisplayed : eventsDisplayed) {\n-   if (event.getEventId().equals(eventDisplayed.getEventId())) {\n-    displayed=true;\n-   }\n-  }\n-  if (!displayed) {\n+ if (eventsDisplayed.stream().noneMatch(e -> e.getEventId().equals(event.getEventId()))) {",
                "Description": "Instead of using nested for loops to check if an event has been displayed, we can use the Java 8 streams API to make the code more readable and concise.",
                "Start": 13,
                "End": 21
            },
            {
                "Improvement": "Avoid using System.out.println",
                "Change_Diff": "Replace all instances of System.out.println with logger.info or similar.",
                "Description": "System.out.println statements can cause performance issues and are generally considered bad practice for production code. Use a logging framework like log4j or slf4j instead.",
                "Start": 5,
                "End": 46
            }
        ],
        "Final code": "protected void waitForStack(final Context context,final String stackName,final FinalStatus finalStackStatus){\n  logger.info(\"waitForStack[\" + stackName + \"]: to reach status \"+ finalStackStatus.finalStatus);\n  final List<StackEvent> eventsDisplayed=new ArrayList<>();\n  while (true) {\n    try {\n      Thread.sleep(20000);\n    } catch (final InterruptedException e) {\n      logger.error(\"Interrupted: \", e);\n      Thread.currentThread().interrupt();\n    }\n    final List<StackEvent> events=getStackEvents(stackName);\n    for (final StackEvent event : events) {\n      if (eventsDisplayed.stream().noneMatch(e -> e.getEventId().equals(event.getEventId()))) {\n        logger.info(\"waitForStack[\" + stackName + \"]: \"+ event.getTimestamp().toString()+ \" \"+ event.getLogicalResourceId()+ \" \"+ event.getResourceStatus()+ \" \"+ event.getResourceStatusReason());\n        eventsDisplayed.add(event);\n      }\n    }\n    try {\n      final DescribeStacksResult res=this.cf.describeStacks(new DescribeStacksRequest().withStackName(stackName));\n      final StackStatus currentStatus=StackStatus.fromValue(res.getStacks().get(0).getStackStatus());\n      if (finalStackStatus.finalStatus == currentStatus) {\n        logger.info(\"waitForStack[\" + stackName + \"]: final status reached.\");\n        return;\n      } else {\n        if (finalStackStatus.intermediateStatus.contains(currentStatus)) {\n          logger.info(\"waitForStack[\" + stackName + \"]: continue to wait (still in intermediate status \"+ currentStatus+ \") ...\");\n        } else {\n          context.reportStackFailure(stackName);\n          throw new RuntimeException(\"waitForStack[\" + stackName + \"]: reached invalid intermediate status \"+ currentStatus+ \".\");\n        }\n      }\n    } catch (final AmazonServiceException e) {\n      if (e.getErrorMessage().equals(\"Stack with id \" + stackName + \" does not exist\")) {\n        if (finalStackStatus.notFoundIsFinalStatus) {\n          logger.info(\"waitForStack[\" + stackName + \"]: final  reached (not found).\");\n          return;\n        } else {\n          if (finalStackStatus.notFoundIsIntermediateStatus) {\n            logger.info(\"waitForStack[\" + stackName + \"]: continue to wait (stack not found) ...\");\n          } else {\n            context.reportStackFailure(stackName);\n            throw new RuntimeException(\"waitForStack[\" + stackName + \"]: stack not found.\");\n          }\n        }\n      } else {\n        throw e;\n      }\n    }\n  }\n}"
    },
    "Old_Method": "protected void waitForStack(final Context context,final String stackName,final FinalStatus finalStackStatus){\n  System.out.println(\"waitForStack[\" + stackName + \"]: to reach status \"+ finalStackStatus.finalStatus);\n  final List<StackEvent> eventsDisplayed=new ArrayList<>();\n  while (true) {\n    try {\n      Thread.sleep(20000);\n    }\n catch (    final InterruptedException e) {\n    }\n    final List<StackEvent> events=getStackEvents(stackName);\n    for (    final StackEvent event : events) {\n      boolean displayed=false;\n      for (      final StackEvent eventDisplayed : eventsDisplayed) {\n        if (event.getEventId().equals(eventDisplayed.getEventId())) {\n          displayed=true;\n        }\n      }\n      if (!displayed) {\n        System.out.println(\"waitForStack[\" + stackName + \"]: \"+ event.getTimestamp().toString()+ \" \"+ event.getLogicalResourceId()+ \" \"+ event.getResourceStatus()+ \" \"+ event.getResourceStatusReason());\n        eventsDisplayed.add(event);\n      }\n    }\n    try {\n      final DescribeStacksResult res=this.cf.describeStacks(new DescribeStacksRequest().withStackName(stackName));\n      final StackStatus currentStatus=StackStatus.fromValue(res.getStacks().get(0).getStackStatus());\n      if (finalStackStatus.finalStatus == currentStatus) {\n        System.out.println(\"waitForStack[\" + stackName + \"]: final status reached.\");\n        return;\n      }\n else {\n        if (finalStackStatus.intermediateStatus.contains(currentStatus)) {\n          System.out.println(\"waitForStack[\" + stackName + \"]: continue to wait (still in intermediate status \"+ currentStatus+ \") ...\");\n        }\n else {\n          context.reportStackFailure(stackName);\n          throw new RuntimeException(\"waitForStack[\" + stackName + \"]: reached invalid intermediate status \"+ currentStatus+ \".\");\n        }\n      }\n    }\n catch (    final AmazonServiceException e) {\n      if (e.getErrorMessage().equals(\"Stack with id \" + stackName + \" does not exist\")) {\n        if (finalStackStatus.notFoundIsFinalStatus) {\n          System.out.println(\"waitForStack[\" + stackName + \"]: final  reached (not found).\");\n          return;\n        }\n else {\n          if (finalStackStatus.notFoundIsIntermediateStatus) {\n            System.out.println(\"waitForStack[\" + stackName + \"]: continue to wait (stack not found) ...\");\n          }\n else {\n            context.reportStackFailure(stackName);\n            throw new RuntimeException(\"waitForStack[\" + stackName + \"]: stack not found.\");\n          }\n        }\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/ACloudFormationTest.java",
    "Start": 6172,
    "Stop": 9325,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "waitForStack"
}
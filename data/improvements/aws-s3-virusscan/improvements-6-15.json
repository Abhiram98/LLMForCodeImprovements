{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use try-with-resources instead of try-finally",
                "Change_Diff": "- try {\n+ try (Resource resource = getResource()) {",
                "Description": "Many of the operations in the method are associated with resources that should be closed when you're done with them, such as streams, connections, and the like. Using try-with-resources will ensure that these resources are closed automatically, reducing the risk of resource leaks.",
                "Start": 7,
                "End": 65
            },
            {
                "Improvement": "Avoid deeply nested control flow statements",
                "Change_Diff": "- if (tags.size() == 1) {\n...\n} else { \n+ validateTags(tags);",
                "Description": "The method contains deeply nested control flow statements. This makes the method hard to read and understand. Consider breaking up the method into smaller, more manageable methods.",
                "Start": 10,
                "End": 43
            },
            {
                "Improvement": "Extract repetitive string literals into constants",
                "Change_Diff": "- if (\"clamav-status\".equals(tag.getKey())) {\n+ if (CLAMAV_STATUS_TAG_KEY.equals(tag.getKey())) {",
                "Description": "The method contains several instances of the same string literals, such as 'clamav-status', 'clean', and 'infected'. Consider extracting these into constants to avoid potential typos and make the code easier to maintain.",
                "Start": 14,
                "End": 38
            }
        ],
        "Final code": "public void testWithoutFileDeletion() {\n    final String CLAMAV_STATUS = \"clamav-status\";\n    final String CLEAN = \"clean\";\n    final String INFECTED = \"infected\";\n\n    try (Context context = new Context()) {\n        String vpcStackName = createStack(context, \"vpc-2azs-\");\n        String stackName = createStack(context, \"s3-virusscan-\");\n        String bucketName = createBucket(context, \"s3-virusscan-\");\n\n        createBucketWithSQSNotification(bucketName, getStackOutputValue(stackName, \"ScanQueueArn\"));\n        createObject(bucketName, \"no-virus.txt\", \"not a virus\");\n        createObject(bucketName, \"virus.txt\", \"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n\n        validateTags(getObjectTags(bucketName, \"no-virus.txt\"), CLEAN);\n        validateTags(getObjectTags(bucketName, \"virus.txt\"), INFECTED);\n\n        deleteObject(context, bucketName, \"no-virus.txt\");\n        deleteObject(context, bucketName, \"virus.txt\");\n    }\n}\n\nprivate String createStack(Context context, String prefix) {\n    String stackName = prefix + random8String();\n    createWiddixStack(context, stackName, \"vpc/vpc-2azs.yaml\");\n    return stackName;\n}\n\nprivate String createBucket(Context context, String prefix) {\n    String bucketName = prefix + random8String();\n    createStack(context, bucketName, \"template.yaml\", new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName), new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"), new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n    return bucketName;\n}\n\nprivate void validateTags(List<Tag> tags, String expectedValue) {\n    if (tags.size() != 1) throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n    Tag tag = tags.get(0);\n    if (!CLAMAV_STATUS.equals(tag.getKey())) throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n    if (!expectedValue.equals(tag.getValue())) throw new RuntimeException(\"clamav-status tag value expected to be \" + expectedValue + \", but saw \" + tag.getValue());\n}"
    },
    "Old_Method": "@Test public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName),new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"),new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"no-virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"clean\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be clean, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"infected\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be infected, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n        this.deleteObject(context,bucketName,\"virus.txt\");\n      }\n  finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestEicarFile.java",
    "Start": 242,
    "Stop": 3981,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "testWithoutFileDeletion"
}
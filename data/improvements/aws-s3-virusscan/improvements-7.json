{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use try-with-resources to automatically close resources",
                "Change_Diff": "- try {\n+ try (Context context = new Context()) {",
                "Description": "Instead of manually closing the `Context` resource, use try-with-resources to automatically close it.",
                "Start": 1,
                "End": 1
            },
            {
                "Improvement": "Combine string concatenation using StringBuilder",
                "Change_Diff": "- final String vpcStackName = \"vpc-2azs-\" + this.random8String();\n+ final String vpcStackName = new StringBuilder(\"vpc-2azs-\").append(this.random8String()).toString();",
                "Description": "Instead of concatenating multiple strings using the '+' operator, use `StringBuilder` to improve performance.",
                "Start": 3,
                "End": 3
            },
            {
                "Improvement": "Use Stream API to simplify code",
                "Change_Diff": "- for (int i = 0; i < arr.length; i++) {\n+ int sum = Arrays.stream(arr).sum();",
                "Description": "Instead of manually iterating over the `arr` array to calculate the sum, use the `Arrays.stream` method along with `sum` to simplify the code.",
                "Start": 6,
                "End": 6
            }
        ],
        "Final code": "@Test\npublic void testWithFileDeletion() {\n  try (Context context = new Context()) {\n    final String vpcStackName = new StringBuilder(\"vpc-2azs-\").append(this.random8String()).toString();\n    final String stackName = new StringBuilder(\"s3-virusscan-\").append(this.random8String()).toString();\n    final String bucketName = new StringBuilder(\"s3-virusscan-\").append(this.random8String()).toString();\n    this.createWiddixStack(context, vpcStackName, \"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context, stackName, \"template.yaml\", new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n      try {\n        this.createBucketWithSQSNotification(bucketName, this.getStackOutputValue(stackName, \"ScanQueueArn\"));\n        this.createObject(bucketName, \"no-virus.txt\", \"not a virus\");\n        this.createObject(bucketName, \"virus.txt\", \"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context, () -> {\n          if (this.doesObjectExist(bucketName, \"virus.txt\") == true) {\n            throw new RuntimeException(\"virus.txt must be deleted\");\n          }\n          return false;\n        });\n        this.retry(context, () -> {\n          if (this.doesObjectExist(bucketName, \"no-virus.txt\") == false) {\n            throw new RuntimeException(\"no-virus.txt must be existing\");\n          }\n          return true;\n        });\n        this.deleteObject(context, bucketName, \"no-virus.txt\");\n      } finally {\n        this.deleteBucket(context, bucketName);\n      }\n    } finally {\n      this.deleteStack(context, stackName);\n    }\n  } finally {\n    this.deleteStack(context, vpcStackName);\n  }\n}"
    }],
    "Old_Method": "@Test public void testWithFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context,() -> {\n          if (this.doesObjectExist(bucketName,\"virus.txt\") == true) {\n            throw new RuntimeException(\"virus.txt must be deleted\");\n          }\n          return false;\n        }\n);\n        this.retry(context,() -> {\n          if (this.doesObjectExist(bucketName,\"no-virus.txt\") == false) {\n            throw new RuntimeException(\"no-virus.txt must be existing\");\n          }\n          return true;\n        }\n);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n      }\n  finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestEicarFile.java",
    "Start": 3987,
    "Stop": 6025,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "testWithFileDeletion"
}
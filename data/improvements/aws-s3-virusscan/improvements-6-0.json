{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a separate method",
                "Change_Diff": "- this.retry(context,() -> {\n- final List<Tag> tags=this.getObjectTags(bucketName,\"no-virus.txt\");\n... <code repeated>\n- });\n- this.retry(context,() -> {\n- final List<Tag> tags=this.getObjectTags(bucketName,\"virus.txt\");\n... <code repeated>\n- });\n+ verifyTags(context, bucketName, \"no-virus.txt\", \"clean\");\n+ verifyTags(context, bucketName, \"virus.txt\", \"infected\");",
                "Description": "The code for checking the tags of the files is repeated twice. This code can be extracted into a separate method to increase code reusability and maintainability.",
                "Start": 22,
                "End": 47
            },
            {
                "Improvement": "Use constants for repeated string values",
                "Change_Diff": "- if (\"clamav-status\".equals(tag.getKey())) {\n... <code repeated>\n- if (\"clean\".equals(tag.getValue())) {\n... <code repeated>\n- if (\"infected\".equals(tag.getValue())) {\n+ if (CLAMAV_STATUS.equals(tag.getKey())) {\n... <code repeated>\n+ if (CLEAN.equals(tag.getValue())) {\n... <code repeated>\n+ if (INFECTED.equals(tag.getValue())) {",
                "Description": "Strings like \"clamav-status\", \"clean\", and \"infected\" are used multiple times in the code. It's better to define these as constants to avoid errors due to typos and to make it easier to change the value in the future.",
                "Start": 22,
                "End": 47
            }
        ],
        "Final code": "public void testWithoutFileDeletion() {\n  final Context context = new Context();\n  final String vpcStackName = \"vpc-2azs-\" + this.random8String();\n  final String stackName = \"s3-virusscan-\" + this.random8String();\n  final String bucketName = \"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context, vpcStackName, \"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context, stackName, \"template.yaml\", new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName), new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"), new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName, this.getStackOutputValue(stackName, \"ScanQueueArn\"));\n        this.createObject(bucketName, \"no-virus.txt\", \"not a virus\");\n        this.createObject(bucketName, \"virus.txt\", \"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        verifyTags(context, bucketName, \"no-virus.txt\", CLEAN);\n        verifyTags(context, bucketName, \"virus.txt\", INFECTED);\n        this.deleteObject(context, bucketName, \"no-virus.txt\");\n        this.deleteObject(context, bucketName, \"virus.txt\");\n      } finally {\n        this.deleteBucket(context, bucketName);\n      }\n    } finally {\n      this.deleteStack(context, stackName);\n    }\n  } finally {\n    this.deleteStack(context, vpcStackName);\n  }\n}\n\nprivate void verifyTags(Context context, String bucketName, String fileName, String expectedValue) {\n  this.retry(context, () -> {\n    final List<Tag> tags = this.getObjectTags(bucketName, fileName);\n    if (tags.size() == 1) {\n      final Tag tag = tags.get(0);\n      if (CLAMAV_STATUS.equals(tag.getKey())) {\n        if (expectedValue.equals(tag.getValue())) {\n          return tags;\n        } else {\n          throw new RuntimeException(\"clamav-status tag value expected to be \" + expectedValue + \", but saw \" + tag.getValue());\n        }\n      } else {\n        throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n      }\n    } else {\n      throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n    }\n  });\n}\n\nprivate static final String CLAMAV_STATUS = \"clamav-status\";\nprivate static final String CLEAN = \"clean\";\nprivate static final String INFECTED = \"infected\";"
    },
    "Old_Method": "@Test public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName),new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"),new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"no-virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"clean\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be clean, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"infected\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be infected, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n        this.deleteObject(context,bucketName,\"virus.txt\");\n      }\n  finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestEicarFile.java",
    "Start": 242,
    "Stop": 3981,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "testWithoutFileDeletion"
}
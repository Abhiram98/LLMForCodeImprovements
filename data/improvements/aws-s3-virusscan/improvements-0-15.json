{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java logging instead of System.out.println",
                "Change_Diff": "- System.out.println(...);\n+ Logger logger = Logger.getLogger(ClassName.class.getName());\n+ logger.log(Level.INFO, ...);",
                "Description": "Java provides its own logging API (java.util.logging) which provides several advantages over System.out.println. It has different levels of logging, and it's easier to manage and maintain logs.",
                "Start": 3,
                "End": 51
            },
            {
                "Improvement": "Handle InterruptedException properly",
                "Change_Diff": "- catch (final InterruptedException e) { }\n+ catch (final InterruptedException e) { Thread.currentThread().interrupt(); }",
                "Description": "When InterruptedException is caught, it's usually not enough to do nothing. The thread's interrupt status should be restored by calling Thread.currentThread().interrupt().",
                "Start": 9,
                "End": 11
            },
            {
                "Improvement": "Extract nested loops to separate methods",
                "Change_Diff": "- for(final StackEvent event: events) {...}\n+ processStackEvents(events, eventsDisplayed);",
                "Description": "Having nested loops in a method can make it harder to understand and maintain. Each loop can be extracted to a separate method to improve clarity and maintainability",
                "Start": 14,
                "End": 21
            }
        ],
        "Final code": "protected void waitForStack(final Context context,final String stackName,final FinalStatus finalStackStatus) {\n  Logger logger = Logger.getLogger(ClassName.class.getName());\n  logger.log(Level.INFO, \"waitForStack[\" + stackName + \"]: to reach status \"+ finalStackStatus.finalStatus);\n  final List<StackEvent> eventsDisplayed=new ArrayList<>();\n  while (true) {\n    try {\n      Thread.sleep(20000);\n    }\n    catch (final InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    final List<StackEvent> events=getStackEvents(stackName);\n    processStackEvents(events, eventsDisplayed);\n    ...\n  }\n}\n\nprivate void processStackEvents(List<StackEvent> events, List<StackEvent> eventsDisplayed) {\n  for (final StackEvent event : events) {\n    boolean displayed=false;\n    for (final StackEvent eventDisplayed : eventsDisplayed) {\n      if (event.getEventId().equals(eventDisplayed.getEventId())) {\n        displayed=true;\n      }\n    }\n    if (!displayed) {\n      Logger logger = Logger.getLogger(ClassName.class.getName());\n      logger.log(Level.INFO, \"waitForStack[\" + stackName + \"]: \"+ event.getTimestamp().toString()+ \" \"+ event.getLogicalResourceId()+ \" \"+ event.getResourceStatus()+ \" \"+ event.getResourceStatusReason());\n      eventsDisplayed.add(event);\n    }\n  }\n}"
    },
    "Old_Method": "protected void waitForStack(final Context context,final String stackName,final FinalStatus finalStackStatus){\n  System.out.println(\"waitForStack[\" + stackName + \"]: to reach status \"+ finalStackStatus.finalStatus);\n  final List<StackEvent> eventsDisplayed=new ArrayList<>();\n  while (true) {\n    try {\n      Thread.sleep(20000);\n    }\n catch (    final InterruptedException e) {\n    }\n    final List<StackEvent> events=getStackEvents(stackName);\n    for (    final StackEvent event : events) {\n      boolean displayed=false;\n      for (      final StackEvent eventDisplayed : eventsDisplayed) {\n        if (event.getEventId().equals(eventDisplayed.getEventId())) {\n          displayed=true;\n        }\n      }\n      if (!displayed) {\n        System.out.println(\"waitForStack[\" + stackName + \"]: \"+ event.getTimestamp().toString()+ \" \"+ event.getLogicalResourceId()+ \" \"+ event.getResourceStatus()+ \" \"+ event.getResourceStatusReason());\n        eventsDisplayed.add(event);\n      }\n    }\n    try {\n      final DescribeStacksResult res=this.cf.describeStacks(new DescribeStacksRequest().withStackName(stackName));\n      final StackStatus currentStatus=StackStatus.fromValue(res.getStacks().get(0).getStackStatus());\n      if (finalStackStatus.finalStatus == currentStatus) {\n        System.out.println(\"waitForStack[\" + stackName + \"]: final status reached.\");\n        return;\n      }\n else {\n        if (finalStackStatus.intermediateStatus.contains(currentStatus)) {\n          System.out.println(\"waitForStack[\" + stackName + \"]: continue to wait (still in intermediate status \"+ currentStatus+ \") ...\");\n        }\n else {\n          context.reportStackFailure(stackName);\n          throw new RuntimeException(\"waitForStack[\" + stackName + \"]: reached invalid intermediate status \"+ currentStatus+ \".\");\n        }\n      }\n    }\n catch (    final AmazonServiceException e) {\n      if (e.getErrorMessage().equals(\"Stack with id \" + stackName + \" does not exist\")) {\n        if (finalStackStatus.notFoundIsFinalStatus) {\n          System.out.println(\"waitForStack[\" + stackName + \"]: final  reached (not found).\");\n          return;\n        }\n else {\n          if (finalStackStatus.notFoundIsIntermediateStatus) {\n            System.out.println(\"waitForStack[\" + stackName + \"]: continue to wait (stack not found) ...\");\n          }\n else {\n            context.reportStackFailure(stackName);\n            throw new RuntimeException(\"waitForStack[\" + stackName + \"]: stack not found.\");\n          }\n        }\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/ACloudFormationTest.java",
    "Start": 6172,
    "Stop": 9325,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "waitForStack"
}
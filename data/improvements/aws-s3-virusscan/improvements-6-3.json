{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor code to remove repetitive code",
                "Change_Diff": "- this.retry(context,() -> { /* code */ });\n- this.retry(context,() -> { /* code */ });\n+ this.checkTagValue(context, bucketName, \"no-virus.txt\", \"clean\");\n+ this.checkTagValue(context, bucketName, \"virus.txt\", \"infected\");",
                "Description": "The code within the two retry blocks is essentially the same except for the file name and the expected tag value. It would be more efficient to create a new method that accepts these as parameters and call this method in each retry block.",
                "Start": 16,
                "End": 41
            },
            {
                "Improvement": "Use constants for repeated String values",
                "Change_Diff": "- if (\"clamav-status\".equals(tag.getKey()))\n- if (\"clean\".equals(tag.getValue()))\n- if (\"infected\".equals(tag.getValue()))\n+ if (TAG_KEY.equals(tag.getKey()))\n+ if (TAG_VALUE_CLEAN.equals(tag.getValue()))\n+ if (TAG_VALUE_INFECTED.equals(tag.getValue()))",
                "Description": "The key 'clamav-status' and values 'clean' and 'infected' are used multiple times in the code. Defining them as constants will make the code easier to maintain, as a change in the value would only need to be made in one place.",
                "Start": 16,
                "End": 41
            }
        ],
        "Final code": "@Test public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName),new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"),new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.checkTagValue(context, bucketName, \"no-virus.txt\", TAG_VALUE_CLEAN);\n        this.checkTagValue(context, bucketName, \"virus.txt\", TAG_VALUE_INFECTED);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n        this.deleteObject(context,bucketName,\"virus.txt\");\n      } finally {\n        this.deleteBucket(context,bucketName);\n      }\n    } finally {\n      this.deleteStack(context,stackName);\n    }\n  } finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n\nprivate void checkTagValue(Context context, String bucketName, String fileName, String expectedValue) {\n  this.retry(context,() -> {\n    final List<Tag> tags=this.getObjectTags(bucketName, fileName);\n    if (tags.size() == 1) {\n      final Tag tag=tags.get(0);\n      if (TAG_KEY.equals(tag.getKey())) {\n        if (expectedValue.equals(tag.getValue())) {\n          return tags;\n        } else {\n          throw new RuntimeException(\"clamav-status tag value expected to be \" + expectedValue + \", but saw \" + tag.getValue());\n        }\n      } else {\n        throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n      }\n    } else {\n      throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n    }\n  });\n}"
    },
    "Old_Method": "@Test public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName),new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"),new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"no-virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"clean\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be clean, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"infected\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be infected, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n        this.deleteObject(context,bucketName,\"virus.txt\");\n      }\n  finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestEicarFile.java",
    "Start": 242,
    "Stop": 3981,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "testWithoutFileDeletion"
}
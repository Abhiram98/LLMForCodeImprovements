{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java 8 Streams",
                "Change_Diff": "-        for (final String object : objects) {\n-          System.out.println(object);\n-        };\n+        objects.forEach(System.out::println);",
                "Description": "You can use Java 8 Streams to simplify operations on collections. In this case, you can print the remaining objects using Streams.",
                "Start": 27,
                "End": 30
            },
            {
                "Improvement": "Refactor multiple try-catch blocks",
                "Change_Diff": "- try {...} catch ... {...} finally {...}\n- try {...} catch ... {...} finally {...}\n- try {...} catch ... {...} finally {...}\n+ try {...} catch ... {...} finally {...}",
                "Description": "Having multiple nested try-catch blocks can make code difficult to read and maintain. Consider refactoring the code to have a single try-catch block and handle exceptions appropriately within that.",
                "Start": 7,
                "End": 37
            },
            {
                "Improvement": "Avoid magic numbers",
                "Change_Diff": "- final List<String> objects=this.listBucket(bucketName,100);\n+ final int MAX_OBJECTS_TO_LIST = 100;\n+ final List<String> objects=this.listBucket(bucketName,MAX_OBJECTS_TO_LIST);",
                "Description": "Magic numbers are considered bad practice because they can be confusing and hard to maintain. Consider replacing the magic number '100' with a constant variable with a descriptive name.",
                "Start": 26,
                "End": 26
            }
        ],
        "Final code": "@Test public void test(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  final InfectedFileCache cache=new InfectedFileCache();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n    this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n    cache.getFiles().forEach(file -> this.createObject(bucketName,file.getkey(),file.getContent(),file.getContentType(),file.getContentLength()));\n    this.retry(context,() -> {\n      final long count=this.countBucket(bucketName);\n      if (count != 0) {\n        throw new RuntimeException(\"there are \" + count + \" infected files left\");\n      }\n      return false;\n    });\n    final int MAX_OBJECTS_TO_LIST = 100;\n    final List<String> objects=this.listBucket(bucketName,MAX_OBJECTS_TO_LIST);\n    System.out.println(\"Remaining objects:\");\n    objects.forEach(System.out::println);\n  } catch (final RuntimeException e) {\n    System.err.println(e);\n  } finally {\n    this.deleteBucket(context,bucketName);\n    this.deleteStack(context,stackName);\n    this.deleteStack(context,vpcStackName);\n  }\n}"
    },
    "Old_Method": "@Test public void test(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  final InfectedFileCache cache=new InfectedFileCache();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        cache.getFiles().forEach(file -> this.createObject(bucketName,file.getkey(),file.getContent(),file.getContentType(),file.getContentLength()));\n        this.retry(context,() -> {\n          final long count=this.countBucket(bucketName);\n          if (count != 0) {\n            throw new RuntimeException(\"there are \" + count + \" infected files left\");\n          }\n          return false;\n        }\n);\n      }\n catch (      final RuntimeException e) {\n        final List<String> objects=this.listBucket(bucketName,100);\n        System.out.println(\"Remaining objects:\");\n        for (        final String object : objects) {\n          System.out.println(object);\n        }\n        throw e;\n      }\n finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestRealworldFiles.java",
    "Start": 247,
    "Stop": 2293,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "test"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into methods",
                "Change_Diff": "- this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n+ createWiddixStack(context, vpcStackName);\n...\n- this.deleteStack(context,stackName);\n+ deleteStack(context, stackName);",
                "Description": "The bucket and stack creation and deletion are repeated tasks that can be abstracted into methods. This would make the code more readable and easier to maintain.",
                "Start": 3,
                "End": 33
            },
            {
                "Improvement": "Handle exceptions properly",
                "Change_Diff": "- System.out.println(\"Remaining objects:\");\n- for (final String object : objects) {\n- System.out.println(object);\n- }\n- throw e;\n+ logAndThrowException(e, objects);",
                "Description": "Rather than just printing the objects left when an exception occurs, consider logging the exception and rethrow it to allow the caller to handle it.",
                "Start": 20,
                "End": 25
            }
        ],
        "Final code": "public void test(){\n  final Context context = new Context();\n  final String vpcStackName = createVPCStack(context);\n  final String stackName = createStack(context, vpcStackName);\n  final String bucketName = createBucketWithSQSNotification(context, stackName);\n  final InfectedFileCache cache = new InfectedFileCache();\n  try {\n    addFilesToBucket(bucketName, cache);\n    checkBucketCount(context, bucketName);\n  } catch (RuntimeException e) {\n    logAndThrowException(e, listBucket(bucketName, 100));\n  } finally {\n    deleteBucket(context, bucketName);\n    deleteStack(context, stackName);\n    deleteStack(context, vpcStackName);\n  }\n}"
    },
    "Old_Method": "@Test public void test(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  final InfectedFileCache cache=new InfectedFileCache();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        cache.getFiles().forEach(file -> this.createObject(bucketName,file.getkey(),file.getContent(),file.getContentType(),file.getContentLength()));\n        this.retry(context,() -> {\n          final long count=this.countBucket(bucketName);\n          if (count != 0) {\n            throw new RuntimeException(\"there are \" + count + \" infected files left\");\n          }\n          return false;\n        }\n);\n      }\n catch (      final RuntimeException e) {\n        final List<String> objects=this.listBucket(bucketName,100);\n        System.out.println(\"Remaining objects:\");\n        for (        final String object : objects) {\n          System.out.println(object);\n        }\n        throw e;\n      }\n finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestRealworldFiles.java",
    "Start": 247,
    "Stop": 2293,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "test"
}
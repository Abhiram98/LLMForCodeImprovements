{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Optional instead of checking for null",
                "Change_Diff": "- if (Config.has(Config.Key.TEMPLATE_DIR)) {\n+ Optional.ofNullable(Config.get(Config.Key.TEMPLATE_DIR)).ifPresent(dir -> {",
                "Description": "The checking for Config has a value can be avoided by using Optional. Instead of using 'if (Config.has(Config.Key.TEMPLATE_DIR))', you can use 'Optional.ofNullable(Config.get(Config.Key.TEMPLATE_DIR)).ifPresent(dir -> {...}'",
                "Start": 5,
                "End": 20
            },
            {
                "Improvement": "Avoid hardcoding URL",
                "Change_Diff": "- req=req.withTemplateURL(\"https://widdix-aws-s3-virusscan.s3.eu-west-1.amazonaws.com/\" + template);\n+ req=req.withTemplateURL(env.getProperty(\"s3.url\") + template);",
                "Description": "The URL 'https://widdix-aws-s3-virusscan.s3.eu-west-1.amazonaws.com/' is hardcoded. It's a better practice to keep such information in a configuration file or as an environment variable.",
                "Start": 18,
                "End": 18
            },
            {
                "Improvement": "Avoid hardcoding policy",
                "Change_Diff": "- if (Config.get(Config.Key.FAILURE_POLICY).equals(\"retain\")) {\n+ if (Config.get(Config.Key.FAILURE_POLICY).equals(env.getProperty(\"failure.policy\"))) {",
                "Description": "The failure policy 'retain' is hardcoded. It's a better practice to keep such information in a configuration file or as an environment variable.",
                "Start": 21,
                "End": 21
            }
        ],
        "Final code": "protected final void createStack(final Context context,final String stackName,final String template,final Parameter... parameters){\n  context.addStack(stackName);\n  CreateStackRequest req=new CreateStackRequest().withStackName(stackName).withParameters(parameters).withCapabilities(Capability.CAPABILITY_IAM);\n  Optional.ofNullable(Config.get(Config.Key.TEMPLATE_DIR)).ifPresent(dir -> {\n    if (Config.has(Config.Key.BUCKET_NAME)) {\n      final String bucketName=Config.get(Config.Key.BUCKET_NAME);\n      final String bucketRegion=Config.get(Config.Key.BUCKET_REGION);\n      final AmazonS3 s3local=AmazonS3ClientBuilder.standard().withCredentials(this.credentialsProvider).withRegion(bucketRegion).build();\n      s3local.putObject(bucketName,stackName,new File(dir + template));\n      req=req.withTemplateURL(\"https://\" + bucketName + \".s3.\"+ bucketRegion+ \".amazonaws.com/\"+ stackName);\n    }\n    else {\n      final String body=readFile(dir + template,StandardCharsets.UTF_8);\n      req=req.withTemplateBody(body);\n    }\n  });\n  req=req.withTemplateURL(env.getProperty(\"s3.url\") + template);\n  if (Config.get(Config.Key.FAILURE_POLICY).equals(env.getProperty(\"failure.policy\"))) {\n    req=req.withOnFailure(OnFailure.DO_NOTHING);\n  }\n  this.cf.createStack(req);\n  this.waitForStack(context,stackName,FinalStatus.CREATE_COMPLETE);\n}"
    },
    "Old_Method": "protected final void createStack(final Context context,final String stackName,final String template,final Parameter... parameters){\n  context.addStack(stackName);\n  CreateStackRequest req=new CreateStackRequest().withStackName(stackName).withParameters(parameters).withCapabilities(Capability.CAPABILITY_IAM);\n  if (Config.has(Config.Key.TEMPLATE_DIR)) {\n    final String dir=Config.get(Config.Key.TEMPLATE_DIR);\n    if (Config.has(Config.Key.BUCKET_NAME)) {\n      final String bucketName=Config.get(Config.Key.BUCKET_NAME);\n      final String bucketRegion=Config.get(Config.Key.BUCKET_REGION);\n      final AmazonS3 s3local=AmazonS3ClientBuilder.standard().withCredentials(this.credentialsProvider).withRegion(bucketRegion).build();\n      s3local.putObject(bucketName,stackName,new File(dir + template));\n      req=req.withTemplateURL(\"https://\" + bucketName + \".s3.\"+ bucketRegion+ \".amazonaws.com/\"+ stackName);\n    }\n else {\n      final String body=readFile(dir + template,StandardCharsets.UTF_8);\n      req=req.withTemplateBody(body);\n    }\n  }\n else {\n    req=req.withTemplateURL(\"https://widdix-aws-s3-virusscan.s3.eu-west-1.amazonaws.com/\" + template);\n  }\n  if (Config.get(Config.Key.FAILURE_POLICY).equals(\"retain\")) {\n    req=req.withOnFailure(OnFailure.DO_NOTHING);\n  }\n  this.cf.createStack(req);\n  this.waitForStack(context,stackName,FinalStatus.CREATE_COMPLETE);\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/ACloudFormationTest.java",
    "Start": 1185,
    "Stop": 2820,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "createStack"
}
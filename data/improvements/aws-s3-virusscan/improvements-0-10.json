{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace System.out.println with a Logger",
                "Change_Diff": "- System.out.println(...);\n+ LOGGER.log(Level.INFO, ...);",
                "Description": "System.out.println writes to the console which is usually not suitable for production use because it can be considered a security risk. Instead, use a Logger to write log messages which can be configured to output to various destinations and can have different levels like INFO, DEBUG, ERROR, etc.",
                "Start": 3,
                "End": 50
            },
            {
                "Improvement": "Reduce nesting by inverting if conditions",
                "Change_Diff": "- if (condition) {\n    /* long block */\n} else {\n    /* short block */\n}\n+ if (!condition) {\n    /* short block */\n    return;\n}\n/* long block */",
                "Description": "Deeply nested if conditions can be hard to read and understand. By inverting and returning early, we can flatten the structure and improve readability.",
                "Start": 29,
                "End": 50
            },
            {
                "Improvement": "Handle InterruptedException properly",
                "Change_Diff": "- catch (final InterruptedException e) {}\n+ catch (final InterruptedException e) { Thread.currentThread().interrupt(); }",
                "Description": "When catching InterruptedException, it's important to immediately re-interrupt the current thread so other code (which might rely on the thread's interrupted status) can detect that it's been interrupted.",
                "Start": 8,
                "End": 10
            }
        ],
        "Final code": "protected void waitForStack(final Context context, final String stackName, final FinalStatus finalStackStatus) {\n  LOGGER.log(Level.INFO, \"waitForStack[\" + stackName + \"]: to reach status \" + finalStackStatus.finalStatus);\n  final List<StackEvent> eventsDisplayed = new ArrayList<>();\n  while (true) {\n    try {\n      Thread.sleep(20000);\n    } catch (final InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    final List<StackEvent> events = getStackEvents(stackName);\n    for (final StackEvent event : events) {\n      boolean displayed = eventsDisplayed.stream().anyMatch(e -> e.getEventId().equals(event.getEventId()));\n      if (!displayed) {\n        LOGGER.log(Level.INFO, \"waitForStack[\" + stackName + \"]: \" + event.getTimestamp().toString()+ \" \" + event.getLogicalResourceId()+ \" \" + event.getResourceStatus()+ \" \" + event.getResourceStatusReason());\n        eventsDisplayed.add(event);\n      }\n    }\n    try {\n      final DescribeStacksResult res = this.cf.describeStacks(new DescribeStacksRequest().withStackName(stackName));\n      final StackStatus currentStatus = StackStatus.fromValue(res.getStacks().get(0).getStackStatus());\n      if (finalStackStatus.finalStatus != currentStatus) {\n        if (!finalStackStatus.intermediateStatus.contains(currentStatus)) {\n          context.reportStackFailure(stackName);\n          throw new RuntimeException(\"waitForStack[\" + stackName + \"]: reached invalid intermediate status \" + currentStatus + \".\");\n        }\n        LOGGER.log(Level.INFO, \"waitForStack[\" + stackName + \"]: continue to wait (still in intermediate status \" + currentStatus + \") ...\");\n        continue;\n      }\n      LOGGER.log(Level.INFO, \"waitForStack[\" + stackName + \"]: final status reached.\");\n      return;\n    } catch (final AmazonServiceException e) {\n      if (!e.getErrorMessage().equals(\"Stack with id \" + stackName + \" does not exist\")) {\n        throw e;\n      }\n      if (!finalStackStatus.notFoundIsFinalStatus && !finalStackStatus.notFoundIsIntermediateStatus) {\n        context.reportStackFailure(stackName);\n        throw new RuntimeException(\"waitForStack[\" + stackName + \"]: stack not found.\");\n      }\n      LOGGER.log(Level.INFO, \"waitForStack[\" + stackName + \"]: continue to wait (stack not found) ...\");\n    }\n  }\n}"
    },
    "Old_Method": "protected void waitForStack(final Context context,final String stackName,final FinalStatus finalStackStatus){\n  System.out.println(\"waitForStack[\" + stackName + \"]: to reach status \"+ finalStackStatus.finalStatus);\n  final List<StackEvent> eventsDisplayed=new ArrayList<>();\n  while (true) {\n    try {\n      Thread.sleep(20000);\n    }\n catch (    final InterruptedException e) {\n    }\n    final List<StackEvent> events=getStackEvents(stackName);\n    for (    final StackEvent event : events) {\n      boolean displayed=false;\n      for (      final StackEvent eventDisplayed : eventsDisplayed) {\n        if (event.getEventId().equals(eventDisplayed.getEventId())) {\n          displayed=true;\n        }\n      }\n      if (!displayed) {\n        System.out.println(\"waitForStack[\" + stackName + \"]: \"+ event.getTimestamp().toString()+ \" \"+ event.getLogicalResourceId()+ \" \"+ event.getResourceStatus()+ \" \"+ event.getResourceStatusReason());\n        eventsDisplayed.add(event);\n      }\n    }\n    try {\n      final DescribeStacksResult res=this.cf.describeStacks(new DescribeStacksRequest().withStackName(stackName));\n      final StackStatus currentStatus=StackStatus.fromValue(res.getStacks().get(0).getStackStatus());\n      if (finalStackStatus.finalStatus == currentStatus) {\n        System.out.println(\"waitForStack[\" + stackName + \"]: final status reached.\");\n        return;\n      }\n else {\n        if (finalStackStatus.intermediateStatus.contains(currentStatus)) {\n          System.out.println(\"waitForStack[\" + stackName + \"]: continue to wait (still in intermediate status \"+ currentStatus+ \") ...\");\n        }\n else {\n          context.reportStackFailure(stackName);\n          throw new RuntimeException(\"waitForStack[\" + stackName + \"]: reached invalid intermediate status \"+ currentStatus+ \".\");\n        }\n      }\n    }\n catch (    final AmazonServiceException e) {\n      if (e.getErrorMessage().equals(\"Stack with id \" + stackName + \" does not exist\")) {\n        if (finalStackStatus.notFoundIsFinalStatus) {\n          System.out.println(\"waitForStack[\" + stackName + \"]: final  reached (not found).\");\n          return;\n        }\n else {\n          if (finalStackStatus.notFoundIsIntermediateStatus) {\n            System.out.println(\"waitForStack[\" + stackName + \"]: continue to wait (stack not found) ...\");\n          }\n else {\n            context.reportStackFailure(stackName);\n            throw new RuntimeException(\"waitForStack[\" + stackName + \"]: stack not found.\");\n          }\n        }\n      }\n else {\n        throw e;\n      }\n    }\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/ACloudFormationTest.java",
    "Start": 6172,
    "Stop": 9325,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "waitForStack"
}
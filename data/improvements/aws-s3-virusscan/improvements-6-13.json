{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace string concatenation with String.format()",
                "Change_Diff": "- final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n- final String stackName=\"s3-virusscan-\" + this.random8String();\n- final String bucketName=\"s3-virusscan-\" + this.random8String();\n+ final String vpcStackName = String.format(\"vpc-2azs-%s\", this.random8String());\n+ final String stackName = String.format(\"s3-virusscan-%s\", this.random8String());\n+ final String bucketName = String.format(\"s3-virusscan-%s\", this.random8String());",
                "Description": "Java concatenation in a loop or multi-step operation can be inefficient because a new String object is created each time you concatenate. Instead, use String.format() which is faster and easier to read.",
                "Start": 3,
                "End": 5
            },
            {
                "Improvement": "Extract repetitive tag check into a method",
                "Change_Diff": "- // Existing repetitive tag check code\n+ private Tag checkTag(List<Tag> tags, String expectedKey, String expectedValue)",
                "Description": "There is a repetitive check for tag's key and value. This should be extracted into a separate method. It will make the code more readable and maintainable.",
                "Start": 30,
                "End": 51
            }
        ],
        "Final code": "public void testWithoutFileDeletion() {\n\n    final Context context = new Context();\n    final String vpcStackName = String.format(\"vpc-2azs-%s\", this.random8String());\n    final String stackName = String.format(\"s3-virusscan-%s\", this.random8String());\n    final String bucketName = String.format(\"s3-virusscan-%s\", this.random8String());\n\n    try {\n        this.createWiddixStack(context, vpcStackName, \"vpc/vpc-2azs.yaml\");\n        try {\n            this.createStack(context, stackName, \"template.yaml\", new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName), new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"), new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n            try {\n                this.createBucketWithSQSNotification(bucketName, this.getStackOutputValue(stackName, \"ScanQueueArn\"));\n                this.createObject(bucketName, \"no-virus.txt\", \"not a virus\");\n                this.createObject(bucketName, \"virus.txt\", \"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n\n                this.retry(context, () -> {\n                    checkTag(this.getObjectTags(bucketName, \"no-virus.txt\"), \"clamav-status\", \"clean\");\n                });\n                this.retry(context, () -> {\n                    checkTag(this.getObjectTags(bucketName, \"virus.txt\"), \"clamav-status\", \"infected\");\n                });\n\n                this.deleteObject(context, bucketName, \"no-virus.txt\");\n                this.deleteObject(context, bucketName, \"virus.txt\");\n            } finally {\n                this.deleteBucket(context, bucketName);\n            }\n        } finally {\n            this.deleteStack(context, stackName);\n        }\n    } finally {\n        this.deleteStack(context, vpcStackName);\n    }\n}\n\nprivate void checkTag(List<Tag> tags, String expectedKey, String expectedValue) {\n    if (tags.size() == 1) {\n        final Tag tag = tags.get(0);\n        if (expectedKey.equals(tag.getKey())) {\n            if (expectedValue.equals(tag.getValue())) {\n                return;\n            } else {\n                throw new RuntimeException(\"clamav-status tag value expected to be \" + expectedValue + \", but saw \" + tag.getValue());\n            }\n        } else {\n            throw new RuntimeException(\"one and only tag key expected to be \" + expectedKey + \", but saw \" + tag.getKey());\n        }\n    } else {\n        throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n    }\n}"
    },
    "Old_Method": "@Test public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName),new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"),new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"no-virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"clean\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be clean, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"infected\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be infected, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n        this.deleteObject(context,bucketName,\"virus.txt\");\n      }\n  finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestEicarFile.java",
    "Start": 242,
    "Stop": 3981,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "testWithoutFileDeletion"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace the magic strings with constants",
                "Change_Diff": "- final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n- final String stackName=\"s3-virusscan-\" + this.random8String();\n- final String bucketName=\"s3-virusscan-\" + this.random8String();\n+ final String vpcStackName= VPC_STACK_NAME_PREFIX + this.random8String();\n+ final String stackName= S3_VIRUSSCAN_NAME_PREFIX + this.random8String();\n+ final String bucketName= S3_VIRUSSCAN_NAME_PREFIX + this.random8String();",
                "Description": "Magic strings like 'vpc-2azs-', 's3-virusscan-', 'template.yaml', etc. are used multiple times in the code. It is a good practice to replace these with constants. This makes the code easier to maintain and less prone to typos.",
                "Start": 2,
                "End": 32
            },
            {
                "Improvement": "Extract duplicate code into a separate method",
                "Change_Diff": "- this.retry(context,() -> {\n...\n}\n- this.retry(context,() -> {\n...\n}\n+ checkObjectTag(context, bucketName, \"no-virus.txt\", \"clean\");\n+ checkObjectTag(context, bucketName, \"virus.txt\", \"infected\");",
                "Description": "The code for checking the tags of objects is repeated twice. This is a violation of the DRY (Don't Repeat Yourself) principle. It can be extracted into a separate method to improve code maintainability.",
                "Start": 18,
                "End": 32
            }
        ],
        "Final code": "public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName= VPC_STACK_NAME_PREFIX + this.random8String();\n  final String stackName= S3_VIRUSSCAN_NAME_PREFIX + this.random8String();\n  final String bucketName= S3_VIRUSSCAN_NAME_PREFIX + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,VPC_STACK_NAME);\n    try {\n      this.createStack(context,stackName,TEMPLATE_NAME,new Parameter().withParameterKey(PARENT_VPC_STACK_KEY).withParameterValue(vpcStackName),new Parameter().withParameterKey(TAG_FILES_KEY).withParameterValue(TRUE_VALUE),new Parameter().withParameterKey(DELETE_INFECTED_FILES_KEY).withParameterValue(FALSE_VALUE));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,SCAN_QUEUE_ARN));\n        this.createObject(bucketName,NO_VIRUS_TXT,NOT_A_VIRUS);\n        this.createObject(bucketName,VIRUS_TXT,VIRUS_TXT_CONTENT);\n        checkObjectTag(context, bucketName, NO_VIRUS_TXT, CLEAN);\n        checkObjectTag(context, bucketName, VIRUS_TXT, INFECTED);\n        this.deleteObject(context,bucketName,NO_VIRUS_TXT);\n        this.deleteObject(context,bucketName,VIRUS_TXT);\n      } finally {\n        this.deleteBucket(context,bucketName);\n      }\n    } finally {\n      this.deleteStack(context,stackName);\n    }\n  } finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n\nprivate void checkObjectTag(Context context, String bucketName, String fileName, String expectedTag) {\n  this.retry(context,() -> {\n    final List<Tag> tags=this.getObjectTags(bucketName,fileName);\n    if (tags.size() == 1) {\n      final Tag tag=tags.get(0);\n      if (CLAMAV_STATUS.equals(tag.getKey())) {\n        if (expectedTag.equals(tag.getValue())) {\n          return tags;\n        } else {\n          throw new RuntimeException(CLAMAV_STATUS_TAG_VALUE_EXPECTED_TO_BE + expectedTag + BUT_SAW + tag.getValue());\n        }\n      } else {\n        throw new RuntimeException(ONE_AND_ONLY_TAG_KEY_EXPECTED_TO_BE + CLAMAV_STATUS + BUT_SAW + tag.getKey());\n      }\n    } else {\n      throw new RuntimeException(ONE_TAG_EXPECTED + BUT_SAW + tags.size());\n    }\n  });\n}"
    },
    "Old_Method": "@Test public void testWithoutFileDeletion(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName),new Parameter().withParameterKey(\"TagFiles\").withParameterValue(\"true\"),new Parameter().withParameterKey(\"DeleteInfectedFiles\").withParameterValue(\"false\"));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        this.createObject(bucketName,\"no-virus.txt\",\"not a virus\");\n        this.createObject(bucketName,\"virus.txt\",\"X5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\");\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"no-virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"clean\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be clean, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.retry(context,() -> {\n          final List<Tag> tags=this.getObjectTags(bucketName,\"virus.txt\");\n          if (tags.size() == 1) {\n            final Tag tag=tags.get(0);\n            if (\"clamav-status\".equals(tag.getKey())) {\n              if (\"infected\".equals(tag.getValue())) {\n                return tags;\n              }\n else {\n                throw new RuntimeException(\"clamav-status tag value expected to be infected, but saw \" + tag.getValue());\n              }\n            }\n else {\n              throw new RuntimeException(\"one and only tag key expected to be clamav-status, but saw \" + tag.getKey());\n            }\n          }\n else {\n            throw new RuntimeException(\"one tag expected, but saw \" + tags.size());\n          }\n        }\n);\n        this.deleteObject(context,bucketName,\"no-virus.txt\");\n        this.deleteObject(context,bucketName,\"virus.txt\");\n      }\n  finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestEicarFile.java",
    "Start": 242,
    "Stop": 3981,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "testWithoutFileDeletion"
}
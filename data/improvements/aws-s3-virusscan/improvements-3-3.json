{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract magic strings to constants",
                "Change_Diff": "- final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n+ final String VPC_STACK_NAME_PREFIX = \"vpc-2azs-\";\n+ final String vpcStackName = VPC_STACK_NAME_PREFIX + this.random8String();\n\n- this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n+ final String VPC_TEMPLATE = \"vpc/vpc-2azs.yaml\";\n+ this.createWiddixStack(context,vpcStackName,VPC_TEMPLATE);\n\n- this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n+ final String TEMPLATE_YAML = \"template.yaml\";\n+ final String PARENT_VPC_STACK_KEY = \"ParentVPCStack\";\n+ this.createStack(context,stackName,TEMPLATE_YAML,new Parameter().withParameterKey(PARENT_VPC_STACK_KEY).withParameterValue(vpcStackName));",
                "Description": "String literals such as 'vpc-2azs-', 's3-virusscan-', 'vpc/vpc-2azs.yaml', 'template.yaml', and 'ParentVPCStack' are used directly in the method. These are magic strings and could be extracted to named constants to improve readability and maintainability of the code.",
                "Start": 3,
                "End": 8
            },
            {
                "Improvement": "Extract repeated code to a method",
                "Change_Diff": "- this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n- this.deleteStack(context,vpcStackName);\n+ createAndDeleteStack(context, vpcStackName, \"vpc/vpc-2azs.yaml\");\n\n- this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n- this.deleteStack(context,stackName);\n+ createAndDeleteStack(context, stackName, \"template.yaml\", new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));",
                "Description": "The code for creating a stack and deleting a stack is repeated multiple times with different parameters. This can be extracted into a separate method to improve code readability and reusability.",
                "Start": 9,
                "End": 39
            }
        ],
        "Final code": "public void test(){\n  final Context context=new Context();\n  final String VPC_STACK_NAME_PREFIX = \"vpc-2azs-\";\n  final String vpcStackName = VPC_STACK_NAME_PREFIX + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  final InfectedFileCache cache=new InfectedFileCache();\n  try {\n    createAndDeleteStack(context, vpcStackName, \"vpc/vpc-2azs.yaml\");\n    try {\n      final String TEMPLATE_YAML = \"template.yaml\";\n      final String PARENT_VPC_STACK_KEY = \"ParentVPCStack\";\n      createAndDeleteStack(context, stackName, TEMPLATE_YAML, new Parameter().withParameterKey(PARENT_VPC_STACK_KEY).withParameterValue(vpcStackName));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        cache.getFiles().forEach(file -> this.createObject(bucketName,file.getkey(),file.getContent(),file.getContentType(),file.getContentLength()));\n        this.retry(context,() -> {\n          final long count=this.countBucket(bucketName);\n          if (count != 0) {\n            throw new RuntimeException(\"there are \" + count + \" infected files left\");\n          }\n          return false;\n        }\n);\n      }\n catch (      final RuntimeException e) {\n        final List<String> objects=this.listBucket(bucketName,100);\n        System.out.println(\"Remaining objects:\");\n        for (        final String object : objects) {\n          System.out.println(object);\n        }\n        throw e;\n      }\n finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n\nprivate void createAndDeleteStack(Context context, String stackName, String template, Parameter... parameters) {\n  this.createWiddixStack(context, stackName, template, parameters);\n  try {\n    // logic here\n  } finally {\n    this.deleteStack(context, stackName);\n  }\n}"
    },
    "Old_Method": "@Test public void test(){\n  final Context context=new Context();\n  final String vpcStackName=\"vpc-2azs-\" + this.random8String();\n  final String stackName=\"s3-virusscan-\" + this.random8String();\n  final String bucketName=\"s3-virusscan-\" + this.random8String();\n  final InfectedFileCache cache=new InfectedFileCache();\n  try {\n    this.createWiddixStack(context,vpcStackName,\"vpc/vpc-2azs.yaml\");\n    try {\n      this.createStack(context,stackName,\"template.yaml\",new Parameter().withParameterKey(\"ParentVPCStack\").withParameterValue(vpcStackName));\n      try {\n        this.createBucketWithSQSNotification(bucketName,this.getStackOutputValue(stackName,\"ScanQueueArn\"));\n        cache.getFiles().forEach(file -> this.createObject(bucketName,file.getkey(),file.getContent(),file.getContentType(),file.getContentLength()));\n        this.retry(context,() -> {\n          final long count=this.countBucket(bucketName);\n          if (count != 0) {\n            throw new RuntimeException(\"there are \" + count + \" infected files left\");\n          }\n          return false;\n        }\n);\n      }\n catch (      final RuntimeException e) {\n        final List<String> objects=this.listBucket(bucketName,100);\n        System.out.println(\"Remaining objects:\");\n        for (        final String object : objects) {\n          System.out.println(object);\n        }\n        throw e;\n      }\n finally {\n        this.deleteBucket(context,bucketName);\n      }\n    }\n  finally {\n      this.deleteStack(context,stackName);\n    }\n  }\n  finally {\n    this.deleteStack(context,vpcStackName);\n  }\n}\n",
    "File_Path": "aws-s3-virusscan/test/src/test/java/de/widdix/awss3virusscan/TestRealworldFiles.java",
    "Start": 247,
    "Stop": 2293,
    "Project_Name": "data/projects/aws-s3-virusscan",
    "Method_Name": "test"
}
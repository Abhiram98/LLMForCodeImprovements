{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Extract repeated code to a method",
            "Change_Diff": "- RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(PayloadRootSmartSoapEndpointInterceptor.class,childElement,parserContext);\n- BeanDefinitionHolder interceptorDef=createInterceptorDefinition(parserContext,payloadRootChild);\n- String namespaceUri=childElement.getAttribute(\"namespaceUri\");\n- String localPart=childElement.getAttribute(\"localPart\");\n- smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorDef);\n- smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,namespaceUri);\n- smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2,localPart);\n- registerSmartInterceptor(parserContext,smartInterceptorDef);\n+ createAndRegisterInterceptor(PayloadRootSmartSoapEndpointInterceptor.class, childElement, payloadRootChild, parserContext);",
            "Description": "There are multiple instances of the same code for creating a `smartInterceptorDef`, adding constructor arguments, and registering the interceptor. This can be extracted into a separate method to reduce code duplication and increase readability.",
            "Start": 8,
            "End": 62
        }],
        "Final code": "@Override public BeanDefinition parse(Element element,ParserContext parserContext){\n  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),parserContext.extractSource(element));\n  parserContext.pushContainingComponent(compDefinition);\n  List<Element> childElements=DomUtils.getChildElements(element);\n  for (Element childElement : childElements) {\n    if (\"bean\".equals(childElement.getLocalName()) || \"ref\".equals(childElement.getLocalName())) {\n      createAndRegisterInterceptor(DelegatingSmartSoapEndpointInterceptor.class, childElement, childElement, parserContext);\n    } else if (\"payloadRoot\".equals(childElement.getLocalName()) || \"soapAction\".equals(childElement.getLocalName())) {\n      List<Element> children=DomUtils.getChildElements(childElement);\n      for (Element child : children) {\n        if (\"bean\".equals(child.getLocalName()) || \"ref\".equals(child.getLocalName())) {\n          createAndRegisterInterceptor(getInterceptorClass(childElement), childElement, child, parserContext);\n        }\n      }\n    }\n  }\n  parserContext.popAndRegisterContainingComponent();\n  return null;\n}\n\nprivate void createAndRegisterInterceptor(Class<?> cls, Element element, Element child, ParserContext parserContext) {\n  RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(cls, element, parserContext);\n  ConstructorArgumentValues cav = smartInterceptorDef.getConstructorArgumentValues();\n  cav.addIndexedArgumentValue(0, createArgument(parserContext, child));\n  if (cls != DelegatingSmartSoapEndpointInterceptor.class) {\n    cav.addIndexedArgumentValue(1, element.getAttribute(getSecondArgumentName(cls)));\n    if (cls == PayloadRootSmartSoapEndpointInterceptor.class) {\n      cav.addIndexedArgumentValue(2, element.getAttribute(\"localPart\"));\n    }\n  }\n  registerSmartInterceptor(parserContext, smartInterceptorDef);\n}\n\nprivate Class<?> getInterceptorClass(Element element) {\n  switch (element.getLocalName()) {\n    case \"payloadRoot\": return PayloadRootSmartSoapEndpointInterceptor.class;\n    case \"soapAction\": return SoapActionSmartEndpointInterceptor.class;\n    default: return null;\n  }\n}\n\nprivate String getSecondArgumentName(Class<?> cls) {\n  if (cls == PayloadRootSmartSoapEndpointInterceptor.class) {\n    return \"namespaceUri\";\n  } else if (cls == SoapActionSmartEndpointInterceptor.class) {\n    return \"value\";\n  } else {\n    return null;\n  }\n}\n\nprivate Object createArgument(ParserContext parserContext, Element child) {\n  return \"bean\".equals(child.getLocalName()) ? createInterceptorDefinition(parserContext, child) : createInterceptorReference(parserContext, child);\n}"
    },
    "Old_Method": "@Override public BeanDefinition parse(Element element,ParserContext parserContext){\n  CompositeComponentDefinition compDefinition=new CompositeComponentDefinition(element.getTagName(),parserContext.extractSource(element));\n  parserContext.pushContainingComponent(compDefinition);\n  List<Element> childElements=DomUtils.getChildElements(element);\n  for (  Element childElement : childElements) {\n    if (\"bean\".equals(childElement.getLocalName())) {\n      RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(DelegatingSmartSoapEndpointInterceptor.class,childElement,parserContext);\n      BeanDefinitionHolder interceptorDef=createInterceptorDefinition(parserContext,childElement);\n      smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorDef);\n      registerSmartInterceptor(parserContext,smartInterceptorDef);\n    }\n else     if (\"ref\".equals(childElement.getLocalName())) {\n      RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(DelegatingSmartSoapEndpointInterceptor.class,childElement,parserContext);\n      BeanReference interceptorRef=createInterceptorReference(parserContext,childElement);\n      smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorRef);\n      registerSmartInterceptor(parserContext,smartInterceptorDef);\n    }\n else     if (\"payloadRoot\".equals(childElement.getLocalName())) {\n      List<Element> payloadRootChildren=DomUtils.getChildElements(childElement);\n      for (      Element payloadRootChild : payloadRootChildren) {\n        if (\"bean\".equals(payloadRootChild.getLocalName())) {\n          RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(PayloadRootSmartSoapEndpointInterceptor.class,childElement,parserContext);\n          BeanDefinitionHolder interceptorDef=createInterceptorDefinition(parserContext,payloadRootChild);\n          String namespaceUri=childElement.getAttribute(\"namespaceUri\");\n          String localPart=childElement.getAttribute(\"localPart\");\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorDef);\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,namespaceUri);\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2,localPart);\n          registerSmartInterceptor(parserContext,smartInterceptorDef);\n        }\n else         if (\"ref\".equals(payloadRootChild.getLocalName())) {\n          RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(PayloadRootSmartSoapEndpointInterceptor.class,childElement,parserContext);\n          BeanReference interceptorRef=createInterceptorReference(parserContext,payloadRootChild);\n          String namespaceUri=childElement.getAttribute(\"namespaceUri\");\n          String localPart=childElement.getAttribute(\"localPart\");\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorRef);\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,namespaceUri);\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(2,localPart);\n          registerSmartInterceptor(parserContext,smartInterceptorDef);\n        }\n      }\n    }\n else     if (\"soapAction\".equals(childElement.getLocalName())) {\n      List<Element> soapActionChildren=DomUtils.getChildElements(childElement);\n      for (      Element soapActionChild : soapActionChildren) {\n        if (\"bean\".equals(soapActionChild.getLocalName())) {\n          RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(SoapActionSmartEndpointInterceptor.class,childElement,parserContext);\n          BeanDefinitionHolder interceptorDef=createInterceptorDefinition(parserContext,soapActionChild);\n          String soapAction=childElement.getAttribute(\"value\");\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorDef);\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,soapAction);\n          registerSmartInterceptor(parserContext,smartInterceptorDef);\n        }\n else         if (\"ref\".equals(soapActionChild.getLocalName())) {\n          RootBeanDefinition smartInterceptorDef=createSmartInterceptorDefinition(SoapActionSmartEndpointInterceptor.class,childElement,parserContext);\n          BeanReference interceptorRef=createInterceptorReference(parserContext,soapActionChild);\n          String soapAction=childElement.getAttribute(\"value\");\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(0,interceptorRef);\n          smartInterceptorDef.getConstructorArgumentValues().addIndexedArgumentValue(1,soapAction);\n          registerSmartInterceptor(parserContext,smartInterceptorDef);\n        }\n      }\n    }\n  }\n  parserContext.popAndRegisterContainingComponent();\n  return null;\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/config/InterceptorsBeanDefinitionParser.java",
    "Start": 1977,
    "Stop": 6835,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "parse"
}
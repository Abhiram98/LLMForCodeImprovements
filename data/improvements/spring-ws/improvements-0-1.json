{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract common logic into a separate method",
                "Change_Diff": "- try { factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD,\"\"); } catch ( IllegalArgumentException e) { log.warn(); } ... \n+ setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); ... \n+ setFactoryFeature(factory, \"http://apache.org/xml/features/disallow-doctype-decl\", true); ...",
                "Description": "The current method has repeated code to set attributes and features on the factory object, then catch and log any exceptions. This logic can be extracted into a separate method to reduce code duplication.",
                "Start": 6,
                "End": 49
            },
            {
                "Improvement": "Use more descriptive logging",
                "Change_Diff": "- log.warn(XMLConstants.ACCESS_EXTERNAL_DTD + \" property not supported by \" + factory.getClass().getCanonicalName()); \n+ log.warn(\"Unable to set \" + XMLConstants.ACCESS_EXTERNAL_DTD + \" property on \" + factory.getClass().getCanonicalName() + \". This may lead to unsecure XML parsing.\"); ...",
                "Description": "The current logging messages only say that a certain property or feature is not supported, without giving any indication of why this might be a problem. More descriptive logging can help with debugging and understanding the implications of these warnings.",
                "Start": 9,
                "End": 49
            }
        ],
        "Final code": "public static DocumentBuilderFactory newInstance() {\n  DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n  setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n  setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n  setFactoryFeature(factory, \"http://apache.org/xml/features/disallow-doctype-decl\", true);\n  setFactoryFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n  setFactoryFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n  setFactoryFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n  try {\n    factory.setXIncludeAware(false);\n    factory.setExpandEntityReferences(false);\n  } catch (Exception e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Caught \" + e.getMessage() + \" attempting to configure your XML parser.\");\n    }\n  }\n  return factory;\n}\n\nprivate static void setFactoryAttribute(DocumentBuilderFactory factory, String attribute, String value) {\n  try {\n    factory.setAttribute(attribute, value);\n  } catch (IllegalArgumentException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Unable to set \" + attribute + \" attribute on \" + factory.getClass().getCanonicalName() + \". This may lead to unsecure XML parsing.\");\n    }\n  }\n}\n\nprivate static void setFactoryFeature(DocumentBuilderFactory factory, String feature, boolean value) {\n  try {\n    factory.setFeature(feature, value);\n  } catch (ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Unable to set \" + feature + \" feature on \" + factory.getClass().getCanonicalName() + \". This may affect XML parsing functionality.\");\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Build a  {@link DocumentBuilderFactory} then set properties to prevent external entity access.\n * @see DocumentBuilderFactory#newInstance()\n */\npublic static DocumentBuilderFactory newInstance(){\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  try {\n    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD,\"\");\n  }\n catch (  IllegalArgumentException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(XMLConstants.ACCESS_EXTERNAL_DTD + \" property not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA,\"\");\n  }\n catch (  IllegalArgumentException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(XMLConstants.ACCESS_EXTERNAL_SCHEMA + \" property not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\",true);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://apache.org/xml/features/disallow-doctype-decl' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://xml.org/sax/features/external-general-entities\",false);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://xml.org/sax/features/external-general-entities' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\",false);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://xml.org/sax/features/external-parameter-entities' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",false);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://apache.org/xml/features/nonvalidating/load-external-dtd' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setXIncludeAware(false);\n    factory.setExpandEntityReferences(false);\n  }\n catch (  Exception e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Caught \" + e.getMessage() + \" attempting to configure your XML parser.\");\n    }\n  }\n  return factory;\n}\n",
    "File_Path": "spring-ws/spring-xml/src/main/java/org/springframework/xml/DocumentBuilderFactoryUtils.java",
    "Start": 1059,
    "Stop": 3546,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "newInstance"
}
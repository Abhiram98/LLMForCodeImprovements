{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use constants instead of repeating strings",
                "Change_Diff": "- String namespace=\"http://springframework.org/spring-ws\";\n+ private static final String NAMESPACE = \"http://springframework.org/spring-ws\";\n\n- String locationUri=\"http://localhost:8080/services\";\n+ private static final String LOCATION_URI = \"http://localhost:8080/services\";",
                "Description": "In multiple instances in the code, the same strings are used. This could lead to error-prone code if any of these strings need to be modified. It would be better to define these strings as constants at the beginning of the method and then use these constants throughout the code.",
                "Start": 2,
                "End": 70
            },
            {
                "Improvement": "Extract repetitive code into a helper method",
                "Change_Diff": "- PortType portType=definition.createPortType();\n- portType.setQName(new QName(namespace,\"PortType\"));\n- portType.setUndefined(false);\n- definition.addPortType(portType);\n+ createAndAddPortType(definition, \"PortType\", namespace);\n\n- Output output=definition.createOutput();\n- output.setName(\"Output\");\n- operation.setOutput(output);\n+ createAndAddOutput(definition, operation, \"Output\");",
                "Description": "Repeatedly, new objects are created, their names are set, and then they are added to the definition. This could be simplified by creating a helper method that takes in the necessary parameters and performs these actions.",
                "Start": 4,
                "End": 55
            }
        ],
        "Final code": "@Test public void testPopulateBinding() throws Exception {\n  private static final String NAMESPACE = \"http://springframework.org/spring-ws\";\n  private static final String LOCATION_URI = \"http://localhost:8080/services\";\n  definition.addNamespace(\"tns\",NAMESPACE);\n  definition.setTargetNamespace(NAMESPACE);\n  createAndAddPortType(definition, \"PortType\", NAMESPACE);\n  Operation operation=definition.createOperation();\n  operation.setName(\"Operation\");\n  operation.setUndefined(false);\n  operation.setStyle(OperationType.REQUEST_RESPONSE);\n  portType.addOperation(operation);\n  createAndAddInput(definition, operation, \"Input\");\n  createAndAddOutput(definition, operation, \"Output\");\n  Fault fault=definition.createFault();\n  fault.setName(\"Fault\");\n  operation.addFault(fault);\n  Properties soapActions=new Properties();\n  soapActions.setProperty(\"Operation\",NAMESPACE + \"/Action\");\n  provider.setSoapActions(soapActions);\n  provider.setServiceName(\"Service\");\n  provider.setLocationUri(LOCATION_URI);\n  provider.addBindings(definition);\n  provider.addServices(definition);\n  Binding binding=definition.getBinding(new QName(NAMESPACE,\"PortTypeSoap12\"));\n  assertThat(binding).isNotNull();\n  assertThat(binding.getPortType()).isEqualTo(portType);\n  assertThat(binding.getExtensibilityElements()).hasSize(1);\n  SOAP12Binding soapBinding=(SOAP12Binding)binding.getExtensibilityElements().get(0);\n  assertThat(soapBinding.getStyle()).isEqualTo(\"document\");\n  assertThat(binding.getBindingOperations()).hasSize(1);\n  BindingOperation bindingOperation=binding.getBindingOperation(\"Operation\",\"Input\",\"Output\");\n  assertThat(bindingOperation).isNotNull();\n  assertThat(bindingOperation.getExtensibilityElements()).hasSize(1);\n  SOAP12Operation soapOperation=(SOAP12Operation)bindingOperation.getExtensibilityElements().get(0);\n  assertThat(soapOperation.getSoapActionURI()).isEqualTo(NAMESPACE + \"/Action\");\n  BindingInput bindingInput=bindingOperation.getBindingInput();\n  assertThat(bindingInput).isNotNull();\n  assertThat(bindingInput.getName()).isEqualTo(\"Input\");\n  assertThat(bindingInput.getExtensibilityElements()).hasSize(1);\n  SOAP12Body soapBody=(SOAP12Body)bindingInput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingOutput bindingOutput=bindingOperation.getBindingOutput();\n  assertThat(bindingOutput).isNotNull();\n  assertThat(bindingOutput.getName()).isEqualTo(\"Output\");\n  assertThat(bindingOutput.getExtensibilityElements()).hasSize(1);\n  soapBody=(SOAP12Body)bindingOutput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingFault bindingFault=bindingOperation.getBindingFault(\"Fault\");\n  assertThat(bindingFault).isNotNull();\n  assertThat(bindingFault.getExtensibilityElements()).hasSize(1);\n  SOAP12Fault soapFault=(SOAP12Fault)bindingFault.getExtensibilityElements().get(0);\n  assertThat(soapFault.getUse()).isEqualTo(\"literal\");\n  Service service=definition.getService(new QName(NAMESPACE,\"Service\"));\n  assertThat(service).isNotNull();\n  assertThat(service.getPorts()).hasSize(1);\n  Port port=service.getPort(\"PortTypeSoap12\");\n  assertThat(port).isNotNull();\n  assertThat(port.getBinding()).isEqualTo(binding);\n  assertThat(port.getExtensibilityElements()).hasSize(1);\n  SOAP12Address soapAddress=(SOAP12Address)port.getExtensibilityElements().get(0);\n  assertThat(soapAddress.getLocationURI()).isEqualTo(LOCATION_URI);\n}\n\nprivate void createAndAddPortType(Definition definition, String name, String namespace) {\n  PortType portType=definition.createPortType();\n  portType.setQName(new QName(namespace,name));\n  portType.setUndefined(false);\n  definition.addPortType(portType);\n}\n\nprivate void createAndAddInput(Definition definition, Operation operation, String name) {\n  Input input=definition.createInput();\n  input.setName(name);\n  operation.setInput(input);\n}\n\nprivate void createAndAddOutput(Definition definition, Operation operation, String name) {\n  Output output=definition.createOutput();\n  output.setName(name);\n  operation.setOutput(output);\n}"
    },
    "Old_Method": "@Test public void testPopulateBinding() throws Exception {\n  String namespace=\"http://springframework.org/spring-ws\";\n  definition.addNamespace(\"tns\",namespace);\n  definition.setTargetNamespace(namespace);\n  PortType portType=definition.createPortType();\n  portType.setQName(new QName(namespace,\"PortType\"));\n  portType.setUndefined(false);\n  definition.addPortType(portType);\n  Operation operation=definition.createOperation();\n  operation.setName(\"Operation\");\n  operation.setUndefined(false);\n  operation.setStyle(OperationType.REQUEST_RESPONSE);\n  portType.addOperation(operation);\n  Input input=definition.createInput();\n  input.setName(\"Input\");\n  operation.setInput(input);\n  Output output=definition.createOutput();\n  output.setName(\"Output\");\n  operation.setOutput(output);\n  Fault fault=definition.createFault();\n  fault.setName(\"Fault\");\n  operation.addFault(fault);\n  Properties soapActions=new Properties();\n  soapActions.setProperty(\"Operation\",namespace + \"/Action\");\n  provider.setSoapActions(soapActions);\n  provider.setServiceName(\"Service\");\n  String locationUri=\"http://localhost:8080/services\";\n  provider.setLocationUri(locationUri);\n  provider.addBindings(definition);\n  provider.addServices(definition);\n  Binding binding=definition.getBinding(new QName(namespace,\"PortTypeSoap12\"));\n  assertThat(binding).isNotNull();\n  assertThat(binding.getPortType()).isEqualTo(portType);\n  assertThat(binding.getExtensibilityElements()).hasSize(1);\n  SOAP12Binding soapBinding=(SOAP12Binding)binding.getExtensibilityElements().get(0);\n  assertThat(soapBinding.getStyle()).isEqualTo(\"document\");\n  assertThat(binding.getBindingOperations()).hasSize(1);\n  BindingOperation bindingOperation=binding.getBindingOperation(\"Operation\",\"Input\",\"Output\");\n  assertThat(bindingOperation).isNotNull();\n  assertThat(bindingOperation.getExtensibilityElements()).hasSize(1);\n  SOAP12Operation soapOperation=(SOAP12Operation)bindingOperation.getExtensibilityElements().get(0);\n  assertThat(soapOperation.getSoapActionURI()).isEqualTo(namespace + \"/Action\");\n  BindingInput bindingInput=bindingOperation.getBindingInput();\n  assertThat(bindingInput).isNotNull();\n  assertThat(bindingInput.getName()).isEqualTo(\"Input\");\n  assertThat(bindingInput.getExtensibilityElements()).hasSize(1);\n  SOAP12Body soapBody=(SOAP12Body)bindingInput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingOutput bindingOutput=bindingOperation.getBindingOutput();\n  assertThat(bindingOutput).isNotNull();\n  assertThat(bindingOutput.getName()).isEqualTo(\"Output\");\n  assertThat(bindingOutput.getExtensibilityElements()).hasSize(1);\n  soapBody=(SOAP12Body)bindingOutput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingFault bindingFault=bindingOperation.getBindingFault(\"Fault\");\n  assertThat(bindingFault).isNotNull();\n  assertThat(bindingFault.getExtensibilityElements()).hasSize(1);\n  SOAP12Fault soapFault=(SOAP12Fault)bindingFault.getExtensibilityElements().get(0);\n  assertThat(soapFault.getUse()).isEqualTo(\"literal\");\n  Service service=definition.getService(new QName(namespace,\"Service\"));\n  assertThat(service).isNotNull();\n  assertThat(service.getPorts()).hasSize(1);\n  Port port=service.getPort(\"PortTypeSoap12\");\n  assertThat(port).isNotNull();\n  assertThat(port.getBinding()).isEqualTo(binding);\n  assertThat(port.getExtensibilityElements()).hasSize(1);\n  SOAP12Address soapAddress=(SOAP12Address)port.getExtensibilityElements().get(0);\n  assertThat(soapAddress.getLocationURI()).isEqualTo(locationUri);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/test/java/org/springframework/ws/wsdl/wsdl11/provider/Soap12ProviderTest.java",
    "Start": 1854,
    "Stop": 5530,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "testPopulateBinding"
}
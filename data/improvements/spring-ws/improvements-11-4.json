{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor redundant code into separate methods",
            "Change_Diff": "- if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n else if (OperationType.ONE_WAY.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n    }\n else if (OperationType.NOTIFICATION.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n else if (OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n      createBindingInput(definition,operation,bindingOperation);\n    }\n+ handleOperationType(definition, operation, bindingOperation);",
            "Description": "The handling of each operation type contains duplicate code for creating and binding input and output. This code can be refactored into separate methods for better readability and maintainability.",
            "Start": 7,
            "End": 21
        }],
        "Final code": "private void createBindingOperations(Definition definition,Binding binding) throws WSDLException {\n  PortType portType=binding.getPortType();\n  for (  Object operationValue : portType.getOperations()) {\n    Operation operation=(Operation)operationValue;\n    BindingOperation bindingOperation=definition.createBindingOperation();\n    bindingOperation.setOperation(operation);\n    populateBindingOperation(definition,bindingOperation);\n    handleOperationType(definition, operation, bindingOperation);\n    for (    Object faultValue : operation.getFaults().values()) {\n      Fault fault=(Fault)faultValue;\n      BindingFault bindingFault=definition.createBindingFault();\n      populateBindingFault(definition,bindingFault,fault);\n      if (StringUtils.hasText(bindingFault.getName())) {\n        bindingOperation.addBindingFault(bindingFault);\n      }\n    }\n    binding.addBindingOperation(bindingOperation);\n  }\n}\n\nprivate void handleOperationType(Definition definition, Operation operation, BindingOperation bindingOperation) throws WSDLException {\n  if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle())) {\n    createBindingInput(definition,operation,bindingOperation);\n    createBindingOutput(definition,operation,bindingOperation);\n  } else if (OperationType.ONE_WAY.equals(operation.getStyle())) {\n    createBindingInput(definition,operation,bindingOperation);\n  } else if (OperationType.NOTIFICATION.equals(operation.getStyle())) {\n    createBindingOutput(definition,operation,bindingOperation);\n  } else if (OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n    createBindingOutput(definition,operation,bindingOperation);\n    createBindingInput(definition,operation,bindingOperation);\n  }\n}"
    },
    "Old_Method": "private void createBindingOperations(Definition definition,Binding binding) throws WSDLException {\n  PortType portType=binding.getPortType();\n  for (  Object operationValue : portType.getOperations()) {\n    Operation operation=(Operation)operationValue;\n    BindingOperation bindingOperation=definition.createBindingOperation();\n    bindingOperation.setOperation(operation);\n    populateBindingOperation(definition,bindingOperation);\n    if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n else     if (OperationType.ONE_WAY.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n    }\n else     if (OperationType.NOTIFICATION.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n else     if (OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n      createBindingInput(definition,operation,bindingOperation);\n    }\n    for (    Object faultValue : operation.getFaults().values()) {\n      Fault fault=(Fault)faultValue;\n      BindingFault bindingFault=definition.createBindingFault();\n      populateBindingFault(definition,bindingFault,fault);\n      if (StringUtils.hasText(bindingFault.getName())) {\n        bindingOperation.addBindingFault(bindingFault);\n      }\n    }\n    binding.addBindingOperation(bindingOperation);\n  }\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/wsdl/wsdl11/provider/DefaultConcretePartProvider.java",
    "Start": 4622,
    "Stop": 6150,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "createBindingOperations"
}
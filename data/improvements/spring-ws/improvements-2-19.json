{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use JUnit's @Before annotation for setup",
                "Change_Diff": "- @Test public void testInvokeMimeMarshaller() throws Exception {\n  MimeUnmarshaller unmarshaller=createMock(MimeUnmarshaller.class);\n  MimeMarshaller marshaller=createMock(MimeMarshaller.class);\n  MimeMessage request=createMock('request',MimeMessage.class);\n  MimeMessage response=createMock('response',MimeMessage.class);\n  Source requestSource=new StringSource('<request/>');\n  expect(request.getPayloadSource()).andReturn(requestSource);\n  expect(factoryMock.createWebServiceMessage()).andReturn(response);\n  expect(unmarshaller.unmarshal(eq(requestSource),isA(MimeContainer.class))).andReturn(42L);\n+ @Before\n+ public void setup() throws Exception {",
                "Description": "You can use JUnit's @Before annotation to initialize common setup tasks like creating mocks. This will make your code cleaner, easier to read and maintain.",
                "Start": 1,
                "End": 9
            },
            {
                "Improvement": "Extract anonymous class to a named inner class",
                "Change_Diff": "- AbstractMarshallingPayloadEndpoint endpoint=new AbstractMarshallingPayloadEndpoint(){\n    @Override protected Object invokeInternal(    Object requestObject) throws Exception {\n      assertThat(requestObject).isEqualTo(42L);\n      return 'result';\n    }\n  }\n;\n+ private class TestAbstractMarshallingPayloadEndpoint extends AbstractMarshallingPayloadEndpoint {\n+     @Override protected Object invokeInternal(Object requestObject) throws Exception {\n+         assertThat(requestObject).isEqualTo(42L);\n+         return 'result';\n+     }\n+ }\n+ TestAbstractMarshallingPayloadEndpoint endpoint = new TestAbstractMarshallingPayloadEndpoint();",
                "Description": "Extracting the anonymous class to a named inner class can make the code more readable and maintainable. It can also make it easier to reuse the class elsewhere if needed in future.",
                "Start": 20,
                "End": 26
            }
        ],
        "Final code": "@Before\npublic void setup() throws Exception {\n  MimeUnmarshaller unmarshaller=createMock(MimeUnmarshaller.class);\n  MimeMarshaller marshaller=createMock(MimeMarshaller.class);\n  MimeMessage request=createMock('request',MimeMessage.class);\n  MimeMessage response=createMock('response',MimeMessage.class);\n  Source requestSource=new StringSource('<request/>');\n  expect(request.getPayloadSource()).andReturn(requestSource);\n  expect(factoryMock.createWebServiceMessage()).andReturn(response);\n  expect(unmarshaller.unmarshal(eq(requestSource),isA(MimeContainer.class))).andReturn(42L);\n}\n\n@Test public void testInvokeMimeMarshaller() throws Exception {\n  Result responseResult=new StringResult();\n  expect(response.getPayloadResult()).andReturn(responseResult);\n  marshaller.marshal(eq('result'),eq(responseResult),isA(MimeContainer.class));\n  replay(factoryMock,unmarshaller,marshaller,request,response);\n  \n  private class TestAbstractMarshallingPayloadEndpoint extends AbstractMarshallingPayloadEndpoint {\n     @Override protected Object invokeInternal(Object requestObject) throws Exception {\n         assertThat(requestObject).isEqualTo(42L);\n         return 'result';\n     }\n  }\n  TestAbstractMarshallingPayloadEndpoint endpoint = new TestAbstractMarshallingPayloadEndpoint();\n  endpoint.setMarshaller(marshaller);\n  endpoint.setUnmarshaller(unmarshaller);\n  endpoint.afterPropertiesSet();\n  context=new DefaultMessageContext(request,factoryMock);\n  endpoint.invoke(context);\n  assertThat(response).isNotNull();\n  verify(factoryMock,unmarshaller,marshaller,request,response);\n}"
    },
    "Old_Method": "@Test public void testInvokeMimeMarshaller() throws Exception {\n  MimeUnmarshaller unmarshaller=createMock(MimeUnmarshaller.class);\n  MimeMarshaller marshaller=createMock(MimeMarshaller.class);\n  MimeMessage request=createMock(\"request\",MimeMessage.class);\n  MimeMessage response=createMock(\"response\",MimeMessage.class);\n  Source requestSource=new StringSource(\"<request/>\");\n  expect(request.getPayloadSource()).andReturn(requestSource);\n  expect(factoryMock.createWebServiceMessage()).andReturn(response);\n  expect(unmarshaller.unmarshal(eq(requestSource),isA(MimeContainer.class))).andReturn(42L);\n  Result responseResult=new StringResult();\n  expect(response.getPayloadResult()).andReturn(responseResult);\n  marshaller.marshal(eq(\"result\"),eq(responseResult),isA(MimeContainer.class));\n  replay(factoryMock,unmarshaller,marshaller,request,response);\n  AbstractMarshallingPayloadEndpoint endpoint=new AbstractMarshallingPayloadEndpoint(){\n    @Override protected Object invokeInternal(    Object requestObject) throws Exception {\n      assertThat(requestObject).isEqualTo(42L);\n      return \"result\";\n    }\n  }\n;\n  endpoint.setMarshaller(marshaller);\n  endpoint.setUnmarshaller(unmarshaller);\n  endpoint.afterPropertiesSet();\n  context=new DefaultMessageContext(request,factoryMock);\n  endpoint.invoke(context);\n  assertThat(response).isNotNull();\n  verify(factoryMock,unmarshaller,marshaller,request,response);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/MarshallingPayloadEndpointTest.java",
    "Start": 6056,
    "Stop": 7507,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "testInvokeMimeMarshaller"
}
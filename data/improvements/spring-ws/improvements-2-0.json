{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use @Before annotation for setup",
                "Change_Diff": "- @Test public void testInvokeMimeMarshaller() throws Exception {\n+ @Before public void setup() throws Exception {",
                "Description": "Use the @Before annotation for the setup process. This allows it to be used across multiple tests without having to duplicate the code.",
                "Start": 1,
                "End": 14
            },
            {
                "Improvement": "Use @After annotation for tear down",
                "Change_Diff": "- verify(factoryMock,unmarshaller,marshaller,request,response);\n+ @After public void tearDown() throws Exception { verify(factoryMock,unmarshaller,marshaller,request,response); }",
                "Description": "Use the @After annotation for the tear down process. This ensures the teardown process will always be run after each test, even if a test fails.",
                "Start": 32,
                "End": 33
            },
            {
                "Improvement": "Separate test logic from setup and tear down",
                "Change_Diff": "- AbstractMarshallingPayloadEndpoint endpoint=new AbstractMarshallingPayloadEndpoint(){\n- @Override protected Object invokeInternal(    Object requestObject) throws Exception {\n- assertThat(requestObject).isEqualTo(42L);\n- return \"result\";\n- }\n- };\n- endpoint.setMarshaller(marshaller);\n- endpoint.setUnmarshaller(unmarshaller);\n- endpoint.afterPropertiesSet();\n- context=new DefaultMessageContext(request,factoryMock);\n- endpoint.invoke(context);\n- assertThat(response).isNotNull();\n+ @Test public void testInvokeMimeMarshaller() throws Exception {\n+ AbstractMarshallingPayloadEndpoint endpoint=new AbstractMarshallingPayloadEndpoint(){\n+ @Override protected Object invokeInternal(    Object requestObject) throws Exception {\n+ assertThat(requestObject).isEqualTo(42L);\n+ return \"result\";\n+ }\n+ };\n+ endpoint.setMarshaller(marshaller);\n+ endpoint.setUnmarshaller(unmarshaller);\n+ endpoint.afterPropertiesSet();\n+ context=new DefaultMessageContext(request,factoryMock);\n+ endpoint.invoke(context);\n+ assertThat(response).isNotNull();\n+ }",
                "Description": "Separate the test logic from setup and tear down. This will make the tests easier to read and maintain.",
                "Start": 15,
                "End": 31
            }
        ],
        "Final code": "@Before public void setup() throws Exception {\n  MimeUnmarshaller unmarshaller=createMock(MimeUnmarshaller.class);\n  MimeMarshaller marshaller=createMock(MimeMarshaller.class);\n  MimeMessage request=createMock(\"request\",MimeMessage.class);\n  MimeMessage response=createMock(\"response\",MimeMessage.class);\n  Source requestSource=new StringSource(\"<request/>\");\n  expect(request.getPayloadSource()).andReturn(requestSource);\n  expect(factoryMock.createWebServiceMessage()).andReturn(response);\n  expect(unmarshaller.unmarshal(eq(requestSource),isA(MimeContainer.class))).andReturn(42L);\n  Result responseResult=new StringResult();\n  expect(response.getPayloadResult()).andReturn(responseResult);\n  marshaller.marshal(eq(\"result\"),eq(responseResult),isA(MimeContainer.class));\n  replay(factoryMock,unmarshaller,marshaller,request,response);\n}\n\n@Test public void testInvokeMimeMarshaller() throws Exception {\n  AbstractMarshallingPayloadEndpoint endpoint=new AbstractMarshallingPayloadEndpoint(){\n    @Override protected Object invokeInternal(    Object requestObject) throws Exception {\n      assertThat(requestObject).isEqualTo(42L);\n      return \"result\";\n    }\n  };\n  endpoint.setMarshaller(marshaller);\n  endpoint.setUnmarshaller(unmarshaller);\n  endpoint.afterPropertiesSet();\n  context=new DefaultMessageContext(request,factoryMock);\n  endpoint.invoke(context);\n  assertThat(response).isNotNull();\n}\n\n@After public void tearDown() throws Exception { verify(factoryMock,unmarshaller,marshaller,request,response); }"
    },
    "Old_Method": "@Test public void testInvokeMimeMarshaller() throws Exception {\n  MimeUnmarshaller unmarshaller=createMock(MimeUnmarshaller.class);\n  MimeMarshaller marshaller=createMock(MimeMarshaller.class);\n  MimeMessage request=createMock(\"request\",MimeMessage.class);\n  MimeMessage response=createMock(\"response\",MimeMessage.class);\n  Source requestSource=new StringSource(\"<request/>\");\n  expect(request.getPayloadSource()).andReturn(requestSource);\n  expect(factoryMock.createWebServiceMessage()).andReturn(response);\n  expect(unmarshaller.unmarshal(eq(requestSource),isA(MimeContainer.class))).andReturn(42L);\n  Result responseResult=new StringResult();\n  expect(response.getPayloadResult()).andReturn(responseResult);\n  marshaller.marshal(eq(\"result\"),eq(responseResult),isA(MimeContainer.class));\n  replay(factoryMock,unmarshaller,marshaller,request,response);\n  AbstractMarshallingPayloadEndpoint endpoint=new AbstractMarshallingPayloadEndpoint(){\n    @Override protected Object invokeInternal(    Object requestObject) throws Exception {\n      assertThat(requestObject).isEqualTo(42L);\n      return \"result\";\n    }\n  }\n;\n  endpoint.setMarshaller(marshaller);\n  endpoint.setUnmarshaller(unmarshaller);\n  endpoint.afterPropertiesSet();\n  context=new DefaultMessageContext(request,factoryMock);\n  endpoint.invoke(context);\n  assertThat(response).isNotNull();\n  verify(factoryMock,unmarshaller,marshaller,request,response);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/MarshallingPayloadEndpointTest.java",
    "Start": 6056,
    "Stop": 7507,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "testInvokeMimeMarshaller"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Add final to parameters",
                "Change_Diff": "- private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n+ private void registerEndpointAdapters(final Element element, final Object source, final ParserContext parserContext){",
                "Description": "Adding final to method parameters when they are not modified in the method makes the code safer by preventing accidental modification of these parameters.",
                "Start": 1,
                "End": 1
            },
            {
                "Improvement": "Use interface type instead of implementation type",
                "Change_Diff": "- ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n- ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n+ List<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n+ List<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();",
                "Description": "It is a best practice to use interface type instead of implementation type for variable declarations. This will make your code more flexible and easier to change in the future.",
                "Start": 3,
                "End": 6
            },
            {
                "Improvement": "Extract repetitive code into a new method",
                "Change_Diff": "- argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n- returnValueHandlers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n...\n+ addProcessor(argumentResolvers, returnValueHandlers, createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n...",
                "Description": "You have a few lines of code that add the same object to two different collections. To avoid code duplication, a new method for this operation could be created.",
                "Start": 7,
                "End": 36
            }
        ],
        "Final code": "private void registerEndpointAdapters(final Element element, final Object source, final ParserContext parserContext){\n    RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n    List<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n    List<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n    argumentResolvers.setSource(source);\n    returnValueHandlers.setSource(source);\n\n    addProcessor(argumentResolvers, returnValueHandlers, createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n    ...\n}\n\nprivate void addProcessor(List<BeanMetadataElement> resolvers, List<BeanMetadataElement> handlers, Object processor) {\n    resolvers.add(processor);\n    handlers.add(processor);\n}"
    },
    "Old_Method": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class,source));\n  RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(domProcessor);\n  returnValueHandlers.add(domProcessor);\n  RuntimeBeanReference sourceProcessor=createBeanReference(SourcePayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(sourceProcessor);\n  returnValueHandlers.add(sourceProcessor);\n  if (dom4jPresent) {\n    RuntimeBeanReference dom4jProcessor=createBeanReference(Dom4jPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(dom4jProcessor);\n    returnValueHandlers.add(dom4jProcessor);\n  }\n  if (jaxb2Present) {\n    RuntimeBeanReference xmlRootElementProcessor=createBeanReference(XmlRootElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xmlRootElementProcessor);\n    returnValueHandlers.add(xmlRootElementProcessor);\n    RuntimeBeanReference jaxbElementProcessor=createBeanReference(JaxbElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jaxbElementProcessor);\n    returnValueHandlers.add(jaxbElementProcessor);\n  }\n  if (jdomPresent) {\n    RuntimeBeanReference jdomProcessor=createBeanReference(JDomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jdomProcessor);\n    returnValueHandlers.add(jdomProcessor);\n  }\n  if (staxPresent) {\n    argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source));\n  }\n  if (xomPresent) {\n    RuntimeBeanReference xomProcessor=createBeanReference(XomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xomProcessor);\n    returnValueHandlers.add(xomProcessor);\n  }\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference;\n    if (element.hasAttribute(\"unmarshaller\")) {\n      unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n    }\n else {\n      unmarshallerReference=marshallerReference;\n    }\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java",
    "Start": 5650,
    "Stop": 9302,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "registerEndpointAdapters"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use instanceof pattern matching in if else statements",
            "Change_Diff": "- if (source instanceof DOMSource) {\n+ if (source instanceof DOMSource domSource) {\n-    callback.domSource(((DOMSource)source).getNode());\n+    callback.domSource(domSource.getNode());\n...\n- if (source instanceof SAXSource) {\n+ if (source instanceof SAXSource saxSource) {\n-    callback.saxSource(saxSource.getXMLReader(),saxSource.getInputSource());\n+    callback.saxSource(saxSource.getXMLReader(), saxSource.getInputSource());\n...\n- if (source instanceof StreamSource) {\n+ if (source instanceof StreamSource streamSource) {\n-    if (streamSource.getInputStream() != null) {\n+    if (streamSource.getInputStream() != null) {",
            "Description": "Instead of casting the source object in the body of each if else condition, use instanceof pattern matching introduced in Java 14 to automatically cast the object to the required type. This not only reduces the verbosity of code but also eliminates the risk of ClassCastException.",
            "Start": 10,
            "End": 42
        }],
        "Final code": "public static void doWithSource(Source source,SourceCallback callback) throws Exception {\n  if (source instanceof DOMSource domSource) {\n    callback.domSource(domSource.getNode());\n    return;\n  }\n  else if (StaxUtils.isStaxSource(source)) {\n    XMLStreamReader streamReader=StaxUtils.getXMLStreamReader(source);\n    if (streamReader != null) {\n      callback.staxSource(streamReader);\n      return;\n    }\n    else {\n      XMLEventReader eventReader=StaxUtils.getXMLEventReader(source);\n      if (eventReader != null) {\n        callback.staxSource(eventReader);\n        return;\n      }\n    }\n  }\n  else if (source instanceof SAXSource saxSource) {\n    callback.saxSource(saxSource.getXMLReader(), saxSource.getInputSource());\n    return;\n  }\n  else if (source instanceof StreamSource streamSource) {\n    if (streamSource.getInputStream() != null) {\n      callback.streamSource(streamSource.getInputStream());\n      return;\n    }\n    else if (streamSource.getReader() != null) {\n      callback.streamSource(streamSource.getReader());\n      return;\n    }\n  }\n  if (StringUtils.hasLength(source.getSystemId())) {\n    String systemId=source.getSystemId();\n    callback.source(systemId);\n  }\n  else {\n    throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n  }\n}"
    },
    "Old_Method": "/** \n * Performs the given  {@linkplain SourceCallback callback} operation on a {@link Source}. Supports both the JAXP 1.4 {@link StAXSource} and the Spring 3.0 {@link StaxUtils#createStaxSource StaxSource}.\n * @param source source to look at\n * @param callback the callback to invoke for each kind of source\n */\npublic static void doWithSource(Source source,SourceCallback callback) throws Exception {\n  if (source instanceof DOMSource) {\n    callback.domSource(((DOMSource)source).getNode());\n    return;\n  }\n else   if (StaxUtils.isStaxSource(source)) {\n    XMLStreamReader streamReader=StaxUtils.getXMLStreamReader(source);\n    if (streamReader != null) {\n      callback.staxSource(streamReader);\n      return;\n    }\n else {\n      XMLEventReader eventReader=StaxUtils.getXMLEventReader(source);\n      if (eventReader != null) {\n        callback.staxSource(eventReader);\n        return;\n      }\n    }\n  }\n else   if (source instanceof SAXSource) {\n    SAXSource saxSource=(SAXSource)source;\n    callback.saxSource(saxSource.getXMLReader(),saxSource.getInputSource());\n    return;\n  }\n else   if (source instanceof StreamSource) {\n    StreamSource streamSource=(StreamSource)source;\n    if (streamSource.getInputStream() != null) {\n      callback.streamSource(streamSource.getInputStream());\n      return;\n    }\n else     if (streamSource.getReader() != null) {\n      callback.streamSource(streamSource.getReader());\n      return;\n    }\n  }\n  if (StringUtils.hasLength(source.getSystemId())) {\n    String systemId=source.getSystemId();\n    callback.source(systemId);\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n  }\n}\n",
    "File_Path": "spring-ws/spring-xml/src/main/java/org/springframework/xml/transform/TraxUtils.java",
    "Start": 2162,
    "Stop": 3804,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "doWithSource"
}
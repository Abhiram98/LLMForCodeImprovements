{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor multiple return statements",
            "Change_Diff": "- return envelope.createName(qName.getLocalPart(),qNamePrefix,qName.getNamespaceURI());\n...\n- return envelope.createName(qName.getLocalPart(),prefix,qName.getNamespaceURI());\n...\n- return envelope.createName(qName.getLocalPart(),\"\",qName.getNamespaceURI());\n...\n- return envelope.createName(qName.getLocalPart());\n...\n+ Name result;\n... \n+ result = envelope.createName(qName.getLocalPart(),qNamePrefix,qName.getNamespaceURI());\n...\n+ result = envelope.createName(qName.getLocalPart(),prefix,qName.getNamespaceURI());\n...\n+ result = envelope.createName(qName.getLocalPart(),\"\",qName.getNamespaceURI());\n...\n+ result = envelope.createName(qName.getLocalPart());\n... \n+ return result;",
            "Description": "Having multiple return statements in a method can make the code harder to read and maintain. It's better to refactor the method to have a single exit point.",
            "Start": 15,
            "End": 31
        }],
        "Final code": "public static Name toName(QName qName,SOAPElement resolveElement) throws SOAPException {\n  String qNamePrefix=qName.getPrefix();\n  SOAPEnvelope envelope=getEnvelope(resolveElement);\n  Name result;\n  if (StringUtils.hasLength(qName.getNamespaceURI()) && StringUtils.hasLength(qNamePrefix)) {\n    result = envelope.createName(qName.getLocalPart(),qNamePrefix,qName.getNamespaceURI());\n  }\n  else if (StringUtils.hasLength(qName.getNamespaceURI())) {\n    Iterator<?> prefixes;\n    if (getSaajVersion(resolveElement) == SAAJ_11) {\n      prefixes=resolveElement.getNamespacePrefixes();\n    }\n    else {\n      prefixes=resolveElement.getVisibleNamespacePrefixes();\n    }\n    while (prefixes.hasNext()) {\n      String prefix=(String)prefixes.next();\n      if (qName.getNamespaceURI().equals(resolveElement.getNamespaceURI(prefix))) {\n        result = envelope.createName(qName.getLocalPart(),prefix,qName.getNamespaceURI());\n      }\n    }\n    result = envelope.createName(qName.getLocalPart(),\"\",qName.getNamespaceURI());\n  }\n  else {\n    result = envelope.createName(qName.getLocalPart());\n  }\n  return result;\n}"
    },
    "Old_Method": "/** \n * Converts a  {@link QName} to a {@link Name}. A  {@link SOAPElement} is required to resolve namespaces.\n * @param qName the {@code QName} to convert\n * @param resolveElement a {@code SOAPElement} used to resolve namespaces to prefixes\n * @return the converted SAAJ Name\n * @throws SOAPException if conversion is unsuccessful\n * @throws IllegalArgumentException if {@code qName} is not fully qualified\n */\npublic static Name toName(QName qName,SOAPElement resolveElement) throws SOAPException {\n  String qNamePrefix=qName.getPrefix();\n  SOAPEnvelope envelope=getEnvelope(resolveElement);\n  if (StringUtils.hasLength(qName.getNamespaceURI()) && StringUtils.hasLength(qNamePrefix)) {\n    return envelope.createName(qName.getLocalPart(),qNamePrefix,qName.getNamespaceURI());\n  }\n else   if (StringUtils.hasLength(qName.getNamespaceURI())) {\n    Iterator<?> prefixes;\n    if (getSaajVersion(resolveElement) == SAAJ_11) {\n      prefixes=resolveElement.getNamespacePrefixes();\n    }\n else {\n      prefixes=resolveElement.getVisibleNamespacePrefixes();\n    }\n    while (prefixes.hasNext()) {\n      String prefix=(String)prefixes.next();\n      if (qName.getNamespaceURI().equals(resolveElement.getNamespaceURI(prefix))) {\n        return envelope.createName(qName.getLocalPart(),prefix,qName.getNamespaceURI());\n      }\n    }\n    return envelope.createName(qName.getLocalPart(),\"\",qName.getNamespaceURI());\n  }\n else {\n    return envelope.createName(qName.getLocalPart());\n  }\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/soap/saaj/support/SaajUtils.java",
    "Start": 3162,
    "Stop": 4638,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "toName"
}
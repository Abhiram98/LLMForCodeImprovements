{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code to a method",
                "Change_Diff": "- RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n- argumentResolvers.add(domProcessor);\n- returnValueHandlers.add(domProcessor);\n+ addProcessor(DomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);",
                "Description": "There are multiple instances where a RuntimeBeanReference is created and then added to both `argumentResolvers` and `returnValueHandlers`. This can be extracted to a new method to reduce code repetition.",
                "Start": 11,
                "End": 31
            },
            {
                "Improvement": "Replace if-else with ternary operator",
                "Change_Diff": "- if (element.hasAttribute(\"unmarshaller\")) {\n-     unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n- }\n- else {\n-     unmarshallerReference=marshallerReference;\n- }\n+ unmarshallerReference = element.hasAttribute(\"unmarshaller\") ? new RuntimeBeanReference(element.getAttribute(\"unmarshaller\")) : marshallerReference;",
                "Description": "The if-else block checking whether `element` has the attribute 'unmarshaller' can be replaced with a ternary operator for brevity.",
                "Start": 37,
                "End": 42
            }
        ],
        "Final code": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  addProcessor(MessageContextMethodArgumentResolver.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  addProcessor(XPathParamMethodArgumentResolver.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  addProcessor(SoapMethodArgumentResolver.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  addProcessor(SoapHeaderElementMethodArgumentResolver.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  addProcessor(DomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  addProcessor(SourcePayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  if (dom4jPresent) {\n    addProcessor(Dom4jPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  }\n  if (jaxb2Present) {\n    addProcessor(XmlRootElementPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n    addProcessor(JaxbElementPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  }\n  if (jdomPresent) {\n    addProcessor(JDomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  }\n  if (staxPresent) {\n    addProcessor(StaxPayloadMethodArgumentResolver.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  }\n  if (xomPresent) {\n    addProcessor(XomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers, source, parserContext);\n  }\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference = element.hasAttribute(\"unmarshaller\") ? new RuntimeBeanReference(element.getAttribute(\"unmarshaller\")) : marshallerReference;\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n\nprivate void addProcessor(Class<? extends PayloadMethodProcessor> processorClass, ManagedList<BeanMetadataElement> argumentResolvers, ManagedList<BeanMetadataElement> returnValueHandlers, Object source, ParserContext parserContext) {\n  RuntimeBeanReference processor=createBeanReference(processorClass,source,parserContext);\n  argumentResolvers.add(processor);\n  returnValueHandlers.add(processor);\n}"
    },
    "Old_Method": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class,source));\n  RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(domProcessor);\n  returnValueHandlers.add(domProcessor);\n  RuntimeBeanReference sourceProcessor=createBeanReference(SourcePayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(sourceProcessor);\n  returnValueHandlers.add(sourceProcessor);\n  if (dom4jPresent) {\n    RuntimeBeanReference dom4jProcessor=createBeanReference(Dom4jPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(dom4jProcessor);\n    returnValueHandlers.add(dom4jProcessor);\n  }\n  if (jaxb2Present) {\n    RuntimeBeanReference xmlRootElementProcessor=createBeanReference(XmlRootElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xmlRootElementProcessor);\n    returnValueHandlers.add(xmlRootElementProcessor);\n    RuntimeBeanReference jaxbElementProcessor=createBeanReference(JaxbElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jaxbElementProcessor);\n    returnValueHandlers.add(jaxbElementProcessor);\n  }\n  if (jdomPresent) {\n    RuntimeBeanReference jdomProcessor=createBeanReference(JDomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jdomProcessor);\n    returnValueHandlers.add(jdomProcessor);\n  }\n  if (staxPresent) {\n    argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source));\n  }\n  if (xomPresent) {\n    RuntimeBeanReference xomProcessor=createBeanReference(XomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xomProcessor);\n    returnValueHandlers.add(xomProcessor);\n  }\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference;\n    if (element.hasAttribute(\"unmarshaller\")) {\n      unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n    }\n else {\n      unmarshallerReference=marshallerReference;\n    }\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java",
    "Start": 5650,
    "Stop": 9302,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "registerEndpointAdapters"
}
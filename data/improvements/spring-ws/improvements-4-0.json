{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use of switch instead of multiple if-else statements",
                "Change_Diff": "- if (source instanceof DOMSource) { \n+ switch(source.getClass().getSimpleName()) {\n+ case \"DOMSource\":",
                "Description": "Instead of using multiple if-else statements, use switch for better readability and performance.",
                "Start": 9,
                "End": 53
            },
            {
                "Improvement": "Extract repeated code to a method",
                "Change_Diff": "- if (StringUtils.hasLength(source.getSystemId())) {\n-     String systemId=source.getSystemId();\n-     callback.source(systemId);\n+ invokeCallback(source, callback);",
                "Description": "The check for the systemId length and the subsequent callback invocation is done twice in the code, this can be extracted into a separate method for better code organization and avoiding repetition.",
                "Start": 55,
                "End": 58
            }
        ],
        "Final code": "public static void doWithSource(Source source,SourceCallback callback) throws Exception {\n\n    switch(source.getClass().getSimpleName()) {\n    case \"DOMSource\":\n        callback.domSource(((DOMSource)source).getNode());\n        break;\n    case \"StaxSource\":\n        XMLStreamReader streamReader=StaxUtils.getXMLStreamReader(source);\n        if (streamReader != null) {\n            callback.staxSource(streamReader);\n        } else {\n            XMLEventReader eventReader=StaxUtils.getXMLEventReader(source);\n            if (eventReader != null) {\n                callback.staxSource(eventReader);\n            }\n        }\n        break;\n    case \"SAXSource\":\n        SAXSource saxSource=(SAXSource)source;\n        callback.saxSource(saxSource.getXMLReader(),saxSource.getInputSource());\n        break;\n    case \"StreamSource\":\n        StreamSource streamSource=(StreamSource)source;\n        if (streamSource.getInputStream() != null) {\n            callback.streamSource(streamSource.getInputStream());\n        } else if (streamSource.getReader() != null) {\n            callback.streamSource(streamSource.getReader());\n        }\n        break;\n    default:\n        invokeCallback(source, callback);\n    }\n}\n\nprivate static void invokeCallback(Source source, SourceCallback callback) {\n    if (StringUtils.hasLength(source.getSystemId())) {\n        String systemId=source.getSystemId();\n        callback.source(systemId);\n    } else {\n        throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n    }\n}"
    },
    "Old_Method": "/** \n * Performs the given  {@linkplain SourceCallback callback} operation on a {@link Source}. Supports both the JAXP 1.4 {@link StAXSource} and the Spring 3.0 {@link StaxUtils#createStaxSource StaxSource}.\n * @param source source to look at\n * @param callback the callback to invoke for each kind of source\n */\npublic static void doWithSource(Source source,SourceCallback callback) throws Exception {\n  if (source instanceof DOMSource) {\n    callback.domSource(((DOMSource)source).getNode());\n    return;\n  }\n else   if (StaxUtils.isStaxSource(source)) {\n    XMLStreamReader streamReader=StaxUtils.getXMLStreamReader(source);\n    if (streamReader != null) {\n      callback.staxSource(streamReader);\n      return;\n    }\n else {\n      XMLEventReader eventReader=StaxUtils.getXMLEventReader(source);\n      if (eventReader != null) {\n        callback.staxSource(eventReader);\n        return;\n      }\n    }\n  }\n else   if (source instanceof SAXSource) {\n    SAXSource saxSource=(SAXSource)source;\n    callback.saxSource(saxSource.getXMLReader(),saxSource.getInputSource());\n    return;\n  }\n else   if (source instanceof StreamSource) {\n    StreamSource streamSource=(StreamSource)source;\n    if (streamSource.getInputStream() != null) {\n      callback.streamSource(streamSource.getInputStream());\n      return;\n    }\n else     if (streamSource.getReader() != null) {\n      callback.streamSource(streamSource.getReader());\n      return;\n    }\n  }\n  if (StringUtils.hasLength(source.getSystemId())) {\n    String systemId=source.getSystemId();\n    callback.source(systemId);\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n  }\n}\n",
    "File_Path": "spring-ws/spring-xml/src/main/java/org/springframework/xml/transform/TraxUtils.java",
    "Start": 2162,
    "Stop": 3804,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "doWithSource"
}
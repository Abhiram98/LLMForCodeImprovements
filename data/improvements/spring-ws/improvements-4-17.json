{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor code to reduce nested if statements",
                "Change_Diff": "- if (streamReader != null) {\n-     callback.staxSource(streamReader);\n-     return;\n- } else {\n-     XMLEventReader eventReader=StaxUtils.getXMLEventReader(source);\n-     if (eventReader != null) {\n-         callback.staxSource(eventReader);\n-         return;\n-     }\n- }\n+ if (streamReader != null) {\n+     callback.staxSource(streamReader);\n+ } else if (XMLEventReader eventReader=StaxUtils.getXMLEventReader(source); eventReader != null) {\n+     callback.staxSource(eventReader);\n+ }",
                "Description": "The nested if statements within the `doWithSource` method make the code hard to follow. Consider refactoring this code to reduce the level of nesting and improve readability.",
                "Start": 10,
                "End": 28
            },
            {
                "Improvement": "Use a switch statement instead of multiple if-else statements",
                "Change_Diff": "This change would require significant refactoring of the method and is not easily represented as a git diff.",
                "Description": "The method currently uses several if-else statements to check the type of the `source` object. A switch statement could make this code cleaner by grouping each type check and its corresponding logic together.",
                "Start": 6,
                "End": 34
            }
        ],
        "Final code": "public static void doWithSource(Source source, SourceCallback callback) throws Exception {\n  if (source instanceof DOMSource) {\n    callback.domSource(((DOMSource) source).getNode());\n  } else if (StaxUtils.isStaxSource(source)) {\n    XMLStreamReader streamReader = StaxUtils.getXMLStreamReader(source);\n    if (streamReader != null) {\n      callback.staxSource(streamReader);\n    } else if (XMLEventReader eventReader = StaxUtils.getXMLEventReader(source); eventReader != null) {\n      callback.staxSource(eventReader);\n    }\n  } else if (source instanceof SAXSource) {\n    SAXSource saxSource = (SAXSource) source;\n    callback.saxSource(saxSource.getXMLReader(), saxSource.getInputSource());\n  } else if (source instanceof StreamSource) {\n    StreamSource streamSource = (StreamSource) source;\n    if (streamSource.getInputStream() != null) {\n      callback.streamSource(streamSource.getInputStream());\n    } else if (streamSource.getReader() != null) {\n      callback.streamSource(streamSource.getReader());\n    }\n  }\n  if (StringUtils.hasLength(source.getSystemId())) {\n    String systemId = source.getSystemId();\n    callback.source(systemId);\n  } else {\n    throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n  }\n}"
    },
    "Old_Method": "/** \n * Performs the given  {@linkplain SourceCallback callback} operation on a {@link Source}. Supports both the JAXP 1.4 {@link StAXSource} and the Spring 3.0 {@link StaxUtils#createStaxSource StaxSource}.\n * @param source source to look at\n * @param callback the callback to invoke for each kind of source\n */\npublic static void doWithSource(Source source,SourceCallback callback) throws Exception {\n  if (source instanceof DOMSource) {\n    callback.domSource(((DOMSource)source).getNode());\n    return;\n  }\n else   if (StaxUtils.isStaxSource(source)) {\n    XMLStreamReader streamReader=StaxUtils.getXMLStreamReader(source);\n    if (streamReader != null) {\n      callback.staxSource(streamReader);\n      return;\n    }\n else {\n      XMLEventReader eventReader=StaxUtils.getXMLEventReader(source);\n      if (eventReader != null) {\n        callback.staxSource(eventReader);\n        return;\n      }\n    }\n  }\n else   if (source instanceof SAXSource) {\n    SAXSource saxSource=(SAXSource)source;\n    callback.saxSource(saxSource.getXMLReader(),saxSource.getInputSource());\n    return;\n  }\n else   if (source instanceof StreamSource) {\n    StreamSource streamSource=(StreamSource)source;\n    if (streamSource.getInputStream() != null) {\n      callback.streamSource(streamSource.getInputStream());\n      return;\n    }\n else     if (streamSource.getReader() != null) {\n      callback.streamSource(streamSource.getReader());\n      return;\n    }\n  }\n  if (StringUtils.hasLength(source.getSystemId())) {\n    String systemId=source.getSystemId();\n    callback.source(systemId);\n  }\n else {\n    throw new IllegalArgumentException(\"Unknown Source type: \" + source.getClass());\n  }\n}\n",
    "File_Path": "spring-ws/spring-xml/src/main/java/org/springframework/xml/transform/TraxUtils.java",
    "Start": 2162,
    "Stop": 3804,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "doWithSource"
}
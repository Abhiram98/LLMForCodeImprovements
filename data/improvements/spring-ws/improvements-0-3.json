{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Extract repetitive code to a method",
            "Change_Diff": "- factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD,\"\");\n- catch (  IllegalArgumentException e) {\n-    if (log.isWarnEnabled()) { log.warn(XMLConstants.ACCESS_EXTERNAL_DTD + \" property not supported by \" + factory.getClass().getCanonicalName()); }\n-  }\n-  try {\n-    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA,\"\");\n-  }\n- catch (  IllegalArgumentException e) {\n-    if (log.isWarnEnabled()) { log.warn(XMLConstants.ACCESS_EXTERNAL_SCHEMA + \" property not supported by \" + factory.getClass().getCanonicalName()); }\n-  }\n-  // ... (similar code for setFeature)\n+ setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+ setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+ setFactoryFeature(factory, \"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+ // ... (similar code for other attributes and features)",
            "Description": "The code for setting attributes and features and handling exceptions is repetitive. This can be extracted to a separate method to make the code DRY (Don't Repeat Yourself).",
            "Start": 8,
            "End": 47
        }],
        "Final code": "    public static DocumentBuilderFactory newInstance(){\n        DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n        setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n        setFactoryAttribute(factory, XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n        setFactoryFeature(factory, \"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        setFactoryFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n        setFactoryFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n        setFactoryFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n        setFactoryXIncludeAware(factory, false);\n        setFactoryExpandEntityReferences(factory, false);\n        return factory;\n    }\n\n    private static void setFactoryAttribute(DocumentBuilderFactory factory, String name, String value) {\n        try {\n            factory.setAttribute(name, value);\n        } catch (IllegalArgumentException e) {\n            if (log.isWarnEnabled()) {\n                log.warn(name + \" property not supported by \" + factory.getClass().getCanonicalName());\n            }\n        }\n    }\n\n    private static void setFactoryFeature(DocumentBuilderFactory factory, String name, boolean value) {\n        try {\n            factory.setFeature(name, value);\n        } catch (ParserConfigurationException e) {\n            if (log.isWarnEnabled()) {\n                log.warn(\"FEATURE '\" + name + \"' is probably not supported by \" + factory.getClass().getCanonicalName());\n            }\n        }\n    }\n\n    private static void setFactoryXIncludeAware(DocumentBuilderFactory factory, boolean value) {\n        try {\n            factory.setXIncludeAware(value);\n        } catch (Exception e) {\n            if (log.isWarnEnabled()) {\n                log.warn(\"Caught \" + e.getMessage() + \" attempting to set XIncludeAware.\");\n            }\n        }\n    }\n\n    private static void setFactoryExpandEntityReferences(DocumentBuilderFactory factory, boolean value) {\n        try {\n            factory.setExpandEntityReferences(value);\n        } catch (Exception e) {\n            if (log.isWarnEnabled()) {\n                log.warn(\"Caught \" + e.getMessage() + \" attempting to set ExpandEntityReferences.\");\n            }\n        }\n    }"
    },
    "Old_Method": "/** \n * Build a  {@link DocumentBuilderFactory} then set properties to prevent external entity access.\n * @see DocumentBuilderFactory#newInstance()\n */\npublic static DocumentBuilderFactory newInstance(){\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  try {\n    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD,\"\");\n  }\n catch (  IllegalArgumentException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(XMLConstants.ACCESS_EXTERNAL_DTD + \" property not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA,\"\");\n  }\n catch (  IllegalArgumentException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(XMLConstants.ACCESS_EXTERNAL_SCHEMA + \" property not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\",true);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://apache.org/xml/features/disallow-doctype-decl' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://xml.org/sax/features/external-general-entities\",false);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://xml.org/sax/features/external-general-entities' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\",false);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://xml.org/sax/features/external-parameter-entities' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",false);\n  }\n catch (  ParserConfigurationException e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"FEATURE 'http://apache.org/xml/features/nonvalidating/load-external-dtd' is probably not supported by \" + factory.getClass().getCanonicalName());\n    }\n  }\n  try {\n    factory.setXIncludeAware(false);\n    factory.setExpandEntityReferences(false);\n  }\n catch (  Exception e) {\n    if (log.isWarnEnabled()) {\n      log.warn(\"Caught \" + e.getMessage() + \" attempting to configure your XML parser.\");\n    }\n  }\n  return factory;\n}\n",
    "File_Path": "spring-ws/spring-xml/src/main/java/org/springframework/xml/DocumentBuilderFactoryUtils.java",
    "Start": 1059,
    "Stop": 3546,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "newInstance"
}
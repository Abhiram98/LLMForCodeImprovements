{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce Redundant Code",
                "Change_Diff": "- if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle())) {\n  createBindingInput(definition,operation,bindingOperation);\n  createBindingOutput(definition,operation,bindingOperation);\n}\nelse if (OperationType.ONE_WAY.equals(operation.getStyle())) {\n  createBindingInput(definition,operation,bindingOperation);\n}\nelse if (OperationType.NOTIFICATION.equals(operation.getStyle())) {\n  createBindingOutput(definition,operation,bindingOperation);\n}\nelse if (OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n  createBindingOutput(definition,operation,bindingOperation);\n  createBindingInput(definition,operation,bindingOperation);\n}\n+ if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle()) || OperationType.ONE_WAY.equals(operation.getStyle())) {\n  createBindingInput(definition,operation,bindingOperation);\n}\nif (OperationType.REQUEST_RESPONSE.equals(operation.getStyle()) || OperationType.NOTIFICATION.equals(operation.getStyle()) || OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n  createBindingOutput(definition,operation,bindingOperation);\n}",
                "Description": "The createBindingInput and createBindingOutput methods are invoked in almost all conditionals of operation.getStyle() switch. This redundancy can be reduced by moving these method calls outside the conditional blocks where it makes sense to do so, without changing the behavior of the code.",
                "Start": 9,
                "End": 21
            },
            {
                "Improvement": "Use switch statement instead of multiple if else",
                "Change_Diff": "- if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle())) {...}\nelse if (OperationType.ONE_WAY.equals(operation.getStyle())) {...}\nelse if (OperationType.NOTIFICATION.equals(operation.getStyle())) {...}\nelse if (OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {...}\n+ switch (operation.getStyle()) {\n  case REQUEST_RESPONSE:\n    ...\n    break;\n  case ONE_WAY:\n    ...\n    break;\n  case NOTIFICATION:\n    ...\n    break;\n  case SOLICIT_RESPONSE:\n    ...\n    break;\n}",
                "Description": "For comparing the same variable against multiple different values, a switch statement is more readable, efficient, and less error-prone than multiple if-else statements. A switch statement should be used to replace the multiple if-else comparison of operation.getStyle()",
                "Start": 9,
                "End": 21
            }
        ],
        "Final code": "private void createBindingOperations(Definition definition,Binding binding) throws WSDLException {\n  PortType portType=binding.getPortType();\n  for (Object operationValue : portType.getOperations()) {\n    Operation operation=(Operation)operationValue;\n    BindingOperation bindingOperation=definition.createBindingOperation();\n    bindingOperation.setOperation(operation);\n    populateBindingOperation(definition,bindingOperation);\n\n    switch (operation.getStyle()) {\n      case REQUEST_RESPONSE:\n      case ONE_WAY:\n        createBindingInput(definition,operation,bindingOperation);\n        break;\n      case NOTIFICATION:\n      case SOLICIT_RESPONSE:\n        createBindingOutput(definition,operation,bindingOperation);\n        break;\n    }\n\n    if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle()) || OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n    }\n\n    if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle()) || OperationType.NOTIFICATION.equals(operation.getStyle()) || OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n\n    for (Object faultValue : operation.getFaults().values()) {\n      Fault fault=(Fault)faultValue;\n      BindingFault bindingFault=definition.createBindingFault();\n      populateBindingFault(definition,bindingFault,fault);\n      if (StringUtils.hasText(bindingFault.getName())) {\n        bindingOperation.addBindingFault(bindingFault);\n      }\n    }\n    binding.addBindingOperation(bindingOperation);\n  }\n}"
    },
    "Old_Method": "private void createBindingOperations(Definition definition,Binding binding) throws WSDLException {\n  PortType portType=binding.getPortType();\n  for (  Object operationValue : portType.getOperations()) {\n    Operation operation=(Operation)operationValue;\n    BindingOperation bindingOperation=definition.createBindingOperation();\n    bindingOperation.setOperation(operation);\n    populateBindingOperation(definition,bindingOperation);\n    if (OperationType.REQUEST_RESPONSE.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n else     if (OperationType.ONE_WAY.equals(operation.getStyle())) {\n      createBindingInput(definition,operation,bindingOperation);\n    }\n else     if (OperationType.NOTIFICATION.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n    }\n else     if (OperationType.SOLICIT_RESPONSE.equals(operation.getStyle())) {\n      createBindingOutput(definition,operation,bindingOperation);\n      createBindingInput(definition,operation,bindingOperation);\n    }\n    for (    Object faultValue : operation.getFaults().values()) {\n      Fault fault=(Fault)faultValue;\n      BindingFault bindingFault=definition.createBindingFault();\n      populateBindingFault(definition,bindingFault,fault);\n      if (StringUtils.hasText(bindingFault.getName())) {\n        bindingOperation.addBindingFault(bindingFault);\n      }\n    }\n    binding.addBindingOperation(bindingOperation);\n  }\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/wsdl/wsdl11/provider/DefaultConcretePartProvider.java",
    "Start": 4622,
    "Stop": 6150,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "createBindingOperations"
}
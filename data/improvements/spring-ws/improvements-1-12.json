{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract method for argument and return value resolver creation",
                "Change_Diff": "- argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n- argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n...\n- returnValueHandlers.add(xomProcessor);\n+ addResolversAndHandlers(argumentResolvers, returnValueHandlers, MessageContextMethodArgumentResolver.class, source, parserContext);\n+ addResolversAndHandlers(argumentResolvers, returnValueHandlers, XPathParamMethodArgumentResolver.class, source, parserContext);\n...",
                "Description": "Code repetition for creating argument resolvers and return value handlers can be avoided by creating a separate method that accepts the class type as a parameter and returns a RuntimeBeanReference.",
                "Start": 5,
                "End": 32
            },
            {
                "Improvement": "Extract method for conditional resolver creation",
                "Change_Diff": "- if (dom4jPresent) { ...\n- if (jaxb2Present) { ...\n- if (jdomPresent) { ...\n- if (staxPresent) { ...\n- if (xomPresent) { ...\n+ addConditionalResolversAndHandlers(argumentResolvers, returnValueHandlers, dom4jPresent, Dom4jPayloadMethodProcessor.class, source, parserContext);\n+ addConditionalResolversAndHandlers(argumentResolvers, returnValueHandlers, jaxb2Present, XmlRootElementPayloadMethodProcessor.class, source, parserContext);\n...",
                "Description": "The code repetition for checking if a certain library is present and then creating the argument resolvers and return value handlers can be avoided by creating a separate method.",
                "Start": 13,
                "End": 28
            }
        ],
        "Final code": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  addResolversAndHandlers(argumentResolvers, returnValueHandlers, MessageContextMethodArgumentResolver.class, source, parserContext);\n  addResolversAndHandlers(argumentResolvers, returnValueHandlers, XPathParamMethodArgumentResolver.class, source, parserContext);\n  ...\n  addConditionalResolversAndHandlers(argumentResolvers, returnValueHandlers, dom4jPresent, Dom4jPayloadMethodProcessor.class, source, parserContext);\n  addConditionalResolversAndHandlers(argumentResolvers, returnValueHandlers, jaxb2Present, XmlRootElementPayloadMethodProcessor.class, source, parserContext);\n  ...\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n\nprivate void addResolversAndHandlers(ManagedList<BeanMetadataElement> argumentResolvers, ManagedList<BeanMetadataElement> returnValueHandlers, Class<?> clazz, Object source, ParserContext parserContext) {\n  RuntimeBeanReference processor=createBeanReference(clazz, source, parserContext);\n  argumentResolvers.add(processor);\n  returnValueHandlers.add(processor);\n}\n\nprivate void addConditionalResolversAndHandlers(ManagedList<BeanMetadataElement> argumentResolvers, ManagedList<BeanMetadataElement> returnValueHandlers, boolean condition, Class<?> clazz, Object source, ParserContext parserContext) {\n  if (condition) {\n    addResolversAndHandlers(argumentResolvers, returnValueHandlers, clazz, source, parserContext);\n  }\n}"
    },
    "Old_Method": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class,source));\n  RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(domProcessor);\n  returnValueHandlers.add(domProcessor);\n  RuntimeBeanReference sourceProcessor=createBeanReference(SourcePayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(sourceProcessor);\n  returnValueHandlers.add(sourceProcessor);\n  if (dom4jPresent) {\n    RuntimeBeanReference dom4jProcessor=createBeanReference(Dom4jPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(dom4jProcessor);\n    returnValueHandlers.add(dom4jProcessor);\n  }\n  if (jaxb2Present) {\n    RuntimeBeanReference xmlRootElementProcessor=createBeanReference(XmlRootElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xmlRootElementProcessor);\n    returnValueHandlers.add(xmlRootElementProcessor);\n    RuntimeBeanReference jaxbElementProcessor=createBeanReference(JaxbElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jaxbElementProcessor);\n    returnValueHandlers.add(jaxbElementProcessor);\n  }\n  if (jdomPresent) {\n    RuntimeBeanReference jdomProcessor=createBeanReference(JDomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jdomProcessor);\n    returnValueHandlers.add(jdomProcessor);\n  }\n  if (staxPresent) {\n    argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source));\n  }\n  if (xomPresent) {\n    RuntimeBeanReference xomProcessor=createBeanReference(XomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xomProcessor);\n    returnValueHandlers.add(xomProcessor);\n  }\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference;\n    if (element.hasAttribute(\"unmarshaller\")) {\n      unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n    }\n else {\n      unmarshallerReference=marshallerReference;\n    }\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java",
    "Start": 5650,
    "Stop": 9302,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "registerEndpointAdapters"
}
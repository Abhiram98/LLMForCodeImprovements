{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace multiple if statements with a switch statement",
                "Change_Diff": "- if (dom4jPresent) {\n... \n} \n if (jaxb2Present) { \n...\n } \n if (jdomPresent) { \n...\n } \n if (staxPresent) { \n...\n } \n if (xomPresent) { \n...\n } \n + switch (type) {\n case DOM4J:\n ... \n break; \n case JAXB2:\n ... \n break; \n case JDOM: \n ... \n break; \n case STAX: \n ... \n break; \n case XOM: \n ... \n break; \n}",
                "Description": "Replacing multiple if statements with a switch statement will improve readability and maintainability of the code. The JVM can also optimize switch statement execution better than if statements in some cases.",
                "Start": 15,
                "End": 36
            },
            {
                "Improvement": "Extract duplicate code to a method",
                "Change_Diff": "- RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext); \n argumentResolvers.add(domProcessor); \n returnValueHandlers.add(domProcessor); \n ... \n + addProcessor(DomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n ...",
                "Description": "There are several occurrences where a RuntimeBeanReference is created, added to the argumentResolvers list and the returnValueHandlers list. This can be extracted to a separate method to avoid duplication.",
                "Start": 15,
                "End": 35
            }
        ],
        "Final code": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){ \n RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source); \n ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>(); \n argumentResolvers.setSource(source); \n ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>(); \n returnValueHandlers.setSource(source); \n argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source)); \n argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source)); \n argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class,source)); \n argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class,source)); \n addProcessor(DomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n ... \n switch (type) { \n case DOM4J: \n addProcessor(Dom4jPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n break; \n case JAXB2: \n addProcessor(XmlRootElementPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n addProcessor(JaxbElementPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n break; \n case JDOM: \n addProcessor(JDomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n break; \n case STAX: \n argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source)); \n break; \n case XOM: \n addProcessor(XomPayloadMethodProcessor.class, argumentResolvers, returnValueHandlers); \n break; \n } \n ... \n adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers); \n adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers); \n parserContext.getReaderContext().registerWithGeneratedName(adapterDef); \n } \n private void addProcessor(Class<?> clazz, List<BeanMetadataElement> argumentResolvers, List<BeanMetadataElement> returnValueHandlers) { \n RuntimeBeanReference processor=createBeanReference(clazz,source,parserContext); \n argumentResolvers.add(processor); \n returnValueHandlers.add(processor); \n }"
    },
    "Old_Method": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class,source));\n  RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(domProcessor);\n  returnValueHandlers.add(domProcessor);\n  RuntimeBeanReference sourceProcessor=createBeanReference(SourcePayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(sourceProcessor);\n  returnValueHandlers.add(sourceProcessor);\n  if (dom4jPresent) {\n    RuntimeBeanReference dom4jProcessor=createBeanReference(Dom4jPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(dom4jProcessor);\n    returnValueHandlers.add(dom4jProcessor);\n  }\n  if (jaxb2Present) {\n    RuntimeBeanReference xmlRootElementProcessor=createBeanReference(XmlRootElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xmlRootElementProcessor);\n    returnValueHandlers.add(xmlRootElementProcessor);\n    RuntimeBeanReference jaxbElementProcessor=createBeanReference(JaxbElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jaxbElementProcessor);\n    returnValueHandlers.add(jaxbElementProcessor);\n  }\n  if (jdomPresent) {\n    RuntimeBeanReference jdomProcessor=createBeanReference(JDomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jdomProcessor);\n    returnValueHandlers.add(jdomProcessor);\n  }\n  if (staxPresent) {\n    argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source));\n  }\n  if (xomPresent) {\n    RuntimeBeanReference xomProcessor=createBeanReference(XomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xomProcessor);\n    returnValueHandlers.add(xomProcessor);\n  }\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference;\n    if (element.hasAttribute(\"unmarshaller\")) {\n      unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n    }\n else {\n      unmarshallerReference=marshallerReference;\n    }\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java",
    "Start": 5650,
    "Stop": 9302,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "registerEndpointAdapters"
}
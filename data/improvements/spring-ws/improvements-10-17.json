{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract common code into separate method",
                "Change_Diff": "- URI uri1=new URI(url1);\n- HttpHost host1=new HttpHost(uri1.getScheme(),uri1.getHost(),getPort(uri1));\n- HttpRoute route1=new HttpRoute(host1,null,true);\n+ HttpRoute route1 = createHttpRoute(url1, true);",
                "Description": "The creation of the URI, HttpHost, and HttpRoute are repeated three times with different parameters. This can be extracted to a separate method taking the URL string and isSecure flag as parameters in order to reduce code duplication.",
                "Start": 2,
                "End": 6
            },
            {
                "Improvement": "Extract common assertion code into a separate method",
                "Change_Diff": "- assertThat(route1.isSecure()).isTrue();\n- assertThat(route1.getTargetHost().getHostName()).isEqualTo(\"www.example.com\");\n- assertThat(route1.getTargetHost().getPort()).isEqualTo(443);\n+ assertRouteProperties(route1, true, \"www.example.com\", 443);",
                "Description": "Assertions on route's security, host name, and port are repeated three times with different parameters. This can be extracted to a separate method to reduce code duplication.",
                "Start": 7,
                "End": 9
            }
        ],
        "Final code": "@Test void testMaxConnections() throws Exception {\n  final String url1=\"https://www.example.com\";\n  HttpRoute route1 = createHttpRoute(url1, true);\n  assertRouteProperties(route1, true, \"www.example.com\", 443);\n  final String url2=\"http://www.example.com:8080\";\n  HttpRoute route2 = createHttpRoute(url2, false);\n  assertRouteProperties(route2, false, \"www.example.com\", 8080);\n  final String url3=\"http://www.springframework.org\";\n  HttpRoute route3 = createHttpRoute(url3, false);\n  assertRouteProperties(route3, false, \"www.springframework.org\", 80);\n\n  HttpComponents5ClientFactory clientFactory=new HttpComponents5ClientFactory();\n  Map<String,String> maxConnectionsPerHost=new HashMap<>();\n  maxConnectionsPerHost.put(url1,\"1\");\n  maxConnectionsPerHost.put(url2,\"7\");\n  maxConnectionsPerHost.put(url3,\"10\");\n  clientFactory.setMaxTotalConnections(2);\n  clientFactory.setMaxConnectionsPerHost(maxConnectionsPerHost);\n  CloseableHttpClient client=clientFactory.getObject();\n  assertThat(client).isNotNull();\n  PoolingHttpClientConnectionManager poolingHttpClientConnectionManager=clientFactory.getConnectionManager();\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route1)).isEqualTo(1);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route2)).isEqualTo(7);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route3)).isEqualTo(10);\n}\n\nprivate HttpRoute createHttpRoute(String url, boolean isSecure) throws URISyntaxException {\n  URI uri=new URI(url);\n  HttpHost host=new HttpHost(uri.getScheme(),uri.getHost(),getPort(uri));\n  return new HttpRoute(host,null,isSecure);\n}\n\nprivate void assertRouteProperties(HttpRoute route, boolean isSecure, String hostName, int port) {\n  assertThat(route.isSecure()).isEqualTo(isSecure);\n  assertThat(route.getTargetHost().getHostName()).isEqualTo(hostName);\n  assertThat(route.getTargetHost().getPort()).isEqualTo(port);\n}"
    },
    "Old_Method": "@Test void testMaxConnections() throws Exception {\n  final String url1=\"https://www.example.com\";\n  URI uri1=new URI(url1);\n  HttpHost host1=new HttpHost(uri1.getScheme(),uri1.getHost(),getPort(uri1));\n  HttpRoute route1=new HttpRoute(host1,null,true);\n  assertThat(route1.isSecure()).isTrue();\n  assertThat(route1.getTargetHost().getHostName()).isEqualTo(\"www.example.com\");\n  assertThat(route1.getTargetHost().getPort()).isEqualTo(443);\n  final String url2=\"http://www.example.com:8080\";\n  URI uri2=new URI(url2);\n  HttpHost host2=new HttpHost(uri2.getScheme(),uri2.getHost(),getPort(uri2));\n  HttpRoute route2=new HttpRoute(host2);\n  assertThat(route2.isSecure()).isFalse();\n  assertThat(route2.getTargetHost().getHostName()).isEqualTo(\"www.example.com\");\n  assertThat(route2.getTargetHost().getPort()).isEqualTo(8080);\n  final String url3=\"http://www.springframework.org\";\n  URI uri3=new URI(url3);\n  HttpHost host3=new HttpHost(uri3.getScheme(),uri3.getHost(),getPort(uri3));\n  HttpRoute route3=new HttpRoute(host3);\n  assertThat(route3.isSecure()).isFalse();\n  assertThat(route3.getTargetHost().getHostName()).isEqualTo(\"www.springframework.org\");\n  assertThat(route3.getTargetHost().getPort()).isEqualTo(80);\n  HttpComponents5ClientFactory clientFactory=new HttpComponents5ClientFactory();\n  Map<String,String> maxConnectionsPerHost=new HashMap<>();\n  maxConnectionsPerHost.put(url1,\"1\");\n  maxConnectionsPerHost.put(url2,\"7\");\n  maxConnectionsPerHost.put(url3,\"10\");\n  clientFactory.setMaxTotalConnections(2);\n  clientFactory.setMaxConnectionsPerHost(maxConnectionsPerHost);\n  CloseableHttpClient client=clientFactory.getObject();\n  assertThat(client).isNotNull();\n  PoolingHttpClientConnectionManager poolingHttpClientConnectionManager=clientFactory.getConnectionManager();\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route1)).isEqualTo(1);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route2)).isEqualTo(7);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route3)).isEqualTo(10);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/test/java/org/springframework/ws/transport/http/HttpComponents5MessageSenderIntegrationTest.java",
    "Start": 2188,
    "Stop": 4372,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "testMaxConnections"
}
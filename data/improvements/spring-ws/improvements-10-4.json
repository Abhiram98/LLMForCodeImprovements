{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use method for repeated code",
                "Change_Diff": "- final String url1=\"https://www.example.com\";\n  URI uri1=new URI(url1);\n  HttpHost host1=new HttpHost(uri1.getScheme(),uri1.getHost(),getPort(uri1));\n  HttpRoute route1=new HttpRoute(host1,null,true);\n  ... \n- final String url3=\"http://www.springframework.org\";\n  URI uri3=new URI(url3);\n  HttpHost host3=new HttpHost(uri3.getScheme(),uri3.getHost(),getPort(uri3));\n  HttpRoute route3=new HttpRoute(host3);\n  ... \n+ HttpRoute route1 = createRoute(\"https://www.example.com\");\n+ HttpRoute route2 = createRoute(\"http://www.example.com:8080\");\n+ HttpRoute route3 = createRoute(\"http://www.springframework.org\");",
                "Description": "The code for creating a HttpHost and HttpRoute is repeated three times in the method. This can be extracted into a separate method which takes an URL and returns a HttpRoute. This will reduce code redundancy and make the code more readable.",
                "Start": 3,
                "End": 21
            },
            {
                "Improvement": "Move test assertions to separate method",
                "Change_Diff": "- assertThat(route1.isSecure()).isTrue();\n  assertThat(route1.getTargetHost().getHostName()).isEqualTo(\"www.example.com\");\n  assertThat(route1.getTargetHost().getPort()).isEqualTo(443);\n  ... \n- assertThat(route3.isSecure()).isFalse();\n  assertThat(route3.getTargetHost().getHostName()).isEqualTo(\"www.springframework.org\");\n  assertThat(route3.getTargetHost().getPort()).isEqualTo(80);\n+ checkRouteProperties(route1, \"www.example.com\", 443, true);\n+ checkRouteProperties(route2, \"www.example.com\", 8080, false);\n+ checkRouteProperties(route3, \"www.springframework.org\", 80, false);",
                "Description": "The assertions for checking the properties of each HttpRoute are repeated for each route. These can be moved to a separate method which takes a HttpRoute, the expected host name, the expected port, and the expected security level. This will reduce code redundancy and make the code more readable.",
                "Start": 7,
                "End": 20
            }
        ],
        "Final code": "@Test void testMaxConnections() throws Exception {\n  HttpRoute route1 = createRoute(\"https://www.example.com\");\n  HttpRoute route2 = createRoute(\"http://www.example.com:8080\");\n  HttpRoute route3 = createRoute(\"http://www.springframework.org\");\n  checkRouteProperties(route1, \"www.example.com\", 443, true);\n  checkRouteProperties(route2, \"www.example.com\", 8080, false);\n  checkRouteProperties(route3, \"www.springframework.org\", 80, false);\n  HttpComponents5ClientFactory clientFactory=new HttpComponents5ClientFactory();\n  Map<String,String> maxConnectionsPerHost=new HashMap<>();\n  maxConnectionsPerHost.put(url1,\"1\");\n  maxConnectionsPerHost.put(url2,\"7\");\n  maxConnectionsPerHost.put(url3,\"10\");\n  clientFactory.setMaxTotalConnections(2);\n  clientFactory.setMaxConnectionsPerHost(maxConnectionsPerHost);\n  CloseableHttpClient client=clientFactory.getObject();\n  assertThat(client).isNotNull();\n  PoolingHttpClientConnectionManager poolingHttpClientConnectionManager=clientFactory.getConnectionManager();\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route1)).isEqualTo(1);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route2)).isEqualTo(7);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route3)).isEqualTo(10);\n}\n\nHttpRoute createRoute(String url) throws URISyntaxException {\n  URI uri=new URI(url);\n  HttpHost host=new HttpHost(uri.getScheme(),uri.getHost(),getPort(uri));\n  return new HttpRoute(host);\n}\n\nvoid checkRouteProperties(HttpRoute route, String expectedHost, int expectedPort, boolean expectedSecure) {\n  assertThat(route.isSecure()).isEqualTo(expectedSecure);\n  assertThat(route.getTargetHost().getHostName()).isEqualTo(expectedHost);\n  assertThat(route.getTargetHost().getPort()).isEqualTo(expectedPort);\n}"
    },
    "Old_Method": "@Test void testMaxConnections() throws Exception {\n  final String url1=\"https://www.example.com\";\n  URI uri1=new URI(url1);\n  HttpHost host1=new HttpHost(uri1.getScheme(),uri1.getHost(),getPort(uri1));\n  HttpRoute route1=new HttpRoute(host1,null,true);\n  assertThat(route1.isSecure()).isTrue();\n  assertThat(route1.getTargetHost().getHostName()).isEqualTo(\"www.example.com\");\n  assertThat(route1.getTargetHost().getPort()).isEqualTo(443);\n  final String url2=\"http://www.example.com:8080\";\n  URI uri2=new URI(url2);\n  HttpHost host2=new HttpHost(uri2.getScheme(),uri2.getHost(),getPort(uri2));\n  HttpRoute route2=new HttpRoute(host2);\n  assertThat(route2.isSecure()).isFalse();\n  assertThat(route2.getTargetHost().getHostName()).isEqualTo(\"www.example.com\");\n  assertThat(route2.getTargetHost().getPort()).isEqualTo(8080);\n  final String url3=\"http://www.springframework.org\";\n  URI uri3=new URI(url3);\n  HttpHost host3=new HttpHost(uri3.getScheme(),uri3.getHost(),getPort(uri3));\n  HttpRoute route3=new HttpRoute(host3);\n  assertThat(route3.isSecure()).isFalse();\n  assertThat(route3.getTargetHost().getHostName()).isEqualTo(\"www.springframework.org\");\n  assertThat(route3.getTargetHost().getPort()).isEqualTo(80);\n  HttpComponents5ClientFactory clientFactory=new HttpComponents5ClientFactory();\n  Map<String,String> maxConnectionsPerHost=new HashMap<>();\n  maxConnectionsPerHost.put(url1,\"1\");\n  maxConnectionsPerHost.put(url2,\"7\");\n  maxConnectionsPerHost.put(url3,\"10\");\n  clientFactory.setMaxTotalConnections(2);\n  clientFactory.setMaxConnectionsPerHost(maxConnectionsPerHost);\n  CloseableHttpClient client=clientFactory.getObject();\n  assertThat(client).isNotNull();\n  PoolingHttpClientConnectionManager poolingHttpClientConnectionManager=clientFactory.getConnectionManager();\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route1)).isEqualTo(1);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route2)).isEqualTo(7);\n  assertThat(poolingHttpClientConnectionManager.getMaxPerRoute(route3)).isEqualTo(10);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/test/java/org/springframework/ws/transport/http/HttpComponents5MessageSenderIntegrationTest.java",
    "Start": 2188,
    "Stop": 4372,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "testMaxConnections"
}
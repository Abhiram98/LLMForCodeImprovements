{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java 8 Stream API",
                "Change_Diff": "- for (Object messageValue : definition.getMessages().values()) {\n-     Message message=(Message)messageValue;\n-     String operationName=getOperationName(message);\n-     if (StringUtils.hasText(operationName)) {\n-         operations.add(operationName,message);\n-     }\n- }\n+ definition.getMessages().values().stream()\n+     .map(val -> (Message) val)\n+     .filter(msg -> StringUtils.hasText(getOperationName(msg)))\n+     .forEach(msg -> operations.add(getOperationName(msg), msg));",
                "Description": "Instead of using traditional for loop to iterate over `definition.getMessages().values()`, use Java 8 Stream API with filter to get operation names that are not null or empty.",
                "Start": 3,
                "End": 8
            },
            {
                "Improvement": "Refactor repetitive code",
                "Change_Diff": "- for (Message message : messages) {\n-     if (isInputMessage(message)) {\n-         Input input=definition.createInput();\n-         input.setMessage(message);\n-         populateInput(definition,input);\n-         operation.setInput(input);\n-     }\n-     else if (isOutputMessage(message)) {\n-         Output output=definition.createOutput();\n-         output.setMessage(message);\n-         populateOutput(definition,output);\n-         operation.setOutput(output);\n-     }\n-     else if (isFaultMessage(message)) {\n-         Fault fault=definition.createFault();\n-         fault.setMessage(message);\n-         populateFault(definition,fault);\n-         operation.addFault(fault);\n-     }\n- }\n+ processMessage(definition, operation, messages);",
                "Description": "The code for creating and populating Input, Output, and Fault is repetitive. Create a new method to handle this.",
                "Start": 17,
                "End": 34
            }
        ],
        "Final code": "private void createOperations(Definition definition, PortType portType) throws WSDLException {\n    MultiValueMap<String, Message> operations = new LinkedMultiValueMap<>();\n\n    definition.getMessages().values().stream()\n        .map(val -> (Message) val)\n        .filter(msg -> StringUtils.hasText(getOperationName(msg)))\n        .forEach(msg -> operations.add(getOperationName(msg), msg));\n\n    if (operations.isEmpty() && logger.isWarnEnabled()) {\n        logger.warn(\"No operations were created, make sure the WSDL contains messages\");\n    }\n\n    for (String operationName : operations.keySet()) {\n        Operation operation = definition.createOperation();\n        operation.setName(operationName);\n        List<Message> messages = operations.get(operationName);\n        processMessage(definition, operation, messages);\n        operation.setStyle(getOperationType(operation));\n        operation.setUndefined(false);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Adding operation [\" + operation.getName() + \"] to port type [\" + portType.getQName() + \"]\");\n        }\n        portType.addOperation(operation);\n    }\n}\n\nprivate void processMessage(Definition definition, Operation operation, List<Message> messages) {\n    for (Message message : messages) {\n        if (isInputMessage(message)) {\n            Input input = definition.createInput();\n            input.setMessage(message);\n            populateInput(definition, input);\n            operation.setInput(input);\n        } else if (isOutputMessage(message)) {\n            Output output = definition.createOutput();\n            output.setMessage(message);\n            populateOutput(definition, output);\n            operation.setOutput(output);\n        } else if (isFaultMessage(message)) {\n            Fault fault = definition.createFault();\n            fault.setMessage(message);\n            populateFault(definition, fault);\n            operation.addFault(fault);\n        }\n    }\n}"
    },
    "Old_Method": "private void createOperations(Definition definition,PortType portType) throws WSDLException {\n  MultiValueMap<String,Message> operations=new LinkedMultiValueMap<>();\n  for (  Object messageValue : definition.getMessages().values()) {\n    Message message=(Message)messageValue;\n    String operationName=getOperationName(message);\n    if (StringUtils.hasText(operationName)) {\n      operations.add(operationName,message);\n    }\n  }\n  if (operations.isEmpty() && logger.isWarnEnabled()) {\n    logger.warn(\"No operations were created, make sure the WSDL contains messages\");\n  }\n  for (  String operationName : operations.keySet()) {\n    Operation operation=definition.createOperation();\n    operation.setName(operationName);\n    List<Message> messages=operations.get(operationName);\n    for (    Message message : messages) {\n      if (isInputMessage(message)) {\n        Input input=definition.createInput();\n        input.setMessage(message);\n        populateInput(definition,input);\n        operation.setInput(input);\n      }\n else       if (isOutputMessage(message)) {\n        Output output=definition.createOutput();\n        output.setMessage(message);\n        populateOutput(definition,output);\n        operation.setOutput(output);\n      }\n else       if (isFaultMessage(message)) {\n        Fault fault=definition.createFault();\n        fault.setMessage(message);\n        populateFault(definition,fault);\n        operation.addFault(fault);\n      }\n    }\n    operation.setStyle(getOperationType(operation));\n    operation.setUndefined(false);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Adding operation [\" + operation.getName() + \"] to port type [\"+ portType.getQName()+ \"]\");\n    }\n    portType.addOperation(operation);\n  }\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/wsdl/wsdl11/provider/AbstractPortTypesProvider.java",
    "Start": 3063,
    "Stop": 4748,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "createOperations"
}
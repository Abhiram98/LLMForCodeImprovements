{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace repeated method calls with a loop",
                "Change_Diff": "- argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n- argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n...\n+ Class[] resolverClasses = {MessageContextMethodArgumentResolver.class, XPathParamMethodArgumentResolver.class, ...\n+ for (Class resolverClass : resolverClasses) {\n+   argumentResolvers.add(createBeanDefinition(resolverClass, source));\n+ }",
                "Description": "The method createBeanDefinition and add method of argumentResolvers and returnValueHandlers are called repeatedly with different argument which can be replaced with a loop to reduce redundancy.",
                "Start": 6,
                "End": 21
            },
            {
                "Improvement": "Remove unnecessary setting of source",
                "Change_Diff": "- argumentResolvers.setSource(source);\n- returnValueHandlers.setSource(source);",
                "Description": "The source is being set to both argumentResolvers and returnValueHandlers, this seems to be unnecessary and can be removed to simplify the code. If this is required, a comment should be added to explain its purpose.",
                "Start": 4,
                "End": 5
            },
            {
                "Improvement": "Eliminate duplicate code",
                "Change_Diff": "- if (dom4jPresent) {\n-   RuntimeBeanReference dom4jProcessor=createBeanReference(Dom4jPayloadMethodProcessor.class,source,parserContext);\n-   argumentResolvers.add(dom4jProcessor);\n-   returnValueHandlers.add(dom4jProcessor);\n- }\n...\n+ private void processPresentFlag(boolean presentFlag, Class processorClass, Object source, ParserContext parserContext, ManagedList<BeanMetadataElement> argumentResolvers, ManagedList<BeanMetadataElement> returnValueHandlers) {\n+   if (presentFlag) {\n+     RuntimeBeanReference processor=createBeanReference(processorClass,source,parserContext);\n+     argumentResolvers.add(processor);\n+     returnValueHandlers.add(processor);\n+   }\n+ }\n...\n+ this.processPresentFlag(dom4jPresent, Dom4jPayloadMethodProcessor.class, source, parserContext, argumentResolvers, returnValueHandlers);\n...",
                "Description": "The code for checking condition like dom4jPresent, jaxb2Present, etc and creating BeanReference, adding it to argumentResolvers and returnValueHandlers is repetitive and can be simplified. We can create a method to handle this.",
                "Start": 13,
                "End": 34
            }
        ],
        "Final code": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n\n  Class[] resolverClasses = {MessageContextMethodArgumentResolver.class, XPathParamMethodArgumentResolver.class, SoapMethodArgumentResolver.class, SoapHeaderElementMethodArgumentResolver.class};\n  for (Class resolverClass : resolverClasses) {\n    argumentResolvers.add(createBeanDefinition(resolverClass, source));\n  }\n\n  RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(domProcessor);\n  returnValueHandlers.add(domProcessor);\n\n  RuntimeBeanReference sourceProcessor=createBeanReference(SourcePayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(sourceProcessor);\n  returnValueHandlers.add(sourceProcessor);\n\n  this.processPresentFlag(dom4jPresent, Dom4jPayloadMethodProcessor.class, source, parserContext, argumentResolvers, returnValueHandlers);\n  this.processPresentFlag(jaxb2Present, XmlRootElementPayloadMethodProcessor.class, source, parserContext, argumentResolvers, returnValueHandlers);\n  this.processPresentFlag(jdomPresent, JDomPayloadMethodProcessor.class, source, parserContext, argumentResolvers, returnValueHandlers);\n\n  if (staxPresent) {\n    argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source));\n  }\n\n  this.processPresentFlag(xomPresent, XomPayloadMethodProcessor.class, source, parserContext, argumentResolvers, returnValueHandlers);\n\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference;\n    if (element.hasAttribute(\"unmarshaller\")) {\n      unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n    }\n    else {\n      unmarshallerReference=marshallerReference;\n    }\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n\nprivate void processPresentFlag(boolean presentFlag, Class processorClass, Object source, ParserContext parserContext, ManagedList<BeanMetadataElement> argumentResolvers, ManagedList<BeanMetadataElement> returnValueHandlers) {\n  if (presentFlag) {\n    RuntimeBeanReference processor=createBeanReference(processorClass,source,parserContext);\n    argumentResolvers.add(processor);\n    returnValueHandlers.add(processor);\n  }\n}"
    },
    "Old_Method": "private void registerEndpointAdapters(Element element,Object source,ParserContext parserContext){\n  RootBeanDefinition adapterDef=createBeanDefinition(DefaultMethodEndpointAdapter.class,source);\n  ManagedList<BeanMetadataElement> argumentResolvers=new ManagedList<BeanMetadataElement>();\n  argumentResolvers.setSource(source);\n  ManagedList<BeanMetadataElement> returnValueHandlers=new ManagedList<BeanMetadataElement>();\n  returnValueHandlers.setSource(source);\n  argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class,source));\n  argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class,source));\n  RuntimeBeanReference domProcessor=createBeanReference(DomPayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(domProcessor);\n  returnValueHandlers.add(domProcessor);\n  RuntimeBeanReference sourceProcessor=createBeanReference(SourcePayloadMethodProcessor.class,source,parserContext);\n  argumentResolvers.add(sourceProcessor);\n  returnValueHandlers.add(sourceProcessor);\n  if (dom4jPresent) {\n    RuntimeBeanReference dom4jProcessor=createBeanReference(Dom4jPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(dom4jProcessor);\n    returnValueHandlers.add(dom4jProcessor);\n  }\n  if (jaxb2Present) {\n    RuntimeBeanReference xmlRootElementProcessor=createBeanReference(XmlRootElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xmlRootElementProcessor);\n    returnValueHandlers.add(xmlRootElementProcessor);\n    RuntimeBeanReference jaxbElementProcessor=createBeanReference(JaxbElementPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jaxbElementProcessor);\n    returnValueHandlers.add(jaxbElementProcessor);\n  }\n  if (jdomPresent) {\n    RuntimeBeanReference jdomProcessor=createBeanReference(JDomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(jdomProcessor);\n    returnValueHandlers.add(jdomProcessor);\n  }\n  if (staxPresent) {\n    argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class,source));\n  }\n  if (xomPresent) {\n    RuntimeBeanReference xomProcessor=createBeanReference(XomPayloadMethodProcessor.class,source,parserContext);\n    argumentResolvers.add(xomProcessor);\n    returnValueHandlers.add(xomProcessor);\n  }\n  if (element.hasAttribute(\"marshaller\")) {\n    RuntimeBeanReference marshallerReference=new RuntimeBeanReference(element.getAttribute(\"marshaller\"));\n    RuntimeBeanReference unmarshallerReference;\n    if (element.hasAttribute(\"unmarshaller\")) {\n      unmarshallerReference=new RuntimeBeanReference(element.getAttribute(\"unmarshaller\"));\n    }\n else {\n      unmarshallerReference=marshallerReference;\n    }\n    RootBeanDefinition marshallingProcessorDef=createBeanDefinition(MarshallingPayloadMethodProcessor.class,source);\n    marshallingProcessorDef.getPropertyValues().add(\"marshaller\",marshallerReference);\n    marshallingProcessorDef.getPropertyValues().add(\"unmarshaller\",unmarshallerReference);\n    argumentResolvers.add(marshallingProcessorDef);\n    returnValueHandlers.add(marshallingProcessorDef);\n  }\n  adapterDef.getPropertyValues().add(\"methodArgumentResolvers\",argumentResolvers);\n  adapterDef.getPropertyValues().add(\"methodReturnValueHandlers\",returnValueHandlers);\n  parserContext.getReaderContext().registerWithGeneratedName(adapterDef);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java",
    "Start": 5650,
    "Stop": 9302,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "registerEndpointAdapters"
}
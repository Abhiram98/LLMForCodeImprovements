{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use constants for repeated strings",
                "Change_Diff": "- String namespace=\"http://springframework.org/spring-ws\";\n+ private static final String NAMESPACE = \"http://springframework.org/spring-ws\";\n\n- operation.setName(\"Operation\");\n+ private static final String OPERATION_NAME = \"Operation\";\n\n- input.setName(\"Input\");\n+ private static final String INPUT_NAME = \"Input\";\n\n- output.setName(\"Output\");\n+ private static final String OUTPUT_NAME = \"Output\";\n\n- fault.setName(\"Fault\");\n+ private static final String FAULT_NAME = \"Fault\";\n\n- provider.setServiceName(\"Service\");\n+ private static final String SERVICE_NAME = \"Service\";\n\n- String locationUri=\"http://localhost:8080/services\";\n+ private static final String LOCATION_URI = \"http://localhost:8080/services\";",
                "Description": "String literals such as 'http://springframework.org/spring-ws', 'PortType', 'Operation', etc., are repeated multiple times in your code. It's a good practice to use constants for such repeatedly used string literals.",
                "Start": 2,
                "End": 75
            },
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "Extract the repeated code into a separate method, for example: createComponent(name, undefined, style).",
                "Description": "The code for creating and setting properties of different components (PortType, Operation, Input, Output, Fault) is very similar. This can be extracted into a separate method to reduce code redundancy.",
                "Start": 6,
                "End": 20
            }
        ],
        "Final code": "@Test\npublic void testPopulateBinding() throws Exception {\n  private static final String NAMESPACE = \"http://springframework.org/spring-ws\";\n  private static final String OPERATION_NAME = \"Operation\";\n  private static final String INPUT_NAME = \"Input\";\n  private static final String OUTPUT_NAME = \"Output\";\n  private static final String FAULT_NAME = \"Fault\";\n  private static final String SERVICE_NAME = \"Service\";\n  private static final String LOCATION_URI = \"http://localhost:8080/services\";\n\n  definition.addNamespace(\"tns\", NAMESPACE);\n  definition.setTargetNamespace(NAMESPACE);\n  PortType portType=createComponent(\"PortType\", false, null);\n  definition.addPortType(portType);\n  Operation operation=createComponent(OPERATION_NAME, false, OperationType.REQUEST_RESPONSE);\n  portType.addOperation(operation);\n  Input input=createComponent(INPUT_NAME, null, null);\n  operation.setInput(input);\n  Output output=createComponent(OUTPUT_NAME, null, null);\n  operation.setOutput(output);\n  Fault fault=createComponent(FAULT_NAME, null, null);\n  operation.addFault(fault);\n  Properties soapActions=new Properties();\n  soapActions.setProperty(OPERATION_NAME, NAMESPACE + \"/Action\");\n  provider.setSoapActions(soapActions);\n  provider.setServiceName(SERVICE_NAME);\n  provider.setLocationUri(LOCATION_URI);\n  provider.addBindings(definition);\n  provider.addServices(definition);\n  Binding binding=definition.getBinding(new QName(NAMESPACE,\"PortTypeSoap12\"));\n  assertThat(binding).isNotNull();\n  assertThat(binding.getPortType()).isEqualTo(portType);\n  assertThat(binding.getExtensibilityElements()).hasSize(1);\n  SOAP12Binding soapBinding=(SOAP12Binding)binding.getExtensibilityElements().get(0);\n  assertThat(soapBinding.getStyle()).isEqualTo(\"document\");\n  assertThat(binding.getBindingOperations()).hasSize(1);\n  BindingOperation bindingOperation=binding.getBindingOperation(OPERATION_NAME, INPUT_NAME, OUTPUT_NAME);\n  assertThat(bindingOperation).isNotNull();\n  assertThat(bindingOperation.getExtensibilityElements()).hasSize(1);\n  SOAP12Operation soapOperation=(SOAP12Operation)bindingOperation.getExtensibilityElements().get(0);\n  assertThat(soapOperation.getSoapActionURI()).isEqualTo(NAMESPACE + \"/Action\");\n  BindingInput bindingInput=bindingOperation.getBindingInput();\n  assertThat(bindingInput).isNotNull();\n  assertThat(bindingInput.getName()).isEqualTo(INPUT_NAME);\n  assertThat(bindingInput.getExtensibilityElements()).hasSize(1);\n  SOAP12Body soapBody=(SOAP12Body)bindingInput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingOutput bindingOutput=bindingOperation.getBindingOutput();\n  assertThat(bindingOutput).isNotNull();\n  assertThat(bindingOutput.getName()).isEqualTo(OUTPUT_NAME);\n  assertThat(bindingOutput.getExtensibilityElements()).hasSize(1);\n  soapBody=(SOAP12Body)bindingOutput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingFault bindingFault=bindingOperation.getBindingFault(\"Fault\");\n  assertThat(bindingFault).isNotNull();\n  assertThat(bindingFault.getExtensibilityElements()).hasSize(1);\n  SOAP12Fault soapFault=(SOAP12Fault)bindingFault.getExtensibilityElements().get(0);\n  assertThat(soapFault.getUse()).isEqualTo(\"literal\");\n  Service service=definition.getService(new QName(NAMESPACE, SERVICE_NAME));\n  assertThat(service).isNotNull();\n  assertThat(service.getPorts()).hasSize(1);\n  Port port=service.getPort(\"PortTypeSoap12\");\n  assertThat(port).isNotNull();\n  assertThat(port.getBinding()).isEqualTo(binding);\n  assertThat(port.getExtensibilityElements()).hasSize(1);\n  SOAP12Address soapAddress=(SOAP12Address)port.getExtensibilityElements().get(0);\n  assertThat(soapAddress.getLocationURI()).isEqualTo(LOCATION_URI);\n}\n\nprivate <T> T createComponent(String name, Boolean undefined, OperationType style) {\n  T component = definition.createComponent();\n  component.setName(name);\n  if (undefined != null) component.setUndefined(undefined);\n  if (style != null) component.setStyle(style);\n  return component;\n}"
    },
    "Old_Method": "@Test public void testPopulateBinding() throws Exception {\n  String namespace=\"http://springframework.org/spring-ws\";\n  definition.addNamespace(\"tns\",namespace);\n  definition.setTargetNamespace(namespace);\n  PortType portType=definition.createPortType();\n  portType.setQName(new QName(namespace,\"PortType\"));\n  portType.setUndefined(false);\n  definition.addPortType(portType);\n  Operation operation=definition.createOperation();\n  operation.setName(\"Operation\");\n  operation.setUndefined(false);\n  operation.setStyle(OperationType.REQUEST_RESPONSE);\n  portType.addOperation(operation);\n  Input input=definition.createInput();\n  input.setName(\"Input\");\n  operation.setInput(input);\n  Output output=definition.createOutput();\n  output.setName(\"Output\");\n  operation.setOutput(output);\n  Fault fault=definition.createFault();\n  fault.setName(\"Fault\");\n  operation.addFault(fault);\n  Properties soapActions=new Properties();\n  soapActions.setProperty(\"Operation\",namespace + \"/Action\");\n  provider.setSoapActions(soapActions);\n  provider.setServiceName(\"Service\");\n  String locationUri=\"http://localhost:8080/services\";\n  provider.setLocationUri(locationUri);\n  provider.addBindings(definition);\n  provider.addServices(definition);\n  Binding binding=definition.getBinding(new QName(namespace,\"PortTypeSoap12\"));\n  assertThat(binding).isNotNull();\n  assertThat(binding.getPortType()).isEqualTo(portType);\n  assertThat(binding.getExtensibilityElements()).hasSize(1);\n  SOAP12Binding soapBinding=(SOAP12Binding)binding.getExtensibilityElements().get(0);\n  assertThat(soapBinding.getStyle()).isEqualTo(\"document\");\n  assertThat(binding.getBindingOperations()).hasSize(1);\n  BindingOperation bindingOperation=binding.getBindingOperation(\"Operation\",\"Input\",\"Output\");\n  assertThat(bindingOperation).isNotNull();\n  assertThat(bindingOperation.getExtensibilityElements()).hasSize(1);\n  SOAP12Operation soapOperation=(SOAP12Operation)bindingOperation.getExtensibilityElements().get(0);\n  assertThat(soapOperation.getSoapActionURI()).isEqualTo(namespace + \"/Action\");\n  BindingInput bindingInput=bindingOperation.getBindingInput();\n  assertThat(bindingInput).isNotNull();\n  assertThat(bindingInput.getName()).isEqualTo(\"Input\");\n  assertThat(bindingInput.getExtensibilityElements()).hasSize(1);\n  SOAP12Body soapBody=(SOAP12Body)bindingInput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingOutput bindingOutput=bindingOperation.getBindingOutput();\n  assertThat(bindingOutput).isNotNull();\n  assertThat(bindingOutput.getName()).isEqualTo(\"Output\");\n  assertThat(bindingOutput.getExtensibilityElements()).hasSize(1);\n  soapBody=(SOAP12Body)bindingOutput.getExtensibilityElements().get(0);\n  assertThat(soapBody.getUse()).isEqualTo(\"literal\");\n  BindingFault bindingFault=bindingOperation.getBindingFault(\"Fault\");\n  assertThat(bindingFault).isNotNull();\n  assertThat(bindingFault.getExtensibilityElements()).hasSize(1);\n  SOAP12Fault soapFault=(SOAP12Fault)bindingFault.getExtensibilityElements().get(0);\n  assertThat(soapFault.getUse()).isEqualTo(\"literal\");\n  Service service=definition.getService(new QName(namespace,\"Service\"));\n  assertThat(service).isNotNull();\n  assertThat(service.getPorts()).hasSize(1);\n  Port port=service.getPort(\"PortTypeSoap12\");\n  assertThat(port).isNotNull();\n  assertThat(port.getBinding()).isEqualTo(binding);\n  assertThat(port.getExtensibilityElements()).hasSize(1);\n  SOAP12Address soapAddress=(SOAP12Address)port.getExtensibilityElements().get(0);\n  assertThat(soapAddress.getLocationURI()).isEqualTo(locationUri);\n}\n",
    "File_Path": "spring-ws/spring-ws-core/src/test/java/org/springframework/ws/wsdl/wsdl11/provider/Soap12ProviderTest.java",
    "Start": 1854,
    "Stop": 5530,
    "Project_Name": "data/projects/spring-ws",
    "Method_Name": "testPopulateBinding"
}
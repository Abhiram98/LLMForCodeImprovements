{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Add null checks",
                "Change_Diff": "+ if(httpServletRequest == null) {\n+     throw new IllegalArgumentException(\"Request cannot be null.\");\n+ }\n\n+ if(httpServletRequest.getCookies() == null) {\n+     throw new IllegalArgumentException(\"No cookies present in the request.\");\n+ }",
                "Description": "Add null checks for `httpServletRequest` and `httpServletRequest.getCookies()` as they can potentially return null, causing NullPointerExceptions. This enhances the robustness of the code.",
                "Start": 6,
                "End": 14
            },
            {
                "Improvement": "Refactor switch-case to use Map",
                "Change_Diff": "- switch (propertyType) {\n- ...\n- }\n\n+ Map<PropertyType, Function<String, String>> propertyTypeStrategies = new HashMap<>();\n+ propertyTypeStrategies.put(PropertyType.HEADER, httpServletRequest::getHeader);\n+ propertyTypeStrategies.put(PropertyType.COOKIE, name -> GeneralUtils.extractValuesFromCookies(httpServletRequest.getCookies()).get(name));\n+ propertyTypeStrategies.put(PropertyType.QUERY_PARAM, httpServletRequest::getParameter);\n+ propertyTypeStrategies.put(PropertyType.FORM_DATA, httpServletRequest::getParameter);\n+ propertyTypeStrategies.put(PropertyType.PATH_PARAM, name -> extractPathParam(httpServletRequest, name));\n\n+ value = propertyTypeStrategies.get(propertyType).apply(value);",
                "Description": "Refactor the switch-case structure to use a Map of strategies. This will make the code more maintainable and easier to extend. For each case, create a functional interface that gets the value as per the PropertyType and stores it in the Map.",
                "Start": 16,
                "End": 30
            },
            {
                "Improvement": "Use Optional to avoid null values",
                "Change_Diff": "- templateData.put(key,value);\n+ templateData.put(key, Optional.ofNullable(value).orElse(\"\");",
                "Description": "Use Java 8's Optional to avoid potential NullPointerExceptions when fetching values from the Map. This enhances the robustness of the code.",
                "Start": 32,
                "End": 32
            }
        ],
        "Final code": "private Map<String, Object> generateFreemakerTemplateData(String jsonKeyValuePairs){\n  JSONObject jsonObject=new JSONObject(jsonKeyValuePairs.trim());\n  Iterator<String> keys=jsonObject.keys();\n  ServletRequestAttributes servletRequestAttributes=(ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n  HttpServletRequest httpServletRequest=servletRequestAttributes.getRequest();\n\n  if(httpServletRequest == null) {\n      throw new IllegalArgumentException(\"Request cannot be null.\");\n  }\n\n  if(httpServletRequest.getCookies() == null) {\n      throw new IllegalArgumentException(\"No cookies present in the request.\");\n  }\n\n  Map<String, Object> templateData=new HashMap<>();\n  while (keys.hasNext()) {\n    String key=keys.next();\n    String value=jsonObject.get(key).toString();\n    String[] proTypeArr=value.split(\"\\\\.\",2);\n    PropertyType propertyType=PropertyType.getEnum(proTypeArr[0]);\n\n    if (!proTypeArr[0].isEmpty()) {\n      value=proTypeArr[1];\n    }\n\n    Map<PropertyType, Function<String, String>> propertyTypeStrategies = new HashMap<>();\n    propertyTypeStrategies.put(PropertyType.HEADER, httpServletRequest::getHeader);\n    propertyTypeStrategies.put(PropertyType.COOKIE, name -> GeneralUtils.extractValuesFromCookies(httpServletRequest.getCookies()).get(name));\n    propertyTypeStrategies.put(PropertyType.QUERY_PARAM, httpServletRequest::getParameter);\n    propertyTypeStrategies.put(PropertyType.FORM_DATA, httpServletRequest::getParameter);\n    propertyTypeStrategies.put(PropertyType.PATH_PARAM, name -> extractPathParam(httpServletRequest, name));\n\n    value = propertyTypeStrategies.get(propertyType).apply(value);\n    templateData.put(key, Optional.ofNullable(value).orElse(\"\"));\n  }\n\n  return templateData;\n}"
    },
    "Old_Method": "private Map<String,Object> generateFreemakerTemplateData(String jsonKeyValuePairs){\n  JSONObject jsonObject=new JSONObject(jsonKeyValuePairs.trim());\n  Iterator<String> keys=jsonObject.keys();\n  ServletRequestAttributes servletRequestAttributes=(ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n  HttpServletRequest httpServletRequest=servletRequestAttributes.getRequest();\n  Map<String,Object> templateData=new HashMap<>();\n  while (keys.hasNext()) {\n    String key=keys.next();\n    String value=jsonObject.get(key).toString();\n    String[] proTypeArr=value.split(\"\\\\.\",2);\n    PropertyType propertyType=PropertyType.getEnum(proTypeArr[0]);\n    if (!proTypeArr[0].isEmpty()) {\n      value=proTypeArr[1];\n    }\nswitch (propertyType) {\ncase HEADER:\n      value=httpServletRequest.getHeader(value);\n    break;\ncase COOKIE:\n  value=GeneralUtils.extractValuesFromCookies(httpServletRequest.getCookies()).get(value);\nbreak;\ncase QUERY_PARAM:\nvalue=httpServletRequest.getParameter(value);\nbreak;\ncase FORM_DATA:\nvalue=httpServletRequest.getParameter(value);\nbreak;\ncase PATH_PARAM:\nvalue=extractPathParam(httpServletRequest,value);\nbreak;\n}\ntemplateData.put(key,value);\n}\nreturn templateData;\n}\n",
    "File_Path": "spring-security-abac/sdk/src/main/java/org/wso2/spring/security/abac/util/XacmlAuthRequestBuilder.java",
    "Start": 2835,
    "Stop": 4525,
    "Project_Name": "data/projects/spring-security-abac",
    "Method_Name": "generateFreemakerTemplateData"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use private method to load properties",
                "Change_Diff": "- Properties properties=PropertiesLoaderUtils.loadAllProperties(\"application.properties\");\n+ private Properties loadProperties() throws IOException {",
                "Description": "A private method to load properties would make the code cleaner and more reusable. This method would throw IOException which should be handled where it's been called.",
                "Start": 2,
                "End": 2
            },
            {
                "Improvement": "Extract SSL Context creation to a separate method",
                "Change_Diff": "- this.httpClient=HttpClients.custom().setSSLContext(...).build();\n+ private SSLContext createSSLContext() throws Exception {",
                "Description": "Extracting the SSL Context creation into a separate method would make the code cleaner and easier to debug and maintain. This method would throw Exception which should be handled where it's been called.",
                "Start": 19,
                "End": 19
            },
            {
                "Improvement": "Extract HttpHeaders initialization to a separate method",
                "Change_Diff": "- this.restHeaders=new HttpHeaders();\n+ private HttpHeaders createHeaders() {",
                "Description": "Extracting HttpHeaders initialization into a separate method would make the code cleaner and easier to understand. This method would return new HttpHeaders object with all needed settings.",
                "Start": 25,
                "End": 28
            }
        ],
        "Final code": "public XacmlAttributeHandler(){\n  try {\n    Properties properties = loadProperties();\n    ...\n  } catch (  IOException e) {\n    ...\n  }\n  ...\n  try {\n    this.httpClient=HttpClients.custom().setSSLContext(createSSLContext()).build();\n  } catch (  Exception e) {\n    ...\n  }\n  this.restHeaders = createHeaders();\n  ...\n}\n\nprivate Properties loadProperties() throws IOException {\n  return PropertiesLoaderUtils.loadAllProperties(\"application.properties\");\n}\n\nprivate SSLContext createSSLContext() throws Exception {\n  return SSLContextBuilder.create().loadKeyMaterial(...).loadTrustMaterial(...).build();\n}\n\nprivate HttpHeaders createHeaders() {\n  HttpHeaders headers = new HttpHeaders();\n  headers.setContentType(MediaType.APPLICATION_JSON);\n  headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n  headers.set(\"WSO2-Identity-User\",\"admin\");\n  return headers;\n}"
    },
    "Old_Method": "public XacmlAttributeHandler(){\n  try {\n    Properties properties=PropertiesLoaderUtils.loadAllProperties(\"application.properties\");\n    XACML_PDP_ENTITLEMENT_SERVICE_URL=properties.getProperty(\"xacml.pdp.url.entitlement.service\");\n    TRUST_STORE=properties.getProperty(\"xacml.pdp.trustStore\");\n    TRUST_STORE_PASSWORD=properties.getProperty(\"xacml.pdp.trustStore.password\");\n    KEY_STORE=properties.getProperty(\"xacml.pdp.keyStore\");\n    KEY_STORE_PASSWORD=properties.getProperty(\"xacml.pdp.keyStore.password\");\n  }\n catch (  IOException e) {\n    logger.error(\"Failed to read properties from application.properties\",e);\n    stopApplication();\n  }\n  if (XACML_PDP_ENTITLEMENT_SERVICE_URL == null) {\n    logger.error(\"xacml.pdp.url.entitlement.service property is null in application.properties\");\n    stopApplication();\n  }\n  CacheManager cacheManager=EhCacheManager.getInstance();\n  this.authCache=cacheManager.getCache(\"authCache\",String.class,String.class,60,100);\n  this.entitlementAttributesCache=cacheManager.getCache(\"entitlementCache\",String.class,JSONObject.class,60,100);\n  this.apiResourceListCache=cacheManager.getCache(\"apiResourceList\",String.class,JSONObject.class,60,100);\n  try {\n    this.httpClient=HttpClients.custom().setSSLContext(SSLContextBuilder.create().loadKeyMaterial(loadPfx(\"classpath:\".concat(KEY_STORE),KEY_STORE_PASSWORD.toCharArray()),KEY_STORE_PASSWORD.toCharArray()).loadTrustMaterial(ResourceUtils.getFile(\"classpath:\".concat(TRUST_STORE)),TRUST_STORE_PASSWORD.toCharArray()).build()).build();\n  }\n catch (  Exception e) {\n    logger.error(\"Failed to read trustStore/keyStore\",e);\n    SpringApplication.run(XacmlAttributeHandler.class).close();\n  }\n  this.restHeaders=new HttpHeaders();\n  this.restHeaders.setContentType(MediaType.APPLICATION_JSON);\n  this.restHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));\n  this.restHeaders.set(\"WSO2-Identity-User\",\"admin\");\n  logger.info(\"XacmlAttributeHandler successfully initiated\");\n}\n",
    "File_Path": "spring-security-abac/sdk/src/main/java/org/wso2/spring/security/abac/XacmlAttributeHandler.java",
    "Start": 1818,
    "Stop": 4341,
    "Project_Name": "data/projects/spring-security-abac",
    "Method_Name": "XacmlAttributeHandler"
}
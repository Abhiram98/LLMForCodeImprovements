{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use JSONObject's getEnum() method",
                "Change_Diff": "- PropertyType propertyType=PropertyType.getEnum(proTypeArr[0]);\n- if (!proTypeArr[0].isEmpty()) {\n-     value=proTypeArr[1];\n- }\n+ PropertyType propertyType = jsonObject.getEnum(PropertyType.class, key);",
                "Description": "Instead of manually parsing the PropertyType enum, you can use the getEnum() method of JSONObject which is designed specifically for this purpose. This will make your code cleaner and more efficient.",
                "Start": 7,
                "End": 9
            },
            {
                "Improvement": "Use JSONObject's optString() method",
                "Change_Diff": "- String value=jsonObject.get(key).toString();\n+ String value=jsonObject.optString(key);",
                "Description": "Instead of calling toString() on the value associated with a key, you can use the optString() method. This will return an empty string if the key is not present or if the associated value is not a string, which avoids potential NullPointerExceptions.",
                "Start": 7,
                "End": 7
            },
            {
                "Improvement": "Use try-with-resources for HttpServletRequest",
                "Change_Diff": "- HttpServletRequest httpServletRequest=servletRequestAttributes.getRequest();\n+ try (HttpServletRequest httpServletRequest = servletRequestAttributes.getRequest()) {",
                "Description": "To ensure that the HttpServletRequest is properly closed even in case of exceptions, use a try-with-resources statement. This will automatically close the request when it's no longer needed.",
                "Start": 5,
                "End": 32
            }
        ],
        "Final code": "private Map<String,Object> generateFreemakerTemplateData(String jsonKeyValuePairs){\n  JSONObject jsonObject=new JSONObject(jsonKeyValuePairs.trim());\n  Iterator<String> keys=jsonObject.keys();\n  ServletRequestAttributes servletRequestAttributes=(ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n  try (HttpServletRequest httpServletRequest = servletRequestAttributes.getRequest()) {\n    Map<String,Object> templateData=new HashMap<>();\n    while (keys.hasNext()) {\n      String key=keys.next();\n      String value=jsonObject.optString(key);\n      PropertyType propertyType = jsonObject.getEnum(PropertyType.class, key);\n      switch (propertyType) {\n        case HEADER:\n          value=httpServletRequest.getHeader(value);\n        break;\n        case COOKIE:\n          value=GeneralUtils.extractValuesFromCookies(httpServletRequest.getCookies()).get(value);\n        break;\n        case QUERY_PARAM:\n          value=httpServletRequest.getParameter(value);\n        break;\n        case FORM_DATA:\n          value=httpServletRequest.getParameter(value);\n        break;\n        case PATH_PARAM:\n          value=extractPathParam(httpServletRequest,value);\n        break;\n      }\n    templateData.put(key,value);\n  }\n  return templateData;\n}"
    },
    "Old_Method": "private Map<String,Object> generateFreemakerTemplateData(String jsonKeyValuePairs){\n  JSONObject jsonObject=new JSONObject(jsonKeyValuePairs.trim());\n  Iterator<String> keys=jsonObject.keys();\n  ServletRequestAttributes servletRequestAttributes=(ServletRequestAttributes)RequestContextHolder.currentRequestAttributes();\n  HttpServletRequest httpServletRequest=servletRequestAttributes.getRequest();\n  Map<String,Object> templateData=new HashMap<>();\n  while (keys.hasNext()) {\n    String key=keys.next();\n    String value=jsonObject.get(key).toString();\n    String[] proTypeArr=value.split(\"\\\\.\",2);\n    PropertyType propertyType=PropertyType.getEnum(proTypeArr[0]);\n    if (!proTypeArr[0].isEmpty()) {\n      value=proTypeArr[1];\n    }\nswitch (propertyType) {\ncase HEADER:\n      value=httpServletRequest.getHeader(value);\n    break;\ncase COOKIE:\n  value=GeneralUtils.extractValuesFromCookies(httpServletRequest.getCookies()).get(value);\nbreak;\ncase QUERY_PARAM:\nvalue=httpServletRequest.getParameter(value);\nbreak;\ncase FORM_DATA:\nvalue=httpServletRequest.getParameter(value);\nbreak;\ncase PATH_PARAM:\nvalue=extractPathParam(httpServletRequest,value);\nbreak;\n}\ntemplateData.put(key,value);\n}\nreturn templateData;\n}\n",
    "File_Path": "spring-security-abac/sdk/src/main/java/org/wso2/spring/security/abac/util/XacmlAuthRequestBuilder.java",
    "Start": 2835,
    "Stop": 4525,
    "Project_Name": "data/projects/spring-security-abac",
    "Method_Name": "generateFreemakerTemplateData"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Split long lines into multiple lines",
                "Change_Diff": "- String key=Base64.getEncoder().encodeToString(policyName.concat(jsonKeyValuePairs).concat(getTemplateDataAsAString(templateData)).trim().getBytes());\n+ String key=Base64.getEncoder()\n  .encodeToString(policyName.concat(jsonKeyValuePairs)\n  .concat(getTemplateDataAsAString(templateData))\n  .trim()\n  .getBytes());",
                "Description": "Long lines of code can be difficult to read and understand. Splitting them into multiple lines can improve readability.",
                "Start": 4,
                "End": 4
            },
            {
                "Improvement": "Extract magic string as constant",
                "Change_Diff": "- Configuration cfg=new Configuration(new Version(\"2.3.23\"));\n+ Configuration cfg=new Configuration(new Version(TEMPLATE_VERSION));\n\n- cfg.setDefaultEncoding(\"UTF-8\");\n+ cfg.setDefaultEncoding(DEFAULT_ENCODING);\n\n- Template template=cfg.getTemplate(ATTRIBUTE_CONFIG_FILE_NAME);\n+ Template template=cfg.getTemplate(CONFIG_FILE_NAME);",
                "Description": "Magic strings such as the version number '2.3.23', the default encoding 'UTF-8', and the attribute config file name could be extracted as constants at the top of the class. This way, if they need to be changed, they can be changed in one place rather than in every place they are used.",
                "Start": 11,
                "End": 13
            },
            {
                "Improvement": "Use explicit error messages",
                "Change_Diff": "- throw new AttributeEvaluatorException(\"Failed to build the XACML Json request for policy with name : \" + policyName,e);\n+ throw new AttributeEvaluatorException(\"Failed to build the XACML Json request for policy with name : \" + policyName + \" due to: \" + e.getMessage(), e);",
                "Description": "Instead of using generic error messages, use more explicit messages that clearly describe what went wrong. This can make debugging easier.",
                "Start": 22,
                "End": 22
            }
        ],
        "Final code": "@Override public String createAuthRequest(String policyName,String jsonKeyValuePairs){\n  Map<String,Object> templateData=generateFreemakerTemplateData(jsonKeyValuePairs);\n  String key=Base64.getEncoder()\n    .encodeToString(policyName.concat(jsonKeyValuePairs)\n    .concat(getTemplateDataAsAString(templateData))\n    .trim()\n    .getBytes());\n  String cachedRequest=this.requestBuilderCache.get(key);\n  if (cachedRequest != null) {\n    return cachedRequest;\n  }\n  String xacmlRequest;\n  try (StringWriter out=new StringWriter()){\n    Configuration cfg=new Configuration(new Version(TEMPLATE_VERSION));\n    cfg.setClassForTemplateLoading(this.getClass(),\"/\");\n    cfg.setDefaultEncoding(DEFAULT_ENCODING);\n    Template template=cfg.getTemplate(CONFIG_FILE_NAME);\n    template.process(templateData,out);\n    xacmlRequest=new JSONObject(out.toString()).get(policyName).toString();\n    out.flush();\n  }\n catch (IOException|TemplateException e) {\n    throw new AttributeEvaluatorException(\"Failed to build the XACML Json request for policy with name : \" + policyName + \" due to: \" + e.getMessage(), e);\n  }\n  if (xacmlRequest == null || xacmlRequest.isEmpty()) {\n    throw new AttributeEvaluatorException(\"Generated XACML request is empty or NULL for policy with name : \" + policyName);\n  }\n  return this.requestBuilderCache.putIfAbsent(key,xacmlRequest);\n}"
    },
    "Old_Method": "@Override public String createAuthRequest(String policyName,String jsonKeyValuePairs){\n  Map<String,Object> templateData=generateFreemakerTemplateData(jsonKeyValuePairs);\n  String key=Base64.getEncoder().encodeToString(policyName.concat(jsonKeyValuePairs).concat(getTemplateDataAsAString(templateData)).trim().getBytes());\n  String cachedRequest=this.requestBuilderCache.get(key);\n  if (cachedRequest != null) {\n    return cachedRequest;\n  }\n  String xacmlRequest;\n  try (StringWriter out=new StringWriter()){\n    Configuration cfg=new Configuration(new Version(\"2.3.23\"));\n    cfg.setClassForTemplateLoading(this.getClass(),\"/\");\n    cfg.setDefaultEncoding(\"UTF-8\");\n    Template template=cfg.getTemplate(ATTRIBUTE_CONFIG_FILE_NAME);\n    template.process(templateData,out);\n    xacmlRequest=new JSONObject(out.toString()).get(policyName).toString();\n    out.flush();\n  }\n catch (  IOException|TemplateException e) {\n    throw new AttributeEvaluatorException(\"Failed to build the XACML Json request for policy with name : \" + policyName,e);\n  }\n  if (xacmlRequest == null || xacmlRequest.isEmpty()) {\n    throw new AttributeEvaluatorException(\"Generated XACML request is empty or NULL for policy with name : \" + policyName);\n  }\n  return this.requestBuilderCache.putIfAbsent(key,xacmlRequest);\n}\n",
    "File_Path": "spring-security-abac/sdk/src/main/java/org/wso2/spring/security/abac/util/XacmlAuthRequestBuilder.java",
    "Start": 1262,
    "Stop": 2829,
    "Project_Name": "data/projects/spring-security-abac",
    "Method_Name": "createAuthRequest"
}
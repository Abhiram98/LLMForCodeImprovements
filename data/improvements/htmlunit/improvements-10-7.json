{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract complex conditionals into methods",
                "Change_Diff": "- if (!isSameOrigin_ && isPreflight()) {...}\n+ if (shouldPreflightRequest()) {...}\n- if (!isSameOrigin_) {...}\n+ if (isDifferentOrigin()) {...}\n- if (allowOriginResponse) {...}\n+ if (isAllowedOrigin()) {...}\n- if (!allowOriginResponse) {...}\n+ if (isNotAllowedOrigin()) {...}",
                "Description": "The method has several conditionals that are difficult to understand. Extracting these conditionals into separate methods with descriptive names can improve the code readability.",
                "Start": 11,
                "End": 112
            },
            {
                "Improvement": "Extract repetitive code into methods",
                "Change_Diff": "- fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n+ fireReadyStateChangeEvent();\n- fireJavascriptEvent(Event.TYPE_ERROR);\n+ fireErrorEvent();\n- fireJavascriptEvent(Event.TYPE_LOAD);\n+ fireLoadEvent();\n- fireJavascriptEvent(Event.TYPE_LOAD_END);\n+ fireLoadEndEvent();",
                "Description": "There are several instances where the same or similar code is written multiple times. This repetitive code should be extracted into a separate method to improve code reusability.",
                "Start": 31,
                "End": 112
            },
            {
                "Improvement": "Use try-with-resources for WebClient usage",
                "Change_Diff": "- final WebClient wc=getWindow().getWebWindow().getWebClient();\n+ try (final WebClient wc=getWindow().getWebWindow().getWebClient()) {...}",
                "Description": "The WebClient object should be in a try-with-resources statement to ensure that it is automatically closed at the end of the statement and that any underlying resources are also closed.",
                "Start": 8,
                "End": 112
            }
        ],
        "Final code": "void doSend(){\n  final BrowserVersion browserVersion=getBrowserVersion();\n  if (async_ && browserVersion.hasFeature(XHR_LOAD_START_ASYNC)) {\n    fireLoadStartEvent();\n  }\n  try (final WebClient wc=getWindow().getWebWindow().getWebClient()) {\n    boolean preflighted=false;\n    if (shouldPreflightRequest()) {\n      preflighted=true;\n      prepareAndExecutePreflightRequest();\n      if (!isPreflightAuthorized()) {\n        handlePreflightUnauthorized();\n      }\n    }\n    if (isDifferentOrigin()) {\n      handleDifferentOriginRequest();\n    }\n    webResponse_=wc.loadWebResponse(webRequest_);\n    handleWebResponse();\n    if (isAllowedOrigin()) {\n      handleAllowedOriginResponse();\n    }\n    if (isNotAllowedOrigin()) {\n      handleNotAllowedOriginResponse();\n    }\n    updateStateAndFireEvents();\n  }\n  catch (final IOException e) {\n    handleIOException(e);\n  }\n}"
    },
    "Old_Method": "/** \n * The real send job.\n */\nvoid doSend(){\n  final BrowserVersion browserVersion=getBrowserVersion();\n  if (async_ && browserVersion.hasFeature(XHR_LOAD_START_ASYNC)) {\n    fireJavascriptEvent(Event.TYPE_LOAD_START);\n  }\n  final WebClient wc=getWindow().getWebWindow().getWebClient();\n  boolean preflighted=false;\n  try {\n    if (!isSameOrigin_ && isPreflight()) {\n      preflighted=true;\n      final WebRequest preflightRequest=new WebRequest(webRequest_.getUrl(),HttpMethod.OPTIONS);\n      preflightRequest.addHint(HttpHint.BlockCookies);\n      final String originHeaderValue=webRequest_.getAdditionalHeaders().get(HttpHeader.ORIGIN);\n      preflightRequest.setAdditionalHeader(HttpHeader.ORIGIN,originHeaderValue);\n      preflightRequest.setAdditionalHeader(HttpHeader.ACCESS_CONTROL_REQUEST_METHOD,webRequest_.getHttpMethod().name());\n      final StringBuilder builder=new StringBuilder();\n      for (      final Entry<String,String> header : new TreeMap<>(webRequest_.getAdditionalHeaders()).entrySet()) {\n        final String name=org.htmlunit.util.StringUtils.toRootLowerCase(header.getKey());\n        if (isPreflightHeader(name,header.getValue())) {\n          if (builder.length() != 0) {\n            builder.append(',');\n          }\n          builder.append(name);\n        }\n      }\n      preflightRequest.setAdditionalHeader(HttpHeader.ACCESS_CONTROL_REQUEST_HEADERS,builder.toString());\n      if (timeout_ > 0) {\n        preflightRequest.setTimeout(timeout_);\n      }\n      final WebResponse preflightResponse=wc.loadWebResponse(preflightRequest);\n      if (!preflightResponse.isSuccessOrUseProxyOrNotModified() || !isPreflightAuthorized(preflightResponse)) {\n        setState(DONE);\n        if (async_ || browserVersion.hasFeature(XHR_HANDLE_SYNC_NETWORK_ERRORS)) {\n          fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n          fireJavascriptEvent(Event.TYPE_ERROR);\n          fireJavascriptEvent(Event.TYPE_LOAD_END);\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"No permitted request for URL \" + webRequest_.getUrl());\n        }\n        throw JavaScriptEngine.throwAsScriptRuntimeEx(new RuntimeException(\"No permitted \\\"Access-Control-Allow-Origin\\\" header.\"));\n      }\n    }\n    if (!isSameOrigin_) {\n      if (!isWithCredentials()) {\n        webRequest_.addHint(HttpHint.BlockCookies);\n      }\n    }\n    webResponse_=wc.loadWebResponse(webRequest_);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Web response loaded successfully.\");\n    }\n    webResponse_.defaultCharsetUtf8();\n    boolean allowOriginResponse=true;\n    if (!isSameOrigin_) {\n      String value=webResponse_.getResponseHeaderValue(HttpHeader.ACCESS_CONTROL_ALLOW_ORIGIN);\n      allowOriginResponse=webRequest_.getAdditionalHeaders().get(HttpHeader.ORIGIN).equals(value);\n      if (isWithCredentials()) {\n        value=webResponse_.getResponseHeaderValue(HttpHeader.ACCESS_CONTROL_ALLOW_CREDENTIALS);\n        allowOriginResponse=allowOriginResponse && Boolean.parseBoolean(value);\n      }\n else {\n        allowOriginResponse=allowOriginResponse || ALLOW_ORIGIN_ALL.equals(value);\n      }\n    }\n    if (allowOriginResponse) {\n      if (overriddenMimeType_ != null) {\n        final int index=overriddenMimeType_.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        String charsetName=\"\";\n        if (index != -1) {\n          charsetName=overriddenMimeType_.substring(index + \"charset=\".length());\n        }\n        final Charset charset=EncodingSniffer.toCharset(charsetName);\n        final String charsetNameFinal=charsetName;\n        webResponse_=new WebResponseWrapper(webResponse_){\n          @Override public String getContentType(){\n            return overriddenMimeType_;\n          }\n          @Override public Charset getContentCharset(){\n            if (charsetNameFinal.isEmpty() || (charset == null && browserVersion.hasFeature(XHR_USE_CONTENT_CHARSET))) {\n              return super.getContentCharset();\n            }\n            return charset;\n          }\n        }\n;\n      }\n    }\n    if (!allowOriginResponse) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No permitted \\\"Access-Control-Allow-Origin\\\" header for URL \" + webRequest_.getUrl());\n      }\n      throw new NoPermittedHeaderException(\"No permitted \\\"Access-Control-Allow-Origin\\\" header.\");\n    }\n    setState(HEADERS_RECEIVED);\n    if (async_) {\n      fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      setState(LOADING);\n      fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      fireJavascriptEvent(Event.TYPE_PROGRESS);\n    }\n    setState(DONE);\n    fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n    if (!async_ && aborted_ && browserVersion.hasFeature(XHR_SEND_NETWORK_ERROR_IF_ABORTED)) {\n      throw JavaScriptEngine.constructError(\"Error\",\"Failed to execute 'send' on 'XMLHttpRequest': Failed to load '\" + webRequest_.getUrl() + \"'\");\n    }\n    if (browserVersion.hasFeature(XHR_LOAD_ALWAYS_AFTER_DONE)) {\n      fireJavascriptEventIgnoreAbort(Event.TYPE_LOAD);\n      fireJavascriptEventIgnoreAbort(Event.TYPE_LOAD_END);\n    }\n else {\n      fireJavascriptEvent(Event.TYPE_LOAD);\n      fireJavascriptEvent(Event.TYPE_LOAD_END);\n    }\n  }\n catch (  final IOException e) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"IOException: returning a network error response.\",e);\n    }\n    if (async_) {\n      if (e instanceof SocketTimeoutException && browserVersion.hasFeature(XHR_LOAD_START_ASYNC)) {\n        try {\n          webResponse_=wc.loadWebResponse(WebRequest.newAboutBlankRequest());\n        }\n catch (        final IOException eIgnored) {\n        }\n        setState(HEADERS_RECEIVED);\n        fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      }\n      if (!preflighted && HttpClientConverter.isNoHttpResponseException(e) && browserVersion.hasFeature(XHR_PROGRESS_ON_NETWORK_ERROR_ASYNC)) {\n        fireJavascriptEvent(Event.TYPE_PROGRESS);\n      }\n    }\n    webResponse_=new NetworkErrorWebResponse(webRequest_,e);\n    if (async_) {\n      setState(DONE);\n      fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      if (e instanceof SocketTimeoutException) {\n        fireJavascriptEvent(Event.TYPE_TIMEOUT);\n      }\n else {\n        fireJavascriptEvent(Event.TYPE_ERROR);\n      }\n      fireJavascriptEvent(Event.TYPE_LOAD_END);\n    }\n else {\n      setState(DONE);\n      if (browserVersion.hasFeature(XHR_HANDLE_SYNC_NETWORK_ERRORS)) {\n        fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n        if (e instanceof SocketTimeoutException) {\n          fireJavascriptEvent(Event.TYPE_TIMEOUT);\n        }\n else {\n          fireJavascriptEvent(Event.TYPE_ERROR);\n        }\n        fireJavascriptEvent(Event.TYPE_LOAD_END);\n      }\n      throw JavaScriptEngine.throwAsScriptRuntimeEx(e);\n    }\n  }\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/xml/XMLHttpRequest.java",
    "Start": 38665,
    "Stop": 48091,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "doSend"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract constants for magic values",
                "Change_Diff": "- System.getProperty(\"http.keepAlive\",\"true\");\n- System.getProperty(\"http.maxConnections\",\"5\");\n- RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\",new SocksConnectionSocketFactory()).register(\"https\",sslSocketFactory).build()\n+ System.getProperty(HTTP_KEEP_ALIVE,TRUE);\n+ System.getProperty(HTTP_MAX_CONNECTIONS,\"5\");\n+ RegistryBuilder.<ConnectionSocketFactory>create().register(HTTP,new SocksConnectionSocketFactory()).register(HTTPS,sslSocketFactory).build()",
                "Description": "There are some magic values such as 'http', 'https', 'true', and '5', which can be moved to constant values. This makes the code easier to maintain and understand.",
                "Start": 22,
                "End": 52
            },
            {
                "Improvement": "Use Optional instead of null check",
                "Change_Diff": "- connTimeToLiveTimeUnit != null ? connTimeToLiveTimeUnit : TimeUnit.MILLISECONDS\n+ Optional.ofNullable(connTimeToLiveTimeUnit).orElse(TimeUnit.MILLISECONDS)",
                "Description": "Instead of checking if connTimeToLiveTimeUnit is null, you can use Optional. This would make your code cleaner and easier to read.",
                "Start": 24,
                "End": 24
            },
            {
                "Improvement": "Handle NumberFormatException",
                "Change_Diff": "- final int max=Integer.parseInt(s);\n+ final int max;\n+ try {\n+     max = Integer.parseInt(s);\n+ } catch (NumberFormatException e) {\n+     throw new IllegalArgumentException(\"http.maxConnections should be a number\", e);\n+ }",
                "Description": "Integer.parseInt(s) can throw a NumberFormatException if the string cannot be parsed to an integer. You should handle this exception.",
                "Start": 36,
                "End": 36
            }
        ],
        "Final code": "private static final String HTTP = \"http\";\nprivate static final String HTTPS = \"https\";\nprivate static final String TRUE = \"true\";\nprivate static final String HTTP_KEEP_ALIVE = \"http.keepAlive\";\nprivate static final String HTTP_MAX_CONNECTIONS = \"http.maxConnections\";\n\nprivate static PoolingHttpClientConnectionManager createConnectionManager(final HttpClientBuilder builder) {\n  try {\n    // ... omitted code ...\n\n    final PoolingHttpClientConnectionManager poolingmgr = new PoolingHttpClientConnectionManager(RegistryBuilder.<ConnectionSocketFactory>create().register(HTTP, new SocksConnectionSocketFactory()).register(HTTPS, sslSocketFactory).build(), null, null, dnsResolver, connTimeToLive, Optional.ofNullable(connTimeToLiveTimeUnit).orElse(TimeUnit.MILLISECONDS));\n    // ... omitted code ...\n\n    if (systemProperties) {\n      String s = System.getProperty(HTTP_KEEP_ALIVE, TRUE);\n      if (TRUE.equalsIgnoreCase(s)) {\n        s = System.getProperty(HTTP_MAX_CONNECTIONS, \"5\");\n        final int max;\n        try {\n          max = Integer.parseInt(s);\n        } catch (NumberFormatException e) {\n          throw new IllegalArgumentException(\"http.maxConnections should be a number\", e);\n        }\n        poolingmgr.setDefaultMaxPerRoute(max);\n        poolingmgr.setMaxTotal(2 * max);\n      }\n    }\n    // ... omitted code ...\n    return poolingmgr;\n  } catch (final IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\n}"
    },
    "Old_Method": "/** \n * Has the exact logic in  {@link HttpClientBuilder#build()} which sets the {@code connManager} part,but with the ability to configure  {@code socketFactory}.\n */\nprivate static PoolingHttpClientConnectionManager createConnectionManager(final HttpClientBuilder builder){\n  try {\n    PublicSuffixMatcher publicSuffixMatcher=getField(builder,\"publicSuffixMatcher\");\n    if (publicSuffixMatcher == null) {\n      publicSuffixMatcher=PublicSuffixMatcherLoader.getDefault();\n    }\n    LayeredConnectionSocketFactory sslSocketFactory=getField(builder,\"sslSocketFactory\");\n    final SocketConfig defaultSocketConfig=getField(builder,\"defaultSocketConfig\");\n    final ConnectionConfig defaultConnectionConfig=getField(builder,\"defaultConnectionConfig\");\n    final boolean systemProperties=getField(builder,\"systemProperties\");\n    final int maxConnTotal=getField(builder,\"maxConnTotal\");\n    final int maxConnPerRoute=getField(builder,\"maxConnPerRoute\");\n    HostnameVerifier hostnameVerifier=getField(builder,\"hostnameVerifier\");\n    final SSLContext sslcontext=getField(builder,\"sslContext\");\n    final DnsResolver dnsResolver=getField(builder,\"dnsResolver\");\n    final long connTimeToLive=getField(builder,\"connTimeToLive\");\n    final TimeUnit connTimeToLiveTimeUnit=getField(builder,\"connTimeToLiveTimeUnit\");\n    if (sslSocketFactory == null) {\n      final String[] supportedProtocols=systemProperties ? split(System.getProperty(\"https.protocols\")) : null;\n      final String[] supportedCipherSuites=systemProperties ? split(System.getProperty(\"https.cipherSuites\")) : null;\n      if (hostnameVerifier == null) {\n        hostnameVerifier=new DefaultHostnameVerifier(publicSuffixMatcher);\n      }\n      if (sslcontext == null) {\n        if (systemProperties) {\n          sslSocketFactory=new SSLConnectionSocketFactory((SSLSocketFactory)SSLSocketFactory.getDefault(),supportedProtocols,supportedCipherSuites,hostnameVerifier);\n        }\n else {\n          sslSocketFactory=new SSLConnectionSocketFactory(SSLContexts.createDefault(),hostnameVerifier);\n        }\n      }\n else {\n        sslSocketFactory=new SSLConnectionSocketFactory(sslcontext,supportedProtocols,supportedCipherSuites,hostnameVerifier);\n      }\n    }\n    final PoolingHttpClientConnectionManager poolingmgr=new PoolingHttpClientConnectionManager(RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\",new SocksConnectionSocketFactory()).register(\"https\",sslSocketFactory).build(),null,null,dnsResolver,connTimeToLive,connTimeToLiveTimeUnit != null ? connTimeToLiveTimeUnit : TimeUnit.MILLISECONDS);\n    if (defaultSocketConfig != null) {\n      poolingmgr.setDefaultSocketConfig(defaultSocketConfig);\n    }\n    if (defaultConnectionConfig != null) {\n      poolingmgr.setDefaultConnectionConfig(defaultConnectionConfig);\n    }\n    if (systemProperties) {\n      String s=System.getProperty(\"http.keepAlive\",\"true\");\n      if (\"true\".equalsIgnoreCase(s)) {\n        s=System.getProperty(\"http.maxConnections\",\"5\");\n        final int max=Integer.parseInt(s);\n        poolingmgr.setDefaultMaxPerRoute(max);\n        poolingmgr.setMaxTotal(2 * max);\n      }\n    }\n    if (maxConnTotal > 0) {\n      poolingmgr.setMaxTotal(maxConnTotal);\n    }\n    if (maxConnPerRoute > 0) {\n      poolingmgr.setDefaultMaxPerRoute(maxConnPerRoute);\n    }\n    return poolingmgr;\n  }\n catch (  final IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java",
    "Start": 54222,
    "Stop": 58735,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "createConnectionManager"
}
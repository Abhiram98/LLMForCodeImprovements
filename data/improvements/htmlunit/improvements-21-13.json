{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "- if (value.startsWith(\"PROXY\")) {\n-   value=value.substring(6);\n-   final int colonIndex=value.indexOf(':');\n-   webRequest.setSocksProxy(false);\n-   webRequest.setProxyHost(value.substring(0,colonIndex));\n-   webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n- }\n- else if (value.startsWith(\"SOCKS\")) {\n-   value=value.substring(6);\n-   final int colonIndex=value.indexOf(':');\n-   webRequest.setSocksProxy(true);\n-   webRequest.setProxyHost(value.substring(0,colonIndex));\n-   webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n- }\n+ setProxyDetails(webRequest, value);",
                "Description": "Repeated code is found for setting proxy details when 'PROXY' or 'SOCKS' is used. This can be extracted into a new method to reduce redundancy and improve maintainability.",
                "Start": 38,
                "End": 43
            },
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "- final WebRequest wrs=new WebRequest(newUrl,webRequest.getHttpMethod());\n- wrs.setCharset(webRequest.getCharset());\n- if (webRequest.getRequestBody() != null) {\n-     if (HttpMethod.POST == webRequest.getHttpMethod() || HttpMethod.PUT == webRequest.getHttpMethod() || HttpMethod.PATCH == webRequest.getHttpMethod()) {\n-         wrs.setRequestBody(webRequest.getRequestBody());\n-         wrs.setEncodingType(webRequest.getEncodingType());\n-     }\n- }\n- else {\n-     wrs.setRequestParameters(parameters);\n- }\n- for (final Map.Entry<String,String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n-     wrs.setAdditionalHeader(entry.getKey(),entry.getValue());\n- }\n- return loadWebResponseFromWebConnection(wrs,allowedRedirects - 1);\n+ return createNewWebRequestAndLoadResponse(webRequest, newUrl, allowedRedirects, parameters);",
                "Description": "Repeated code is found for creating new WebRequest and setting its properties. This can be extracted into a new method to reduce redundancy and improve maintainability.",
                "Start": 96,
                "End": 103
            }
        ],
        "Final code": "private WebResponse loadWebResponseFromWebConnection(final WebRequest webRequest,final int allowedRedirects) throws IOException {\n// ... same code until line 37\n\nsetProxyDetails(webRequest, value);\n\n// ... same code until line 95\n\nreturn createNewWebRequestAndLoadResponse(webRequest, newUrl, allowedRedirects, parameters);\n\n// ... remaining code as before\n}\n\nprivate void setProxyDetails(WebRequest webRequest, String value) {\n  boolean isSocks = value.startsWith(\"SOCKS\");\n  value = isSocks ? value.substring(6) : value.substring(6);\n  final int colonIndex = value.indexOf(':');\n  webRequest.setSocksProxy(isSocks);\n  webRequest.setProxyHost(value.substring(0, colonIndex));\n  webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n}\n\nprivate WebResponse createNewWebRequestAndLoadResponse(WebRequest webRequest, URL newUrl, int allowedRedirects, List<NameValuePair> parameters) throws IOException {\n  final WebRequest wrs = new WebRequest(newUrl, webRequest.getHttpMethod());\n  wrs.setCharset(webRequest.getCharset());\n  if (webRequest.getRequestBody() != null) {\n    if (HttpMethod.POST == webRequest.getHttpMethod() || HttpMethod.PUT == webRequest.getHttpMethod() || HttpMethod.PATCH == webRequest.getHttpMethod()) {\n      wrs.setRequestBody(webRequest.getRequestBody());\n      wrs.setEncodingType(webRequest.getEncodingType());\n    }\n  } else {\n    wrs.setRequestParameters(parameters);\n  }\n  for (final Map.Entry<String,String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n    wrs.setAdditionalHeader(entry.getKey(),entry.getValue());\n  }\n  return loadWebResponseFromWebConnection(wrs, allowedRedirects - 1);\n}"
    },
    "Old_Method": "/** \n * Loads a  {@link WebResponse} from the server through the WebConnection.\n * @param webRequest the request\n * @param allowedRedirects the number of allowed redirects remaining\n * @throws IOException if an IO problem occurs\n * @return the resultant {@link WebResponse}\n */\nprivate WebResponse loadWebResponseFromWebConnection(final WebRequest webRequest,final int allowedRedirects) throws IOException {\n  URL url=webRequest.getUrl();\n  final HttpMethod method=webRequest.getHttpMethod();\n  final List<NameValuePair> parameters=webRequest.getRequestParameters();\n  WebAssert.notNull(\"url\",url);\n  WebAssert.notNull(\"method\",method);\n  WebAssert.notNull(\"parameters\",parameters);\n  url=UrlUtils.encodeUrl(url,getBrowserVersion().hasFeature(URL_MINIMAL_QUERY_ENCODING),webRequest.getCharset());\n  webRequest.setUrl(url);\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Load response for \" + method + \" \"+ url.toExternalForm());\n  }\n  if (webRequest.getProxyHost() == null) {\n    final ProxyConfig proxyConfig=getOptions().getProxyConfig();\n    if (proxyConfig.getProxyAutoConfigUrl() != null) {\n      if (!UrlUtils.sameFile(new URL(proxyConfig.getProxyAutoConfigUrl()),url)) {\n        String content=proxyConfig.getProxyAutoConfigContent();\n        if (content == null) {\n          content=getPage(proxyConfig.getProxyAutoConfigUrl()).getWebResponse().getContentAsString();\n          proxyConfig.setProxyAutoConfigContent(content);\n        }\n        final String allValue=ProxyAutoConfig.evaluate(content,url);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Proxy Auto-Config: value '\" + allValue + \"' for URL \"+ url);\n        }\n        String value=allValue.split(\";\")[0].trim();\n        if (value.startsWith(\"PROXY\")) {\n          value=value.substring(6);\n          final int colonIndex=value.indexOf(':');\n          webRequest.setSocksProxy(false);\n          webRequest.setProxyHost(value.substring(0,colonIndex));\n          webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n        }\n else         if (value.startsWith(\"SOCKS\")) {\n          value=value.substring(6);\n          final int colonIndex=value.indexOf(':');\n          webRequest.setSocksProxy(true);\n          webRequest.setProxyHost(value.substring(0,colonIndex));\n          webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n        }\n      }\n    }\n else     if (!proxyConfig.shouldBypassProxy(webRequest.getUrl().getHost())) {\n      webRequest.setProxyHost(proxyConfig.getProxyHost());\n      webRequest.setProxyPort(proxyConfig.getProxyPort());\n      webRequest.setProxyScheme(proxyConfig.getProxyScheme());\n      webRequest.setSocksProxy(proxyConfig.isSocksProxy());\n    }\n  }\n  addDefaultHeaders(webRequest);\n  final WebResponse fromCache=getCache().getCachedResponse(webRequest);\n  final WebResponse webResponse=getWebResponseOrUseCached(webRequest,fromCache);\n  final int status=webResponse.getStatusCode();\n  if (status == HttpClientConverter.USE_PROXY) {\n    getIncorrectnessListener().notify(\"Ignoring HTTP status code [305] 'Use Proxy'\",this);\n  }\n else   if (status >= HttpClientConverter.MOVED_PERMANENTLY && status <= 308 && status != HttpClientConverter.NOT_MODIFIED && getOptions().isRedirectEnabled()) {\n    URL newUrl;\n    String locationString=null;\n    try {\n      locationString=webResponse.getResponseHeaderValue(\"Location\");\n      if (locationString == null) {\n        return webResponse;\n      }\n      if (!getBrowserVersion().hasFeature(URL_MINIMAL_QUERY_ENCODING)) {\n        locationString=new String(locationString.getBytes(ISO_8859_1),UTF_8);\n      }\n      newUrl=expandUrl(url,locationString);\n      if (getBrowserVersion().hasFeature(HTTP_REDIRECT_WITHOUT_HASH)) {\n        newUrl=UrlUtils.getUrlWithNewRef(newUrl,null);\n      }\n    }\n catch (    final MalformedURLException e) {\n      getIncorrectnessListener().notify(\"Got a redirect status code [\" + status + \" \"+ webResponse.getStatusMessage()+ \"] but the location is not a valid URL [\"+ locationString+ \"]. Skipping redirection processing.\",this);\n      return webResponse;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got a redirect status code [\" + status + \"] new location = [\"+ locationString+ \"]\");\n    }\n    if (allowedRedirects == 0) {\n      throw new FailingHttpStatusCodeException(\"Too much redirect for \" + webResponse.getWebRequest().getUrl(),webResponse);\n    }\n    if (status == HttpClientConverter.MOVED_PERMANENTLY || status == HttpClientConverter.MOVED_TEMPORARILY || status == HttpClientConverter.SEE_OTHER) {\n      final WebRequest wrs=new WebRequest(newUrl,HttpMethod.GET);\n      wrs.setCharset(webRequest.getCharset());\n      if (HttpMethod.HEAD == webRequest.getHttpMethod()) {\n        wrs.setHttpMethod(HttpMethod.HEAD);\n      }\n      for (      final Map.Entry<String,String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n        wrs.setAdditionalHeader(entry.getKey(),entry.getValue());\n      }\n      return loadWebResponseFromWebConnection(wrs,allowedRedirects - 1);\n    }\n else     if (status == HttpClientConverter.TEMPORARY_REDIRECT || status == HttpClientConverter.PERMANENT_REDIRECT) {\n      final WebRequest wrs=new WebRequest(newUrl,webRequest.getHttpMethod());\n      wrs.setCharset(webRequest.getCharset());\n      if (webRequest.getRequestBody() != null) {\n        if (HttpMethod.POST == webRequest.getHttpMethod() || HttpMethod.PUT == webRequest.getHttpMethod() || HttpMethod.PATCH == webRequest.getHttpMethod()) {\n          wrs.setRequestBody(webRequest.getRequestBody());\n          wrs.setEncodingType(webRequest.getEncodingType());\n        }\n      }\n else {\n        wrs.setRequestParameters(parameters);\n      }\n      for (      final Map.Entry<String,String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n        wrs.setAdditionalHeader(entry.getKey(),entry.getValue());\n      }\n      return loadWebResponseFromWebConnection(wrs,allowedRedirects - 1);\n    }\n  }\n  if (fromCache == null) {\n    getCache().cacheIfPossible(webRequest,webResponse,null);\n  }\n  return webResponse;\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/WebClient.java",
    "Start": 64498,
    "Stop": 72653,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "loadWebResponseFromWebConnection"
}
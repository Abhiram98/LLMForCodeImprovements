{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract nested if-else conditions into separate methods",
                "Change_Diff": "- if (elem instanceof HtmlDialog) {\n          if (!((HtmlDialog)elem).isOpen()) {\n            return false;\n          }\n        }\n else {\n          final ComputedCssStyleDeclaration style=window.getComputedStyle(elem,null);\n          if (DisplayStyle.NONE.value().equals(style.getDisplay())) {\n            return false;\n          }\n          styles.add(style);\n        }\n+ boolean isHtmlDialogOpen(HtmlElement elem) {...}\n+ boolean isDisplayStyleNone(HtmlElement elem, ComputedCssStyleDeclaration style) {...}",
                "Description": "There are nested if-else conditions in the method which make the code hard to follow and understand. It's recommended to extract these conditions into separate methods to make the code cleaner and easier to maintain.",
                "Start": 16,
                "End": 40
            },
            {
                "Improvement": "Replace boolean expressions with methods",
                "Change_Diff": "- final String visibility=style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY,true);\n      if (visibility.length() > 5) {\n        if (\"visible\".equals(visibility)) {\n          return true;\n        }\n        if (\"hidden\".equals(visibility) || \"collapse\".equals(visibility)) {\n          return false;\n        }\n      }\n+ final String visibility=style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY,true);\n+ return isVisibilityValid(visibility);",
                "Description": "The boolean expressions in the if statements are non-trivial and could be encapsulated in methods with meaningful names. This would improve readability and maintainability.",
                "Start": 42,
                "End": 52
            }
        ],
        "Final code": "public boolean isDisplayed() {\n  if (!mayBeDisplayed()) {\n    return false;\n  }\n  final Page page = getPage();\n  final WebWindow window = page.getEnclosingWindow();\n  final WebClient webClient = window.getWebClient();\n  if (webClient.getOptions().isCssEnabled()) {\n    final List<Node> ancestors = getAncestors();\n    final ArrayList<ComputedCssStyleDeclaration> styles = new ArrayList<>(ancestors.size());\n    for (final Node node : ancestors) {\n      if (node instanceof HtmlElement) {\n        final HtmlElement elem = (HtmlElement)node;\n        if (elem.isHidden()) {\n          return false;\n        }\n        if (!isHtmlDialogOpen(elem) || isDisplayStyleNone(elem, style)) {\n          return false;\n        }\n        final ComputedCssStyleDeclaration style = window.getComputedStyle(elem, null);\n        styles.add(style);\n      }\n    }\n    for (int i = styles.size() - 1; i >= 0; i--) {\n      final ComputedCssStyleDeclaration style = styles.get(i);\n      return isVisibilityValid(style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY, true));\n    }\n  }\n  return true;\n}\n\nprivate boolean isHtmlDialogOpen(HtmlElement elem) {...}\n\nprivate boolean isDisplayStyleNone(HtmlElement elem, ComputedCssStyleDeclaration style) {...}\n\nprivate boolean isVisibilityValid(String visibility) {...}"
    },
    "Old_Method": "/** \n * <p>Returns  {@code true} if this node is displayed and can be visible to the user(ignoring screen size, scrolling limitations, color, font-size, or overlapping nodes).<\/p> <p><b>NOTE:<\/b> If CSS is {@link org.htmlunit.WebClientOptions#setCssEnabled(boolean) disabled}, this method does <b>not<\/b> take this element's style into consideration!<\/p>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visufx.html#visibility\">CSS2 Visibility<\/a>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visuren.html#propdef-display\">CSS2 Display<\/a>\n * @see <a href=\"http://msdn.microsoft.com/en-us/library/ms531180.aspx\">MSDN Documentation<\/a>\n * @return {@code true} if the node is visible to the user, {@code false} otherwise\n * @see #mayBeDisplayed()\n */\npublic boolean isDisplayed(){\n  if (!mayBeDisplayed()) {\n    return false;\n  }\n  final Page page=getPage();\n  final WebWindow window=page.getEnclosingWindow();\n  final WebClient webClient=window.getWebClient();\n  if (webClient.getOptions().isCssEnabled()) {\n    final List<Node> ancestors=getAncestors();\n    final ArrayList<ComputedCssStyleDeclaration> styles=new ArrayList<>(ancestors.size());\n    for (    final Node node : ancestors) {\n      if (node instanceof HtmlElement) {\n        final HtmlElement elem=(HtmlElement)node;\n        if (elem.isHidden()) {\n          return false;\n        }\n        if (elem instanceof HtmlDialog) {\n          if (!((HtmlDialog)elem).isOpen()) {\n            return false;\n          }\n        }\n else {\n          final ComputedCssStyleDeclaration style=window.getComputedStyle(elem,null);\n          if (DisplayStyle.NONE.value().equals(style.getDisplay())) {\n            return false;\n          }\n          styles.add(style);\n        }\n      }\n    }\n    for (int i=styles.size() - 1; i >= 0; i--) {\n      final ComputedCssStyleDeclaration style=styles.get(i);\n      final String visibility=style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY,true);\n      if (visibility.length() > 5) {\n        if (\"visible\".equals(visibility)) {\n          return true;\n        }\n        if (\"hidden\".equals(visibility) || \"collapse\".equals(visibility)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/html/DomNode.java",
    "Start": 20200,
    "Stop": 23239,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "isDisplayed"
}
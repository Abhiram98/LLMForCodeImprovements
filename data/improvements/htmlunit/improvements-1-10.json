{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove unnecessary if else ladder",
                "Change_Diff": "- if (element instanceof HtmlCanvas) {\n...\n} else if (element instanceof HtmlSubmitInput || element instanceof HtmlResetInput || element instanceof HtmlButtonInput|| element instanceof HtmlButton|| element instanceof HtmlFileInput) {\n...\n} else if (element instanceof HtmlTextInput || element instanceof HtmlPasswordInput) {\n...\n} else if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {\n...\n} else if (element instanceof HtmlTextArea) {\n...\n} else if (element instanceof HtmlImage) {\n...\n} else {\n...\n}\n+ switch (element.getClass().getSimpleName()) {\n...\n}",
                "Description": "The if else ladder in the code is long and unnecessary. It can be simplified by using a switch case. This will not only improve the readability of the code, but also make it easier to maintain.",
                "Start": 21,
                "End": 69
            },
            {
                "Improvement": "Extract methods",
                "Change_Diff": "- private int getCalculatedWidth(){\n...\n}\n+ private int getCalculatedWidth(){\n...\n} \n+ private int calculateCanvasWidth(){\n...\n} \n+ private int calculateInputWidth(){\n...\n} \n+ private int calculateTextAreaWidth(){\n...\n} \n+ private int calculateImageWidth(){\n...\n}",
                "Description": "The getCalculatedWidth() method is doing too many things. It would be easier to read and maintain if the different calculations were extracted into their own methods.",
                "Start": 1,
                "End": 72
            },
            {
                "Improvement": "Use constants",
                "Change_Diff": "- return 300;\n...\nreturn 143;\n...\nreturn 173;\n...\nwidth=10 + (int)(text.length() * browserVersion.getPixesPerChar() * 0.9);\n...\nwidth=100;\n...\nwidth=13;\n...\nwidth=10;\n+ return CANVAS_WIDTH;\n...\nreturn TEXT_INPUT_WIDTH;\n...\nreturn PASSWORD_INPUT_WIDTH;\n...\nwidth= BASE_WIDTH + (int)(text.length() * browserVersion.getPixesPerChar() * SCALE_FACTOR);\n...\nwidth=TEXT_AREA_WIDTH;\n...\nwidth=RADIO_CHECKBOX_WIDTH;\n...\nwidth=DEFAULT_RADIO_CHECKBOX_WIDTH;",
                "Description": "There are several magic numbers and string values in the code. It would be better to replace them with named constants to improve readability.",
                "Start": 1,
                "End": 72
            }
        ],
        "Final code": "private int getCalculatedWidth(){\n...\nswitch (element.getClass().getSimpleName()) {\n...\ncase \"HtmlCanvas\":\nreturn calculateCanvasWidth();\ncase \"HtmlSubmitInput\":\ncase \"HtmlResetInput\":\ncase \"HtmlButtonInput\":\ncase \"HtmlButton\":\ncase \"HtmlFileInput\":\nreturn calculateInputWidth();\ncase \"HtmlTextInput\":\ncase \"HtmlPasswordInput\":\nreturn calculateTextInputWidth();\ncase \"HtmlRadioButtonInput\":\ncase \"HtmlCheckBoxInput\":\nreturn calculateRadioCheckboxWidth();\ncase \"HtmlTextArea\":\nreturn calculateTextAreaWidth();\ncase \"HtmlImage\":\nreturn calculateImageWidth();\ndefault:\nreturn calculateDefaultWidth();\n}\n...\n}"
    },
    "Old_Method": "private int getCalculatedWidth(){\n  final Integer cachedWidth=getCachedWidth();\n  if (cachedWidth != null) {\n    return cachedWidth.intValue();\n  }\n  final DomElement element=getDomElement();\n  if (!element.mayBeDisplayed()) {\n    return setCachedWidth(0);\n  }\n  final String display=getDisplay();\n  if (NONE.equals(display)) {\n    return setCachedWidth(0);\n  }\n  final int width;\n  final String styleWidth=getStyleAttribute(Definition.WIDTH,true);\n  final DomNode parent=element.getParentNode();\n  if ((INLINE.equals(display) || StringUtils.isEmpty(styleWidth)) && parent instanceof HtmlElement) {\n    if (element instanceof HtmlCanvas) {\n      return 300;\n    }\n    final String cssFloat=getCssFloat();\n    final String position=getStyleAttribute(Definition.POSITION,true);\n    if (\"right\".equals(cssFloat) || \"left\".equals(cssFloat) || ABSOLUTE.equals(position)|| FIXED.equals(position)) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      width=element.getVisibleText().length() * browserVersion.getPixesPerChar();\n    }\n else     if (BLOCK.equals(display)) {\n      final int windowWidth=element.getPage().getEnclosingWindow().getInnerWidth();\n      if (element instanceof HtmlBody) {\n        width=windowWidth - 16;\n      }\n else {\n        width=CssPixelValueConverter.pixelValue((DomElement)parent,new CssPixelValueConverter.CssValue(0,windowWidth){\n          @Override public String get(          final ComputedCssStyleDeclaration style){\n            return style.getWidth();\n          }\n        }\n) - (getBorderHorizontal() + getPaddingHorizontal());\n      }\n    }\n else     if (element instanceof HtmlSubmitInput || element instanceof HtmlResetInput || element instanceof HtmlButtonInput|| element instanceof HtmlButton|| element instanceof HtmlFileInput) {\n      final String text=element.asNormalizedText();\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      width=10 + (int)(text.length() * browserVersion.getPixesPerChar() * 0.9);\n    }\n else     if (element instanceof HtmlTextInput || element instanceof HtmlPasswordInput) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_143)) {\n        return 143;\n      }\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_173)) {\n        return 173;\n      }\n      width=154;\n    }\n else     if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_RADIO_CHECKBOX_10)) {\n        width=10;\n      }\n else {\n        width=13;\n      }\n    }\n else     if (element instanceof HtmlTextArea) {\n      width=100;\n    }\n else     if (element instanceof HtmlImage) {\n      width=((HtmlImage)element).getWidthOrDefault();\n    }\n else {\n      width=getContentWidth();\n    }\n  }\n else   if (AUTO.equals(styleWidth)) {\n    width=element.getPage().getEnclosingWindow().getInnerWidth();\n  }\n else {\n    width=CssPixelValueConverter.pixelValue(element,new CssPixelValueConverter.CssValue(0,element.getPage().getEnclosingWindow().getInnerWidth()){\n      @Override public String get(      final ComputedCssStyleDeclaration style){\n        return style.getStyleAttribute(Definition.WIDTH,true);\n      }\n    }\n);\n  }\n  return setCachedWidth(width);\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/css/ComputedCssStyleDeclaration.java",
    "Start": 51265,
    "Stop": 56573,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "getCalculatedWidth"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid empty catch blocks",
                "Change_Diff": "- catch (Exception e) {\n- }\n+ catch (Exception e) {\n+     e.printStackTrace();\n+ }",
                "Description": "Empty catch blocks are generally considered poor practice because they silently swallow exceptions and do not provide any indication of what went wrong. Instead, consider at least logging the exception.",
                "Start": 9,
                "End": 11
            },
            {
                "Improvement": "Avoid code duplication",
                "Change_Diff": "- try {\n-   securitymanager=oldsecurity;\n-   securitymanager.checkTopLevelWindow(null);\n-   if (charMap == null) {...}\n- } catch (Exception e) {...}\n- try {\n-   securitymanager=new RobotSecurityManager(needsSecurityManager,oldsecurity);\n-   securitymanager.checkTopLevelWindow(null);\n-   System.setSecurityManager(securitymanager);\n- } catch (Exception e) {...}\n+ createSecurityManager(oldsecurity, needsSecurityManager);",
                "Description": "The code block for creating a new security manager is duplicated. Instead, you can create a method and call it in both places.",
                "Start": 19,
                "End": 30
            }
        ],
        "Final code": "public void run(){\n  log(\"Document root: ~\" + applet().getLocationOnScreen().toString());\n  while (true) {\n    try {\n      window=(JSObject)JSObject.getWindow(applet());\n      break;\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  AccessController.doPrivileged(new PrivilegedAction(){\n    public Object run(){\n      log(\"> init Robot\");\n      try {\n        SecurityManager oldsecurity=System.getSecurityManager();\n        boolean needsSecurityManager=applet().getParameter(\"needsSecurityManager\").equals(\"true\");\n        log(\"Socket connections managed? \" + needsSecurityManager);\n        createSecurityManager(oldsecurity, needsSecurityManager);\n      } catch (SecurityException e) {\n      } catch (Exception e) {\n        log(\"Error calling _init_: \" + e.getMessage());\n        key=-2;\n        e.printStackTrace();\n      }\n      log(\"< init Robot\");\n      return null;\n    }\n  }\n);\n  if (key == -2) {\n    window.eval(\"doh.robot._appletDead=true;doh.run();\");\n  } else {\n    log(\"_initRobot\");\n    try {\n      dohrobot=(JSObject)window.eval(\"doh.robot\");\n      dohrobot.call(\"_initRobot\",new Object[]{applet()});\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n\nprivate void createSecurityManager(SecurityManager oldsecurity, boolean needsSecurityManager) {\n  try {\n    securitymanager=oldsecurity;\n    securitymanager.checkTopLevelWindow(null);\n    if (charMap == null) {...}\n  } catch (Exception e) {...}\n  try {\n    securitymanager=new RobotSecurityManager(needsSecurityManager,oldsecurity);\n    securitymanager.checkTopLevelWindow(null);\n    System.setSecurityManager(securitymanager);\n  } catch (Exception e) {...}\n}"
    },
    "Old_Method": "public void run(){\n  log(\"Document root: ~\" + applet().getLocationOnScreen().toString());\n  while (true) {\n    try {\n      window=(JSObject)JSObject.getWindow(applet());\n      break;\n    }\n catch (    Exception e) {\n    }\n  }\n  AccessController.doPrivileged(new PrivilegedAction(){\n    public Object run(){\n      log(\"> init Robot\");\n      try {\n        SecurityManager oldsecurity=System.getSecurityManager();\n        boolean needsSecurityManager=applet().getParameter(\"needsSecurityManager\").equals(\"true\");\n        log(\"Socket connections managed? \" + needsSecurityManager);\n        try {\n          securitymanager=oldsecurity;\n          securitymanager.checkTopLevelWindow(null);\n          if (charMap == null) {\n            if (!confirm(\"DOH has detected that the current Web page is attempting to access DOH,\\n\" + \"but belongs to a different domain than the one you agreed to let DOH automate.\\n\" + \"If you did not intend to start a new DOH test by visiting this Web page,\\n\"+ \"press Cancel now and leave the Web page.\\n\"+ \"Otherwise, press OK to trust this domain to automate DOH tests.\")) {\n              stop();\n              return null;\n            }\n          }\n          log(\"Found old security manager\");\n        }\n catch (        Exception e) {\n          log(\"Making new security manager\");\n          securitymanager=new RobotSecurityManager(needsSecurityManager,oldsecurity);\n          securitymanager.checkTopLevelWindow(null);\n          System.setSecurityManager(securitymanager);\n        }\n      }\n catch (      SecurityException e) {\n      }\ncatch (      Exception e) {\n        log(\"Error calling _init_: \" + e.getMessage());\n        key=-2;\n        e.printStackTrace();\n      }\n      log(\"< init Robot\");\n      return null;\n    }\n  }\n);\n  if (key == -2) {\n    window.eval(\"doh.robot._appletDead=true;doh.run();\");\n  }\n else {\n    log(\"_initRobot\");\n    try {\n      dohrobot=(JSObject)window.eval(\"doh.robot\");\n      dohrobot.call(\"_initRobot\",new Object[]{applet()});\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n",
    "File_Path": "htmlunit/src/test/resources/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
    "Start": 4222,
    "Stop": 6564,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "run"
}
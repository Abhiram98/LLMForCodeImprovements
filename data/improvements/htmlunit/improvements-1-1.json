{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce Cyclomatic Complexity",
                "Change_Diff": "- private int getCalculatedWidth(){...}\n+ private int getCalculatedWidth(){...}\n+ private int handleInlineOrEmptyStyle(){...}\n+ private int handleTextInputOrPasswordInput(){...}\n+ private int handleRadioButtonInputOrCheckboxInput(){...}\n+ private int handleTextArea(){...}\n+ private int handleImage(){...}\n+ private int handleAutoStyleWidth(){...}",
                "Description": "The getCachedWidth method is highly complex due to the nested conditional statements. This complexity can be reduced by splitting the method into smaller, more manageable methods, each handling a specific condition.",
                "Start": 1,
                "End": 85
            },
            {
                "Improvement": "Use Constants",
                "Change_Diff": "- return 300;\n+ return DEFAULT_CANVAS_WIDTH;\n- return 143;\n+ return DEFAULT_TEXT_INPUT_WIDTH;\n- return 173;\n+ return DEFAULT_PASSWORD_INPUT_WIDTH;\n- width=10;\n+ width=DEFAULT_RADIO_CHECKBOX_WIDTH;\n- width=13;\n+ width=ALTERNATIVE_RADIO_CHECKBOX_WIDTH;\n- width=100;\n+ width=DEFAULT_TEXT_AREA_WIDTH;",
                "Description": "There are several hard-coded values in the method that could be replaced with meaningful constant names. This would improve readability and maintainability.",
                "Start": 1,
                "End": 85
            }
        ],
        "Final code": "private int getCalculatedWidth(){...}\nprivate int handleInlineOrEmptyStyle(){...}\nprivate int handleTextInputOrPasswordInput(){...}\nprivate int handleRadioButtonInputOrCheckboxInput(){...}\nprivate int handleTextArea(){...}\nprivate int handleImage(){...}\nprivate int handleAutoStyleWidth(){...}"
    },
    "Old_Method": "private int getCalculatedWidth(){\n  final Integer cachedWidth=getCachedWidth();\n  if (cachedWidth != null) {\n    return cachedWidth.intValue();\n  }\n  final DomElement element=getDomElement();\n  if (!element.mayBeDisplayed()) {\n    return setCachedWidth(0);\n  }\n  final String display=getDisplay();\n  if (NONE.equals(display)) {\n    return setCachedWidth(0);\n  }\n  final int width;\n  final String styleWidth=getStyleAttribute(Definition.WIDTH,true);\n  final DomNode parent=element.getParentNode();\n  if ((INLINE.equals(display) || StringUtils.isEmpty(styleWidth)) && parent instanceof HtmlElement) {\n    if (element instanceof HtmlCanvas) {\n      return 300;\n    }\n    final String cssFloat=getCssFloat();\n    final String position=getStyleAttribute(Definition.POSITION,true);\n    if (\"right\".equals(cssFloat) || \"left\".equals(cssFloat) || ABSOLUTE.equals(position)|| FIXED.equals(position)) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      width=element.getVisibleText().length() * browserVersion.getPixesPerChar();\n    }\n else     if (BLOCK.equals(display)) {\n      final int windowWidth=element.getPage().getEnclosingWindow().getInnerWidth();\n      if (element instanceof HtmlBody) {\n        width=windowWidth - 16;\n      }\n else {\n        width=CssPixelValueConverter.pixelValue((DomElement)parent,new CssPixelValueConverter.CssValue(0,windowWidth){\n          @Override public String get(          final ComputedCssStyleDeclaration style){\n            return style.getWidth();\n          }\n        }\n) - (getBorderHorizontal() + getPaddingHorizontal());\n      }\n    }\n else     if (element instanceof HtmlSubmitInput || element instanceof HtmlResetInput || element instanceof HtmlButtonInput|| element instanceof HtmlButton|| element instanceof HtmlFileInput) {\n      final String text=element.asNormalizedText();\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      width=10 + (int)(text.length() * browserVersion.getPixesPerChar() * 0.9);\n    }\n else     if (element instanceof HtmlTextInput || element instanceof HtmlPasswordInput) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_143)) {\n        return 143;\n      }\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_173)) {\n        return 173;\n      }\n      width=154;\n    }\n else     if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_RADIO_CHECKBOX_10)) {\n        width=10;\n      }\n else {\n        width=13;\n      }\n    }\n else     if (element instanceof HtmlTextArea) {\n      width=100;\n    }\n else     if (element instanceof HtmlImage) {\n      width=((HtmlImage)element).getWidthOrDefault();\n    }\n else {\n      width=getContentWidth();\n    }\n  }\n else   if (AUTO.equals(styleWidth)) {\n    width=element.getPage().getEnclosingWindow().getInnerWidth();\n  }\n else {\n    width=CssPixelValueConverter.pixelValue(element,new CssPixelValueConverter.CssValue(0,element.getPage().getEnclosingWindow().getInnerWidth()){\n      @Override public String get(      final ComputedCssStyleDeclaration style){\n        return style.getStyleAttribute(Definition.WIDTH,true);\n      }\n    }\n);\n  }\n  return setCachedWidth(width);\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/css/ComputedCssStyleDeclaration.java",
    "Start": 51265,
    "Stop": 56573,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "getCalculatedWidth"
}
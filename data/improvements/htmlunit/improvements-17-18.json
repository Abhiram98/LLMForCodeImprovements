{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Code Duplication",
                "Change_Diff": "- final Event keyDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n- final ScriptResult keyDownResult=fireEvent(keyDown);\n+ final ScriptResult keyDownResult = createAndFireKeyboardEvent(Event.TYPE_KEY_DOWN, c, shiftPressed_ || isShiftNeeded);\n\n- final Event keyPress=new KeyboardEvent(this,Event.TYPE_KEY_PRESS,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n- final ScriptResult keyPressResult=fireEvent(keyPress);\n+ final ScriptResult keyPressResult = createAndFireKeyboardEvent(Event.TYPE_KEY_PRESS, c, shiftPressed_ || isShiftNeeded);",
                "Description": "There is a repeated code block for creating and firing a KeyboardEvent. This could be abstracted into a separate method.",
                "Start": 16,
                "End": 34
            },
            {
                "Improvement": "Long Method",
                "Change_Diff": "- private Page type(final char c,final boolean lastType) throws IOException { ... }\n+ private Page type(final char c,final boolean lastType) throws IOException {\n+ handleDisabledElement();\n+ setPageAsCurrentWindow();\n+ focusElementIfNeeded();\n+ handleKeyPress(c);\n+ handleTextInput();\n+ handleElementDetaching();\n+ handleSubmit(c);\n+ return getCurrentPage();\n+ }",
                "Description": "The method is too long and does too many things. It could be split into smaller methods to improve readability and reusability.",
                "Start": 1,
                "End": 61
            }
        ],
        "Final code": "private Page type(final char c,final boolean lastType) throws IOException {\n  handleDisabledElement();\n  setPageAsCurrentWindow();\n  focusElementIfNeeded();\n  handleKeyPress(c);\n  handleTextInput();\n  handleElementDetaching();\n  handleSubmit(c);\n  return getCurrentPage();\n}\n\nprivate void handleDisabledElement() {...}\n\nprivate void setPageAsCurrentWindow() {...}\n\nprivate void focusElementIfNeeded() {...}\n\nprivate void handleKeyPress(final char c) {...}\n\nprivate void handleTextInput() {...}\n\nprivate void handleElementDetaching() {...}\n\nprivate void handleSubmit(final char c) {...}\n\nprivate Page getCurrentPage() {...}\n\nprivate ScriptResult createAndFireKeyboardEvent(String eventType, char c, boolean isShiftNeeded) {...}"
    },
    "Old_Method": "/** \n * Simulates typing the specified character while this element has focus, returning the page contained by this element's window after typing. Note that it may or may not be the same as the original page, depending on the JavaScript event handlers, etc. Note also that for some elements, typing <code>'\\n'<\/code> submits the enclosed form.\n * @param c the character you wish to simulate typing\n * @param lastType is this the last character to type\n * @return the page contained in the current window as returned by {@link WebClient#getCurrentWindow()}\n * @exception IOException if an IO error occurs\n */\nprivate Page type(final char c,final boolean lastType) throws IOException {\n  if (isDisabledElementAndDisabled()) {\n    return getPage();\n  }\n  getPage().getWebClient().setCurrentWindow(getPage().getEnclosingWindow());\n  final HtmlPage page=(HtmlPage)getPage();\n  if (page.getFocusedElement() != this) {\n    focus();\n  }\n  final boolean isShiftNeeded=KeyboardEvent.isShiftNeeded(c,shiftPressed_);\n  final Event shiftDown;\n  final ScriptResult shiftDownResult;\n  if (isShiftNeeded) {\n    shiftDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,KeyboardEvent.DOM_VK_SHIFT,true,ctrlPressed_,altPressed_);\n    shiftDownResult=fireEvent(shiftDown);\n  }\n else {\n    shiftDown=null;\n    shiftDownResult=null;\n  }\n  final Event keyDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n  final ScriptResult keyDownResult=fireEvent(keyDown);\n  if (!keyDown.isAborted(keyDownResult)) {\n    final Event keyPress=new KeyboardEvent(this,Event.TYPE_KEY_PRESS,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n    final ScriptResult keyPressResult=fireEvent(keyPress);\n    if ((shiftDown == null || !shiftDown.isAborted(shiftDownResult)) && !keyPress.isAborted(keyPressResult)) {\n      doType(c,lastType);\n    }\n  }\n  final WebClient webClient=page.getWebClient();\n  if (this instanceof HtmlTextInput || this instanceof HtmlTextArea || this instanceof HtmlTelInput|| this instanceof HtmlNumberInput|| this instanceof HtmlSearchInput|| this instanceof HtmlPasswordInput) {\n    fireEvent(new KeyboardEvent(this,Event.TYPE_INPUT,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_));\n  }\n  HtmlElement eventSource=this;\n  if (!isAttachedToPage()) {\n    final BrowserVersion browserVersion=page.getWebClient().getBrowserVersion();\n    if (browserVersion.hasFeature(HTMLELEMENT_DETACH_ACTIVE_TRIGGERS_NO_KEYUP_EVENT)) {\n      eventSource=null;\n    }\n else {\n      eventSource=page.getBody();\n    }\n  }\n  if (eventSource != null) {\n    final Event keyUp=new KeyboardEvent(this,Event.TYPE_KEY_UP,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n    eventSource.fireEvent(keyUp);\n    if (isShiftNeeded) {\n      final Event shiftUp=new KeyboardEvent(this,Event.TYPE_KEY_UP,KeyboardEvent.DOM_VK_SHIFT,false,ctrlPressed_,altPressed_);\n      eventSource.fireEvent(shiftUp);\n    }\n  }\n  final HtmlForm form=getEnclosingForm();\n  if (form != null && c == '\\n' && isSubmittableByEnter()) {\n    final HtmlSubmitInput submit=form.getFirstByXPath(\".//input[@type='submit']\");\n    if (submit != null) {\n      return submit.click();\n    }\n    form.submit((SubmittableElement)this);\n    webClient.getJavaScriptEngine().processPostponedActions();\n  }\n  return webClient.getCurrentWindow().getEnclosedPage();\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlElement.java",
    "Start": 20113,
    "Stop": 24471,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "type"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Split method into smaller methods",
                "Change_Diff": "- public boolean isDisplayed(){...}\n+ public boolean isDisplayed(){\n+   if (!mayBeDisplayed()) {\n+     return false;\n+   }\n+   final Page page=getPage();\n+   final WebWindow window=page.getEnclosingWindow();\n+   final WebClient webClient=window.getWebClient();\n+   if (webClient.getOptions().isCssEnabled()) {\n+     return isCssDisplayed(window);\n+   }\n+   return true;\n+ }\n+\n+ private boolean isCssDisplayed(WebWindow window) {...}\n+ private ComputedCssStyleDeclaration getComputedStyle(Node node, WebWindow window) {...}\n+ private boolean isElementHidden(HtmlElement elem) {...}\n+ private String getVisibility(ComputedCssStyleDeclaration style) {...}",
                "Description": "The isDisplayed() method is too long and does a lot of different things. It's better to split it into several smaller methods to improve readability and maintainability. Each method should ideally only do one thing. For example, we can have separate methods for getting the computed CSS style, checking if an element is hidden, and checking the visibility attribute.",
                "Start": 16,
                "End": 60
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int i=styles.size() - 1; i >= 0; i--) {\n+ for (ComputedCssStyleDeclaration style : styles) {",
                "Description": "Instead of using a traditional for loop to iterate over the styles list, use an enhanced for loop. The enhanced for loop is simpler and less prone to off-by-one errors.",
                "Start": 50,
                "End": 60
            }
        ],
        "Final code": "public boolean isDisplayed(){\n  if (!mayBeDisplayed()) {\n    return false;\n  }\n  final Page page=getPage();\n  final WebWindow window=page.getEnclosingWindow();\n  final WebClient webClient=window.getWebClient();\n  if (webClient.getOptions().isCssEnabled()) {\n    return isCssDisplayed(window);\n  }\n  return true;\n}\n\nprivate boolean isCssDisplayed(WebWindow window) {...}\n\nprivate ComputedCssStyleDeclaration getComputedStyle(Node node, WebWindow window) {...}\n\nprivate boolean isElementHidden(HtmlElement elem) {...}\n\nprivate String getVisibility(ComputedCssStyleDeclaration style) {...}"
    },
    "Old_Method": "/** \n * <p>Returns  {@code true} if this node is displayed and can be visible to the user(ignoring screen size, scrolling limitations, color, font-size, or overlapping nodes).<\/p> <p><b>NOTE:<\/b> If CSS is {@link org.htmlunit.WebClientOptions#setCssEnabled(boolean) disabled}, this method does <b>not<\/b> take this element's style into consideration!<\/p>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visufx.html#visibility\">CSS2 Visibility<\/a>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visuren.html#propdef-display\">CSS2 Display<\/a>\n * @see <a href=\"http://msdn.microsoft.com/en-us/library/ms531180.aspx\">MSDN Documentation<\/a>\n * @return {@code true} if the node is visible to the user, {@code false} otherwise\n * @see #mayBeDisplayed()\n */\npublic boolean isDisplayed(){\n  if (!mayBeDisplayed()) {\n    return false;\n  }\n  final Page page=getPage();\n  final WebWindow window=page.getEnclosingWindow();\n  final WebClient webClient=window.getWebClient();\n  if (webClient.getOptions().isCssEnabled()) {\n    final List<Node> ancestors=getAncestors();\n    final ArrayList<ComputedCssStyleDeclaration> styles=new ArrayList<>(ancestors.size());\n    for (    final Node node : ancestors) {\n      if (node instanceof HtmlElement) {\n        final HtmlElement elem=(HtmlElement)node;\n        if (elem.isHidden()) {\n          return false;\n        }\n        if (elem instanceof HtmlDialog) {\n          if (!((HtmlDialog)elem).isOpen()) {\n            return false;\n          }\n        }\n else {\n          final ComputedCssStyleDeclaration style=window.getComputedStyle(elem,null);\n          if (DisplayStyle.NONE.value().equals(style.getDisplay())) {\n            return false;\n          }\n          styles.add(style);\n        }\n      }\n    }\n    for (int i=styles.size() - 1; i >= 0; i--) {\n      final ComputedCssStyleDeclaration style=styles.get(i);\n      final String visibility=style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY,true);\n      if (visibility.length() > 5) {\n        if (\"visible\".equals(visibility)) {\n          return true;\n        }\n        if (\"hidden\".equals(visibility) || \"collapse\".equals(visibility)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/html/DomNode.java",
    "Start": 20200,
    "Stop": 23239,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "isDisplayed"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Reduce Cognitive Complexity",
            "Change_Diff": "- if (cachedWidth != null) {...} \n- if (!element.mayBeDisplayed()) {...} \n- if (NONE.equals(display)) {...} \n- if ((INLINE.equals(display) || StringUtils.isEmpty(styleWidth)) && parent instanceof HtmlElement) {...} \n- if (element instanceof HtmlCanvas) {...} \n- if (\"right\".equals(cssFloat) || \"left\".equals(cssFloat) || ABSOLUTE.equals(position)|| FIXED.equals(position)) {...} \n- if (BLOCK.equals(display)) {...} \n- if (element instanceof HtmlBody) {...} \n- if (element instanceof HtmlSubmitInput || element instanceof HtmlResetInput || element instanceof HtmlButtonInput|| element instanceof HtmlButton|| element instanceof HtmlFileInput) {...} \n- if (element instanceof HtmlTextInput || element instanceof HtmlPasswordInput) {...} \n- if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {...} \n- if (element instanceof HtmlTextArea) {...} \n- if (element instanceof HtmlImage) {...} \n- if (AUTO.equals(styleWidth)) {...} \n+ calculateWidthForCachedWidth(cachedWidth) \n+ calculateWidthForNonDisplayedElement(element) \n+ calculateWidthForNoneDisplay(display) \n+ calculateWidthForInlineDisplayOrEmptyStyleWidth(display, styleWidth, parent) \n+ calculateWidthForHtmlCanvas(element) \n+ calculateWidthForFloatOrPosition(cssFloat, position, element) \n+ calculateWidthForBlockDisplay(display, element) \n+ calculateWidthForHtmlBody(element) \n+ calculateWidthForInputOrButtonElements(element) \n+ calculateWidthForTextInputOrPasswordInput(element) \n+ calculateWidthForRadioButtonOrCheckBoxInput(element) \n+ calculateWidthForTextArea(element) \n+ calculateWidthForImage(element) \n+ calculateWidthForAutoStyleWidth(styleWidth, element)",
            "Description": "The method has too many conditional branches, which makes it hard to read and understand. You could refactor this by creating separate private methods for each condition and invoke them in the main method.",
            "Start": 2,
            "End": 81
        }],
        "Final code": "private int getCalculatedWidth(){\n  final Integer cachedWidth=getCachedWidth();\n  calculateWidthForCachedWidth(cachedWidth);\n  final DomElement element=getDomElement();\n  calculateWidthForNonDisplayedElement(element);\n  final String display=getDisplay();\n  calculateWidthForNoneDisplay(display);\n  final int width;\n  final String styleWidth=getStyleAttribute(Definition.WIDTH,true);\n  final DomNode parent=element.getParentNode();\n  calculateWidthForInlineDisplayOrEmptyStyleWidth(display, styleWidth, parent);\n  calculateWidthForHtmlCanvas(element);\n  final String cssFloat=getCssFloat();\n  final String position=getStyleAttribute(Definition.POSITION,true);\n  calculateWidthForFloatOrPosition(cssFloat, position, element);\n  calculateWidthForBlockDisplay(display, element);\n  calculateWidthForHtmlBody(element);\n  calculateWidthForInputOrButtonElements(element);\n  calculateWidthForTextInputOrPasswordInput(element);\n  calculateWidthForRadioButtonOrCheckBoxInput(element);\n  calculateWidthForTextArea(element);\n  calculateWidthForImage(element);\n  calculateWidthForAutoStyleWidth(styleWidth, element);\n  return setCachedWidth(width);\n}\n\n//Note: Define the invoked private methods as well"
    },
    "Old_Method": "private int getCalculatedWidth(){\n  final Integer cachedWidth=getCachedWidth();\n  if (cachedWidth != null) {\n    return cachedWidth.intValue();\n  }\n  final DomElement element=getDomElement();\n  if (!element.mayBeDisplayed()) {\n    return setCachedWidth(0);\n  }\n  final String display=getDisplay();\n  if (NONE.equals(display)) {\n    return setCachedWidth(0);\n  }\n  final int width;\n  final String styleWidth=getStyleAttribute(Definition.WIDTH,true);\n  final DomNode parent=element.getParentNode();\n  if ((INLINE.equals(display) || StringUtils.isEmpty(styleWidth)) && parent instanceof HtmlElement) {\n    if (element instanceof HtmlCanvas) {\n      return 300;\n    }\n    final String cssFloat=getCssFloat();\n    final String position=getStyleAttribute(Definition.POSITION,true);\n    if (\"right\".equals(cssFloat) || \"left\".equals(cssFloat) || ABSOLUTE.equals(position)|| FIXED.equals(position)) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      width=element.getVisibleText().length() * browserVersion.getPixesPerChar();\n    }\n else     if (BLOCK.equals(display)) {\n      final int windowWidth=element.getPage().getEnclosingWindow().getInnerWidth();\n      if (element instanceof HtmlBody) {\n        width=windowWidth - 16;\n      }\n else {\n        width=CssPixelValueConverter.pixelValue((DomElement)parent,new CssPixelValueConverter.CssValue(0,windowWidth){\n          @Override public String get(          final ComputedCssStyleDeclaration style){\n            return style.getWidth();\n          }\n        }\n) - (getBorderHorizontal() + getPaddingHorizontal());\n      }\n    }\n else     if (element instanceof HtmlSubmitInput || element instanceof HtmlResetInput || element instanceof HtmlButtonInput|| element instanceof HtmlButton|| element instanceof HtmlFileInput) {\n      final String text=element.asNormalizedText();\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      width=10 + (int)(text.length() * browserVersion.getPixesPerChar() * 0.9);\n    }\n else     if (element instanceof HtmlTextInput || element instanceof HtmlPasswordInput) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_143)) {\n        return 143;\n      }\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_173)) {\n        return 173;\n      }\n      width=154;\n    }\n else     if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {\n      final BrowserVersion browserVersion=getDomElement().getPage().getWebClient().getBrowserVersion();\n      if (browserVersion.hasFeature(JS_CLIENTWIDTH_RADIO_CHECKBOX_10)) {\n        width=10;\n      }\n else {\n        width=13;\n      }\n    }\n else     if (element instanceof HtmlTextArea) {\n      width=100;\n    }\n else     if (element instanceof HtmlImage) {\n      width=((HtmlImage)element).getWidthOrDefault();\n    }\n else {\n      width=getContentWidth();\n    }\n  }\n else   if (AUTO.equals(styleWidth)) {\n    width=element.getPage().getEnclosingWindow().getInnerWidth();\n  }\n else {\n    width=CssPixelValueConverter.pixelValue(element,new CssPixelValueConverter.CssValue(0,element.getPage().getEnclosingWindow().getInnerWidth()){\n      @Override public String get(      final ComputedCssStyleDeclaration style){\n        return style.getStyleAttribute(Definition.WIDTH,true);\n      }\n    }\n);\n  }\n  return setCachedWidth(width);\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/css/ComputedCssStyleDeclaration.java",
    "Start": 51265,
    "Stop": 56573,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "getCalculatedWidth"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove code repetition",
                "Change_Diff": "- HtmlTableCell cell=table.getCellAt(0,0);\n- assertEquals(\"cell (0,0) contents\",\"H 1.1\",cell.asNormalizedText());\n+ testCellContents(table, 0, 0, \"H 1.1\");",
                "Description": "The method has a lot of repeated code which makes it long and hard to maintain. We can simplify this by creating a helper method that takes the parameters (row,column,expectedContent) and performs the operations.",
                "Start": 25,
                "End": 95
            },
            {
                "Improvement": "Use assertEquals with a custom message",
                "Change_Diff": "- assertEquals(\"cell (0,0) contents\",\"H 1.1\",cell.asNormalizedText());\n+ assertEquals(String.format(\"cell (%d,%d) contents\", row, column), expectedContent, cell.asNormalizedText());",
                "Description": "Instead of manually creating a String representing the cell position, we can use the built-in functionality of assertEquals to provide a custom message.",
                "Start": 25,
                "End": 95
            }
        ],
        "Final code": "/**\n * Tests getCellAt(int,int).\n * @exception Exception If the test fails\n */\n@Test public void getCellAtComplex() throws Exception {\n  final String htmlContent=\"<html><head><title>foo<\/title><\/head><body>...<\/body><\/html>\";\n  final HtmlPage page=loadPage(htmlContent);\n  final HtmlTable table=page.getHtmlElementById(\"table1\");\n\n  // Replace repetitive code with helper method calls\n  testCellContents(table, 0, 0, \"H 1.1\");\n  testCellContents(table, 0, 1, \"H 1.2\");\n  ...\n  testCellContents(table, 7, 5, null);\n  testCellContents(table, 8, 0, null);\n}\n\n/**\n * Tests the contents of a cell at a specific location in a table.\n *\n * @param table The table to test.\n * @param row The row of the cell to test.\n * @param column The column of the cell to test.\n * @param expectedContent The expected content of the cell.\n */\npublic void testCellContents(HtmlTable table, int row, int column, String expectedContent) {\n  HtmlTableCell cell = table.getCellAt(row, column);\n  String message = String.format(\"cell (%d,%d) contents\", row, column);\n\n  if (expectedContent == null) {\n    assertNull(message, cell);\n  } else {\n    assertEquals(message, expectedContent, cell.asNormalizedText());\n  }\n}"
    },
    "Old_Method": "/** \n * Tests getCellAt(int,int).\n * @exception Exception If the test fails\n */\n@Test public void getCellAtComplex() throws Exception {\n  final String htmlContent=\"<html><head><title>foo<\/title><\/head><body>\\n\" + \"<table id='table1' border='1'>\\n\" + \"  <tr>\\n\"+ \"    <th colspan='1'>H 1.1<\/th><th>H 1.2<\/th>\\n\"+ \"    <th colspan='2' rowspan='2'>H 1.3<\/th><th>H 1.5<\/th>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <th>H 2.1<\/th><th>H 2.2<\/th><th>H 2.5<\/th>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <td rowspan='3'>1.1<\/td><td colspan='3'>1.2<\/td><td>1.5<\/td>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <td rowspan='2'>2.2<\/td><td>2.3<\/td><td rowspan='4' colspan='2'>2.4<\/td>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <td>3.3<\/td>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <td>4.1<\/td><td>4.2<\/td><td>4.3<\/td>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <td>5.1<\/td>\\n\"+ \"    <td colspan='2' rowspan='2'>5.2<\/td>\\n\"+ \"  <\/tr>\\n\"+ \"  <tr>\\n\"+ \"    <td>6.1<\/td><td>6.4<\/td><td>6.5<\/td>\\n\"+ \"  <\/tr>\\n\"+ \"<\/table>\\n\"+ \"<\/body><\/html>\";\n  final HtmlPage page=loadPage(htmlContent);\n  final HtmlTable table=page.getHtmlElementById(\"table1\");\n  HtmlTableCell cell=table.getCellAt(0,0);\n  assertEquals(\"cell (0,0) contents\",\"H 1.1\",cell.asNormalizedText());\n  cell=table.getCellAt(0,1);\n  assertEquals(\"cell (0,1) contents\",\"H 1.2\",cell.asNormalizedText());\n  cell=table.getCellAt(0,2);\n  assertEquals(\"cell (0,2) contents\",\"H 1.3\",cell.asNormalizedText());\n  cell=table.getCellAt(0,3);\n  assertEquals(\"cell (0,3) contents\",\"H 1.3\",cell.asNormalizedText());\n  cell=table.getCellAt(0,4);\n  assertEquals(\"cell (0,4) contents\",\"H 1.5\",cell.asNormalizedText());\n  cell=table.getCellAt(0,5);\n  assertNull(\"cell (0,5) contents\",cell);\n  cell=table.getCellAt(1,0);\n  assertEquals(\"cell (1,0) contents\",\"H 2.1\",cell.asNormalizedText());\n  cell=table.getCellAt(1,1);\n  assertEquals(\"cell (1,1) contents\",\"H 2.2\",cell.asNormalizedText());\n  cell=table.getCellAt(1,2);\n  assertEquals(\"cell (1,2) contents\",\"H 1.3\",cell.asNormalizedText());\n  cell=table.getCellAt(1,3);\n  assertEquals(\"cell (1,3) contents\",\"H 1.3\",cell.asNormalizedText());\n  cell=table.getCellAt(1,4);\n  assertEquals(\"cell (1,4) contents\",\"H 2.5\",cell.asNormalizedText());\n  cell=table.getCellAt(1,5);\n  assertNull(\"cell (0,5) contents\",cell);\n  cell=table.getCellAt(2,0);\n  assertEquals(\"cell (2,0) contents\",\"1.1\",cell.asNormalizedText());\n  cell=table.getCellAt(2,1);\n  assertEquals(\"cell (2,1) contents\",\"1.2\",cell.asNormalizedText());\n  cell=table.getCellAt(2,2);\n  assertEquals(\"cell (2,2) contents\",\"1.2\",cell.asNormalizedText());\n  cell=table.getCellAt(2,3);\n  assertEquals(\"cell (2,3) contents\",\"1.2\",cell.asNormalizedText());\n  cell=table.getCellAt(2,4);\n  assertEquals(\"cell (2,4) contents\",\"1.5\",cell.asNormalizedText());\n  cell=table.getCellAt(2,5);\n  assertNull(\"cell (2,5) contents\",cell);\n  cell=table.getCellAt(3,0);\n  assertEquals(\"cell (3,0) contents\",\"1.1\",cell.asNormalizedText());\n  cell=table.getCellAt(3,1);\n  assertEquals(\"cell (3,1) contents\",\"2.2\",cell.asNormalizedText());\n  cell=table.getCellAt(3,2);\n  assertEquals(\"cell (3,2) contents\",\"2.3\",cell.asNormalizedText());\n  cell=table.getCellAt(3,3);\n  assertEquals(\"cell (3,3) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(3,4);\n  assertEquals(\"cell (3,4) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(3,5);\n  assertNull(\"cell (3,5) contents\",cell);\n  cell=table.getCellAt(4,0);\n  assertEquals(\"cell (4,0) contents\",\"1.1\",cell.asNormalizedText());\n  cell=table.getCellAt(4,1);\n  assertEquals(\"cell (4,1) contents\",\"2.2\",cell.asNormalizedText());\n  cell=table.getCellAt(4,2);\n  assertEquals(\"cell (4,2) contents\",\"3.3\",cell.asNormalizedText());\n  cell=table.getCellAt(4,3);\n  assertEquals(\"cell (4,3) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(4,4);\n  assertEquals(\"cell (4,4) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(4,5);\n  assertNull(\"cell (4,5) contents\",cell);\n  cell=table.getCellAt(5,0);\n  assertEquals(\"cell (5,0) contents\",\"4.1\",cell.asNormalizedText());\n  cell=table.getCellAt(5,1);\n  assertEquals(\"cell (5,1) contents\",\"4.2\",cell.asNormalizedText());\n  cell=table.getCellAt(5,2);\n  assertEquals(\"cell (5,2) contents\",\"4.3\",cell.asNormalizedText());\n  cell=table.getCellAt(5,3);\n  assertEquals(\"cell (5,3) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(5,4);\n  assertEquals(\"cell (5,4) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(5,5);\n  assertNull(\"cell (5,5) contents\",cell);\n  cell=table.getCellAt(6,0);\n  assertEquals(\"cell (6,0) contents\",\"5.1\",cell.asNormalizedText());\n  cell=table.getCellAt(6,1);\n  assertEquals(\"cell (6,1) contents\",\"5.2\",cell.asNormalizedText());\n  cell=table.getCellAt(6,2);\n  assertEquals(\"cell (6,2) contents\",\"5.2\",cell.asNormalizedText());\n  cell=table.getCellAt(6,3);\n  assertEquals(\"cell (6,3) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(6,4);\n  assertEquals(\"cell (6,4) contents\",\"2.4\",cell.asNormalizedText());\n  cell=table.getCellAt(6,5);\n  assertNull(\"cell (6,5) contents\",cell);\n  cell=table.getCellAt(7,0);\n  assertEquals(\"cell (7,0) contents\",\"6.1\",cell.asNormalizedText());\n  cell=table.getCellAt(7,1);\n  assertEquals(\"cell (7,1) contents\",\"5.2\",cell.asNormalizedText());\n  cell=table.getCellAt(7,2);\n  assertEquals(\"cell (7,2) contents\",\"5.2\",cell.asNormalizedText());\n  cell=table.getCellAt(7,3);\n  assertEquals(\"cell (7,3) contents\",\"6.4\",cell.asNormalizedText());\n  cell=table.getCellAt(7,4);\n  assertEquals(\"cell (7,4) contents\",\"6.5\",cell.asNormalizedText());\n  cell=table.getCellAt(7,5);\n  assertNull(\"cell (6,5) contents\",cell);\n  cell=table.getCellAt(8,0);\n  assertNull(\"cell (8,0) contents\",cell);\n}\n",
    "File_Path": "htmlunit/src/test/java/org/htmlunit/html/HtmlTableTest.java",
    "Start": 4025,
    "Stop": 11171,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "getCellAtComplex"
}
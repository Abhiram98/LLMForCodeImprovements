{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use try-with-resources statement",
                "Change_Diff": "- try {\n...\n}\n catch (final IllegalAccessException e) {\n throw new RuntimeException(e);\n}\n+ try (PoolingHttpClientConnectionManager poolingmgr = new PoolingHttpClientConnectionManager(....)) {\n...\n} catch (final IllegalAccessException e) {\n throw new RuntimeException(e);\n}",
                "Description": "The try-with-resources statement ensures that each resource is closed automatically at the end of the statement. It helps to avoid memory leaks and makes the code cleaner.",
                "Start": 6,
                "End": 71
            },
            {
                "Improvement": "Extract repeated code into a separate method",
                "Change_Diff": "- if (sslcontext == null) {\n...\n} else {\n sslSocketFactory = new SSLConnectionSocketFactory(sslcontext, supportedProtocols, supportedCipherSuites, hostnameVerifier);\n}\n+ sslSocketFactory = createSSLConnectionSocketFactory(sslcontext, supportedProtocols, supportedCipherSuites, hostnameVerifier);",
                "Description": "The code for creating a new SSLConnectionSocketFactory is repeated three times, it would be better to extract this logic into a separate private method. This will reduce code duplication and make the code more readable.",
                "Start": 34,
                "End": 46
            }
        ],
        "Final code": "private static PoolingHttpClientConnectionManager createConnectionManager(final HttpClientBuilder builder) throws IllegalAccessException {\n    PublicSuffixMatcher publicSuffixMatcher = getField(builder,\"publicSuffixMatcher\");\n    ...\n    try (PoolingHttpClientConnectionManager poolingmgr = new PoolingHttpClientConnectionManager(....)) {\n        ...\n        sslSocketFactory = createSSLConnectionSocketFactory(sslcontext, supportedProtocols, supportedCipherSuites, hostnameVerifier);\n        ...\n        return poolingmgr;\n    } catch (final IllegalAccessException e) {\n        throw new RuntimeException(e);\n    }\n}\n\nprivate SSLConnectionSocketFactory createSSLConnectionSocketFactory(SSLContext sslcontext, String[] supportedProtocols, String[] supportedCipherSuites, HostnameVerifier hostnameVerifier) {\n    if (sslcontext == null) {\n        if (systemProperties) {\n            return new SSLConnectionSocketFactory((SSLSocketFactory) SSLSocketFactory.getDefault(), supportedProtocols, supportedCipherSuites, hostnameVerifier);\n        } else {\n            return new SSLConnectionSocketFactory(SSLContexts.createDefault(), hostnameVerifier);\n        }\n    } else {\n        return new SSLConnectionSocketFactory(sslcontext, supportedProtocols, supportedCipherSuites, hostnameVerifier);\n    }\n}"
    },
    "Old_Method": "/** \n * Has the exact logic in  {@link HttpClientBuilder#build()} which sets the {@code connManager} part,but with the ability to configure  {@code socketFactory}.\n */\nprivate static PoolingHttpClientConnectionManager createConnectionManager(final HttpClientBuilder builder){\n  try {\n    PublicSuffixMatcher publicSuffixMatcher=getField(builder,\"publicSuffixMatcher\");\n    if (publicSuffixMatcher == null) {\n      publicSuffixMatcher=PublicSuffixMatcherLoader.getDefault();\n    }\n    LayeredConnectionSocketFactory sslSocketFactory=getField(builder,\"sslSocketFactory\");\n    final SocketConfig defaultSocketConfig=getField(builder,\"defaultSocketConfig\");\n    final ConnectionConfig defaultConnectionConfig=getField(builder,\"defaultConnectionConfig\");\n    final boolean systemProperties=getField(builder,\"systemProperties\");\n    final int maxConnTotal=getField(builder,\"maxConnTotal\");\n    final int maxConnPerRoute=getField(builder,\"maxConnPerRoute\");\n    HostnameVerifier hostnameVerifier=getField(builder,\"hostnameVerifier\");\n    final SSLContext sslcontext=getField(builder,\"sslContext\");\n    final DnsResolver dnsResolver=getField(builder,\"dnsResolver\");\n    final long connTimeToLive=getField(builder,\"connTimeToLive\");\n    final TimeUnit connTimeToLiveTimeUnit=getField(builder,\"connTimeToLiveTimeUnit\");\n    if (sslSocketFactory == null) {\n      final String[] supportedProtocols=systemProperties ? split(System.getProperty(\"https.protocols\")) : null;\n      final String[] supportedCipherSuites=systemProperties ? split(System.getProperty(\"https.cipherSuites\")) : null;\n      if (hostnameVerifier == null) {\n        hostnameVerifier=new DefaultHostnameVerifier(publicSuffixMatcher);\n      }\n      if (sslcontext == null) {\n        if (systemProperties) {\n          sslSocketFactory=new SSLConnectionSocketFactory((SSLSocketFactory)SSLSocketFactory.getDefault(),supportedProtocols,supportedCipherSuites,hostnameVerifier);\n        }\n else {\n          sslSocketFactory=new SSLConnectionSocketFactory(SSLContexts.createDefault(),hostnameVerifier);\n        }\n      }\n else {\n        sslSocketFactory=new SSLConnectionSocketFactory(sslcontext,supportedProtocols,supportedCipherSuites,hostnameVerifier);\n      }\n    }\n    final PoolingHttpClientConnectionManager poolingmgr=new PoolingHttpClientConnectionManager(RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\",new SocksConnectionSocketFactory()).register(\"https\",sslSocketFactory).build(),null,null,dnsResolver,connTimeToLive,connTimeToLiveTimeUnit != null ? connTimeToLiveTimeUnit : TimeUnit.MILLISECONDS);\n    if (defaultSocketConfig != null) {\n      poolingmgr.setDefaultSocketConfig(defaultSocketConfig);\n    }\n    if (defaultConnectionConfig != null) {\n      poolingmgr.setDefaultConnectionConfig(defaultConnectionConfig);\n    }\n    if (systemProperties) {\n      String s=System.getProperty(\"http.keepAlive\",\"true\");\n      if (\"true\".equalsIgnoreCase(s)) {\n        s=System.getProperty(\"http.maxConnections\",\"5\");\n        final int max=Integer.parseInt(s);\n        poolingmgr.setDefaultMaxPerRoute(max);\n        poolingmgr.setMaxTotal(2 * max);\n      }\n    }\n    if (maxConnTotal > 0) {\n      poolingmgr.setMaxTotal(maxConnTotal);\n    }\n    if (maxConnPerRoute > 0) {\n      poolingmgr.setDefaultMaxPerRoute(maxConnPerRoute);\n    }\n    return poolingmgr;\n  }\n catch (  final IllegalAccessException e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java",
    "Start": 54222,
    "Stop": 58735,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "createConnectionManager"
}
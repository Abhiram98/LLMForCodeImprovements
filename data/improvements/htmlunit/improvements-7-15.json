{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use StringBuilder for String concatenation",
                "Change_Diff": "- value=value + \" \";\n- value=value + token;\n+ StringBuilder sb = new StringBuilder(value);\n+ sb.append(\" \");\n+ sb.append(token);\n+ value=sb.toString();",
                "Description": "String concatenation using '+' in a loop results in creation of a new String object for every concatenation, which is not efficient. StringBuilder should be used instead.",
                "Start": 13,
                "End": 19
            },
            {
                "Improvement": "Remove redundant code",
                "Change_Diff": "- value=String.join(\" \",StringUtils.split(value,whitespaceChars()));\n- changed=true;",
                "Description": "The code on line 14-17 is duplicated on line 20-23. This is unnecessary and can be removed.",
                "Start": 20,
                "End": 23
            },
            {
                "Improvement": "Correct error message",
                "Change_Diff": "- throw JavaScriptEngine.reportRuntimeError(\"Empty input not allowed\");\n+ throw JavaScriptEngine.reportRuntimeError(\"Token containing whitespace not allowed\");",
                "Description": "The error message for the exception thrown when the token contains any whitespace character is incorrect. It should be corrected to 'Token containing whitespace not allowed'.",
                "Start": 7,
                "End": 7
            }
        ],
        "Final code": "/** \n * Adds the specified token to the underlying string.\n * @param token the token to add\n */\n@JsxFunction public void add(final String token){\n  if (StringUtils.isEmpty(token)) {\n    throw JavaScriptEngine.reportRuntimeError(\"Empty input not allowed\");\n  }\n  if (StringUtils.containsAny(token,whitespaceChars())) {\n    throw JavaScriptEngine.reportRuntimeError(\"Token containing whitespace not allowed\");\n  }\n  boolean changed=false;\n  String value=getAttribValue();\n  if (StringUtils.isEmpty(value)) {\n    value=token;\n    changed=true;\n  }\n else {\n    value=String.join(\" \",StringUtils.split(value,whitespaceChars()));\n    if (position(value,token) < 0) {\n      StringBuilder sb = new StringBuilder(value);\n      if (value.length() != 0 && !isWhitespace(value.charAt(value.length() - 1))) {\n        sb.append(\" \");\n      }\n      sb.append(token);\n      value=sb.toString();\n      changed=true;\n    }\n  }\n  if (changed) {\n    updateAttribute(value);\n  }\n}"
    },
    "Old_Method": "/** \n * Adds the specified token to the underlying string.\n * @param token the token to add\n */\n@JsxFunction public void add(final String token){\n  if (StringUtils.isEmpty(token)) {\n    throw JavaScriptEngine.reportRuntimeError(\"Empty input not allowed\");\n  }\n  if (StringUtils.containsAny(token,whitespaceChars())) {\n    throw JavaScriptEngine.reportRuntimeError(\"Empty input not allowed\");\n  }\n  boolean changed=false;\n  String value=getAttribValue();\n  if (StringUtils.isEmpty(value)) {\n    value=token;\n    changed=true;\n  }\n else {\n    value=String.join(\" \",StringUtils.split(value,whitespaceChars()));\n    if (position(value,token) < 0) {\n      if (value.length() != 0 && !isWhitespace(value.charAt(value.length() - 1))) {\n        value=value + \" \";\n      }\n      value=value + token;\n      changed=true;\n    }\n else     if (getBrowserVersion().hasFeature(JS_DOMTOKENLIST_REMOVE_WHITESPACE_CHARS_ON_ADD)) {\n      value=String.join(\" \",StringUtils.split(value,whitespaceChars()));\n      changed=true;\n    }\n  }\n  if (changed) {\n    updateAttribute(value);\n  }\n}\n",
    "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/dom/DOMTokenList.java",
    "Start": 4586,
    "Stop": 5928,
    "Project_Name": "data/projects/htmlunit",
    "Method_Name": "add"
}
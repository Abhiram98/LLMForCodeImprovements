{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use builder pattern for object instantiation",
                "Change_Diff": "- public WorldMock(Material defaultBlock,Biome defaultBiome,int minHeight,int maxHeight,int grassHeight){...}\n+ public static class WorldMockBuilder {\n    private Material defaultBlock;\n    private Biome defaultBiome;\n    private int minHeight;\n    private int maxHeight;\n    private int grassHeight;\n\n    public WorldMockBuilder(){\n    }\n\n    public WorldMockBuilder setDefaultBlock(Material defaultBlock){\n        this.defaultBlock = defaultBlock;\n        return this;\n    }\n\n    public WorldMockBuilder setDefaultBiome(Biome defaultBiome){\n        this.defaultBiome = defaultBiome;\n        return this;\n    }\n\n    public WorldMockBuilder setMinHeight(int minHeight){\n        this.minHeight = minHeight;\n        return this;\n    }\n\n    public WorldMockBuilder setMaxHeight(int maxHeight){\n        this.maxHeight = maxHeight;\n        return this;\n    }\n\n    public WorldMockBuilder setGrassHeight(int grassHeight){\n        this.grassHeight = grassHeight;\n        return this;\n    }\n\n    public WorldMock build(){\n        return new WorldMock(defaultBlock, defaultBiome, minHeight, maxHeight, grassHeight);\n    }\n}",
                "Description": "The constructor has too many parameters which makes it hard to understand. A builder pattern can be used to make object instantiation more understandable and flexible. It allows you to set only those parameters which you want to set.",
                "Start": 11,
                "End": 54
            },
            {
                "Improvement": "Extract game rules initialization into a separate method",
                "Change_Diff": "- gameRules.put(GameRule.ANNOUNCE_ADVANCEMENTS,true);... gameRules.put(GameRule.SPECTATORS_GENERATE_CHUNKS,true);\n+ this.initializeGameRules();\n\nprivate void initializeGameRules(){\n    gameRules.put(GameRule.ANNOUNCE_ADVANCEMENTS,true);... gameRules.put(GameRule.SPECTATORS_GENERATE_CHUNKS,true);\n}",
                "Description": "The code for initializing game rules is cluttering the constructor. Extract this code into a separate method.",
                "Start": 33,
                "End": 54
            }
        ],
        "Final code": "\n\npublic class WorldMock {\n\n    private Material defaultBlock;\n    private Biome defaultBiome;\n    private int minHeight;\n    private int maxHeight;\n    private int grassHeight;\n\n    public static class WorldMockBuilder {\n        ...\n    }\n\n    private WorldMock(Material defaultBlock, Biome defaultBiome, int minHeight, int maxHeight, int grassHeight) {\n        ...\n        this.initializeGameRules();\n    }\n\n    private void initializeGameRules() {\n        ...\n    }\n}"
    },
    "Old_Method": "/** \n * Creates a new mock world.\n * @param defaultBlock The block that is spawned at locations 1 to {@code grassHeight}\n * @param defaultBiome The biome that every block will be in by default.\n * @param minHeight    The minimum height of the world.\n * @param maxHeight    The maximum height of the world.\n * @param grassHeight  The last {@code y} at which {@code defaultBlock} will spawn.\n */\npublic WorldMock(Material defaultBlock,Biome defaultBiome,int minHeight,int maxHeight,int grassHeight){\n  this.defaultBlock=defaultBlock;\n  this.defaultBiome=defaultBiome;\n  this.minHeight=minHeight;\n  this.maxHeight=maxHeight;\n  this.grassHeight=grassHeight;\n  this.server=MockBukkit.getMock();\n  if (this.server != null) {\n    this.pvp=this.server.getServerConfiguration().isPvpEnabled();\n    this.ticksPerSpawn.putAll(this.server.getServerConfiguration().getTicksPerSpawn());\n  }\n else {\n    this.pvp=true;\n    ticksPerSpawn.put(SpawnCategory.ANIMAL,400);\n    ticksPerSpawn.put(SpawnCategory.MONSTER,1);\n    ticksPerSpawn.put(SpawnCategory.WATER_AMBIENT,1);\n    ticksPerSpawn.put(SpawnCategory.WATER_UNDERGROUND_CREATURE,1);\n    ticksPerSpawn.put(SpawnCategory.WATER_ANIMAL,1);\n    ticksPerSpawn.put(SpawnCategory.AMBIENT,1);\n  }\n  gameRules.put(GameRule.ANNOUNCE_ADVANCEMENTS,true);\n  gameRules.put(GameRule.COMMAND_BLOCK_OUTPUT,true);\n  gameRules.put(GameRule.DISABLE_ELYTRA_MOVEMENT_CHECK,false);\n  gameRules.put(GameRule.DO_DAYLIGHT_CYCLE,true);\n  gameRules.put(GameRule.DO_ENTITY_DROPS,true);\n  gameRules.put(GameRule.DO_FIRE_TICK,true);\n  gameRules.put(GameRule.DO_LIMITED_CRAFTING,false);\n  gameRules.put(GameRule.DO_MOB_LOOT,true);\n  gameRules.put(GameRule.DO_MOB_SPAWNING,true);\n  gameRules.put(GameRule.DO_TILE_DROPS,true);\n  gameRules.put(GameRule.DO_WEATHER_CYCLE,true);\n  gameRules.put(GameRule.KEEP_INVENTORY,false);\n  gameRules.put(GameRule.LOG_ADMIN_COMMANDS,true);\n  gameRules.put(GameRule.MAX_COMMAND_CHAIN_LENGTH,65536);\n  gameRules.put(GameRule.MAX_ENTITY_CRAMMING,24);\n  gameRules.put(GameRule.MOB_GRIEFING,true);\n  gameRules.put(GameRule.NATURAL_REGENERATION,true);\n  gameRules.put(GameRule.RANDOM_TICK_SPEED,3);\n  gameRules.put(GameRule.REDUCED_DEBUG_INFO,false);\n  gameRules.put(GameRule.SEND_COMMAND_FEEDBACK,true);\n  gameRules.put(GameRule.SHOW_DEATH_MESSAGES,true);\n  gameRules.put(GameRule.SPAWN_RADIUS,10);\n  gameRules.put(GameRule.SPECTATORS_GENERATE_CHUNKS,true);\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/WorldMock.java",
    "Start": 13099,
    "Stop": 15638,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "WorldMock"
}
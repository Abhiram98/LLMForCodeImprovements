{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Objects.hashCode() for null-safe hashing",
                "Change_Diff": "- result=prime * result + ((displayName == null) ? 0 : displayName.hashCode());\n- result=prime * result + ((lore == null) ? 0 : lore.hashCode());\n- result=prime * result + ((customModelData == null) ? 0 : customModelData.hashCode());\n+ result=prime * result + Objects.hashCode(displayName);\n+ result=prime * result + Objects.hashCode(lore);\n+ result=prime * result + Objects.hashCode(customModelData);",
                "Description": "Instead of manually checking if each object is null before calling hashCode(), use Objects.hashCode() which is null-safe and returns 0 for null objects.",
                "Start": 5,
                "End": 12
            },
            {
                "Improvement": "Use Collection.isEmpty() before calling hashCode()",
                "Change_Diff": "- result=prime * result + (enchants.isEmpty() ? 0 : enchants.hashCode());\n- result=prime * result + (!persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0);\n+ result=prime * result + (enchants.isEmpty() ? 0 : Objects.hashCode(enchants));\n+ result=prime * result + (persistentDataContainer.isEmpty() ? 0 : Objects.hashCode(persistentDataContainer));",
                "Description": "Instead of manually checking if each collection is empty before calling hashCode(), use Collection.isEmpty() which returns true if the collection is empty.",
                "Start": 13,
                "End": 14
            }
        ],
        "Final code": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + Objects.hashCode(displayName);\n  result=prime * result + Objects.hashCode(lore);\n  result=prime * result + Objects.hashCode(customModelData);\n  result=prime * result + (enchants.isEmpty() ? 0 : Objects.hashCode(enchants));\n  result=prime * result + (hasRepairCost() ? this.repairCost : 0);\n  result=prime * result + (persistentDataContainer.isEmpty() ? 0 : Objects.hashCode(persistentDataContainer));\n  result=prime * result + (hideFlags.isEmpty() ? 0 : Objects.hashCode(hideFlags));\n  result=prime * result + Boolean.hashCode(unbreakable);\n  result=prime * result + (hasDamage() ? this.damage : 0);\n  result=prime * result + (hasDestroyableKeys() ? this.destroyableKeys.hashCode() : 0);\n  result=prime * result + (hasPlaceableKeys() ? this.placeableKeys.hashCode() : 0);\n  return result;\n}"
    },
    "Old_Method": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((displayName == null) ? 0 : displayName.hashCode());\n  result=prime * result + ((lore == null) ? 0 : lore.hashCode());\n  result=prime * result + ((customModelData == null) ? 0 : customModelData.hashCode());\n  result=prime * result + (enchants.isEmpty() ? 0 : enchants.hashCode());\n  result=prime * result + (hasRepairCost() ? this.repairCost : 0);\n  result=prime * result + (!persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0);\n  result=prime * result + (hideFlags.isEmpty() ? 0 : hideFlags.hashCode());\n  result=prime * result + Boolean.hashCode(unbreakable);\n  result=prime * result + (hasDamage() ? this.damage : 0);\n  result=prime * result + (hasDestroyableKeys() ? this.destroyableKeys.hashCode() : 0);\n  result=prime * result + (hasPlaceableKeys() ? this.placeableKeys.hashCode() : 0);\n  return result;\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMock.java",
    "Start": 7167,
    "Stop": 8130,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "hashCode"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace redundant null checks with Objects.requireNonNull",
                "Change_Diff": "- Preconditions.checkNotNull(registration,\"Listener cannot be null\");\n- Preconditions.checkNotNull(event,\"Event cannot be null\");\n+ Objects.requireNonNull(registration, \"Listener cannot be null\");\n+ Objects.requireNonNull(event, \"Event cannot be null\");",
                "Description": "Java 8 introduced Objects.requireNonNull() method which can be used to replace the redundant null checks with Preconditions.checkNotNull(). It throws NullPointerException if the specified object is null.",
                "Start": 2,
                "End": 3
            },
            {
                "Improvement": "Correct RuntimeException rethrow",
                "Change_Diff": "- throw r;\n+ throw (RuntimeException) ex;",
                "Description": "In your catch block, you're throwing 'r' which is not defined. It should be 'ex', the instance of RuntimeException.",
                "Start": 18,
                "End": 18
            }
        ],
        "Final code": "private void callRegisteredListener(@NotNull RegisteredListener registration,@NotNull Event event){\n  Objects.requireNonNull(registration, \"Listener cannot be null\");\n  Objects.requireNonNull(event, \"Event cannot be null\");\n  if (!registration.getPlugin().isEnabled()) {\n    return;\n  }\n  try {\n    registration.callEvent(event);\n  }\n catch (  EventException eventException) {\n    Throwable ex=eventException.getCause();\n    if (!(event instanceof ServerExceptionEvent)) {\n      String msg=\"Could not pass event \" + event.getEventName() + \" to \"+ registration.getPlugin().getDescription().getFullName();\n      callEvent(new ServerExceptionEvent(new ServerEventException(msg,ex,registration.getPlugin(),registration.getListener(),event)));\n    }\n    if (ex instanceof RuntimeException) {\n      throw (RuntimeException) ex;\n    }\n else {\n      throw new EventHandlerException(ex);\n    }\n  }\n}"
    },
    "Old_Method": "private void callRegisteredListener(@NotNull RegisteredListener registration,@NotNull Event event){\n  Preconditions.checkNotNull(registration,\"Listener cannot be null\");\n  Preconditions.checkNotNull(event,\"Event cannot be null\");\n  if (!registration.getPlugin().isEnabled()) {\n    return;\n  }\n  try {\n    registration.callEvent(event);\n  }\n catch (  EventException eventException) {\n    Throwable ex=eventException.getCause();\n    if (!(event instanceof ServerExceptionEvent)) {\n      String msg=\"Could not pass event \" + event.getEventName() + \" to \"+ registration.getPlugin().getDescription().getFullName();\n      callEvent(new ServerExceptionEvent(new ServerEventException(msg,ex,registration.getPlugin(),registration.getListener(),event)));\n    }\n    if (ex instanceof RuntimeException) {\n      throw r;\n    }\n else {\n      throw new EventHandlerException(ex);\n    }\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
    "Start": 18429,
    "Stop": 19391,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "callRegisteredListener"
}
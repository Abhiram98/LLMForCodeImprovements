{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use Objects.hash() for hashing",
            "Change_Diff": "- result=prime * result + ((displayName == null) ? 0 : displayName.hashCode());\n- result=prime * result + ((lore == null) ? 0 : lore.hashCode());\n- result=prime * result + ((customModelData == null) ? 0 : customModelData.hashCode());\n- result=prime * result + (enchants.isEmpty() ? 0 : enchants.hashCode());\n- result=prime * result + (hasRepairCost() ? this.repairCost : 0);\n- result=prime * result + (!persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0);\n- result=prime * result + (hideFlags.isEmpty() ? 0 : hideFlags.hashCode());\n- result=prime * result + Boolean.hashCode(unbreakable);\n- result=prime * result + (hasDamage() ? this.damage : 0);\n- result=prime * result + (hasDestroyableKeys() ? this.destroyableKeys.hashCode() : 0);\n- result=prime * result + (hasPlaceableKeys() ? this.placeableKeys.hashCode() : 0);\n+ return Objects.hash(displayName, lore, customModelData, enchants, hasRepairCost() ? this.repairCost : 0, !persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0, hideFlags, unbreakable, hasDamage() ? this.damage : 0, hasDestroyableKeys() ? this.destroyableKeys.hashCode() : 0, hasPlaceableKeys() ? this.placeableKeys.hashCode() : 0);",
            "Description": "Instead of using a ternary operator and multiplying with prime for each variable, use Objects.hash() for creating hashCode. It will make the code cleaner and more maintainable. Also, it handles the null values so you don't need to do null checks.",
            "Start": 2,
            "End": 13
        }],
        "Final code": "@Override public int hashCode(){\n  return Objects.hash(displayName, lore, customModelData, enchants, hasRepairCost() ? this.repairCost : 0, !persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0, hideFlags, unbreakable, hasDamage() ? this.damage : 0, hasDestroyableKeys() ? this.destroyableKeys.hashCode() : 0, hasPlaceableKeys() ? this.placeableKeys.hashCode() : 0);\n}"
    },
    "Old_Method": "@Override public int hashCode(){\n  final int prime=31;\n  int result=1;\n  result=prime * result + ((displayName == null) ? 0 : displayName.hashCode());\n  result=prime * result + ((lore == null) ? 0 : lore.hashCode());\n  result=prime * result + ((customModelData == null) ? 0 : customModelData.hashCode());\n  result=prime * result + (enchants.isEmpty() ? 0 : enchants.hashCode());\n  result=prime * result + (hasRepairCost() ? this.repairCost : 0);\n  result=prime * result + (!persistentDataContainer.isEmpty() ? persistentDataContainer.hashCode() : 0);\n  result=prime * result + (hideFlags.isEmpty() ? 0 : hideFlags.hashCode());\n  result=prime * result + Boolean.hashCode(unbreakable);\n  result=prime * result + (hasDamage() ? this.damage : 0);\n  result=prime * result + (hasDestroyableKeys() ? this.destroyableKeys.hashCode() : 0);\n  result=prime * result + (hasPlaceableKeys() ? this.placeableKeys.hashCode() : 0);\n  return result;\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/ItemMetaMock.java",
    "Start": 7167,
    "Stop": 8130,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "hashCode"
}
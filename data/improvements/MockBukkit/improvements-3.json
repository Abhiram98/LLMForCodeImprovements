{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use lambda expression instead of anonymous inner class",
                "Change_Diff": "- new Consumer<>(){\n+ (bukkitTask) -> {",
                "Description": "Replace the anonymous inner class with a lambda expression for improved readability and conciseness.",
                "Start": 21,
                "End": 24
            },
            {
                "Improvement": "Combine assignment and comparison",
                "Change_Diff": "- if (executions == toExecute) {\n+ if (++executions == toExecute) {",
                "Description": "Combine the assignment and comparison of the 'executions' variable to simplify the code.",
                "Start": 26,
                "End": 26
            }
        ],
        "Final code": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,(bukkitTask) -> {\n          if (mainThread != Thread.currentThread()) {\n            notPrimaryThread.set(true);\n          }\n          int executions=0;\n          if (++executions == toExecute) {\n            executed.incrementAndGet();\n            bukkitTask.cancel();\n          }\n        },\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}"
    }],
    "Old_Method": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
    "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
    "Start": 17739,
    "Stop": 19060,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "registerMultipleTimerTasksAsynchronously"
}
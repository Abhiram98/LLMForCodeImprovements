{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Fixing the exception handling",
                "Change_Diff": "- throw r;\n+ throw (RuntimeException) ex;",
                "Description": "Current code tries to throw 'r' which is not defined anywhere in the code. It should throw 'ex'.",
                "Start": 16,
                "End": 16
            },
            {
                "Improvement": "Simplify null check",
                "Change_Diff": "- Preconditions.checkNotNull(registration,\"Listener cannot be null\");\n- Preconditions.checkNotNull(event,\"Event cannot be null\");\n+ Objects.requireNonNull(registration, \"Listener cannot be null\");\n+ Objects.requireNonNull(event, \"Event cannot be null\");",
                "Description": "The null check for registration and event can be combined into a single statement to simplify the code.",
                "Start": 2,
                "End": 3
            },
            {
                "Improvement": "Extract error message creation to a method",
                "Change_Diff": "- String msg=\"Could not pass event \" + event.getEventName() + \" to \"+ registration.getPlugin().getDescription().getFullName();\n+ String msg = createErrorMessage(event, registration);",
                "Description": "The creation of the error message is somewhat complex and distracts from the main logic of the method. It can be extracted to a new method.",
                "Start": 11,
                "End": 11
            }
        ],
        "Final code": "private void callRegisteredListener(@NotNull RegisteredListener registration,@NotNull Event event){\n    Objects.requireNonNull(registration, \"Listener cannot be null\");\n    Objects.requireNonNull(event, \"Event cannot be null\");\n    if (!registration.getPlugin().isEnabled()) {\n        return;\n    }\n    try {\n        registration.callEvent(event);\n    } catch (EventException eventException) {\n        Throwable ex = eventException.getCause();\n        if (!(event instanceof ServerExceptionEvent)) {\n            String msg = createErrorMessage(event, registration);\n            callEvent(new ServerExceptionEvent(new ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));\n        }\n        if (ex instanceof RuntimeException) {\n            throw (RuntimeException) ex;\n        } else {\n            throw new EventHandlerException(ex);\n        }\n    }\n}\n\nprivate String createErrorMessage(Event event, RegisteredListener registration) {\n    return \"Could not pass event \" + event.getEventName() + \" to \" + registration.getPlugin().getDescription().getFullName();\n}"
    },
    "Old_Method": "private void callRegisteredListener(@NotNull RegisteredListener registration,@NotNull Event event){\n  Preconditions.checkNotNull(registration,\"Listener cannot be null\");\n  Preconditions.checkNotNull(event,\"Event cannot be null\");\n  if (!registration.getPlugin().isEnabled()) {\n    return;\n  }\n  try {\n    registration.callEvent(event);\n  }\n catch (  EventException eventException) {\n    Throwable ex=eventException.getCause();\n    if (!(event instanceof ServerExceptionEvent)) {\n      String msg=\"Could not pass event \" + event.getEventName() + \" to \"+ registration.getPlugin().getDescription().getFullName();\n      callEvent(new ServerExceptionEvent(new ServerEventException(msg,ex,registration.getPlugin(),registration.getListener(),event)));\n    }\n    if (ex instanceof RuntimeException) {\n      throw r;\n    }\n else {\n      throw new EventHandlerException(ex);\n    }\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
    "Start": 18429,
    "Stop": 19391,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "callRegisteredListener"
}
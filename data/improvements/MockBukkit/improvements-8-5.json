{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code complexity by removing unnecessary condition checks",
                "Change_Diff": "- if (mainThread != Thread.currentThread()) {\n-   notPrimaryThread.set(true);\n- }",
                "Description": "The condition check `if (mainThread != Thread.currentThread())` is unnecessary and can be removed, as the code is being executed in a new Thread, so it will never be the main thread.",
                "Start": 8,
                "End": 11
            },
            {
                "Improvement": "Remove unused AtomicBoolean variable",
                "Change_Diff": "- AtomicBoolean notPrimaryThread=new AtomicBoolean();",
                "Description": "The AtomicBoolean `notPrimaryThread` is never used other than being set in the unnecessary condition check. After removing that condition check, `notPrimaryThread` can be completely removed.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Remove redundant assertTrue and assertFalse calls",
                "Change_Diff": "- assertTrue(executed.get());\n- assertFalse(notPrimaryThread.get());",
                "Description": "The assertTrue and assertFalse calls at the end of the method are redundant as the while loops above them ensure that the conditions are met before they are reached.",
                "Start": 28,
                "End": 29
            }
        ],
        "Final code": "@Test void registerOneTasksAsynchronously(){\n  final Thread mainThread=Thread.currentThread();\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicBoolean completed=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      scheduler.runTaskLater(null,bukkitTask -> {\n        executed.set(true);\n      }\n,1);\n    }\n    finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (!executed.get()) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n}"
    },
    "Old_Method": "@Test void registerOneTasksAsynchronously(){\n  final Thread mainThread=Thread.currentThread();\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      scheduler.runTaskLater(null,bukkitTask -> {\n        if (mainThread != Thread.currentThread()) {\n          notPrimaryThread.set(true);\n        }\n        executed.set(true);\n      }\n,1);\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (!executed.get()) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertTrue(executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
    "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
    "Start": 14506,
    "Stop": 15448,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "registerOneTasksAsynchronously"
}
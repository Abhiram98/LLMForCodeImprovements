{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Iterator instead of for loop for concurrent modification",
                "Change_Diff": "- for (ScheduledTask task : oldTasks) {\n+ Iterator<ScheduledTask> it = oldTasks.iterator();\n+ while (it.hasNext()) {\n+     ScheduledTask task = it.next();",
                "Description": "Since tasks might be added or removed during the iteration of oldTasks, using an Iterator can prevent ConcurrentModificationException.",
                "Start": 6,
                "End": 19
            },
            {
                "Improvement": "Move the check for whether a task is cancelled to the beginning of the loop",
                "Change_Diff": "- if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n+ if (task.isCancelled()) continue;\n+ if (task.getScheduledTick() == currentTick) {",
                "Description": "This avoids unnecessary checks and operations for tasks that have already been cancelled.",
                "Start": 7,
                "End": 19
            }
        ],
        "Final code": "public synchronized void performOneTick() {\n  currentTick++;\n  List<ScheduledTask> oldTasks = scheduledTasks.getCurrentTaskList();\n  Iterator<ScheduledTask> it = oldTasks.iterator();\n  while (it.hasNext()) {\n    ScheduledTask task = it.next();\n    if (task.isCancelled()) continue;\n    if (task.getScheduledTick() == currentTick) {\n      if (task.isSync()) {\n        wrapTask(task).run();\n      } else {\n        pool.submit(wrapTask(task));\n        task.submitted();\n      }\n      if (task instanceof RepeatingTask && !task.isCancelled()) {\n        ((RepeatingTask) task).updateScheduledTick();\n        scheduledTasks.addTask(task);\n      } else {\n        task.cancel();\n      }\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Perform one tick on the server.\n */\npublic synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  for (  ScheduledTask task : oldTasks) {\n    if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n      if (task.isSync()) {\n        wrapTask(task).run();\n      }\n else {\n        pool.submit(wrapTask(task));\n        task.submitted();\n      }\n      if (task instanceof RepeatingTask) {\n        if (!task.isCancelled()) {\n          repeatingTask.updateScheduledTick();\n          scheduledTasks.addTask(task);\n        }\n      }\n else {\n        task.cancel();\n      }\n    }\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMock.java",
    "Start": 4806,
    "Stop": 5483,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "performOneTick"
}
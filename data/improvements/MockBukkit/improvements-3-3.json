{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use ExecutorService for handling threads",
                "Change_Diff": "- Thread thread=new Thread(() -> {\n+ ExecutorService executor = Executors.newSingleThreadExecutor();\n+ executor.submit(() -> {",
                "Description": "Java ExecutorService provides methods to manage termination and methods that can produce a Future for tracking progress of one or more asynchronous tasks.",
                "Start": 5,
                "End": 28
            },
            {
                "Improvement": "Use try-catch to handle InterruptedException",
                "Change_Diff": "- for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n+ try {\n+ for (int i=0; i < toExecute; i++) {\n...\n+ } catch (InterruptedException e) {\n+ Thread.currentThread().interrupt();\n+ }",
                "Description": "To safely handle the InterruptedException that might be thrown when the thread is interrupted, use a try-catch block.",
                "Start": 7,
                "End": 27
            },
            {
                "Improvement": "Use shutdown method to stop ExecutorService",
                "Change_Diff": "- completed.set(true);\n+ executor.shutdown();",
                "Description": "ExecutorService doesn't stop automatically when there are no tasks running, so it's necessary to call shutdown() method when we have finished executing tasks.",
                "Start": 28,
                "End": 28
            }
        ],
        "Final code": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  ExecutorService executor = Executors.newSingleThreadExecutor();\n  executor.submit(() -> {\n    try {\n      for (int i=0; i < toExecute; i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    finally {\n      executor.shutdown();\n    }\n  }\n);\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}"
    },
    "Old_Method": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
    "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
    "Start": 17739,
    "Stop": 19060,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "registerMultipleTimerTasksAsynchronously"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Decrease nesting by using return early pattern",
                "Change_Diff": "- if (gameRule.getType().equals(Boolean.class) && (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\"))) {\n+ if (!gameRule.getType().equals(Boolean.class) || !(value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\"))) return false;",
                "Description": "Instead of nesting conditional statements, return early from the method. This reduces the level of indentation and improves code readability.",
                "Start": 3,
                "End": 25
            },
            {
                "Improvement": "Extract duplicated code into a method",
                "Change_Diff": "- WorldGameRuleChangeEvent event=new WorldGameRuleChangeEvent(this,null,gameRule,value);\n- if (!event.callEvent()) {\n- return false;\n+ if (!callWorldGameRuleChangeEvent(gameRule, value)) return false;",
                "Description": "The code to create a new `WorldGameRuleChangeEvent` and call its `callEvent` method is duplicated. This can be extracted into a separate method, reducing code duplication and improving maintainability.",
                "Start": 13,
                "End": 17
            }
        ],
        "Final code": "public boolean setGameRuleValue(String rule, String value) {\n\n    if (rule == null || GameRule.getByName(rule) == null) return false;\n\n    GameRule<?> gameRule = GameRule.getByName(rule);\n\n    if (!gameRule.getType().equals(Boolean.class) || !(value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\"))) return false;\n\n    if (!callWorldGameRuleChangeEvent(gameRule, value)) return false;\n\n    return setGameRule((GameRule<Boolean>) gameRule, value.equalsIgnoreCase(\"true\"));\n\n    if (gameRule.getType().equals(Integer.class)) {\n        try {\n            int intValue = Integer.parseInt(value);\n            if (!callWorldGameRuleChangeEvent(gameRule, value)) return false;\n\n            return setGameRule((GameRule<Integer>) gameRule, intValue);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    return false;\n}\n\nprivate boolean callWorldGameRuleChangeEvent(GameRule<?> gameRule, String value) {\n    WorldGameRuleChangeEvent event = new WorldGameRuleChangeEvent(this, null, gameRule, value);\n    return event.callEvent();\n}"
    },
    "Old_Method": "@SuppressWarnings(\"unchecked\") @Override @Deprecated(since=\"1.13\") public boolean setGameRuleValue(@Nullable String rule,@NotNull String value){\n  if (rule == null) {\n    return false;\n  }\n  GameRule<?> gameRule=GameRule.getByName(rule);\n  if (gameRule == null) {\n    return false;\n  }\n  if (gameRule.getType().equals(Boolean.class) && (value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\"))) {\n    WorldGameRuleChangeEvent event=new WorldGameRuleChangeEvent(this,null,gameRule,value);\n    if (!event.callEvent()) {\n      return false;\n    }\n    return setGameRule((GameRule<Boolean>)gameRule,value.equalsIgnoreCase(\"true\"));\n  }\n else   if (gameRule.getType().equals(Integer.class)) {\n    try {\n      int intValue=Integer.parseInt(value);\n      WorldGameRuleChangeEvent event=new WorldGameRuleChangeEvent(this,null,gameRule,value);\n      if (!event.callEvent()) {\n        return false;\n      }\n      return setGameRule((GameRule<Integer>)gameRule,intValue);\n    }\n catch (    NumberFormatException e) {\n      return false;\n    }\n  }\n else {\n    return false;\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/WorldMock.java",
    "Start": 60111,
    "Stop": 61224,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "setGameRuleValue"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract task execution to a separate method",
                "Change_Diff": "- if (task.isSync()) {\n-   wrapTask(task).run();\n- } else {\n-   pool.submit(wrapTask(task));\n-   task.submitted();\n- }\n- if (task instanceof RepeatingTask) {\n-   if (!task.isCancelled()) {\n-     repeatingTask.updateScheduledTick();\n-     scheduledTasks.addTask(task);\n-   }\n- } else {\n-   task.cancel();\n- }\n+ executeTask(task);",
                "Description": "The `performOneTick` method is doing too many things. Extract the task execution logic into a separate method. This will make the code easier to read and maintain, and it will also make it easier to test this logic separately.",
                "Start": 4,
                "End": 21
            },
            {
                "Improvement": "Use Iterator instead of for-each loop to avoid ConcurrentModificationException",
                "Change_Diff": "- for (ScheduledTask task : oldTasks) {\n+ Iterator<ScheduledTask> iterator = oldTasks.iterator();\n+ while (iterator.hasNext()) {\n+   ScheduledTask task = iterator.next();",
                "Description": "If the `scheduledTasks` list is modified while it's being iterated over in a for-each loop, it will throw a ConcurrentModificationException. To avoid this, use an Iterator to safely remove items during iteration.",
                "Start": 4,
                "End": 21
            }
        ],
        "Final code": "public synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  Iterator<ScheduledTask> iterator = oldTasks.iterator();\n  while (iterator.hasNext()) {\n    ScheduledTask task = iterator.next();\n    if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n      executeTask(task);\n    }\n  }\n}\n\nprivate void executeTask(ScheduledTask task) {\n  if (task.isSync()) {\n    wrapTask(task).run();\n  } else {\n    pool.submit(wrapTask(task));\n    task.submitted();\n  }\n  if (task instanceof RepeatingTask) {\n    if (!task.isCancelled()) {\n      repeatingTask.updateScheduledTick();\n      scheduledTasks.addTask(task);\n    }\n  } else {\n    task.cancel();\n  }\n}"
    },
    "Old_Method": "/** \n * Perform one tick on the server.\n */\npublic synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  for (  ScheduledTask task : oldTasks) {\n    if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n      if (task.isSync()) {\n        wrapTask(task).run();\n      }\n else {\n        pool.submit(wrapTask(task));\n        task.submitted();\n      }\n      if (task instanceof RepeatingTask) {\n        if (!task.isCancelled()) {\n          repeatingTask.updateScheduledTick();\n          scheduledTasks.addTask(task);\n        }\n      }\n else {\n        task.cancel();\n      }\n    }\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMock.java",
    "Start": 4806,
    "Stop": 5483,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "performOneTick"
}
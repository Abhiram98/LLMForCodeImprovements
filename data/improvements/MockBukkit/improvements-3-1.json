{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Separate thread functionality into its own method",
                "Change_Diff": "- Thread thread=new Thread(() -> {...});\n+ Thread thread = new Thread(this::threadTaskFunction);",
                "Description": "For readability and to follow the Single Responsibility Principle, the functionality inside the Thread instance should be separated into its own method. This would also make the code more testable.",
                "Start": 6,
                "End": 29
            },
            {
                "Improvement": "Use of Thread.sleep instead of Thread.yield",
                "Change_Diff": "- Thread.yield();\n+ Thread.sleep(1);",
                "Description": "Thread.yield() is not guaranteed to do anything at all, whereas Thread.sleep(1) makes the thread sleep for a little while. It is better to use Thread.sleep(1) to allow other threads to process.",
                "Start": 35,
                "End": 35
            },
            {
                "Improvement": "Use Java 8's CompletableFuture for better async handling",
                "Change_Diff": "- Thread thread=new Thread(() -> {...});\n+ CompletableFuture.runAsync(this::threadTaskFunction).thenRun(this::postThreadTask).get();",
                "Description": "Java 8's CompletableFuture provides a more modern, more robust, and more flexible way of handling asynchronous processing. It can replace the manual thread handling and synchronization primitives in the code.",
                "Start": 5,
                "End": 38
            }
        ],
        "Final code": "    @Test void registerMultipleTimerTasksAsynchronously(){\n        final int toExecute=100;\n        final Thread mainThread=Thread.currentThread();\n        AtomicInteger executed=new AtomicInteger();\n        AtomicBoolean completed=new AtomicBoolean();\n        AtomicBoolean notPrimaryThread=new AtomicBoolean();\n        CompletableFuture.runAsync(this::threadTaskFunction).thenRun(this::postThreadTask).get();\n        assertEquals(toExecute,executed.get());\n        assertFalse(notPrimaryThread.get());\n    }\n\n    private void threadTaskFunction() {\n        for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n            scheduler.runTaskTimer(null,new Consumer<>(){\n                int executions=0;\n                @Override public void accept( BukkitTask bukkitTask){\n                    if (mainThread != Thread.currentThread()) {\n                        notPrimaryThread.set(true);\n                    }\n                    executions++;\n                    if (executions == toExecute) {\n                        executed.incrementAndGet();\n                        bukkitTask.cancel();\n                    }\n                }\n            }\n            ,0,1);\n        }\n        completed.set(true);\n    }\n\n    private void postThreadTask() {\n        long startTime=System.currentTimeMillis();\n        while (!completed.get()) {\n            checkTimeout(startTime,thread);\n            scheduler.performOneTick();\n            Thread.sleep(1);\n        }\n        while (executed.get() < toExecute) {\n            checkTimeout(startTime);\n            scheduler.performOneTick();\n        }\n    }"
    },
    "Old_Method": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
    "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
    "Start": 17739,
    "Stop": 19060,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "registerMultipleTimerTasksAsynchronously"
}
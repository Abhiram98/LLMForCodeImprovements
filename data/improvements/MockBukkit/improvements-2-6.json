{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Iterator instead of for-each loop",
                "Change_Diff": "- for (  ScheduledTask task : oldTasks) {\n+ Iterator<ScheduledTask> iterator = oldTasks.iterator();\n+ while(iterator.hasNext()) {\n+   ScheduledTask task = iterator.next();",
                "Description": "To avoid ConcurrentModificationException, use Iterator instead of for-each loop when modifying the collection during iteration.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Simplify conditional statements",
                "Change_Diff": "- if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n-   if (task.isSync()) {\n+ if (task.getScheduledTick() == currentTick && !task.isCancelled() && task.isSync()) {",
                "Description": "Simplify nested conditional statements to improve readability and reduce complexity.",
                "Start": 6,
                "End": 8
            },
            {
                "Improvement": "Move task submission to a separate method",
                "Change_Diff": "- if (task.isSync()) {\n-    wrapTask(task).run();\n- } else {\n-    pool.submit(wrapTask(task));\n-    task.submitted();\n- }\n+ submitTask(task);",
                "Description": "To improve readability and maintainability, move the task submission logic to a separate method.",
                "Start": 8,
                "End": 12
            }
        ],
        "Final code": "public synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  Iterator<ScheduledTask> iterator = oldTasks.iterator();\n  while(iterator.hasNext()) {\n    ScheduledTask task = iterator.next();\n    if (task.getScheduledTick() == currentTick && !task.isCancelled() && task.isSync()) {\n      submitTask(task);\n      if (task instanceof RepeatingTask) {\n        if (!task.isCancelled()) {\n          repeatingTask.updateScheduledTick();\n          scheduledTasks.addTask(task);\n        }\n      } else {\n        task.cancel();\n      }\n    }\n  }\n}\n\nprivate void submitTask(ScheduledTask task) {\n  if (task.isSync()) {\n    wrapTask(task).run();\n  } else {\n    pool.submit(wrapTask(task));\n    task.submitted();\n  }\n}"
    },
    "Old_Method": "/** \n * Perform one tick on the server.\n */\npublic synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  for (  ScheduledTask task : oldTasks) {\n    if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n      if (task.isSync()) {\n        wrapTask(task).run();\n      }\n else {\n        pool.submit(wrapTask(task));\n        task.submitted();\n      }\n      if (task instanceof RepeatingTask) {\n        if (!task.isCancelled()) {\n          repeatingTask.updateScheduledTick();\n          scheduledTasks.addTask(task);\n        }\n      }\n else {\n        task.cancel();\n      }\n    }\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMock.java",
    "Start": 4806,
    "Stop": 5483,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "performOneTick"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract common code to a new method",
                "Change_Diff": "- while (!completed.get()) {\n- checkTimeout(startTime,thread);\n- scheduler.performOneTick();\n- Thread.yield();\n- }\n- while (!executed.get()) {\n- checkTimeout(startTime);\n- scheduler.performOneTick();\n- }\n+ runWhileNotGet(completed, startTime, thread);\n+ runWhileNotGet(executed, startTime);",
                "Description": "The code `while (!completed.get())` and `while (!executed.get())` is duplicated. A new method should be created to avoid code duplication.",
                "Start": 26,
                "End": 32
            },
            {
                "Improvement": "Use try-with-resources for the Thread",
                "Change_Diff": "- Thread thread=new Thread(() -> {\n+ try (Thread thread = new Thread(() -> {",
                "Description": "The thread should be closed properly after its usage. Use try-with-resources to ensure the thread is closed.",
                "Start": 5,
                "End": 22
            }
        ],
        "Final code": "@Test void registerOneTasksAsynchronously(){\n  final Thread mainThread=Thread.currentThread();\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  try (Thread thread = new Thread(() -> {\n    try {\n      scheduler.runTaskLater(null,bukkitTask -> {\n        if (mainThread != Thread.currentThread()) {\n          notPrimaryThread.set(true);\n        }\n        executed.set(true);\n      }\n,1);\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  runWhileNotGet(completed, startTime, thread);\n  runWhileNotGet(executed, startTime);\n  assertTrue(executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n\nprivate void runWhileNotGet(AtomicBoolean atomicBoolean, long startTime, Thread thread) {\n    while (!atomicBoolean.get()) {\n        checkTimeout(startTime, thread);\n        scheduler.performOneTick();\n        Thread.yield();\n    }\n}"
    },
    "Old_Method": "@Test void registerOneTasksAsynchronously(){\n  final Thread mainThread=Thread.currentThread();\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      scheduler.runTaskLater(null,bukkitTask -> {\n        if (mainThread != Thread.currentThread()) {\n          notPrimaryThread.set(true);\n        }\n        executed.set(true);\n      }\n,1);\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (!executed.get()) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertTrue(executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
    "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
    "Start": 14506,
    "Stop": 15448,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "registerOneTasksAsynchronously"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract Consumer to separate method",
                "Change_Diff": "- new Consumer<>() { \n...\n } \n+ this.createConsumer(mainThread, executed, toExecute)",
                "Description": "The Consumer block within the for loop seems to be a complex operation and makes the method less readable. It's advisable to extract this Consumer into a separate method to improve readability and maintainability.",
                "Start": 11,
                "End": 21
            },
            {
                "Improvement": "Extract while loop conditions to separate methods",
                "Change_Diff": "- while (!completed.get()) { \n+ while (!isCompleted()) {",
                "Description": "The while loop conditions are not very readable. It would be beneficial to extract these conditions into separate descriptive methods, enhancing readability and maintainability.",
                "Start": 27,
                "End": 27
            },
            {
                "Improvement": "Use AtomicInteger's getAndIncrement method",
                "Change_Diff": "- executed.incrementAndGet(); \n+ executed.getAndIncrement();",
                "Description": "Rather than using incrementAndGet() method of AtomicInteger which increments the current value and returns the updated value, use getAndIncrement() which increments the current value and returns the original value. This enhances code readability and avoids potential confusion.",
                "Start": 17,
                "End": 17
            }
        ],
        "Final code": "public static void registerMultipleTimerTasksAsynchronously() {\n    final int toExecute=100;\n    final Thread mainThread=Thread.currentThread();\n    AtomicInteger executed=new AtomicInteger();\n    AtomicBoolean completed=new AtomicBoolean();\n    AtomicBoolean notPrimaryThread=new AtomicBoolean();\n    Thread thread=new Thread(() -> {\n        try {\n            for (int i=0; i < toExecute && !Thread.currentThread().isInterrupted(); i++) {\n                scheduler.runTaskTimer(null, createConsumer(mainThread, executed, toExecute),0,1);\n            }\n        } finally {\n            completed.set(true);\n        }\n    });\n    thread.start();\n    long startTime=System.currentTimeMillis();\n    while (!isCompleted(completed)) {\n        checkTimeout(startTime,thread);\n        scheduler.performOneTick();\n        Thread.yield();\n    }\n    while (isNotExecuted(executed, toExecute)) {\n        checkTimeout(startTime);\n        scheduler.performOneTick();\n    }\n    assertEquals(toExecute,executed.get());\n    assertFalse(notPrimaryThread.get());\n}\n\nprivate Consumer<BukkitTask> createConsumer(Thread mainThread, AtomicInteger executed, int toExecute) {\n    return bukkitTask -> {\n        if (mainThread != Thread.currentThread()) {\n            notPrimaryThread.set(true);\n        }\n        executions++;\n        if (executions == toExecute) {\n            executed.getAndIncrement();\n            bukkitTask.cancel();\n        }\n    };\n}\n\nprivate boolean isCompleted(AtomicBoolean completed) {\n    return completed.get();\n}\n\nprivate boolean isNotExecuted(AtomicInteger executed, int toExecute) {\n    return executed.get() < toExecute;\n}"
    },
    "Old_Method": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
    "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
    "Start": 17739,
    "Stop": 19060,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "registerMultipleTimerTasksAsynchronously"
}
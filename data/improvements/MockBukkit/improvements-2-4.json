{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove redundant task cancellation check",
                "Change_Diff": "- if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n+ if (task.getScheduledTick() == currentTick) {",
                "Description": "The `task.isCancelled()` condition is checked twice for repeating tasks. It can be removed from the first check as it is redundant.",
                "Start": 7,
                "End": 13
            },
            {
                "Improvement": "Use try-finally to ensure task submission",
                "Change_Diff": "- pool.submit(wrapTask(task));\n- task.submitted();\n+ try {\n+     pool.submit(wrapTask(task));\n+ } finally {\n+     task.submitted();\n+ }",
                "Description": "In cases where `wrapTask(task).run()` throws an exception, `task.submitted()` may not be called. Using a try-finally block ensures that `task.submitted()` is always called if the task is submitted.",
                "Start": 10,
                "End": 11
            }
        ],
        "Final code": "public synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  for (  ScheduledTask task : oldTasks) {\n    if (task.getScheduledTick() == currentTick) {\n      if (task.isSync()) {\n        wrapTask(task).run();\n      }\n else {\n        try {\n          pool.submit(wrapTask(task));\n        } finally {\n          task.submitted();\n        }\n      }\n      if (task instanceof RepeatingTask) {\n        if (!task.isCancelled()) {\n          repeatingTask.updateScheduledTick();\n          scheduledTasks.addTask(task);\n        }\n      }\n else {\n        task.cancel();\n      }\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Perform one tick on the server.\n */\npublic synchronized void performOneTick(){\n  currentTick++;\n  List<ScheduledTask> oldTasks=scheduledTasks.getCurrentTaskList();\n  for (  ScheduledTask task : oldTasks) {\n    if (task.getScheduledTick() == currentTick && !task.isCancelled()) {\n      if (task.isSync()) {\n        wrapTask(task).run();\n      }\n else {\n        pool.submit(wrapTask(task));\n        task.submitted();\n      }\n      if (task instanceof RepeatingTask) {\n        if (!task.isCancelled()) {\n          repeatingTask.updateScheduledTick();\n          scheduledTasks.addTask(task);\n        }\n      }\n else {\n        task.cancel();\n      }\n    }\n  }\n}\n",
    "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMock.java",
    "Start": 4806,
    "Stop": 5483,
    "Project_Name": "data/projects/MockBukkit",
    "Method_Name": "performOneTick"
}
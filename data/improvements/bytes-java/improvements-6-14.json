{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Separate different shift logic into two methods",
                "Change_Diff": "- if (byteOrder == ByteOrder.BIG_ENDIAN) {...}\n- else {...}\n+ return byteOrder == ByteOrder.BIG_ENDIAN ? shiftLeftBigEndian(byteArray, shiftMod, offsetBytes) : shiftLeftLittleEndian(byteArray, shiftMod, offsetBytes);",
                "Description": "The method is handling two different cases of shifting (BIG_ENDIAN and LITTLE_ENDIAN). Separating this into two different methods will improve readability and maintainability. It would also allow for potential reusability of the shifting logic for each endianness in other areas of the code.",
                "Start": 14,
                "End": 38
            },
            {
                "Improvement": "Avoid modifying input parameters",
                "Change_Diff": "- byteArray[i]=0;\n+ newArr[i]=0;\n...\n- byteArray[i]=dst;\n+ newArr[i]=dst;",
                "Description": "Modifying input parameters can lead to unexpected behavior and bugs. Instead, create a new byte array and return it. This ensures that the original data is not unintentionally altered.",
                "Start": 10,
                "End": 38
            }
        ],
        "Final code": "static byte[] shiftLeft(byte[] byteArray,int shiftBitCount,ByteOrder byteOrder){\n  final int shiftMod=shiftBitCount % 8;\n  final byte carryMask=(byte)((1 << shiftMod) - 1);\n  final int offsetBytes=(shiftBitCount / 8);\n  byte[] newArr = new byte[byteArray.length];\n  return byteOrder == ByteOrder.BIG_ENDIAN ? shiftLeftBigEndian(newArr, byteArray, shiftMod, offsetBytes) : shiftLeftLittleEndian(newArr, byteArray, shiftMod, offsetBytes);\n}\n\nstatic byte[] shiftLeftBigEndian(byte[] newArr, byte[] byteArray, int shiftMod, int offsetBytes) {\n  int sourceIndex;\n  for (int i=0; i < byteArray.length; i++) {\n    sourceIndex=i + offsetBytes;\n    if (sourceIndex >= byteArray.length) {\n      newArr[i]=0;\n    } else {\n      byte src=byteArray[sourceIndex];\n      byte dst=(byte)(src << shiftMod);\n      if (sourceIndex + 1 < byteArray.length) {\n        dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;\n      }\n      newArr[i]=dst;\n    }\n  }\n  return newArr;\n}\n\nstatic byte[] shiftLeftLittleEndian(byte[] newArr, byte[] byteArray, int shiftMod, int offsetBytes) {\n  int sourceIndex;\n  for (int i=byteArray.length - 1; i >= 0; i--) {\n    sourceIndex=i - offsetBytes;\n    if (sourceIndex < 0) {\n      newArr[i]=0;\n    } else {\n      byte src=byteArray[sourceIndex];\n      byte dst=(byte)(src << shiftMod);\n      if (sourceIndex - 1 >= 0) {\n        dst|=byteArray[sourceIndex - 1] >>> (8 - shiftMod) & carryMask & 0xff;\n      }\n      newArr[i]=dst;\n    }\n  }\n  return newArr;\n}"
    },
    "Old_Method": "/** \n * Light shift of whole byte array by shiftBitCount bits. This method will alter the input byte array. <p> <strong>Analysis<\/strong> <ul> <li>Time Complexity: <code>O(n)<\/code><\/li> <li>Space Complexity: <code>O(1)<\/code><\/li> <li>Alters Parameters: <code>true<\/code><\/li> <\/ul> <\/p>\n * @param byteArray     to shift\n * @param shiftBitCount how many bits to shift\n * @param byteOrder     endianness of given byte array\n * @return shifted byte array\n */\nstatic byte[] shiftLeft(byte[] byteArray,int shiftBitCount,ByteOrder byteOrder){\n  final int shiftMod=shiftBitCount % 8;\n  final byte carryMask=(byte)((1 << shiftMod) - 1);\n  final int offsetBytes=(shiftBitCount / 8);\n  int sourceIndex;\n  if (byteOrder == ByteOrder.BIG_ENDIAN) {\n    for (int i=0; i < byteArray.length; i++) {\n      sourceIndex=i + offsetBytes;\n      if (sourceIndex >= byteArray.length) {\n        byteArray[i]=0;\n      }\n else {\n        byte src=byteArray[sourceIndex];\n        byte dst=(byte)(src << shiftMod);\n        if (sourceIndex + 1 < byteArray.length) {\n          dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;\n        }\n        byteArray[i]=dst;\n      }\n    }\n  }\n else {\n    for (int i=byteArray.length - 1; i >= 0; i--) {\n      sourceIndex=i - offsetBytes;\n      if (sourceIndex < 0) {\n        byteArray[i]=0;\n      }\n else {\n        byte src=byteArray[sourceIndex];\n        byte dst=(byte)(src << shiftMod);\n        if (sourceIndex - 1 >= 0) {\n          dst|=byteArray[sourceIndex - 1] >>> (8 - shiftMod) & carryMask & 0xff;\n        }\n        byteArray[i]=dst;\n      }\n    }\n  }\n  return byteArray;\n}\n",
    "File_Path": "bytes-java/src/main/java/at/favre/lib/bytes/Util.java",
    "Start": 9808,
    "Stop": 12110,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "shiftLeft"
}
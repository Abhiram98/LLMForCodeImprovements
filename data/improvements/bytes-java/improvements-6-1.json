{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use a separate output byte array",
                "Change_Diff": "- byte[] byteArray\n+ byte[] outputArray = new byte[byteArray.length]",
                "Description": "Instead of altering the input byte array, it will be better to use a separate output byte array. This ensures that the original data is not lost, which can be useful for debugging and makes the method safer to use, since it doesn't unexpectedly alter its input.",
                "Start": 14,
                "End": 44
            },
            {
                "Improvement": "Extract duplicate code into a method",
                "Change_Diff": "- byte src=byteArray[sourceIndex];\n- byte dst=(byte)(src << shiftMod);\n- if (sourceIndex + 1 < byteArray.length) {\n- dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;\n- }\n- byteArray[i]=dst;\n+ performShiftOperation(byteArray, outputArray, i, sourceIndex, shiftMod, carryMask)",
                "Description": "The block of code that performs the shift operation is duplicated. Instead, we can extract this into a separate private method that can be called from both places. This reduces code duplication and makes it easier to maintain and understand the code.",
                "Start": 19,
                "End": 29
            }
        ],
        "Final code": "static byte[] shiftLeft(byte[] byteArray,int shiftBitCount,ByteOrder byteOrder){\n  final int shiftMod=shiftBitCount % 8;\n  final byte carryMask=(byte)((1 << shiftMod) - 1);\n  final int offsetBytes=(shiftBitCount / 8);\n  int sourceIndex;\n  byte[] outputArray = new byte[byteArray.length];\n  if (byteOrder == ByteOrder.BIG_ENDIAN) {\n    for (int i=0; i < byteArray.length; i++) {\n      sourceIndex=i + offsetBytes;\n      if (sourceIndex >= byteArray.length) {\n        outputArray[i]=0;\n      }\n      else {\n        performShiftOperation(byteArray, outputArray, i, sourceIndex, shiftMod, carryMask);\n      }\n    }\n  }\n  else {\n    for (int i=byteArray.length - 1; i >= 0; i--) {\n      sourceIndex=i - offsetBytes;\n      if (sourceIndex < 0) {\n        outputArray[i]=0;\n      }\n      else {\n        performShiftOperation(byteArray, outputArray, i, sourceIndex, shiftMod, carryMask);\n      }\n    }\n  }\n  return outputArray;\n}\n\nprivate void performShiftOperation(byte[] inputArray, byte[] outputArray, int i, int sourceIndex, int shiftMod, byte carryMask) {\n  byte src=inputArray[sourceIndex];\n  byte dst=(byte)(src << shiftMod);\n  if (sourceIndex + 1 < inputArray.length) {\n    dst|=inputArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;\n  }\n  outputArray[i]=dst;\n}"
    },
    "Old_Method": "/** \n * Light shift of whole byte array by shiftBitCount bits. This method will alter the input byte array. <p> <strong>Analysis<\/strong> <ul> <li>Time Complexity: <code>O(n)<\/code><\/li> <li>Space Complexity: <code>O(1)<\/code><\/li> <li>Alters Parameters: <code>true<\/code><\/li> <\/ul> <\/p>\n * @param byteArray     to shift\n * @param shiftBitCount how many bits to shift\n * @param byteOrder     endianness of given byte array\n * @return shifted byte array\n */\nstatic byte[] shiftLeft(byte[] byteArray,int shiftBitCount,ByteOrder byteOrder){\n  final int shiftMod=shiftBitCount % 8;\n  final byte carryMask=(byte)((1 << shiftMod) - 1);\n  final int offsetBytes=(shiftBitCount / 8);\n  int sourceIndex;\n  if (byteOrder == ByteOrder.BIG_ENDIAN) {\n    for (int i=0; i < byteArray.length; i++) {\n      sourceIndex=i + offsetBytes;\n      if (sourceIndex >= byteArray.length) {\n        byteArray[i]=0;\n      }\n else {\n        byte src=byteArray[sourceIndex];\n        byte dst=(byte)(src << shiftMod);\n        if (sourceIndex + 1 < byteArray.length) {\n          dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;\n        }\n        byteArray[i]=dst;\n      }\n    }\n  }\n else {\n    for (int i=byteArray.length - 1; i >= 0; i--) {\n      sourceIndex=i - offsetBytes;\n      if (sourceIndex < 0) {\n        byteArray[i]=0;\n      }\n else {\n        byte src=byteArray[sourceIndex];\n        byte dst=(byte)(src << shiftMod);\n        if (sourceIndex - 1 >= 0) {\n          dst|=byteArray[sourceIndex - 1] >>> (8 - shiftMod) & carryMask & 0xff;\n        }\n        byteArray[i]=dst;\n      }\n    }\n  }\n  return byteArray;\n}\n",
    "File_Path": "bytes-java/src/main/java/at/favre/lib/bytes/Util.java",
    "Start": 9808,
    "Stop": 12110,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "shiftLeft"
}
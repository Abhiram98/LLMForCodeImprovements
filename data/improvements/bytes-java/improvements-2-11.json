{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace System.out.println with logger",
                "Change_Diff": "- System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n+ logger.info(\"\\n\\nNEW TEST: {} bytes\\n\", i);\n\n- System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n+ logger.info(\"radix{}:\\t{}\", j, encodedBigEndian);\n\n- System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n+ logger.info(\"orig   :\\t{}\", rnd.encodeHex());\n\n- System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n+ logger.info(\"enc    :\\t{}\", Bytes.wrap(decoded).encodeHex());\n\n- System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n+ logger.info(\"{} leading zero mismatches of {} encodings\", leadingZeroHits, encodings);",
                "Description": "Using a logger instead of System.out.println gives us more control over the logging level and allows for better management of the logging messages.",
                "Start": 5,
                "End": 21
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int i=0; i < 64; i++) {\n+ for (int i : new int[64]) {",
                "Description": "Using an enhanced for loop (also known as a \"for-each\" loop) makes the code cleaner and easier to read, particularly when we don't need to know the index of the current item.",
                "Start": 3,
                "End": 3
            }
        ],
        "Final code": "@Test\npublic void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n\n  for (int i : new int[64]) {\n    Bytes rnd=Bytes.random(i % 256);\n    logger.info(\"\\n\\nNEW TEST: {} bytes\\n\", i);\n\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      logger.info(\"radix{}:\\t{}\", j, encodedBigEndian);\n      logger.info(\"orig   :\\t{}\", rnd.encodeHex());\n      logger.info(\"enc    :\\t{}\", Bytes.wrap(decoded).encodeHex());\n\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n      else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  logger.info(\"{} leading zero mismatches of {} encodings\", leadingZeroHits, encodings);\n}"
    },
    "Old_Method": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n      System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n      System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n}\n",
    "File_Path": "bytes-java/src/test/java/at/favre/lib/bytes/BinaryToTextEncodingTest.java",
    "Start": 3738,
    "Stop": 5067,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "encodeDecodeRadix"
}
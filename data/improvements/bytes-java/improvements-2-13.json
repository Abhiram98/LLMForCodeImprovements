{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace System.out.println with logger",
                "Change_Diff": "- System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n- System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n- System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n- System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n- System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n+ logger.info(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n+ logger.info(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n+ logger.info(\"orig   :\\t\" + rnd.encodeHex());\n+ logger.info(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n+ logger.info(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");",
                "Description": "Using System.out.println for logging is not recommended because it cannot be easily turned off, and it is not as flexible as using a logger. With a logger, you can set levels of importance for messages, and you can redirect them to different outputs.",
                "Start": 5,
                "End": 13
            },
            {
                "Improvement": "Refactor If-Else condition",
                "Change_Diff": "- if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n-   assertArrayEquals(rnd.array(),decoded);\n- }\n- else {\n-   leadingZeroHits++;\n-   assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n- }\n+ byte[] expected = rnd.length() <= 0 || rnd.byteAt(0) != 0 ? rnd.array() : rnd.resize(rnd.length() - 1).array();\n+ assertArrayEquals(expected, decoded);\n+ if (!(rnd.length() <= 0 || rnd.byteAt(0) != 0)) leadingZeroHits++;",
                "Description": "The If-Else condition can be refactored to remove the redundancy of 'assertArrayEquals' statement. Instead, you can determine the array to compare beforehand.",
                "Start": 14,
                "End": 20
            }
        ],
        "Final code": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    logger.info(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      logger.info(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n      logger.info(\"orig   :\\t\" + rnd.encodeHex());\n      logger.info(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n      byte[] expected = rnd.length() <= 0 || rnd.byteAt(0) != 0 ? rnd.array() : rnd.resize(rnd.length() - 1).array();\n      assertArrayEquals(expected, decoded);\n      if (!(rnd.length() <= 0 || rnd.byteAt(0) != 0)) leadingZeroHits++;\n    }\n  }\n  logger.info(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n}"
    },
    "Old_Method": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n      System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n      System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n}\n",
    "File_Path": "bytes-java/src/test/java/at/favre/lib/bytes/BinaryToTextEncodingTest.java",
    "Start": 3738,
    "Stop": 5067,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "encodeDecodeRadix"
}
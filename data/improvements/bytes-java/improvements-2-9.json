{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid using System.out.println for debugging",
                "Change_Diff": "- System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n- System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n- System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n- System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n- System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n+ logger.debug(\"\\n\\nNEW TEST: {} bytes\\n\", i);\n+ logger.debug(\"radix{}:\\t{}\", j, encodedBigEndian);\n+ logger.debug(\"orig   :\\t{}\", rnd.encodeHex());\n+ logger.debug(\"enc    :\\t{}\", Bytes.wrap(decoded).encodeHex());\n+ logger.info(\"{} leading zero mismatches of {} encodings\", leadingZeroHits, encodings);",
                "Description": "Prefer using a logging library, which can provide more control over verbosity, levels, and output formats, and can be turned off in production code.",
                "Start": 5,
                "End": 17
            },
            {
                "Improvement": "Extract instantiation of BinaryToTextEncoding.EncoderDecoder outside of the loop",
                "Change_Diff": "- BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n+ BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(36);",
                "Description": "It's unnecessary to instantiate a new EncoderDecoder object for each iteration, move it outside of the loop to improve performance.",
                "Start": 9,
                "End": 9
            }
        ],
        "Final code": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(36);\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    logger.debug(\"\\n\\nNEW TEST: {} bytes\\n\", i);\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      logger.debug(\"radix{}:\\t{}\", j, encodedBigEndian);\n      logger.debug(\"orig   :\\t{}\", rnd.encodeHex());\n      logger.debug(\"enc    :\\t{}\", Bytes.wrap(decoded).encodeHex());\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  logger.info(\"{} leading zero mismatches of {} encodings\", leadingZeroHits, encodings);\n}"
    },
    "Old_Method": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n      System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n      System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n}\n",
    "File_Path": "bytes-java/src/test/java/at/favre/lib/bytes/BinaryToTextEncodingTest.java",
    "Start": 3738,
    "Stop": 5067,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "encodeDecodeRadix"
}
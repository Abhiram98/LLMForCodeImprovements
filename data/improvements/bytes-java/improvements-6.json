{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use a bitwise AND operation instead of an arithmetic AND operation",
                "Change_Diff": "- dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;",
                "Description": "Instead of using an arithmetic AND operation to mask the carryMask, use a bitwise AND operation.",
                "Start": 16,
                "End": 16,
                "Final_code": "- dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask;"
            },
            {
                "Improvement": "Remove unnecessary check for sourceIndex + 1 < byteArray.length",
                "Change_Diff": "- if (sourceIndex + 1 < byteArray.length) {",
                "Description": "Remove the check for sourceIndex + 1 < byteArray.length as it is already guaranteed by the previous condition.",
                "Start": 14,
                "End": 14,
                "Final_code": ""
            },
            {
                "Improvement": "Remove unnecessary check for sourceIndex - 1 >= 0",
                "Change_Diff": "- if (sourceIndex - 1 >= 0) {",
                "Description": "Remove the check for sourceIndex - 1 >= 0 as it is already guaranteed by the previous condition.",
                "Start": 24,
                "End": 24,
                "Final_code": ""
            }
        ],
        "Final code": "static byte[] shiftLeft(byte[] byteArray, int shiftBitCount, ByteOrder byteOrder) {\n    final int shiftMod = shiftBitCount % 8;\n    final byte carryMask = (byte) ((1 << shiftMod) - 1);\n    final int offsetBytes = (shiftBitCount / 8);\n    int sourceIndex;\n    if (byteOrder == ByteOrder.BIG_ENDIAN) {\n        for (int i = 0; i < byteArray.length; i++) {\n            sourceIndex = i + offsetBytes;\n            if (sourceIndex >= byteArray.length) {\n                byteArray[i] = 0;\n            } else {\n                byte src = byteArray[sourceIndex];\n                byte dst = (byte) (src << shiftMod);\n                dst |= byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask;\n                byteArray[i] = dst;\n            }\n        }\n    } else {\n        for (int i = byteArray.length - 1; i >= 0; i--) {\n            sourceIndex = i - offsetBytes;\n            if (sourceIndex < 0) {\n                byteArray[i] = 0;\n            } else {\n                byte src = byteArray[sourceIndex];\n                byte dst = (byte) (src << shiftMod);\n                dst |= byteArray[sourceIndex - 1] >>> (8 - shiftMod) & carryMask;\n                byteArray[i] = dst;\n            }\n        }\n    }\n    return byteArray;\n}"
    }],
    "Old_Method": "/** \n * Light shift of whole byte array by shiftBitCount bits. This method will alter the input byte array. <p> <strong>Analysis<\/strong> <ul> <li>Time Complexity: <code>O(n)<\/code><\/li> <li>Space Complexity: <code>O(1)<\/code><\/li> <li>Alters Parameters: <code>true<\/code><\/li> <\/ul> <\/p>\n * @param byteArray     to shift\n * @param shiftBitCount how many bits to shift\n * @param byteOrder     endianness of given byte array\n * @return shifted byte array\n */\nstatic byte[] shiftLeft(byte[] byteArray,int shiftBitCount,ByteOrder byteOrder){\n  final int shiftMod=shiftBitCount % 8;\n  final byte carryMask=(byte)((1 << shiftMod) - 1);\n  final int offsetBytes=(shiftBitCount / 8);\n  int sourceIndex;\n  if (byteOrder == ByteOrder.BIG_ENDIAN) {\n    for (int i=0; i < byteArray.length; i++) {\n      sourceIndex=i + offsetBytes;\n      if (sourceIndex >= byteArray.length) {\n        byteArray[i]=0;\n      }\n else {\n        byte src=byteArray[sourceIndex];\n        byte dst=(byte)(src << shiftMod);\n        if (sourceIndex + 1 < byteArray.length) {\n          dst|=byteArray[sourceIndex + 1] >>> (8 - shiftMod) & carryMask & 0xff;\n        }\n        byteArray[i]=dst;\n      }\n    }\n  }\n else {\n    for (int i=byteArray.length - 1; i >= 0; i--) {\n      sourceIndex=i - offsetBytes;\n      if (sourceIndex < 0) {\n        byteArray[i]=0;\n      }\n else {\n        byte src=byteArray[sourceIndex];\n        byte dst=(byte)(src << shiftMod);\n        if (sourceIndex - 1 >= 0) {\n          dst|=byteArray[sourceIndex - 1] >>> (8 - shiftMod) & carryMask & 0xff;\n        }\n        byteArray[i]=dst;\n      }\n    }\n  }\n  return byteArray;\n}\n",
    "File_Path": "bytes-java/src/main/java/at/favre/lib/bytes/Util.java",
    "Start": 9808,
    "Stop": 12110,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "shiftLeft"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code duplication",
                "Change_Diff": "- assertFalse(Bytes.from((byte)8).bitAt(0));\n- assertFalse(Bytes.from((byte)8).bitAt(1));\n- assertFalse(Bytes.from((byte)8).bitAt(2));\n- assertTrue(Bytes.from((byte)8).bitAt(3));\n- assertFalse(Bytes.from((byte)8).bitAt(4));\n- assertFalse(Bytes.from((byte)0b11010000).bitAt(0));\n- assertFalse(Bytes.from((byte)0b10010000).bitAt(0));\n- assertTrue(Bytes.from((byte)0b10010001).bitAt(0));\n- assertFalse(Bytes.from((byte)0b0010_1000).bitAt(4));\n+ checkBits((byte)8, new boolean[]{false, false, false, true, false});\n+ checkBits((byte)0b11010000, new boolean[]{false});\n+ checkBits((byte)0b10010000, new boolean[]{false});\n+ checkBits((byte)0b10010001, new boolean[]{true});\n+ checkBits((byte)0b0010_1000, new boolean[]{false}, 4);",
                "Description": "There is a lot of code duplication when calling `Bytes.from` and `bitAt` methods. A helper method can be created to reduce this duplication.",
                "Start": 2,
                "End": 20
            },
            {
                "Improvement": "Extract common test patterns",
                "Change_Diff": "- try {\n-   Bytes.allocate(1).bitAt(8);\n-   fail();\n- }\n- catch (IndexOutOfBoundsException ignored) {\n- }\n- try {\n-   Bytes.allocate(16).bitAt(-1);\n-   fail();\n- }\n- catch (IndexOutOfBoundsException ignored) {\n- }\n+ testException(() -> Bytes.allocate(1).bitAt(8));\n+ testException(() -> Bytes.allocate(16).bitAt(-1));",
                "Description": "The code contains several patterns for testing exceptions. These can be extracted into a separate method to reduce duplication.",
                "Start": 21,
                "End": 30
            }
        ],
        "Final code": "@Test public void bitAt(){\n  for (int i=0; i < 8; i++) {\n    assertFalse(Bytes.allocate(1).bitAt(i));\n  }\n  for (int i=0; i < 8; i++) {\n    assertTrue(Bytes.from((byte)0xFF).bitAt(i));\n  }\n  checkBits((byte)8, new boolean[]{false, false, false, true, false});\n  checkBits((byte)0b11010000, new boolean[]{false});\n  checkBits((byte)0b10010000, new boolean[]{false});\n  checkBits((byte)0b10010001, new boolean[]{true});\n  checkBits((byte)0b0010_1000, new boolean[]{false}, 4);\n  assertFalse(Bytes.parseBinary(\"101111110101100100110010011111001011101110110011011000010000000\").bitAt(54));\n  testException(() -> Bytes.allocate(1).bitAt(8));\n  testException(() -> Bytes.allocate(16).bitAt(-1));\n  Bytes bytes=Bytes.wrap(new byte[]{1,0,2,0}).byteOrder(ByteOrder.LITTLE_ENDIAN);\n  assertTrue(bytes.bitAt(0));\n  assertTrue(bytes.bitAt(17));\n  assertFalse(bytes.bitAt(8));\n  assertFalse(bytes.bitAt(31));\n}\n\nprivate void checkBits(byte b, boolean[] expecteds, int startIdx) {\n  for (int i = 0; i < expecteds.length; i++) {\n    assertEquals(expecteds[i], Bytes.from(b).bitAt(startIdx + i));\n  }\n}\n\nprivate void checkBits(byte b, boolean[] expecteds) {\n  checkBits(b, expecteds, 0);\n}\n\nprivate void testException(Runnable r) {\n  try {\n    r.run();\n    fail();\n  } catch (IndexOutOfBoundsException ignored) {\n  }\n}"
    },
    "Old_Method": "@Test public void bitAt(){\n  for (int i=0; i < 8; i++) {\n    assertFalse(Bytes.allocate(1).bitAt(i));\n  }\n  for (int i=0; i < 8; i++) {\n    assertTrue(Bytes.from((byte)0xFF).bitAt(i));\n  }\n  assertFalse(Bytes.from((byte)8).bitAt(0));\n  assertFalse(Bytes.from((byte)8).bitAt(1));\n  assertFalse(Bytes.from((byte)8).bitAt(2));\n  assertTrue(Bytes.from((byte)8).bitAt(3));\n  assertFalse(Bytes.from((byte)8).bitAt(4));\n  assertFalse(Bytes.from((byte)0b11010000).bitAt(0));\n  assertFalse(Bytes.from((byte)0b10010000).bitAt(0));\n  assertTrue(Bytes.from((byte)0b10010001).bitAt(0));\n  assertFalse(Bytes.from((byte)0b0010_1000).bitAt(4));\n  assertFalse(Bytes.parseBinary(\"101111110101100100110010011111001011101110110011011000010000000\").bitAt(54));\n  try {\n    Bytes.allocate(1).bitAt(8);\n    fail();\n  }\n catch (  IndexOutOfBoundsException ignored) {\n  }\n  try {\n    Bytes.allocate(16).bitAt(-1);\n    fail();\n  }\n catch (  IndexOutOfBoundsException ignored) {\n  }\n  Bytes bytes=Bytes.wrap(new byte[]{1,0,2,0}).byteOrder(ByteOrder.LITTLE_ENDIAN);\n  assertTrue(bytes.bitAt(0));\n  assertTrue(bytes.bitAt(17));\n  assertFalse(bytes.bitAt(8));\n  assertFalse(bytes.bitAt(31));\n}\n",
    "File_Path": "bytes-java/src/test/java/at/favre/lib/bytes/BytesMiscTest.java",
    "Start": 12738,
    "Stop": 14127,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "bitAt"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace System.out.println with a logger",
                "Change_Diff": "- System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n+ logger.info(\"\\n\\nNEW TEST: {} bytes\\n\", i);",
                "Description": "System.out.println slows down your application and is generally not considered good practice for real-time logging because it can't be easily controlled without changing the code. Instead, use a logger such as java.util.logging or a third-party logger like Log4j or SLF4J.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Extract BinaryToTextEncoding.EncoderDecoder instantiation",
                "Change_Diff": "- BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n+ BinaryToTextEncoding.EncoderDecoder encoding = encoders[j - 2];",
                "Description": "The instantiation of BinaryToTextEncoding.EncoderDecoder can be extracted out of the inner loop since the same instance can be used for multiple operations.",
                "Start": 8,
                "End": 8
            },
            {
                "Improvement": "Replace repetitive System.out.println with a single formatted output",
                "Change_Diff": "- System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n- System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n- System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n+ logger.info(\"radix{}:\t{}\norig   :\t{}\nenc    :\t{}\", j, encodedBigEndian, rnd.encodeHex(), Bytes.wrap(decoded).encodeHex());",
                "Description": "Instead of three separate System.out.println calls, use a single call with a formatted string to improve readability.",
                "Start": 11,
                "End": 13
            }
        ],
        "Final code": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  Logger logger = Logger.getLogger(ClassName.class.getName());\n  BinaryToTextEncoding.EncoderDecoder[] encoders = new BinaryToTextEncoding.EncoderDecoder[35];\n  for (int i = 2; i <= 36; i++) {\n    encoders[i - 2] = new BinaryToTextEncoding.BaseRadixNumber(i);\n  }\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    logger.info(\"\\n\\nNEW TEST: {} bytes\\n\", i);\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding = encoders[j - 2];\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      logger.info(\"radix{}:\t{}\norig   :\t{}\nenc    :\t{}\", j, encodedBigEndian, rnd.encodeHex(), Bytes.wrap(decoded).encodeHex());\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  logger.info(\"{} leading zero mismatches of {} encodings\", leadingZeroHits, encodings);\n}"
    },
    "Old_Method": "@Test public void encodeDecodeRadix(){\n  int leadingZeroHits=0;\n  int encodings=0;\n  for (int i=0; i < 64; i++) {\n    Bytes rnd=Bytes.random(i % 256);\n    System.out.println(\"\\n\\nNEW TEST: \" + i + \" bytes\\n\");\n    for (int j=2; j <= 36; j++) {\n      encodings++;\n      BinaryToTextEncoding.EncoderDecoder encoding=new BinaryToTextEncoding.BaseRadixNumber(j);\n      String encodedBigEndian=encoding.encode(rnd.array(),ByteOrder.BIG_ENDIAN);\n      byte[] decoded=encoding.decode(encodedBigEndian);\n      System.out.println(\"radix\" + j + \":\\t\"+ encodedBigEndian);\n      System.out.println(\"orig   :\\t\" + rnd.encodeHex());\n      System.out.println(\"enc    :\\t\" + Bytes.wrap(decoded).encodeHex());\n      if (rnd.length() <= 0 || rnd.byteAt(0) != 0) {\n        assertArrayEquals(rnd.array(),decoded);\n      }\n else {\n        leadingZeroHits++;\n        assertArrayEquals(rnd.resize(rnd.length() - 1).array(),decoded);\n      }\n    }\n  }\n  System.out.println(leadingZeroHits + \" leading zero mismatches of \" + encodings+ \" encodings\");\n}\n",
    "File_Path": "bytes-java/src/test/java/at/favre/lib/bytes/BinaryToTextEncodingTest.java",
    "Start": 3738,
    "Stop": 5067,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "encodeDecodeRadix"
}
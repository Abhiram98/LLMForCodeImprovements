{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove redundant code",
                "Change_Diff": "- assertFalse(Bytes.from((byte)8).bitAt(0));\n- assertFalse(Bytes.from((byte)8).bitAt(1));\n- assertFalse(Bytes.from((byte)8).bitAt(2));\n- assertTrue(Bytes.from((byte)8).bitAt(3));\n- assertFalse(Bytes.from((byte)8).bitAt(4));\n+ for (int i = 0; i < 5; i++) {\n+     if (i == 3) {\n+         assertTrue(Bytes.from((byte)8).bitAt(i));\n+     } else {\n+         assertFalse(Bytes.from((byte)8).bitAt(i));\n+     }\n+ }",
                "Description": "There are multiple lines that are checking the same condition. These lines can be combined into a single line with multiple assertions.",
                "Start": 6,
                "End": 9
            },
            {
                "Improvement": "Use parameterized tests",
                "Change_Diff": "- for (int i=0; i < 8; i++) {\n-     assertTrue(Bytes.from((byte)0xFF).bitAt(i));\n- }\n+ @ParameterizedTest\n+ @ValueSource(ints = {0, 1, 2, 3, 4, 5, 6, 7})\n+ public void shouldReturnTrueForBitAt(int index) {\n+     assertTrue(Bytes.from((byte)0xFF).bitAt(index));\n+ }",
                "Description": "There are multiple test cases with the same structure but different values. Parameterized tests can be used to run the same test with different values.",
                "Start": 4,
                "End": 5
            }
        ],
        "Final code": "@Test public void bitAt(){\n  for (int i=0; i < 8; i++) {\n    assertFalse(Bytes.allocate(1).bitAt(i));\n  }\n\n  @ParameterizedTest\n  @ValueSource(ints = {0, 1, 2, 3, 4, 5, 6, 7})\n  public void shouldReturnTrueForBitAt(int index) {\n    assertTrue(Bytes.from((byte)0xFF).bitAt(index));\n  }\n\n  for (int i = 0; i < 5; i++) {\n    if (i == 3) {\n        assertTrue(Bytes.from((byte)8).bitAt(i));\n    } else {\n        assertFalse(Bytes.from((byte)8).bitAt(i));\n    }\n  }\n\n  assertFalse(Bytes.from((byte)0b11010000).bitAt(0));\n  assertFalse(Bytes.from((byte)0b10010000).bitAt(0));\n  assertTrue(Bytes.from((byte)0b10010001).bitAt(0));\n  assertFalse(Bytes.from((byte)0b0010_1000).bitAt(4));\n  assertFalse(Bytes.parseBinary(\"101111110101100100110010011111001011101110110011011000010000000\").bitAt(54));\n\n  try {\n    Bytes.allocate(1).bitAt(8);\n    fail();\n  }\n catch (  IndexOutOfBoundsException ignored) {\n  }\n\n  try {\n    Bytes.allocate(16).bitAt(-1);\n    fail();\n  }\n catch (  IndexOutOfBoundsException ignored) {\n  }\n\n  Bytes bytes=Bytes.wrap(new byte[]{1,0,2,0}).byteOrder(ByteOrder.LITTLE_ENDIAN);\n  assertTrue(bytes.bitAt(0));\n  assertTrue(bytes.bitAt(17));\n  assertFalse(bytes.bitAt(8));\n  assertFalse(bytes.bitAt(31));\n}"
    },
    "Old_Method": "@Test public void bitAt(){\n  for (int i=0; i < 8; i++) {\n    assertFalse(Bytes.allocate(1).bitAt(i));\n  }\n  for (int i=0; i < 8; i++) {\n    assertTrue(Bytes.from((byte)0xFF).bitAt(i));\n  }\n  assertFalse(Bytes.from((byte)8).bitAt(0));\n  assertFalse(Bytes.from((byte)8).bitAt(1));\n  assertFalse(Bytes.from((byte)8).bitAt(2));\n  assertTrue(Bytes.from((byte)8).bitAt(3));\n  assertFalse(Bytes.from((byte)8).bitAt(4));\n  assertFalse(Bytes.from((byte)0b11010000).bitAt(0));\n  assertFalse(Bytes.from((byte)0b10010000).bitAt(0));\n  assertTrue(Bytes.from((byte)0b10010001).bitAt(0));\n  assertFalse(Bytes.from((byte)0b0010_1000).bitAt(4));\n  assertFalse(Bytes.parseBinary(\"101111110101100100110010011111001011101110110011011000010000000\").bitAt(54));\n  try {\n    Bytes.allocate(1).bitAt(8);\n    fail();\n  }\n catch (  IndexOutOfBoundsException ignored) {\n  }\n  try {\n    Bytes.allocate(16).bitAt(-1);\n    fail();\n  }\n catch (  IndexOutOfBoundsException ignored) {\n  }\n  Bytes bytes=Bytes.wrap(new byte[]{1,0,2,0}).byteOrder(ByteOrder.LITTLE_ENDIAN);\n  assertTrue(bytes.bitAt(0));\n  assertTrue(bytes.bitAt(17));\n  assertFalse(bytes.bitAt(8));\n  assertFalse(bytes.bitAt(31));\n}\n",
    "File_Path": "bytes-java/src/test/java/at/favre/lib/bytes/BytesMiscTest.java",
    "Start": 12738,
    "Stop": 14127,
    "Project_Name": "data/projects/bytes-java",
    "Method_Name": "bitAt"
}
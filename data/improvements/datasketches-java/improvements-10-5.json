{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor repetitive code to a separate method",
            "Change_Diff": "- try {\n-    inter.intersect(skExact,skSmallSeed2A);\n-    Assert.fail();\n-  }\n- catch (  Exception e) {\n-  }\n-  try {\n-    inter.intersect(skExact,skSmallSeed2B);\n-    Assert.fail();\n-  }\n- catch (  Exception e) {\n-  }\n-  try {\n-    inter.intersect(skSmallSeed2B,skExact);\n-    Assert.fail();\n-  }\n- catch (  Exception e) {\n-  }\n-  try {\n-    inter.intersect(skHeap,skSmallSeed2B);\n-    Assert.fail();\n-  }\n- catch (  Exception e) {\n-  }\n + assertThrowsException(inter::intersect, skExact, skSmallSeed2A);\n + assertThrowsException(inter::intersect, skExact, skSmallSeed2B);\n + assertThrowsException(inter::intersect, skSmallSeed2B, skExact);\n + assertThrowsException(inter::intersect, skHeap, skSmallSeed2B);",
            "Description": "The code contains many repeated blocks that only differ in the arguments passed to the methods. These blocks can be refactored into a separate method for better readability and maintainability of the code.",
            "Start": 24,
            "End": 94
        }],
        "Final code": "@Test\npublic void checkSeedHash(){\n  int k=64;\n  UpdateSketch tmp1=Sketches.updateSketchBuilder().setNominalEntries(k).setSeed(123).build();\n  tmp1.update(1);\n  tmp1.update(3);\n  CompactSketch skSmallSeed2A=tmp1.compact(true,null);\n  UpdateSketch tmp2=Sketches.updateSketchBuilder().setNominalEntries(k).setSeed(123).build();\n  tmp2.update(1);\n  tmp2.update(2);\n  CompactSketch skSmallSeed2B=tmp2.compact(true,null);\n  CompactSketch skExact=generate(EXACT,k);\n  CompactSketch skHeap=generate(EST_HEAP,2 * k);\n  Intersection inter=SetOperation.builder().buildIntersection();\n  AnotB aNotB=SetOperation.builder().buildANotB();\n  Union union=SetOperation.builder().setNominalEntries(k).buildUnion();\n\n  assertThrowsException(inter::intersect, skExact, skSmallSeed2A);\n  assertThrowsException(inter::intersect, skExact, skSmallSeed2B);\n  assertThrowsException(inter::intersect, skSmallSeed2B, skExact);\n  assertThrowsException(inter::intersect, skHeap, skSmallSeed2B);\n  assertThrowsException(aNotB::aNotB, skExact, skSmallSeed2A);\n  assertThrowsException(aNotB::aNotB, skExact, skSmallSeed2B);\n  assertThrowsException(aNotB::aNotB, skSmallSeed2B, skExact);\n  assertThrowsException(aNotB::aNotB, skHeap, skSmallSeed2B);\n  assertThrowsException(union::union, skExact, skSmallSeed2A);\n  assertThrowsException(union::union, skExact, skSmallSeed2B);\n  assertThrowsException(union::union, skSmallSeed2B, skExact);\n  assertThrowsException(union::union, skHeap, skSmallSeed2B);\n}\n\nprivate void assertThrowsException(BiConsumer<CompactSketch, CompactSketch> method, CompactSketch arg1, CompactSketch arg2) {\n  try {\n    method.accept(arg1, arg2);\n    Assert.fail();\n  } catch (Exception e) {\n    // Expected exception\n  }\n}"
    },
    "Old_Method": "@Test public void checkSeedHash(){\n  int k=64;\n  UpdateSketch tmp1=Sketches.updateSketchBuilder().setNominalEntries(k).setSeed(123).build();\n  tmp1.update(1);\n  tmp1.update(3);\n  CompactSketch skSmallSeed2A=tmp1.compact(true,null);\n  UpdateSketch tmp2=Sketches.updateSketchBuilder().setNominalEntries(k).setSeed(123).build();\n  tmp2.update(1);\n  tmp2.update(2);\n  CompactSketch skSmallSeed2B=tmp2.compact(true,null);\n  CompactSketch skExact=generate(EXACT,k);\n  CompactSketch skHeap=generate(EST_HEAP,2 * k);\n  Intersection inter=SetOperation.builder().buildIntersection();\n  AnotB aNotB=SetOperation.builder().buildANotB();\n  Union union=SetOperation.builder().setNominalEntries(k).buildUnion();\n  try {\n    inter.intersect(skExact,skSmallSeed2A);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    inter.intersect(skExact,skSmallSeed2B);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    inter.intersect(skSmallSeed2B,skExact);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    inter.intersect(skHeap,skSmallSeed2B);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    aNotB.aNotB(skExact,skSmallSeed2A);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    aNotB.aNotB(skExact,skSmallSeed2B);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    aNotB.aNotB(skSmallSeed2B,skExact);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    aNotB.aNotB(skHeap,skSmallSeed2B);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    union.union(skExact,skSmallSeed2A);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    union.union(skExact,skSmallSeed2B);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    union.union(skSmallSeed2B,skExact);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n  try {\n    union.union(skHeap,skSmallSeed2B);\n    Assert.fail();\n  }\n catch (  Exception e) {\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/SetOpsCornerCasesTest.java",
    "Start": 10314,
    "Stop": 12460,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkSeedHash"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Extract repetitive code into new method",
            "Change_Diff": "- n1=((1 << (i - 3)) * 3) / 4;\n- n2=n1;\n- basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n- n1+=2;\n- basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n- n1-=2;\n- n2+=2;\n- basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n- n1+=2;\n- basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n+ performUnionOperations(i, lgK1, lgK2, lgMaxK, t1, t2, rt);",
            "Description": "The block of code that involves calculation of n1, n2 and calls to basicUnion method is repeated multiple times. Extract this block of code into a new method to avoid repetition.",
            "Start": 17,
            "End": 52
        }],
        "Final code": "public void performUnionOperations(int i, int lgK1, int lgK2, int lgMaxK, int t1, int t2, int rt) {\n    int n1 = ((1 << (i - 3)) * 3) / 4;\n    int n2 = n1;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 += 2;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 -= 2;\n    n2 += 2;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 += 2;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n}\n\n@Test public void checkUnions(){\n    int t1 = 2;\n    int t2 = 2;\n    int rt = 2;\n    println(\"TgtR: \" + TgtHllType.values()[rt].toString());\n    int lgK1 = 7;\n    int lgK2 = 7;\n    int lgMaxK = 7;\n    int n1 = 7;\n    int n2 = 7;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 = 8;\n    n2 = 7;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 = 7;\n    n2 = 8;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 = 8;\n    n2 = 8;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    n1 = 7;\n    n2 = 14;\n    basicUnion(n1, n2, lgK1, lgK2, lgMaxK, t1, t2, rt);\n    println(\"++END BASE GROUP++\");\n    int i = 0;\n    for (i = 7; i <= 13; i++) {\n        lgK1 = i;\n        lgK2 = i;\n        lgMaxK = i;\n        performUnionOperations(i, lgK1, lgK2, lgMaxK, t1, t2, rt);\n        println(\"--END MINOR GROUP--\");\n        lgK1 = i;\n        lgK2 = i + 1;\n        lgMaxK = i;\n        performUnionOperations(i, lgK1, lgK2, lgMaxK, t1, t2, rt);\n        println(\"--END MINOR GROUP--\");\n        lgK1 = i + 1;\n        lgK2 = i;\n        lgMaxK = i;\n        performUnionOperations(i, lgK1, lgK2, lgMaxK, t1, t2, rt);\n        println(\"--END MINOR GROUP--\");\n        lgK1 = i + 1;\n        lgK2 = i + 1;\n        lgMaxK = i;\n        performUnionOperations(i, lgK1, lgK2, lgMaxK, t1, t2, rt);\n        println(\"++END MAJOR GROUP++\");\n    }\n}"
    },
    "Old_Method": "/** \n * The task here is to check the transition boundaries as the sketch morphs between LIST to SET to HLL modes. The transition points vary as a function of lgConfigK. In addition, this checks that the union operation is operating properly based on the order the sketches are presented to the union.\n */\n@Test public void checkUnions(){\n  int t1=2;\n  int t2=2;\n  int rt=2;\n  println(\"TgtR: \" + TgtHllType.values()[rt].toString());\n  int lgK1=7;\n  int lgK2=7;\n  int lgMaxK=7;\n  int n1=7;\n  int n2=7;\n  basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n  n1=8;\n  n2=7;\n  basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n  n1=7;\n  n2=8;\n  basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n  n1=8;\n  n2=8;\n  basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n  n1=7;\n  n2=14;\n  basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n  println(\"++END BASE GROUP++\");\n  int i=0;\n  for (i=7; i <= 13; i++) {\n    lgK1=i;\n    lgK2=i;\n    lgMaxK=i;\n{\n      n1=((1 << (i - 3)) * 3) / 4;\n      n2=n1;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1-=2;\n      n2+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n    }\n    println(\"--END MINOR GROUP--\");\n    lgK1=i;\n    lgK2=i + 1;\n    lgMaxK=i;\n{\n      n1=((1 << (i - 3)) * 3) / 4;\n      n2=n1;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1-=2;\n      n2+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n    }\n    println(\"--END MINOR GROUP--\");\n    lgK1=i + 1;\n    lgK2=i;\n    lgMaxK=i;\n{\n      n1=((1 << (i - 3)) * 3) / 4;\n      n2=n1;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1-=2;\n      n2+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n    }\n    println(\"--END MINOR GROUP--\");\n    lgK1=i + 1;\n    lgK2=i + 1;\n    lgMaxK=i;\n{\n      n1=((1 << (i - 3)) * 3) / 4;\n      n2=n1;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1-=2;\n      n2+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n      n1+=2;\n      basicUnion(n1,n2,lgK1,lgK2,lgMaxK,t1,t2,rt);\n    }\n    println(\"++END MAJOR GROUP++\");\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/hll/UnionTest.java",
    "Start": 2061,
    "Stop": 5085,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkUnions"
}
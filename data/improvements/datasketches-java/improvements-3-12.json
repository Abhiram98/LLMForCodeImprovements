{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Eliminate code duplication",
                "Change_Diff": "- onHeapMem.clear();\n- offHeapMem.clear();\n- insertPreLongs(onHeapMem,v);\n- onH=extractPreLongs(onHeapMem);\n- assertEquals(onH,v);\n- insertPreLongs(offHeapMem,v);\n- offH=extractPreLongs(offHeapMem);\n- assertEquals(offH,v);\n\n+ performOperation(onHeapMem, offHeapMem, v, this::insertPreLongs, this::extractPreLongs);",
                "Description": "All operations performed on 'onHeapMem' and 'offHeapMem' are duplicated. We can create a helper method to eliminate this duplication.",
                "Start": 7,
                "End": 66
            },
            {
                "Improvement": "Handle exceptions properly",
                "Change_Diff": "- catch (final Exception e) {\n-     throw new RuntimeException(e);\n- }\n\n+ catch (final Exception e) {\n+     log.error(\"Exception occurred: \", e);\n+ }",
                "Description": "Currently, exceptions are being caught and rethrown as a RuntimeException. Instead, the exceptions should be logged and handled appropriately without the need to rethrow.",
                "Start": 67,
                "End": 70
            }
        ],
        "Final code": "public void checkInsertsAndExtracts() {\n    final int bytes=32;\n    try (WritableHandle offHeapMemHandler = WritableMemory.allocateDirect(bytes)) {\n        final WritableMemory offHeapMem = offHeapMemHandler.getWritable();\n        final WritableMemory onHeapMem = WritableMemory.writableWrap(new byte[bytes]);\n        int v = 0XFF;\n        performOperation(onHeapMem, offHeapMem, v, this::insertPreLongs, this::extractPreLongs);\n        v = 0XFFFF;\n        performOperation(onHeapMem, offHeapMem, v, this::insertK, this::extractK);\n        long vL = 1L << 30;\n        performOperation(onHeapMem, offHeapMem, vL, this::insertN, this::extractN);\n        double vD = 1L << 40;\n        performOperation(onHeapMem, offHeapMem, vD, this::insertMinDouble, this::extractMinDouble);\n        performOperation(onHeapMem, offHeapMem, vD, this::insertMaxDouble, this::extractMaxDouble);\n    } catch (final Exception e) {\n        log.error(\"Exception occurred: \", e);\n    }\n}\n\nprivate <T> void performOperation(WritableMemory onHeapMem, WritableMemory offHeapMem, T value, BiConsumer<WritableMemory, T> insertFunction, Function<WritableMemory, T> extractFunction) {\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFunction.accept(onHeapMem, value);\n    T onHeapResult = extractFunction.apply(onHeapMem);\n    assertEquals(onHeapResult, value);\n    insertFunction.accept(offHeapMem, value);\n    T offHeapResult = extractFunction.apply(offHeapMem);\n    assertEquals(offHeapResult, value);\n}"
    },
    "Old_Method": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    int onH, offH;\n    insertPreLongs(onHeapMem,v);\n    onH=extractPreLongs(onHeapMem);\n    assertEquals(onH,v);\n    insertPreLongs(offHeapMem,v);\n    offH=extractPreLongs(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertSerVer(onHeapMem,v);\n    onH=extractSerVer(onHeapMem);\n    assertEquals(onH,v);\n    insertSerVer(offHeapMem,v);\n    offH=extractSerVer(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFamilyID(onHeapMem,v);\n    onH=extractFamilyID(onHeapMem);\n    assertEquals(onH,v);\n    insertFamilyID(offHeapMem,v);\n    offH=extractFamilyID(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFlags(onHeapMem,v);\n    onH=extractFlags(onHeapMem);\n    assertEquals(onH,v);\n    insertFlags(offHeapMem,v);\n    offH=extractFlags(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    v=0XFFFF;\n    insertK(onHeapMem,v);\n    onH=extractK(onHeapMem);\n    assertEquals(onH,v);\n    insertK(offHeapMem,v);\n    offH=extractK(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    long onHL, offHL, vL=1L << 30;\n    insertN(onHeapMem,vL);\n    onHL=extractN(onHeapMem);\n    assertEquals(onHL,vL);\n    insertN(offHeapMem,vL);\n    offHL=extractN(offHeapMem);\n    assertEquals(offHL,vL);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    double onHD, offHD, vD=1L << 40;\n    insertMinDouble(onHeapMem,vD);\n    onHD=extractMinDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMinDouble(offHeapMem,vD);\n    offHD=extractMinDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertMaxDouble(onHeapMem,vD);\n    onHD=extractMaxDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMaxDouble(offHeapMem,vD);\n    offHD=extractMaxDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/PreambleUtilTest.java",
    "Start": 2333,
    "Stop": 5225,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkInsertsAndExtracts"
}
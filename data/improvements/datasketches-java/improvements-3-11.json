{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Remove repetitive code by creating a reusable method",
            "Change_Diff": "- insertPreLongs(onHeapMem,v);\n- onH=extractPreLongs(onHeapMem);\n- assertEquals(onH,v);\n- insertPreLongs(offHeapMem,v);\n- offH=extractPreLongs(offHeapMem);\n- assertEquals(offH,v);\n+ handleData(PreLongs.class, onHeapMem, offHeapMem, v);\n...\n- insertMaxDouble(onHeapMem,vD);\n- onHD=extractMaxDouble(onHeapMem);\n- assertEquals(onHD,vD);\n- insertMaxDouble(offHeapMem,vD);\n- offHD=extractMaxDouble(offHeapMem);\n- assertEquals(offHD,vD);\n+ handleData(MaxDouble.class, onHeapMem, offHeapMem, vD);",
            "Description": "The code inside the try block is repetitive. It can be simplified by creating a reusable method that handles inserting, extracting, and asserting equality for different types of data. This reduces code redundancy and improves readability.",
            "Start": 9,
            "End": 65
        }],
        "Final code": "public class TestClass {\n\n    @Test\n    public void checkInsertsAndExtracts(){\n        final int bytes=32;\n        try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n            final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n            final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n\n            int v=0XFF;\n            handleData(PreLongs.class, onHeapMem, offHeapMem, v);\n            handleData(SerVer.class, onHeapMem, offHeapMem, v);\n            handleData(FamilyID.class, onHeapMem, offHeapMem, v);\n            handleData(Flags.class, onHeapMem, offHeapMem, v);\n\n            v=0XFFFF;\n            handleData(K.class, onHeapMem, offHeapMem, v);\n\n            long vL=1L << 30;\n            handleData(N.class, onHeapMem, offHeapMem, vL);\n\n            double vD=1L << 40;\n            handleData(MinDouble.class, onHeapMem, offHeapMem, vD);\n            handleData(MaxDouble.class, onHeapMem, offHeapMem, vD);\n        }\n        catch (final Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private <T> void handleData(Class<T> dataType, WritableMemory onHeapMem, WritableMemory offHeapMem, T value) {\n        // code for handling different data types...\n    }\n}"
    },
    "Old_Method": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    int onH, offH;\n    insertPreLongs(onHeapMem,v);\n    onH=extractPreLongs(onHeapMem);\n    assertEquals(onH,v);\n    insertPreLongs(offHeapMem,v);\n    offH=extractPreLongs(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertSerVer(onHeapMem,v);\n    onH=extractSerVer(onHeapMem);\n    assertEquals(onH,v);\n    insertSerVer(offHeapMem,v);\n    offH=extractSerVer(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFamilyID(onHeapMem,v);\n    onH=extractFamilyID(onHeapMem);\n    assertEquals(onH,v);\n    insertFamilyID(offHeapMem,v);\n    offH=extractFamilyID(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFlags(onHeapMem,v);\n    onH=extractFlags(onHeapMem);\n    assertEquals(onH,v);\n    insertFlags(offHeapMem,v);\n    offH=extractFlags(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    v=0XFFFF;\n    insertK(onHeapMem,v);\n    onH=extractK(onHeapMem);\n    assertEquals(onH,v);\n    insertK(offHeapMem,v);\n    offH=extractK(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    long onHL, offHL, vL=1L << 30;\n    insertN(onHeapMem,vL);\n    onHL=extractN(onHeapMem);\n    assertEquals(onHL,vL);\n    insertN(offHeapMem,vL);\n    offHL=extractN(offHeapMem);\n    assertEquals(offHL,vL);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    double onHD, offHD, vD=1L << 40;\n    insertMinDouble(onHeapMem,vD);\n    onHD=extractMinDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMinDouble(offHeapMem,vD);\n    offHD=extractMinDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertMaxDouble(onHeapMem,vD);\n    onHD=extractMaxDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMaxDouble(offHeapMem,vD);\n    offHD=extractMaxDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/PreambleUtilTest.java",
    "Start": 2333,
    "Stop": 5225,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkInsertsAndExtracts"
}
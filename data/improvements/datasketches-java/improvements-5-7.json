{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use descriptive variable names",
                "Change_Diff": "- int k=256;\n- UpdateDoublesSketch qs=DoublesSketch.builder().setK(k).build();\n- UpdateDoublesSketch qs2=DoublesSketch.builder().setK(k).build();\n- int n=1000000;\n+ int sketchSize=256;\n+ UpdateDoublesSketch firstSketch=DoublesSketch.builder().setK(sketchSize).build();\n+ UpdateDoublesSketch secondSketch=DoublesSketch.builder().setK(sketchSize).build();\n+ int totalItems=1000000;",
                "Description": "Variables with names like 'k', 'n', 'qs', 'qs2', etc. are not descriptive and can make the code hard to understand. Use descriptive names that make clear what the variables represent.",
                "Start": 2,
                "End": 6
            },
            {
                "Improvement": "Remove magic numbers",
                "Change_Diff": "- int k=256;\n- int n=1000000;\n- int numPhiValues=99;\n+ static final int SKETCH_SIZE=256;\n+ static final int TOTAL_ITEMS=1000000;\n+ static final int NUM_PHI_VALUES=99;",
                "Description": "The code contains magic numbers (like 256, 1000000, 99, 10000.0, etc.) that could be extracted to named constants to improve code readability and maintainability.",
                "Start": 2,
                "End": 50
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int q=1; q <= 99; q++) {\n+ for (double phiValue : phiArr) {\n- for (int q=1; q <= 100; q++) {\n+ for (double pmf : pmfResult) {\n- for (int q=1; q <= 100; q++) {\n+ for (double cdf : cdfResult) {",
                "Description": "Instead of using a traditional for loop to iterate over `phiArr`, `splitPoints`, `pmfResult`, and `cdfResult`, use an enhanced for loop.",
                "Start": 15,
                "End": 48
            }
        ],
        "Final code": "@Test public void checkEndToEnd(){\n  static final int SKETCH_SIZE=256;\n  static final int TOTAL_ITEMS=1000000;\n  static final int NUM_PHI_VALUES=99;\n  UpdateDoublesSketch firstSketch=DoublesSketch.builder().setK(SKETCH_SIZE).build();\n  UpdateDoublesSketch secondSketch=DoublesSketch.builder().setK(SKETCH_SIZE).build();\n  for (int item=TOTAL_ITEMS; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      firstSketch.update(item);\n    }\n else {\n      secondSketch.update(item);\n    }\n  }\n  assertEquals(firstSketch.getN() + secondSketch.getN(),TOTAL_ITEMS);\n  DoublesUnion union=DoublesUnion.heapify(firstSketch);\n  union.union(secondSketch);\n  DoublesSketch result=union.getResult();\n  double[] phiArr=new double[NUM_PHI_VALUES];\n  for (int q=1; q <= NUM_PHI_VALUES; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  for (double phiValue : phiArr) {\n    double nominal=(1e6 * phiValue);\n    double reported=splitPoints[phiValue - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  for (double pmf : pmfResult) {\n    double phi=pmf + 1;\n    subtotal+=pmf;\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (double cdf : cdfResult) {\n    double phi=cdf + 1;\n    subtotal=cdf;\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000),0.5,0.01);\n}"
    },
    "Old_Method": "@Test public void checkEndToEnd(){\n  int k=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(k).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(k).build();\n  int n=1000000;\n  for (int item=n; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    }\n else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),n);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  int numPhiValues=99;\n  double[] phiArr=new double[numPhiValues];\n  for (int q=1; q <= 99; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  for (int q=1; q <= 99; q++) {\n    double nominal=(1e6 * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal+=pmfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal=cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000),0.5,0.01);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/HeapUpdateDoublesSketchTest.java",
    "Start": 2693,
    "Stop": 4396,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkEndToEnd"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Remove repeated code by creating a helper method",
            "Change_Diff": "- insertPreLongs(onHeapMem,v);\n- onH=extractPreLongs(onHeapMem);\n- assertEquals(onH,v);\n- insertPreLongs(offHeapMem,v);\n- offH=extractPreLongs(offHeapMem);\n- assertEquals(offH,v);\n... // Repeat for other insert and extract methods\n+ testInsertAndExtract(onHeapMem, offHeapMem, v, this::insertPreLongs, this::extractPreLongs);\n... // Repeat for other insert and extract methods",
            "Description": "The insertion and extraction of memory are repeated many times in the method. A helper method can be created to encapsulate this repeated code. This will make the code cleaner and easier to maintain.",
            "Start": 5,
            "End": 58
        }],
        "Final code": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    testInsertAndExtract(onHeapMem, offHeapMem, v, this::insertPreLongs, this::extractPreLongs);\n    testInsertAndExtract(onHeapMem, offHeapMem, v, this::insertSerVer, this::extractSerVer);\n    testInsertAndExtract(onHeapMem, offHeapMem, v, this::insertFamilyID, this::extractFamilyID);\n    testInsertAndExtract(onHeapMem, offHeapMem, v, this::insertFlags, this::extractFlags);\n    v=0XFFFF;\n    testInsertAndExtract(onHeapMem, offHeapMem, v, this::insertK, this::extractK);\n    long vL=1L << 30;\n    testInsertAndExtract(onHeapMem, offHeapMem, vL, this::insertN, this::extractN);\n    double vD=1L << 40;\n    testInsertAndExtract(onHeapMem, offHeapMem, vD, this::insertMinDouble, this::extractMinDouble);\n    testInsertAndExtract(onHeapMem, offHeapMem, vD, this::insertMaxDouble, this::extractMaxDouble);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n\nprivate <T> void testInsertAndExtract(WritableMemory onHeapMem, WritableMemory offHeapMem, T value, BiConsumer<WritableMemory, T> inserter, Function<WritableMemory, T> extractor) {\n    inserter.accept(onHeapMem, value);\n    T onHeapResult = extractor.apply(onHeapMem);\n    assertEquals(onHeapResult, value);\n    inserter.accept(offHeapMem, value);\n    T offHeapResult = extractor.apply(offHeapMem);\n    assertEquals(offHeapResult, value);\n    onHeapMem.clear();\n    offHeapMem.clear();\n}"
    },
    "Old_Method": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    int onH, offH;\n    insertPreLongs(onHeapMem,v);\n    onH=extractPreLongs(onHeapMem);\n    assertEquals(onH,v);\n    insertPreLongs(offHeapMem,v);\n    offH=extractPreLongs(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertSerVer(onHeapMem,v);\n    onH=extractSerVer(onHeapMem);\n    assertEquals(onH,v);\n    insertSerVer(offHeapMem,v);\n    offH=extractSerVer(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFamilyID(onHeapMem,v);\n    onH=extractFamilyID(onHeapMem);\n    assertEquals(onH,v);\n    insertFamilyID(offHeapMem,v);\n    offH=extractFamilyID(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFlags(onHeapMem,v);\n    onH=extractFlags(onHeapMem);\n    assertEquals(onH,v);\n    insertFlags(offHeapMem,v);\n    offH=extractFlags(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    v=0XFFFF;\n    insertK(onHeapMem,v);\n    onH=extractK(onHeapMem);\n    assertEquals(onH,v);\n    insertK(offHeapMem,v);\n    offH=extractK(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    long onHL, offHL, vL=1L << 30;\n    insertN(onHeapMem,vL);\n    onHL=extractN(onHeapMem);\n    assertEquals(onHL,vL);\n    insertN(offHeapMem,vL);\n    offHL=extractN(offHeapMem);\n    assertEquals(offHL,vL);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    double onHD, offHD, vD=1L << 40;\n    insertMinDouble(onHeapMem,vD);\n    onHD=extractMinDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMinDouble(offHeapMem,vD);\n    offHD=extractMinDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertMaxDouble(onHeapMem,vD);\n    onHD=extractMaxDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMaxDouble(offHeapMem,vD);\n    offHD=extractMaxDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/PreambleUtilTest.java",
    "Start": 2333,
    "Stop": 5225,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkInsertsAndExtracts"
}
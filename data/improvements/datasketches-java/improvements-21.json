{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use StringBuilder.append() instead of string concatenation",
                "Change_Diff": "- sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);\n+ sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);",
                "Description": "Instead of using string concatenation operator (+) to build the final string, use StringBuilder.append().",
                "Start": 34,
                "End": 34
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int i=0; i < bbCount; i++) {\n+ for (double val : combBuf) {",
                "Description": "Instead of using a traditional for loop to iterate over 'combBuf', use an enhanced for loop.",
                "Start": 16,
                "End": 16
            },
            {
                "Improvement": "Use StringBuilder.append() instead of string concatenation",
                "Change_Diff": "- sb.append(String.format(\"%10.1f\",combBuf[i]));\n+ sb.append(String.format(\"%10.1f\",val));",
                "Description": "Instead of using string concatenation operator (+) to build the final string, use StringBuilder.append().",
                "Start": 19,
                "End": 19
            },
            {
                "Improvement": "Use StringBuilder.append() instead of string concatenation",
                "Change_Diff": "- sb.append(LS);\n+ sb.append(LS);",
                "Description": "Instead of using string concatenation operator (+) to build the final string, use StringBuilder.append().",
                "Start": 42,
                "End": 42
            },
            {
                "Improvement": "Use StringBuilder.append() instead of string concatenation",
                "Change_Diff": "- sb.append(\"### END DATA DETAIL\").append(LS);\n+ sb.append(\"### END DATA DETAIL\").append(LS);",
                "Description": "Instead of using string concatenation operator (+) to build the final string, use StringBuilder.append().",
                "Start": 43,
                "End": 43
            }
        ],
        "Final code": "private static String getDataDetail(final DoublesSketch sketchIn) {\n  final DoublesSketch sketch = sketchIn.isCompact() ? copyToHeap(sketchIn) : sketchIn;\n  final StringBuilder sb = new StringBuilder();\n  final String skName = sketch.getClass().getSimpleName();\n  sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);\n  final int k = sketch.getK();\n  final long n = sketch.getN();\n  final int bbCount = sketch.getBaseBufferCount();\n  final long bitPattern = sketch.getBitPattern();\n  final double[] combBuf = sketch.getCombinedBuffer();\n  sb.append(\"   BaseBuffer   : \");\n  for (double val : combBuf) {\n    sb.append(String.format(\"%10.1f\", val));\n  }\n  sb.append(LS);\n  final int combBufSize = combBuf.length;\n  if (n >= (2 * k)) {\n    sb.append(\"   Valid | Level\");\n    for (int j = 2 * k; j < combBufSize; j++) {\n      if ((j % k) == 0) {\n        final int levelNum = (j / k) - 2;\n        final String validLvl = ((1L << levelNum) & bitPattern) > 0 ? \"    T  \" : \"    F  \";\n        final String lvl = String.format(\"%5d\", levelNum);\n        sb.append(LS).append(\"   \").append(validLvl).append(\" \").append(lvl).append(\": \");\n      }\n      sb.append(String.format(\"%10.1f\", combBuf[j]));\n    }\n    sb.append(LS);\n  }\n  sb.append(\"### END DATA DETAIL\").append(LS);\n  return sb.toString();\n}"
    }],
    "Old_Method": "private static String getDataDetail(final DoublesSketch sketchIn){\n  final DoublesSketch sketch=sketchIn.isCompact() ? copyToHeap(sketchIn) : sketchIn;\n  final StringBuilder sb=new StringBuilder();\n  final String skName=sketch.getClass().getSimpleName();\n  sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);\n  final int k=sketch.getK();\n  final long n=sketch.getN();\n  final int bbCount=sketch.getBaseBufferCount();\n  final long bitPattern=sketch.getBitPattern();\n  final double[] combBuf=sketch.getCombinedBuffer();\n  sb.append(\"   BaseBuffer   : \");\n  for (int i=0; i < bbCount; i++) {\n    sb.append(String.format(\"%10.1f\",combBuf[i]));\n  }\n  sb.append(LS);\n  final int combBufSize=combBuf.length;\n  if (n >= (2 * k)) {\n    sb.append(\"   Valid | Level\");\n    for (int j=2 * k; j < combBufSize; j++) {\n      if ((j % k) == 0) {\n        final int levelNum=(j / k) - 2;\n        final String validLvl=((1L << levelNum) & bitPattern) > 0 ? \"    T  \" : \"    F  \";\n        final String lvl=String.format(\"%5d\",levelNum);\n        sb.append(LS).append(\"   \").append(validLvl).append(\" \").append(lvl).append(\": \");\n      }\n      sb.append(String.format(\"%10.1f\",combBuf[j]));\n    }\n    sb.append(LS);\n  }\n  sb.append(\"### END DATA DETAIL\").append(LS);\n  return sb.toString();\n}\n",
    "File_Path": "datasketches-java/src/main/java/org/apache/datasketches/quantiles/DoublesUtil.java",
    "Start": 7871,
    "Stop": 9398,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "getDataDetail"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract constants",
                "Change_Diff": "- int k=256;\n+ final int SKETCH_SIZE=256;\n- int n=1000000;\n+ final int TOTAL_ITEMS=1000000;\n- int numPhiValues=99;\n+ final int NUM_PHI_VALUES=99;\n- double nominal=(1e6 * q) / 100.0;\n+ final double NOMINAL_FACTOR=1e6;\n- assertTrue(reported >= (nominal - 10000.0));\n- assertTrue(reported <= (nominal + 10000.0));\n+ final double ERROR_MARGIN=10000.0;\n- assertTrue(subtotal >= (phi - 0.01));\n- assertTrue(subtotal <= (phi + 0.01));\n+ final double PHI_ERROR_MARGIN=0.01;\n- assertEquals(result.getRank(500000),0.5,0.01);\n+ final double RANK_VALUE=500000;\n+ final double EXPECTED_RANK=0.5;",
                "Description": "Extract literals such as '256', '1000000', '99', '100.0', '1e6', '10000.0', '0.01', '0.5' as constants at the beginning of the method. This would make the code cleaner and easier to understand and change if necessary.",
                "Start": 2,
                "End": 46
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int q=1; q <= 99; q++) {\n+ for (double phi : phiArr) {",
                "Description": "In this case, the traditional for loop is not necessary as the index 'q' is only used to calculate the 'phi' value and the 'nominal' value. By iterating through 'phiArr' directly, the code becomes more readable and the chance of off-by-one errors decreases.",
                "Start": 18,
                "End": 46
            }
        ],
        "Final code": "@Test public void checkEndToEnd(){\n  final int SKETCH_SIZE=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(SKETCH_SIZE).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(SKETCH_SIZE).build();\n  final int TOTAL_ITEMS=1000000;\n  for (int item=TOTAL_ITEMS; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    }\n else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),TOTAL_ITEMS);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  final int NUM_PHI_VALUES=99;\n  double[] phiArr=new double[NUM_PHI_VALUES];\n  for (int q=1; q <= NUM_PHI_VALUES; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  final double NOMINAL_FACTOR=1e6;\n  final double ERROR_MARGIN=10000.0;\n  for (double phi : phiArr) {\n    double nominal=(NOMINAL_FACTOR * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - ERROR_MARGIN));\n    assertTrue(reported <= (nominal + ERROR_MARGIN));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  final double PHI_ERROR_MARGIN=0.01;\n  for (double phi : phiArr) {\n    subtotal+=pmfResult[q - 1];\n    assertTrue(subtotal >= (phi - PHI_ERROR_MARGIN));\n    assertTrue(subtotal <= (phi + PHI_ERROR_MARGIN));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (double phi : phiArr) {\n    subtotal=cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - PHI_ERROR_MARGIN));\n    assertTrue(subtotal <= (phi + PHI_ERROR_MARGIN));\n  }\n  final double RANK_VALUE=500000;\n  final double EXPECTED_RANK=0.5;\n  assertEquals(result.getRank(RANK_VALUE),EXPECTED_RANK,PHI_ERROR_MARGIN);\n}"
    },
    "Old_Method": "@Test public void checkEndToEnd(){\n  int k=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(k).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(k).build();\n  int n=1000000;\n  for (int item=n; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    }\n else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),n);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  int numPhiValues=99;\n  double[] phiArr=new double[numPhiValues];\n  for (int q=1; q <= 99; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  for (int q=1; q <= 99; q++) {\n    double nominal=(1e6 * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal+=pmfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal=cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000),0.5,0.01);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/HeapUpdateDoublesSketchTest.java",
    "Start": 2693,
    "Stop": 4396,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkEndToEnd"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Removal of redundant boolean variable 'ordered'",
                "Change_Diff": "- final boolean ordered=true;\n... \n- result=aNb.aNotB(aEmpty,bEmpty,!ordered,null); \n+ result=aNb.aNotB(aEmpty,bEmpty,false,null); \n... (all similar replacements)",
                "Description": "The variable 'ordered' is defined and set to true but is used in the method as '!ordered' which results in being always false. This can be replaced directly with 'false' in the method calls to improve readability and eliminate redundancy.",
                "Start": 27,
                "End": 95
            },
            {
                "Improvement": "Use of exception handling in separate utility method",
                "Change_Diff": "- try { \n-    aNb.setA(aNull); \n-    fail(); \n-  } \n- catch (  final SketchesArgumentException e) { \n-  } ... (all similar replacements) \n+ testForException(SketchesArgumentException.class, () -> aNb.setA(aNull), \"Expected SketchesArgumentException\"); ... (all similar replacements)",
                "Description": "The try-catch blocks testing for SketchesArgumentException can be extracted in a separate utility method to improve readability and maintainability. This utility method can take the expected exception, a Callable representing the operation that can throw the exception and an optional message to fail the test if the exception is not thrown.",
                "Start": 28,
                "End": 42
            }
        ],
        "Final code": "@Test public void checkCombinations(){ \n  final int k=512; \n  final UpdateSketch aNull=null; \n  final UpdateSketch bNull=null; \n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build(); \n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build(); \n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build(); \n  for (int i=0; i < k; i++) { \n    aHT.update(i); \n  } \n  final CompactSketch aC=aHT.compact(false,null); \n  final CompactSketch aO=aHT.compact(true,null); \n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build(); \n  for (int i=k / 2; i < k + k / 2; i++) { \n    bHT.update(i); \n  } \n  final CompactSketch bC=bHT.compact(false,null); \n  final CompactSketch bO=bHT.compact(true,null); \n  CompactSketch result; \n  AnotB aNb; \n  aNb=SetOperation.builder().buildANotB(); \n  testForException(SketchesArgumentException.class, () -> aNb.setA(aNull), \"Expected SketchesArgumentException\"); \n  aNb.notB(bNull); \n  testForException(SketchesArgumentException.class, () -> aNb.aNotB(aNull,bNull), \"Expected SketchesArgumentException\"); \n  testForException(SketchesArgumentException.class, () -> aNb.aNotB(aNull,bEmpty), \"Expected SketchesArgumentException\"); \n  testForException(SketchesArgumentException.class, () -> aNb.aNotB(aEmpty,bNull), \"Expected SketchesArgumentException\"); \n  result=aNb.aNotB(aEmpty,bEmpty,false,null); \n  assertEquals(result.getEstimate(),0.0); \n  assertTrue(result.isEmpty()); \n  assertEquals(result.getThetaLong(),Long.MAX_VALUE); \n  result=aNb.aNotB(aEmpty,bC,false,null); \n  assertEquals(result.getEstimate(),0.0); \n  assertTrue(result.isEmpty()); \n  assertEquals(result.getThetaLong(),Long.MAX_VALUE); \n  ... (remaining unchanged code) \n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Remove unnecessary variable assignments",
                "Change_Diff": "- final UpdateSketch aNull=null;\n- final UpdateSketch bNull=null;",
                "Description": "The variables aNull and bNull are not used in the method and can be safely removed.",
                "Start": 75,
                "End": 76
            },
            {
                "Improvement": "Add missing semicolon",
                "Change_Diff": "- \"Start\": 3\n- \"End\": 3\n+ \"Start\": 5\n+ \"End\": 5",
                "Description": "The line in the initial code is missing a semicolon at the end. The suggested improvement is to add a semicolon at the end of the line.",
                "Start": 61,
                "End": 61
            }
        ],
        "Final code": "import com.yahoo.sketches.UpdateSketch;\nimport com.yahoo.sketches.CompactSketch;\nimport com.yahoo.sketches.SetOperation;\nimport com.yahoo.sketches.AnotB;\nimport com.yahoo.sketches.SketchesArgumentException;\n\npublic class SketchesTest {\n\n    @Test\n    public void checkCombinations() {\n        final int k = 512;\n        final UpdateSketch aEmpty = UpdateSketch.builder().setNominalEntries(k).build();\n        final UpdateSketch bEmpty = UpdateSketch.builder().setNominalEntries(k).build();\n        final UpdateSketch aHT = UpdateSketch.builder().setNominalEntries(k).build();\n        for (int i = 0; i < k; i++) { \n            aHT.update(i);\n        }\n        final CompactSketch aC = aHT.compact(false, null);\n        final CompactSketch aO = aHT.compact(true, null);\n        final UpdateSketch bHT = UpdateSketch.builder().setNominalEntries(k).build();\n        for (int i = k / 2; i < k + k / 2; i++) { \n            bHT.update(i);\n        }\n        final CompactSketch bC = bHT.compact(false, null);\n        final CompactSketch bO = bHT.compact(true, null);\n        CompactSketch result;\n        AnotB aNb;\n        final boolean ordered = true;\n        aNb = SetOperation.builder().buildANotB();\n        try {\n            aNb.setA(null);\n            fail();\n        } catch (SketchesArgumentException e) {\n        }\n        aNb.notB(null);\n        try {\n            aNb.aNotB(null, null);\n            fail();\n        } catch (SketchesArgumentException e) {\n        }\n        try {\n            aNb.aNotB(null, bEmpty);\n            fail();\n        } catch (SketchesArgumentException e) {\n        }\n        try {\n            aNb.aNotB(aEmpty, null);\n            fail();\n        } catch (SketchesArgumentException e) {\n        }\n        result = aNb.aNotB(aEmpty, bEmpty, !ordered, null);\n        assertEquals(result.getEstimate(), 0.0);\n        assertTrue(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aEmpty, bC, !ordered, null);\n        assertEquals(result.getEstimate(), 0.0);\n        assertTrue(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aEmpty, bO, !ordered, null);\n        assertEquals(result.getEstimate(), 0.0);\n        assertTrue(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aEmpty, bHT, !ordered, null);\n        assertEquals(result.getEstimate(), 0.0);\n        assertTrue(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aC, bEmpty, !ordered, null);\n        assertEquals(result.getEstimate(), k);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aC, bC, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aC, bO, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aC, bHT, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aO, bEmpty, !ordered, null);\n        assertEquals(result.getEstimate(), k);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aO, bC, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aO, bO, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aO, bHT, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aHT, bEmpty, !ordered, null);\n        assertEquals(result.getEstimate(), k);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aHT, bC, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aHT, bO, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n        result = aNb.aNotB(aHT, bHT, !ordered, null);\n        assertEquals(result.getEstimate(), k / 2.0);\n        assertFalse(result.isEmpty());\n        assertEquals(result.getThetaLong(), Long.MAX_VALUE);\n    }\n}"
    }],
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
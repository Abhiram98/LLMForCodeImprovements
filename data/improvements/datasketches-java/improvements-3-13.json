{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use of private helper method to reduce repetition",
                "Change_Diff": "- insertPreLongs(onHeapMem,v);\n- onH=extractPreLongs(onHeapMem);\n- assertEquals(onH,v);\n- insertPreLongs(offHeapMem,v);\n- offH=extractPreLongs(offHeapMem);\n- assertEquals(offH,v);\n...\n+ performOperation(onHeapMem, offHeapMem, this::insertPreLongs, this::extractPreLongs, v);",
                "Description": "This method contains a lot of repeated code for inserting and extracting values into/from onHeapMem and offHeapMem. This can be improved by writing a private helper method that takes the memory object, method to insert, method to extract and expected value as parameters and performs the operations. This reduces code duplication and increases readability.",
                "Start": 4,
                "End": 76
            },
            {
                "Improvement": "Use of meaningful variable names",
                "Change_Diff": "- int v=0XFF;\n- int onH, offH;\n...\n+ int testValue=0XFF;\n+ int onHeapValue, offHeapValue;",
                "Description": "Variables should always have meaningful names, this makes the code more readable and maintainable. The variable names 'v', 'onH', 'offH', 'onHL', 'offHL', 'vL', 'onHD', 'offHD', and 'vD' are not very descriptive and can be improved.",
                "Start": 8,
                "End": 76
            }
        ],
        "Final code": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int testValue=0XFF;\n    performOperation(onHeapMem, offHeapMem, this::insertPreLongs, this::extractPreLongs, testValue);\n    performOperation(onHeapMem, offHeapMem, this::insertSerVer, this::extractSerVer, testValue);\n    performOperation(onHeapMem, offHeapMem, this::insertFamilyID, this::extractFamilyID, testValue);\n    performOperation(onHeapMem, offHeapMem, this::insertFlags, this::extractFlags, testValue);\n    testValue=0XFFFF;\n    performOperation(onHeapMem, offHeapMem, this::insertK, this::extractK, testValue);\n    long testLongValue=1L << 30;\n    performOperation(onHeapMem, offHeapMem, this::insertN, this::extractN, testLongValue);\n    double testDoubleValue=1L << 40;\n    performOperation(onHeapMem, offHeapMem, this::insertMinDouble, this::extractMinDouble, testDoubleValue);\n    performOperation(onHeapMem, offHeapMem, this::insertMaxDouble, this::extractMaxDouble, testDoubleValue);\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n\nprivate void performOperation(WritableMemory onHeapMem, WritableMemory offHeapMem, BiConsumer<WritableMemory, Integer> insertMethod, Function<WritableMemory, Integer> extractMethod, int expectedValue) {\n  insertMethod.accept(onHeapMem, expectedValue);\n  int onHeapValue = extractMethod.apply(onHeapMem);\n  assertEquals(onHeapValue, expectedValue);\n  insertMethod.accept(offHeapMem, expectedValue);\n  int offHeapValue = extractMethod.apply(offHeapMem);\n  assertEquals(offHeapValue, expectedValue);\n  onHeapMem.clear();\n  offHeapMem.clear();\n}"
    },
    "Old_Method": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    int onH, offH;\n    insertPreLongs(onHeapMem,v);\n    onH=extractPreLongs(onHeapMem);\n    assertEquals(onH,v);\n    insertPreLongs(offHeapMem,v);\n    offH=extractPreLongs(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertSerVer(onHeapMem,v);\n    onH=extractSerVer(onHeapMem);\n    assertEquals(onH,v);\n    insertSerVer(offHeapMem,v);\n    offH=extractSerVer(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFamilyID(onHeapMem,v);\n    onH=extractFamilyID(onHeapMem);\n    assertEquals(onH,v);\n    insertFamilyID(offHeapMem,v);\n    offH=extractFamilyID(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFlags(onHeapMem,v);\n    onH=extractFlags(onHeapMem);\n    assertEquals(onH,v);\n    insertFlags(offHeapMem,v);\n    offH=extractFlags(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    v=0XFFFF;\n    insertK(onHeapMem,v);\n    onH=extractK(onHeapMem);\n    assertEquals(onH,v);\n    insertK(offHeapMem,v);\n    offH=extractK(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    long onHL, offHL, vL=1L << 30;\n    insertN(onHeapMem,vL);\n    onHL=extractN(onHeapMem);\n    assertEquals(onHL,vL);\n    insertN(offHeapMem,vL);\n    offHL=extractN(offHeapMem);\n    assertEquals(offHL,vL);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    double onHD, offHD, vD=1L << 40;\n    insertMinDouble(onHeapMem,vD);\n    onHD=extractMinDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMinDouble(offHeapMem,vD);\n    offHD=extractMinDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertMaxDouble(onHeapMem,vD);\n    onHD=extractMaxDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMaxDouble(offHeapMem,vD);\n    offHD=extractMaxDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/PreambleUtilTest.java",
    "Start": 2333,
    "Stop": 5225,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkInsertsAndExtracts"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract the code inside switch cases into separate methods",
                "Change_Diff": "- case EMPTY_1_0_T: { ... } case DEGEN_MIN_0_F: { ... } case DEGEN_THA_0_F: { ... } case TRIM_A: { ... } case SKETCH_A: { ... } case FULL_ANOTB: { ... } \n+ return handleAnotbAction(anotbAction, skA, skB, thetaLongA, thetaLongB);",
                "Description": "The switch cases contain a lot of logic which makes the aNotB method quite long and hard to understand. We can improve readability and maintainability by extracting the code inside each case into a separate method.",
                "Start": 18,
                "End": 58
            },
            {
                "Improvement": "Remove unnecessary SuppressFBWarnings annotations",
                "Change_Diff": "- @SuppressFBWarnings(value=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\",justification=\"hashArr and summaryArr are guaranteed to be valid due to the switch on CornerCase\")\n+ ",
                "Description": "The SuppressFBWarnings annotations are not necessary. If the fields are guaranteed to be valid due to the switch on CornerCase, then we do not need to suppress these warnings. Removing unnecessary annotations can make the code cleaner.",
                "Start": 11,
                "End": 11
            }
        ],
        "Final code": "@SuppressWarnings(\"unchecked\") public static <S extends Summary>CompactSketch<S> aNotB(final Sketch<S> skA,final org.apache.datasketches.theta.Sketch skB){ if (skA == null || skB == null) { throw new SketchesArgumentException(\"Neither argument may be null for this stateless operation.\"); } final long thetaLongA=skA.getThetaLong(); final int countA=skA.getRetainedEntries(); final boolean emptyA=skA.isEmpty(); final long thetaLongB=skB.getThetaLong(); final int countB=skB.getRetainedEntries(); final boolean emptyB=skB.isEmpty(); final int id=SetOperationCornerCases.createCornerCaseId(thetaLongA,countA,emptyA,thetaLongB,countB,emptyB); final CornerCase cCase=CornerCase.caseIdToCornerCase(id); final AnotbAction anotbAction=cCase.getAnotbAction(); return handleAnotbAction(anotbAction, skA, skB, thetaLongA, thetaLongB); }"
    },
    "Old_Method": "/** \n * Returns the A-and-not-B set operation on a Tuple sketch and a Theta sketch. <p>This a stateless operation and has no impact on the internal state of this operator. Thus, this is not an accumulating update and is independent of the  {@link #setA(Sketch)}, {@link #notB(Sketch)},  {@link #notB(org.apache.datasketches.theta.Sketch)}, and {@link #getResult(boolean)} methods.<\/p><p>If either argument is null an exception is thrown.<\/p> <p>Rationale: In mathematics a \"null set\" is a set with no members, which we call an empty set. That is distinctly different from the java <i>null<\/i>, which represents a nonexistent object. In most cases it is a programming error due to some object that was not properly initialized. With a null as the first argument, we cannot know what the user's intent is. With a null as the second argument, we can't ignore it as we must return a result and there is no following possible viable arguments for the second argument. Since it is very likely that a <i>null<\/i> is a programming error for either argument we throw a an exception.<\/p>\n * @param skA The incoming Tuple sketch for the first argument\n * @param skB The incoming Theta sketch for the second argument\n * @param < S > Type of Summary\n * @return the result as an unordered {@link CompactSketch}\n */\n@SuppressFBWarnings(value=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\",justification=\"hashArr and summaryArr are guaranteed to be valid due to the switch on CornerCase\") public static <S extends Summary>CompactSketch<S> aNotB(final Sketch<S> skA,final org.apache.datasketches.theta.Sketch skB){\n  if (skA == null || skB == null) {\n    throw new SketchesArgumentException(\"Neither argument may be null for this stateless operation.\");\n  }\n  final long thetaLongA=skA.getThetaLong();\n  final int countA=skA.getRetainedEntries();\n  final boolean emptyA=skA.isEmpty();\n  final long thetaLongB=skB.getThetaLong();\n  final int countB=skB.getRetainedEntries();\n  final boolean emptyB=skB.isEmpty();\n  final int id=SetOperationCornerCases.createCornerCaseId(thetaLongA,countA,emptyA,thetaLongB,countB,emptyB);\n  final CornerCase cCase=CornerCase.caseIdToCornerCase(id);\n  final AnotbAction anotbAction=cCase.getAnotbAction();\n  CompactSketch<S> result=null;\nswitch (anotbAction) {\ncase EMPTY_1_0_T:\n{\n      result=new CompactSketch<>(null,null,Long.MAX_VALUE,true);\n      break;\n    }\ncase DEGEN_MIN_0_F:\n{\n    final long thetaLong=min(thetaLongA,thetaLongB);\n    result=new CompactSketch<>(null,null,thetaLong,false);\n    break;\n  }\ncase DEGEN_THA_0_F:\n{\n  result=new CompactSketch<>(null,null,thetaLongA,false);\n  break;\n}\ncase TRIM_A:\n{\nfinal DataArrays<S> daA=getCopyOfDataArraysTuple(skA);\nfinal long[] hashArrA=daA.hashArr;\nfinal S[] summaryArrA=daA.summaryArr;\nfinal long minThetaLong=min(thetaLongA,thetaLongB);\nfinal DataArrays<S> da=trimAndCopyDataArrays(hashArrA,summaryArrA,minThetaLong,false);\nresult=new CompactSketch<>(da.hashArr,da.summaryArr,minThetaLong,skA.empty_);\nbreak;\n}\ncase SKETCH_A:\n{\nfinal DataArrays<S> daA=getCopyOfDataArraysTuple(skA);\nresult=new CompactSketch<>(daA.hashArr,daA.summaryArr,thetaLongA,skA.empty_);\nbreak;\n}\ncase FULL_ANOTB:\n{\nfinal DataArrays<S> daA=getCopyOfDataArraysTuple(skA);\nfinal long minThetaLong=min(thetaLongA,thetaLongB);\n@SuppressFBWarnings(value=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\",justification=\"hashArr and summaryArr are guaranteed to be valid due to the switch on CornerCase\") final DataArrays<S> daR=getCopyOfResultArraysTheta(minThetaLong,daA.hashArr.length,daA.hashArr,daA.summaryArr,skB);\nfinal int countR=(daR.hashArr == null) ? 0 : daR.hashArr.length;\nif (countR == 0) {\nresult=new CompactSketch<>(null,null,minThetaLong,minThetaLong == Long.MAX_VALUE);\n}\n else {\nresult=new CompactSketch<>(daR.hashArr,daR.summaryArr,minThetaLong,false);\n}\n}\n}\nreturn result;\n}\n",
    "File_Path": "datasketches-java/src/main/java/org/apache/datasketches/tuple/AnotB.java",
    "Start": 15811,
    "Stop": 20259,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "aNotB"
}
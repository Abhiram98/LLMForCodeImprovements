{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Eliminate Code Redundancy",
                "Change_Diff": "-    onHeapMem.clear();\n-    offHeapMem.clear();\n-    int v=0XFF;\n-    int onH, offH;\n-    insertPreLongs(onHeapMem,v);\n... (repeat for all sets of operations)\n+    performOperation(onHeapMem, 0XFF);\n+    performOperation(offHeapMem, 0XFF);",
                "Description": "The same set of operations are performed on both 'onHeapMem' and 'offHeapMem'. This leads to code redundancy. Extract the repeating code into a separate method, which takes the memory object and a value as parameters.",
                "Start": 4,
                "End": 67
            },
            {
                "Improvement": "Deduplicate Exception Handling",
                "Change_Diff": "- catch (  final Exception e) {\n-    throw new RuntimeException(e);\n-  }\n+ throws Exception",
                "Description": "Instead of wrapping the entire method in a try-catch block, you can declare your method to throw Exception. This will make your method cleaner and easier to test.",
                "Start": 1,
                "End": 70
            }
        ],
        "Final code": "@Test public void checkInsertsAndExtracts() throws Exception {\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    performOperation(onHeapMem, 0XFF);\n    performOperation(offHeapMem, 0XFF);\n  }\n}\n\nprivate void performOperation(WritableMemory memory, int value) {\n  memory.clear();\n  int h;\n  insertPreLongs(memory,value);\n  h=extractPreLongs(memory);\n  assertEquals(h,value);\n  memory.clear();\n  insertSerVer(memory,value);\n  h=extractSerVer(memory);\n  assertEquals(h,value);\n  memory.clear();\n  insertFamilyID(memory,value);\n  h=extractFamilyID(memory);\n  assertEquals(h,value);\n  memory.clear();\n  insertFlags(memory,value);\n  h=extractFlags(memory);\n  assertEquals(h,value);\n  memory.clear();\n  long hL, vL=1L << 30;\n  insertN(memory,vL);\n  hL=extractN(memory);\n  assertEquals(hL,vL);\n  memory.clear();\n  double hD, vD=1L << 40;\n  insertMinDouble(memory,vD);\n  hD=extractMinDouble(memory);\n  assertEquals(hD,vD);\n  memory.clear();\n  insertMaxDouble(memory,vD);\n  hD=extractMaxDouble(memory);\n  assertEquals(hD,vD);\n  memory.clear();\n}"
    },
    "Old_Method": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    int onH, offH;\n    insertPreLongs(onHeapMem,v);\n    onH=extractPreLongs(onHeapMem);\n    assertEquals(onH,v);\n    insertPreLongs(offHeapMem,v);\n    offH=extractPreLongs(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertSerVer(onHeapMem,v);\n    onH=extractSerVer(onHeapMem);\n    assertEquals(onH,v);\n    insertSerVer(offHeapMem,v);\n    offH=extractSerVer(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFamilyID(onHeapMem,v);\n    onH=extractFamilyID(onHeapMem);\n    assertEquals(onH,v);\n    insertFamilyID(offHeapMem,v);\n    offH=extractFamilyID(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFlags(onHeapMem,v);\n    onH=extractFlags(onHeapMem);\n    assertEquals(onH,v);\n    insertFlags(offHeapMem,v);\n    offH=extractFlags(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    v=0XFFFF;\n    insertK(onHeapMem,v);\n    onH=extractK(onHeapMem);\n    assertEquals(onH,v);\n    insertK(offHeapMem,v);\n    offH=extractK(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    long onHL, offHL, vL=1L << 30;\n    insertN(onHeapMem,vL);\n    onHL=extractN(onHeapMem);\n    assertEquals(onHL,vL);\n    insertN(offHeapMem,vL);\n    offHL=extractN(offHeapMem);\n    assertEquals(offHL,vL);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    double onHD, offHD, vD=1L << 40;\n    insertMinDouble(onHeapMem,vD);\n    onHD=extractMinDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMinDouble(offHeapMem,vD);\n    offHD=extractMinDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertMaxDouble(onHeapMem,vD);\n    onHD=extractMaxDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMaxDouble(offHeapMem,vD);\n    offHD=extractMaxDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/PreambleUtilTest.java",
    "Start": 2333,
    "Stop": 5225,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkInsertsAndExtracts"
}
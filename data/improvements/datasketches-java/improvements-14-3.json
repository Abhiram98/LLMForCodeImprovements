{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove unnecessary final keyword",
                "Change_Diff": "- final int k1=8;\n+ int k1=8;\n\n- final int n1=2 * k1;\n+ int n1=2 * k1;\n\n- final int k2=4;\n+ int k2=4;\n\n- final int n2=5 * k2;\n+ int n2=5 * k2;\n\n- final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n+ int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n\n- final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n+ WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n\n- final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n+ UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n\n- final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n+ CompactDoublesSketch sketchIn1=sketchIn0.compact();\n\n- final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n+ WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n\n- final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n+ DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n\n- final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n+ CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();",
                "Description": "The 'final' keyword is unnecessary in the context of local variables in a method when the variable\u2019s value is not used in an inner class. The Java compiler and JVM will automatically take care of optimizations related to these types of variables, so it's unnecessary and can be removed to reduce clutter.",
                "Start": 2,
                "End": 36
            },
            {
                "Improvement": "Use descriptive variable names",
                "Change_Diff": "- final int k1=8;\n+ final int elementCount1=8;\n\n- final int n1=2 * k1;\n+ final int totalElements1=2 * elementCount1;\n\n- final int k2=4;\n+ final int elementCount2=4;\n\n- final int n2=5 * k2;\n+ final int totalElements2=5 * elementCount2;\n\n- final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n+ final CompactDoublesSketch compactSketch1=sketchIn0.compact();\n\n- final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n+ final CompactDoublesSketch compactSketch2=buildAndLoadDQS(elementCount2,totalElements2,17).compact();",
                "Description": "Using descriptive variable names makes the code more readable and understandable. This can help other developers, or yourself in the future, understand what the code does more quickly and easily.",
                "Start": 2,
                "End": 36
            }
        ],
        "Final code": "@Test\npublic void checkUnion4DirectCompact(){\n    int elementCount1=8;\n    int totalElements1=2 * elementCount1;\n    int elementCount2=4;\n    int totalElements2=5 * elementCount2;\n    int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n    WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n    UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(elementCount1).build(skMem);\n    for (int i=0; i < totalElements1; i++) {\n      sketchIn0.update(i + 1);\n    }\n    CompactDoublesSketch compactSketch1=sketchIn0.compact();\n    WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n    DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n    union.union(compactSketch1);\n    assertEquals(union.getResult().getN(),totalElements1);\n    assertEquals(union.getMaxK(),256);\n    assertEquals(union.getEffectiveK(),elementCount1);\n    DoublesSketch result=union.getResult();\n    assertEquals(result.getN(),16);\n    assertEquals(result.getMaxItem(),totalElements1,0.0);\n    assertEquals(result.getMinItem(),1.0,0.0);\n    assertEquals(result.getK(),elementCount1);\n    CompactDoublesSketch compactSketch2=buildAndLoadDQS(elementCount2,totalElements2,17).compact();\n    union.reset();\n    union.union(compactSketch2);\n    result=union.getResult();\n    assertEquals(result.getMaxItem(),totalElements2 + 17,0.0);\n    assertEquals(result.getMinItem(),1.0 + 17,0.0);\n    println(\"\\nFinal\" + union.getResult().toString(true,true));\n}"
    },
    "Old_Method": "@Test public void checkUnion4DirectCompact(){\n  final int k1=8;\n  final int n1=2 * k1;\n  final int k2=4;\n  final int n2=5 * k2;\n  final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n  final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n  final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n  for (int i=0; i < n1; i++) {\n    sketchIn0.update(i + 1);\n  }\n  final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n  final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n  final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n  union.union(sketchIn1);\n  assertEquals(union.getResult().getN(),n1);\n  assertEquals(union.getMaxK(),256);\n  assertEquals(union.getEffectiveK(),k1);\n  DoublesSketch result=union.getResult();\n  assertEquals(result.getN(),16);\n  assertEquals(result.getMaxItem(),n1,0.0);\n  assertEquals(result.getMinItem(),1.0,0.0);\n  assertEquals(result.getK(),k1);\n  final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n  union.reset();\n  union.union(sketchIn2);\n  result=union.getResult();\n  assertEquals(result.getMaxItem(),n2 + 17,0.0);\n  assertEquals(result.getMinItem(),1.0 + 17,0.0);\n  println(\"\\nFinal\" + union.getResult().toString(true,true));\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/DoublesUnionImplTest.java",
    "Start": 9412,
    "Stop": 10835,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkUnion4DirectCompact"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a helper method",
                "Change_Diff": "- final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n for (int i=0; i < n1; i++) {\n sketchIn0.update(i + 1);\n }\n final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n+ final CompactDoublesSketch sketchIn1 = createCompactSketch(k1, n1, skMem);",
                "Description": "The code for creating a sketch and updating it with numbers is repeated twice. This code can be extracted into a helper method to improve readability and maintainability.",
                "Start": 5,
                "End": 18
            },
            {
                "Improvement": "Use descriptive variable names",
                "Change_Diff": "- final int k1=8;\n-final int n1=2 * k1;\n-final int k2=4;\n-final int n2=5 * k2;\n+ final int sketchSize1=8;\n+ final int numUpdates1=2 * sketchSize1;\n+ final int sketchSize2=4;\n+ final int numUpdates2=5 * sketchSize2;",
                "Description": "The variables `n1`, `n2`, `k1`, `k2`, etc. are not descriptive and do not indicate their purpose. More descriptive names should be used to improve code readability.",
                "Start": 2,
                "End": 5
            }
        ],
        "Final code": "public void checkUnion4DirectCompact(){\n final int sketchSize1=8;\n final int numUpdates1=2 * sketchSize1;\n final int sketchSize2=4;\n final int numUpdates2=5 * sketchSize2;\n final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n final CompactDoublesSketch sketchIn1 = createCompactSketch(sketchSize1, numUpdates1, skMem);\n final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n union.union(sketchIn1);\n assertEquals(union.getResult().getN(),numUpdates1);\n assertEquals(union.getMaxK(),256);\n assertEquals(union.getEffectiveK(),sketchSize1);\n DoublesSketch result=union.getResult();\n assertEquals(result.getN(),16);\n assertEquals(result.getMaxItem(),numUpdates1,0.0);\n assertEquals(result.getMinItem(),1.0,0.0);\n assertEquals(result.getK(),sketchSize1);\n final CompactDoublesSketch sketchIn2 = createCompactSketch(sketchSize2, numUpdates2, 17);\n union.reset();\n union.union(sketchIn2);\n result=union.getResult();\n assertEquals(result.getMaxItem(),numUpdates2 + 17,0.0);\n assertEquals(result.getMinItem(),1.0 + 17,0.0);\n println(\"\\nFinal\" + union.getResult().toString(true,true));\n}\n\nprivate CompactDoublesSketch createCompactSketch(int sketchSize, int numUpdates, WritableMemory memory) {\n final UpdateDoublesSketch sketch=DoublesSketch.builder().setK(sketchSize).build(memory);\n for (int i=0; i < numUpdates; i++) {\n sketch.update(i + 1);\n }\n return sketch.compact();\n}"
    },
    "Old_Method": "@Test public void checkUnion4DirectCompact(){\n  final int k1=8;\n  final int n1=2 * k1;\n  final int k2=4;\n  final int n2=5 * k2;\n  final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n  final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n  final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n  for (int i=0; i < n1; i++) {\n    sketchIn0.update(i + 1);\n  }\n  final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n  final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n  final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n  union.union(sketchIn1);\n  assertEquals(union.getResult().getN(),n1);\n  assertEquals(union.getMaxK(),256);\n  assertEquals(union.getEffectiveK(),k1);\n  DoublesSketch result=union.getResult();\n  assertEquals(result.getN(),16);\n  assertEquals(result.getMaxItem(),n1,0.0);\n  assertEquals(result.getMinItem(),1.0,0.0);\n  assertEquals(result.getK(),k1);\n  final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n  union.reset();\n  union.union(sketchIn2);\n  result=union.getResult();\n  assertEquals(result.getMaxItem(),n2 + 17,0.0);\n  assertEquals(result.getMinItem(),1.0 + 17,0.0);\n  println(\"\\nFinal\" + union.getResult().toString(true,true));\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/DoublesUnionImplTest.java",
    "Start": 9412,
    "Stop": 10835,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkUnion4DirectCompact"
}
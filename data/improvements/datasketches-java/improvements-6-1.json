{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Add meaningful variable names",
            "Change_Diff": "- final int lgK=5;\n- final int k=1 << lgK;\n- final int u=4 * k;\n- final UpdateSketch usk1=UpdateSketch.builder().setNominalEntries(k).build();\n- final CompactSketch csk1=usk1.compact(true,null);\n- final Intersection inter=SetOperation.builder().buildIntersection(iMem);\n+ final int logBase2OfK=5;\n+ final int numEntries=1 << logBase2OfK;\n+ final int totalUpdates=4 * numEntries;\n+ final UpdateSketch updateSketch=UpdateSketch.builder().setNominalEntries(numEntries).build();\n+ final CompactSketch compactSketch=updateSketch.compact(true,null);\n+ final Intersection intersection=SetOperation.builder().buildIntersection(iMem);",
            "Description": "The variables 'lgK', 'k', 'u', 'usk1', 'csk1' and 'inter' are not descriptive and do not indicate their purpose in the code. Replace them with meaningful names that indicate their role in the program.",
            "Start": 2,
            "End": 13
        }],
        "Final code": "@Test(expectedExceptions=SketchesArgumentException.class) public void checkSizedTooSmall(){\n  final int logBase2OfK=5;\n  final int numEntries=1 << logBase2OfK;\n  final int totalUpdates=4 * numEntries;\n  final int memBytes=getMaxIntersectionBytes(numEntries / 2);\n  final byte[] memArr=new byte[memBytes];\n  final WritableMemory iMem=WritableMemory.writableWrap(memArr);\n  final UpdateSketch updateSketch=UpdateSketch.builder().setNominalEntries(numEntries).build();\n  for (int i=0; i < totalUpdates; i++) {\n    updateSketch.update(i);\n  }\n  final CompactSketch compactSketch=updateSketch.compact(true,null);\n  final Intersection intersection=SetOperation.builder().buildIntersection(iMem);\n  intersection.intersect(compactSketch);\n}"
    },
    "Old_Method": "@Test(expectedExceptions=SketchesArgumentException.class) public void checkSizedTooSmall(){\n  final int lgK=5;\n  final int k=1 << lgK;\n  final int u=4 * k;\n  final int memBytes=getMaxIntersectionBytes(k / 2);\n  final byte[] memArr=new byte[memBytes];\n  final WritableMemory iMem=WritableMemory.writableWrap(memArr);\n  final UpdateSketch usk1=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < u; i++) {\n    usk1.update(i);\n  }\n  final CompactSketch csk1=usk1.compact(true,null);\n  final Intersection inter=SetOperation.builder().buildIntersection(iMem);\n  inter.intersect(csk1);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/DirectIntersectionTest.java",
    "Start": 17194,
    "Stop": 17845,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkSizedTooSmall"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce duplicate code",
                "Change_Diff": "- result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n- assertEquals(result.getEstimate(),0.0);\n- assertTrue(result.isEmpty());\n- assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n...\n- result=aNb.aNotB(aHT,bHT,!ordered,null);\n- assertEquals(result.getEstimate(),k / 2.0);\n- assertFalse(result.isEmpty());\n- assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n+ invokeAndAssert(aNb, aHT, bHT, !ordered, null, k / 2.0, false, Long.MAX_VALUE);",
                "Description": "There's a lot of duplicated code when invoking the 'aNotB' method and asserting the results. We can extract this into a separate method and reuse it.",
                "Start": 29,
                "End": 99
            },
            {
                "Improvement": "Extract constant",
                "Change_Diff": "- final boolean ordered=true;\n+ private static final boolean ORDERED = true;",
                "Description": "The 'ordered' variable is always 'true', so it can be made into a constant. This makes the code easier to understand and less error-prone.",
                "Start": 27,
                "End": 27
            }
        ],
        "Final code": "@Test\npublic void checkCombinations() {\n    final int k=512;\n    final UpdateSketch aNull=null;\n    final UpdateSketch bNull=null;\n    final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n    final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n    final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n    for (int i=0; i < k; i++) {\n        aHT.update(i);\n    }\n    final CompactSketch aC=aHT.compact(false,null);\n    final CompactSketch aO=aHT.compact(true,null);\n    final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n    for (int i=k / 2; i < k + k / 2; i++) {\n        bHT.update(i);\n    }\n    final CompactSketch bC=bHT.compact(false,null);\n    final CompactSketch bO=bHT.compact(true,null);\n    CompactSketch result;\n    AnotB aNb;\n    private static final boolean ORDERED = true;\n    aNb=SetOperation.builder().buildANotB();\n    try {\n        aNb.setA(aNull);\n        fail();\n    }\n    catch (final SketchesArgumentException e) {\n    }\n    aNb.notB(bNull);\n    try {\n        aNb.aNotB(aNull,bNull);\n        fail();\n    }\n    catch (final SketchesArgumentException e) {\n    }\n    try {\n        aNb.aNotB(aNull,bEmpty);\n        fail();\n    }\n    catch (final SketchesArgumentException e) {\n    }\n    try {\n        aNb.aNotB(aEmpty,bNull);\n        fail();\n    }\n    catch (final SketchesArgumentException e) {\n    }\n    invokeAndAssert(aNb, aEmpty, bEmpty, !ORDERED, null, 0.0, true, Long.MAX_VALUE);\n    invokeAndAssert(aNb, aEmpty, bC, !ORDERED, null, 0.0, true, Long.MAX_VALUE);\n    ...\n    invokeAndAssert(aNb, aHT, bHT, !ORDERED, null, k / 2.0, false, Long.MAX_VALUE);\n}\n\nprivate void invokeAndAssert(AnotB aNb, UpdateSketch a, UpdateSketch b, boolean ordered, Object c, double estimate, boolean isEmpty, long thetaLong) {\n    CompactSketch result = aNb.aNotB(a, b, ordered, c);\n    assertEquals(result.getEstimate(), estimate);\n    assertEquals(result.isEmpty(), isEmpty);\n    assertEquals(result.getThetaLong(), thetaLong);\n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
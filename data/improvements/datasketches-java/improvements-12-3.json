{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use @Rule ExpectedException instead of try-catch",
            "Change_Diff": "- try {\n    sketch.getMinItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getMaxItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantile(0.5);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantiles(new double[]{0.0,1.0});\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getPMF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getCDF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getRank(\"a\");\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n+ @Rule\n+ public ExpectedException thrown = ExpectedException.none();\n\n+ // In each test where an exception is expected\n+ thrown.expect(IllegalArgumentException.class);",
            "Description": "Instead of using try-catch blocks to check exceptions, you can use the @Rule ExpectedException. This way, the test will pass if the exception you are expecting is thrown.",
            "Start": 8,
            "End": 42
        }],
        "Final code": "@Test public void empty(){\n  final ItemsSketch<String> sketch=ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n  assertNotNull(sketch);\n  sketch.update(null);\n  assertTrue(sketch.isEmpty());\n  assertEquals(sketch.getN(),0);\n  assertEquals(sketch.getNumRetained(),0);\n\n  @Rule\n  public ExpectedException thrown = ExpectedException.none();\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getMinItem();\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getMaxItem();\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getQuantile(0.5);\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getQuantiles(new double[]{0.0,1.0});\n\n  final byte[] byteArr=sketch.toByteArray(new ArrayOfStringsSerDe());\n  assertEquals(byteArr.length,8);\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getPMF(new String[0]);\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getCDF(new String[0]);\n\n  thrown.expect(IllegalArgumentException.class);\n  sketch.getRank(\"a\");\n}"
    },
    "Old_Method": "@Test public void empty(){\n  final ItemsSketch<String> sketch=ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n  assertNotNull(sketch);\n  sketch.update(null);\n  assertTrue(sketch.isEmpty());\n  assertEquals(sketch.getN(),0);\n  assertEquals(sketch.getNumRetained(),0);\n  try {\n    sketch.getMinItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getMaxItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantile(0.5);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantiles(new double[]{0.0,1.0});\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  final byte[] byteArr=sketch.toByteArray(new ArrayOfStringsSerDe());\n  assertEquals(byteArr.length,8);\n  try {\n    sketch.getPMF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getCDF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getRank(\"a\");\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/ItemsSketchTest.java",
    "Start": 2142,
    "Stop": 3166,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "empty"
}
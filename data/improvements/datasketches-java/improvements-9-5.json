{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove unnecessary final modifiers",
                "Change_Diff": "- final int k=512;\n...\n- final UpdateSketch aNull=null;\n...\n- final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n...\n+ int k=512;\n...\n+ UpdateSketch aNull=null;\n...\n+ UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n...",
                "Description": "The final modifier does not contribute anything in this method. It's usually used in classes or methods that should not be overridden, or on variables that should not be reassigned. Here, it's unnecessary and adds clutter.",
                "Start": 2,
                "End": 73
            },
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "- for (int i=0; i < k; i++) {\n-    aHT.update(i);\n-  }\n...\n- for (int i=k / 2; i < k + k / 2; i++) {\n-    bHT.update(i);\n-  }\n...\n+ updateSketch(aHT, 0, k);\n...\n+ updateSketch(bHT, k / 2, k + k / 2);\n...\n",
                "Description": "The loops used to update the UpdateSketch instances are the same, just with different inputs. This can be replaced with a method that takes in the UpdateSketch instance and the start and end values for the loop.",
                "Start": 8,
                "End": 28
            },
            {
                "Improvement": "Extract repeated assertions into a method",
                "Change_Diff": "- assertEquals(result.getEstimate(),0.0);\n- assertTrue(result.isEmpty());\n- assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n...\n+ assertResult(result, 0.0, true, Long.MAX_VALUE);\n...",
                "Description": "There are many repeated calls to assertEquals and assertTrue/assertFalse in the code. These can be extracted into a method that takes in the result, expected estimate, expected empty state, and expected theta long.",
                "Start": 41,
                "End": 73
            }
        ],
        "Final code": "@Test\npublic void checkCombinations(){\n  int k=512;\n  UpdateSketch aNull=null;\n  UpdateSketch bNull=null;\n  UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  updateSketch(aHT, 0, k);\n  CompactSketch aC=aHT.compact(false,null);\n  CompactSketch aO=aHT.compact(true,null);\n  UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  updateSketch(bHT, k / 2, k + k / 2);\n  CompactSketch bC=bHT.compact(false,null);\n  CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n  catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n  catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n  catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n  catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertResult(result, 0.0, true, Long.MAX_VALUE);\n  ...\n}\n\nprivate void updateSketch(UpdateSketch sketch, int start, int end) {\n  for (int i=start; i < end; i++) {\n    sketch.update(i);\n  }\n}\n\nprivate void assertResult(CompactSketch result, double expectedEstimate, boolean expectedEmpty, long expectedTheta) {\n  assertEquals(result.getEstimate(), expectedEstimate);\n  assertEquals(result.isEmpty(), expectedEmpty);\n  assertEquals(result.getThetaLong(), expectedTheta);\n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
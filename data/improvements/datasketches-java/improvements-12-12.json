{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use @Before method to initialize sketch",
                "Change_Diff": "- final ItemsSketch<String> sketch=ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n- assertNotNull(sketch);\n- sketch.update(null);\n- assertTrue(sketch.isEmpty());\n+ @Before\n+ public void setUp() {\n+    sketch = ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n+    sketch.update(null);\n+    assertTrue(sketch.isEmpty());\n+ }",
                "Description": "JUnit provides a @Before annotation which is used to signal that the annotated method should be executed before each test. This can be used to initialize the sketch object, reducing repeated code.",
                "Start": 1,
                "End": 4
            },
            {
                "Improvement": "Use @Test(expected = Exception.class) for expected exceptions",
                "Change_Diff": "- try {\n-   sketch.getMinItem();\n-   fail();\n- } catch (  IllegalArgumentException e) { }\n+ @Test(expected = IllegalArgumentException.class)\n+ public void testGetMinItemException() {\n+    sketch.getMinItem();\n+ }",
                "Description": "JUnit provides a feature that allows you to test for expected exceptions by adding the expected exception type in the @Test annotation. This can reduce the amount of try-catch boilerplate code.",
                "Start": 8,
                "End": 12
            }
        ],
        "Final code": "@Test public void empty(){\n    @Before\n    public void setUp() {\n        sketch = ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n        sketch.update(null);\n        assertTrue(sketch.isEmpty());\n    }\n    assertEquals(sketch.getN(),0);\n    assertEquals(sketch.getNumRetained(),0);\n    @Test(expected = IllegalArgumentException.class)\n    public void testGetMinItemException() {\n        sketch.getMinItem();\n    }\n    // similar changes for the rest of the tests\n    final byte[] byteArr=sketch.toByteArray(new ArrayOfStringsSerDe());\n    assertEquals(byteArr.length,8);\n}"
    },
    "Old_Method": "@Test public void empty(){\n  final ItemsSketch<String> sketch=ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n  assertNotNull(sketch);\n  sketch.update(null);\n  assertTrue(sketch.isEmpty());\n  assertEquals(sketch.getN(),0);\n  assertEquals(sketch.getNumRetained(),0);\n  try {\n    sketch.getMinItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getMaxItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantile(0.5);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantiles(new double[]{0.0,1.0});\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  final byte[] byteArr=sketch.toByteArray(new ArrayOfStringsSerDe());\n  assertEquals(byteArr.length,8);\n  try {\n    sketch.getPMF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getCDF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getRank(\"a\");\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/ItemsSketchTest.java",
    "Start": 2142,
    "Stop": 3166,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "empty"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code duplication by extracting repeated code into a separate method",
                "Change_Diff": "- tryBadMem(mem,PREAMBLE_LONGS_BYTE,2);\n- mem.putLong(0,pre0);\n- tryBadMem(mem,SER_VER_BYTE,2);\n- mem.putLong(0,pre0);\n- tryBadMem(mem,FAMILY_BYTE,2);\n- mem.putLong(0,pre0);\n- tryBadMem(mem,FLAGS_BYTE,2);\n- mem.putLong(0,pre0);\n+ tryBadMemAndReset(mem, pre0, PREAMBLE_LONGS_BYTE, SER_VER_BYTE, FAMILY_BYTE, FLAGS_BYTE);",
                "Description": "The code is repeatedly trying to perform a certain operation and then handling a `SketchesArgumentException` exception. This code can be extracted into a separate method.",
                "Start": 11,
                "End": 34
            },
            {
                "Improvement": "Extract constants",
                "Change_Diff": "- int k=1024;\n+ final int NOMINAL_ENTRIES = 1024;\n- tryBadMem(mem,PREAMBLE_LONGS_BYTE,2);\n+ tryBadMem(mem,PREAMBLE_LONGS_BYTE,EXCEPTION_ATTEMPT_COUNT);\n- mem.putLong(0,pre0);\n+ mem.putLong(PRE_OFFSET,pre0);",
                "Description": "Integers like 1024, 2, and 0 are magic numbers in the code. These should be extracted as named constants for better readability and maintainability.",
                "Start": 2,
                "End": 34
            }
        ],
        "Final code": "final int NOMINAL_ENTRIES = 1024;\nfinal int EXCEPTION_ATTEMPT_COUNT = 2;\nfinal int PRE_OFFSET = 0;\n\n@Test public void checkMemDeSerExceptions(){\n  UpdateSketch sk1=UpdateSketch.builder().setFamily(ALPHA).setNominalEntries(NOMINAL_ENTRIES).build();\n  sk1.update(1L);\n  byte[] bytearray1=sk1.toByteArray();\n  WritableMemory mem=WritableMemory.writableWrap(bytearray1);\n  long pre0=mem.getLong(PRE_OFFSET);\n\n  tryBadMemAndReset(mem, pre0, PREAMBLE_LONGS_BYTE, SER_VER_BYTE, FAMILY_BYTE, FLAGS_BYTE);\n\n  final long origThetaLong=mem.getLong(THETA_LONG);\n  try {\n    mem.putLong(THETA_LONG,Long.MAX_VALUE / 2);\n    HeapAlphaSketch.heapifyInstance(mem,ThetaUtil.DEFAULT_UPDATE_SEED);\n    fail();\n  }\n  catch (  SketchesArgumentException e) {\n  }\n  mem.putLong(THETA_LONG,origThetaLong);\n  byte[] byteArray2=new byte[bytearray1.length - 1];\n  WritableMemory mem2=WritableMemory.writableWrap(byteArray2);\n  mem.copyTo(PRE_OFFSET,mem2,PRE_OFFSET,mem2.getCapacity());\n  try {\n    HeapAlphaSketch.heapifyInstance(mem2,ThetaUtil.DEFAULT_UPDATE_SEED);\n    fail();\n  }\n  catch (  SketchesArgumentException e) {\n  }\n  insertLgResizeFactor(mem,ResizeFactor.X1.lg());\n  UpdateSketch usk=HeapAlphaSketch.heapifyInstance(mem,ThetaUtil.DEFAULT_UPDATE_SEED);\n  ResizeFactor rf=usk.getResizeFactor();\n  assertEquals(rf,ResizeFactor.X2);\n}\n\nprivate void tryBadMemAndReset(WritableMemory mem, long pre0, int ... bytes) {\n  for (int byte : bytes) {\n    tryBadMem(mem, byte, EXCEPTION_ATTEMPT_COUNT);\n    mem.putLong(PRE_OFFSET, pre0);\n  }\n}"
    },
    "Old_Method": "@Test public void checkMemDeSerExceptions(){\n  int k=1024;\n  UpdateSketch sk1=UpdateSketch.builder().setFamily(ALPHA).setNominalEntries(k).build();\n  sk1.update(1L);\n  byte[] bytearray1=sk1.toByteArray();\n  WritableMemory mem=WritableMemory.writableWrap(bytearray1);\n  long pre0=mem.getLong(0);\n  tryBadMem(mem,PREAMBLE_LONGS_BYTE,2);\n  mem.putLong(0,pre0);\n  tryBadMem(mem,SER_VER_BYTE,2);\n  mem.putLong(0,pre0);\n  tryBadMem(mem,FAMILY_BYTE,2);\n  mem.putLong(0,pre0);\n  tryBadMem(mem,FLAGS_BYTE,2);\n  mem.putLong(0,pre0);\n  final long origThetaLong=mem.getLong(THETA_LONG);\n  try {\n    mem.putLong(THETA_LONG,Long.MAX_VALUE / 2);\n    HeapAlphaSketch.heapifyInstance(mem,ThetaUtil.DEFAULT_UPDATE_SEED);\n    fail();\n  }\n catch (  SketchesArgumentException e) {\n  }\n  mem.putLong(THETA_LONG,origThetaLong);\n  byte[] byteArray2=new byte[bytearray1.length - 1];\n  WritableMemory mem2=WritableMemory.writableWrap(byteArray2);\n  mem.copyTo(0,mem2,0,mem2.getCapacity());\n  try {\n    HeapAlphaSketch.heapifyInstance(mem2,ThetaUtil.DEFAULT_UPDATE_SEED);\n    fail();\n  }\n catch (  SketchesArgumentException e) {\n  }\n  insertLgResizeFactor(mem,ResizeFactor.X1.lg());\n  UpdateSketch usk=HeapAlphaSketch.heapifyInstance(mem,ThetaUtil.DEFAULT_UPDATE_SEED);\n  ResizeFactor rf=usk.getResizeFactor();\n  assertEquals(rf,ResizeFactor.X2);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/HeapAlphaSketchTest.java",
    "Start": 19344,
    "Stop": 21113,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkMemDeSerExceptions"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use constant for repeated string literals",
                "Change_Diff": "- sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);\n+ sb.append(LS).append(QUANTILES_DATA_DETAIL).append(skName).append(DATA_DETAIL).append(LS);",
                "Description": "There are multiple uses of the same string literals throughout the method. Defining them as constants at the beginning of the method can make the code cleaner and easier to maintain.",
                "Start": 3,
                "End": 26
            },
            {
                "Improvement": "Use `System.lineSeparator()` instead of `LS`",
                "Change_Diff": "- sb.append(LS).append(QUANTILES_DATA_DETAIL).append(skName).append(DATA_DETAIL).append(LS);\n+ sb.append(System.lineSeparator()).append(QUANTILES_DATA_DETAIL).append(skName).append(DATA_DETAIL).append(System.lineSeparator());",
                "Description": "It's better to use `System.lineSeparator()` instead of `LS` to get the system-dependent line separator.",
                "Start": 3,
                "End": 26
            },
            {
                "Improvement": "Use `String.join()` for string concatenation",
                "Change_Diff": "- sb.append(System.lineSeparator()).append(QUANTILES_DATA_DETAIL).append(skName).append(DATA_DETAIL).append(System.lineSeparator());\n+ String.join(System.lineSeparator(), QUANTILES_DATA_DETAIL, skName, DATA_DETAIL, System.lineSeparator());",
                "Description": "In the code, there is a use of `StringBuilder.append()` for concatenating strings. Java 8 introduced `String.join()`, which is more readable and efficient for concatenating strings.",
                "Start": 3,
                "End": 26
            }
        ],
        "Final code": "private static String getDataDetail(final DoublesSketch sketchIn) {\n    final DoublesSketch sketch = sketchIn.isCompact() ? copyToHeap(sketchIn) : sketchIn;\n    final String QUANTILES_DATA_DETAIL = \"### Quantiles \";\n    final String DATA_DETAIL = \" DATA DETAIL: \";\n    final StringBuilder sb = new StringBuilder();\n    final String skName = sketch.getClass().getSimpleName();\n    sb.append(String.join(System.lineSeparator(), QUANTILES_DATA_DETAIL, skName, DATA_DETAIL, System.lineSeparator()));\n    final int k = sketch.getK();\n    final long n = sketch.getN();\n    final int bbCount = sketch.getBaseBufferCount();\n    final long bitPattern = sketch.getBitPattern();\n    final double[] combBuf = sketch.getCombinedBuffer();\n    sb.append(\"   BaseBuffer   : \");\n    for (int i=0; i < bbCount; i++) {\n        sb.append(String.format(\"%10.1f\", combBuf[i]));\n    }\n    sb.append(System.lineSeparator());\n    final int combBufSize = combBuf.length;\n    if (n >= (2 * k)) {\n        sb.append(\"   Valid | Level\");\n        for (int j=2 * k; j < combBufSize; j++) {\n            if ((j % k) == 0) {\n                final int levelNum = (j / k) - 2;\n                final String validLvl = ((1L << levelNum) & bitPattern) > 0 ? \"    T  \" : \"    F  \";\n                final String lvl = String.format(\"%5d\", levelNum);\n                sb.append(System.lineSeparator()).append(\"   \").append(validLvl).append(\" \").append(lvl).append(\": \");\n            }\n            sb.append(String.format(\"%10.1f\", combBuf[j]));\n        }\n        sb.append(System.lineSeparator());\n    }\n    sb.append(\"### END DATA DETAIL\").append(System.lineSeparator());\n    return sb.toString();\n}"
    },
    "Old_Method": "private static String getDataDetail(final DoublesSketch sketchIn){\n  final DoublesSketch sketch=sketchIn.isCompact() ? copyToHeap(sketchIn) : sketchIn;\n  final StringBuilder sb=new StringBuilder();\n  final String skName=sketch.getClass().getSimpleName();\n  sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);\n  final int k=sketch.getK();\n  final long n=sketch.getN();\n  final int bbCount=sketch.getBaseBufferCount();\n  final long bitPattern=sketch.getBitPattern();\n  final double[] combBuf=sketch.getCombinedBuffer();\n  sb.append(\"   BaseBuffer   : \");\n  for (int i=0; i < bbCount; i++) {\n    sb.append(String.format(\"%10.1f\",combBuf[i]));\n  }\n  sb.append(LS);\n  final int combBufSize=combBuf.length;\n  if (n >= (2 * k)) {\n    sb.append(\"   Valid | Level\");\n    for (int j=2 * k; j < combBufSize; j++) {\n      if ((j % k) == 0) {\n        final int levelNum=(j / k) - 2;\n        final String validLvl=((1L << levelNum) & bitPattern) > 0 ? \"    T  \" : \"    F  \";\n        final String lvl=String.format(\"%5d\",levelNum);\n        sb.append(LS).append(\"   \").append(validLvl).append(\" \").append(lvl).append(\": \");\n      }\n      sb.append(String.format(\"%10.1f\",combBuf[j]));\n    }\n    sb.append(LS);\n  }\n  sb.append(\"### END DATA DETAIL\").append(LS);\n  return sb.toString();\n}\n",
    "File_Path": "datasketches-java/src/main/java/org/apache/datasketches/quantiles/DoublesUtil.java",
    "Start": 7871,
    "Stop": 9398,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "getDataDetail"
}
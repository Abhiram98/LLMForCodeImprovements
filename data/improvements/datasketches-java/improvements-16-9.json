{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use switch-case instead of if-else",
                "Change_Diff": "- if (sketchType == DOUBLES_SKETCH) {\n...\n} else if (sketchType == FLOATS_SKETCH) {\n...\n} else {\n...\n}\n+ switch (sketchType) {\n+   case DOUBLES_SKETCH:\n+   ...\n+   break;\n+   case FLOATS_SKETCH:\n+   ...\n+   break;\n+   default:\n+   ...\n+   break;\n+ }",
                "Description": "Instead of using multiple if-else statements to handle different types of sketches, use switch-case statements. This will improve the readability of the code and make it easier to add support for new sketch types in the future.",
                "Start": 12,
                "End": 37
            },
            {
                "Improvement": "Replace System.arraycopy with Arrays.copyOfRange",
                "Change_Diff": "- System.arraycopy(myCurDoubleItemsArr,0,myNewDoubleItemsArr,deltaItemsCap,myCurTotalItemsCapacity);\n+ myNewDoubleItemsArr = Arrays.copyOfRange(myCurDoubleItemsArr, 0, myCurTotalItemsCapacity);\n- System.arraycopy(myCurFloatItemsArr,0,myNewFloatItemsArr,deltaItemsCap,myCurTotalItemsCapacity);\n+ myNewFloatItemsArr = Arrays.copyOfRange(myCurFloatItemsArr, 0, myCurTotalItemsCapacity);\n- System.arraycopy(myCurItemsArr,0,myNewItemsArr,deltaItemsCap,myCurTotalItemsCapacity);\n+ myNewItemsArr = Arrays.copyOfRange(myCurItemsArr, 0, myCurTotalItemsCapacity);",
                "Description": "Instead of using System.arraycopy, use Arrays.copyOfRange. This will not only copy the array but also create a new array of the desired size. This will make the code cleaner and easier to understand.",
                "Start": 43,
                "End": 61
            }
        ],
        "Final code": "... // skipping the unchanged part of the code\n\n  switch (sketchType) {\n    case DOUBLES_SKETCH:\n      final KllDoublesSketch dblSk=(KllDoublesSketch)sketch;\n      myCurDoubleItemsArr=dblSk.getDoubleItemsArray();\n      minDouble=dblSk.getMinItem();\n      maxDouble=dblSk.getMaxItem();\n      assert myCurDoubleItemsArr.length == myCurTotalItemsCapacity;\n      break;\n    case FLOATS_SKETCH:\n      final KllFloatsSketch fltSk=(KllFloatsSketch)sketch;\n      myCurFloatItemsArr=fltSk.getFloatItemsArray();\n      minFloat=fltSk.getMinItem();\n      maxFloat=fltSk.getMaxItem();\n      assert myCurFloatItemsArr.length == myCurTotalItemsCapacity;\n      break;\n    default:\n      final KllItemsSketch<?> itmSk=(KllItemsSketch<?>)sketch;\n      myCurItemsArr=itmSk.getTotalItemsArray();\n      minItem=itmSk.getMinItem();\n      maxItem=itmSk.getMaxItem();\n  }\n  ...\n  // Replace System.arraycopy with Arrays.copyOfRange\n  myNewDoubleItemsArr = Arrays.copyOfRange(myCurDoubleItemsArr, 0, myCurTotalItemsCapacity);\n  myNewFloatItemsArr = Arrays.copyOfRange(myCurFloatItemsArr, 0, myCurTotalItemsCapacity);\n  myNewItemsArr = Arrays.copyOfRange(myCurItemsArr, 0, myCurTotalItemsCapacity);\n  ...\n}"
    },
    "Old_Method": "/** \n * This grows the levels arr by 1 (if needed) and increases the capacity of the items array at the bottom.  Only numLevels, the levels array and the items array are affected. This assumes sketch is writable and UPDATABLE.\n * @param sketch the current sketch\n */\nstatic void addEmptyTopLevelToCompletelyFullSketch(final KllSketch sketch){\n  final SketchType sketchType=sketch.sketchType;\n  final int[] myCurLevelsArr=sketch.getLevelsArray(sketch.sketchStructure);\n  final int myCurNumLevels=sketch.getNumLevels();\n  final int myCurTotalItemsCapacity=myCurLevelsArr[myCurNumLevels];\n  final int myNewNumLevels;\n  final int[] myNewLevelsArr;\n  final int myNewTotalItemsCapacity;\n  double[] myCurDoubleItemsArr=null;\n  double[] myNewDoubleItemsArr=null;\n  double minDouble=Double.NaN;\n  double maxDouble=Double.NaN;\n  float[] myCurFloatItemsArr=null;\n  float[] myNewFloatItemsArr=null;\n  float minFloat=Float.NaN;\n  float maxFloat=Float.NaN;\n  Object[] myCurItemsArr=null;\n  Object[] myNewItemsArr=null;\n  Object minItem=null;\n  Object maxItem=null;\n  if (sketchType == DOUBLES_SKETCH) {\n    final KllDoublesSketch dblSk=(KllDoublesSketch)sketch;\n    myCurDoubleItemsArr=dblSk.getDoubleItemsArray();\n    minDouble=dblSk.getMinItem();\n    maxDouble=dblSk.getMaxItem();\n    assert myCurDoubleItemsArr.length == myCurTotalItemsCapacity;\n  }\n else   if (sketchType == FLOATS_SKETCH) {\n    final KllFloatsSketch fltSk=(KllFloatsSketch)sketch;\n    myCurFloatItemsArr=fltSk.getFloatItemsArray();\n    minFloat=fltSk.getMinItem();\n    maxFloat=fltSk.getMaxItem();\n    assert myCurFloatItemsArr.length == myCurTotalItemsCapacity;\n  }\n else {\n    final KllItemsSketch<?> itmSk=(KllItemsSketch<?>)sketch;\n    myCurItemsArr=itmSk.getTotalItemsArray();\n    minItem=itmSk.getMinItem();\n    maxItem=itmSk.getMaxItem();\n  }\n  assert myCurLevelsArr[0] == 0;\n  final int deltaItemsCap=levelCapacity(sketch.getK(),myCurNumLevels + 1,0,sketch.getM());\n  myNewTotalItemsCapacity=myCurTotalItemsCapacity + deltaItemsCap;\n  final boolean growLevelsArr=myCurLevelsArr.length < myCurNumLevels + 2;\n  if (growLevelsArr) {\n    myNewLevelsArr=Arrays.copyOf(myCurLevelsArr,myCurNumLevels + 2);\n    assert myNewLevelsArr.length == myCurLevelsArr.length + 1;\n    myNewNumLevels=myCurNumLevels + 1;\n    sketch.incNumLevels();\n  }\n else {\n    myNewLevelsArr=myCurLevelsArr;\n    myNewNumLevels=myCurNumLevels;\n  }\n  for (int level=0; level <= myNewNumLevels - 1; level++) {\n    myNewLevelsArr[level]+=deltaItemsCap;\n  }\n  myNewLevelsArr[myNewNumLevels]=myNewTotalItemsCapacity;\n  if (sketchType == DOUBLES_SKETCH) {\n    myNewDoubleItemsArr=new double[myNewTotalItemsCapacity];\n    System.arraycopy(myCurDoubleItemsArr,0,myNewDoubleItemsArr,deltaItemsCap,myCurTotalItemsCapacity);\n  }\n else   if (sketchType == FLOATS_SKETCH) {\n    myNewFloatItemsArr=new float[myNewTotalItemsCapacity];\n    System.arraycopy(myCurFloatItemsArr,0,myNewFloatItemsArr,deltaItemsCap,myCurTotalItemsCapacity);\n  }\n else {\n    myNewItemsArr=new Object[myNewTotalItemsCapacity];\n    System.arraycopy(myCurItemsArr,0,myNewItemsArr,deltaItemsCap,myCurTotalItemsCapacity);\n  }\n  if (sketch.getWritableMemory() != null) {\n    final WritableMemory wmem=memorySpaceMgmt(sketch,myNewLevelsArr.length,myNewTotalItemsCapacity);\n    sketch.setWritableMemory(wmem);\n  }\n  sketch.setNumLevels(myNewNumLevels);\n  sketch.setLevelsArray(myNewLevelsArr);\n  if (sketchType == DOUBLES_SKETCH) {\n    final KllDoublesSketch dblSk=(KllDoublesSketch)sketch;\n    dblSk.setMinItem(minDouble);\n    dblSk.setMaxItem(maxDouble);\n    dblSk.setDoubleItemsArray(myNewDoubleItemsArr);\n  }\n else   if (sketchType == FLOATS_SKETCH) {\n    final KllFloatsSketch fltSk=(KllFloatsSketch)sketch;\n    fltSk.setMinItem(minFloat);\n    fltSk.setMaxItem(maxFloat);\n    fltSk.setFloatItemsArray(myNewFloatItemsArr);\n  }\n else {\n    final KllItemsSketch<?> itmSk=(KllItemsSketch<?>)sketch;\n    itmSk.setMinItem(minItem);\n    itmSk.setMaxItem(maxItem);\n    itmSk.setItemsArray(myNewItemsArr);\n  }\n}\n",
    "File_Path": "datasketches-java/src/main/java/org/apache/datasketches/kll/KllHelper.java",
    "Start": 23832,
    "Stop": 29162,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "addEmptyTopLevelToCompletelyFullSketch"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into helper methods",
                "Change_Diff": "- result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n+ testANotB(aNb, aEmpty, bEmpty, !ordered, 0.0, true, Long.MAX_VALUE);",
                "Description": "The testing of the 'aNotB' method is repeated many times with different arguments. This code could be extracted into a helper method to reduce redundancy and improve readability.",
                "Start": 31,
                "End": 91
            },
            {
                "Improvement": "Remove unnecessary exception testing",
                "Change_Diff": "- aNb.setA(aNull);\n- fail();\n- } catch (  final SketchesArgumentException e) {\n- }\n- aNb.notB(bNull);\n- try {\n- aNb.aNotB(aNull,bNull);\n- fail();\n- } catch (  final SketchesArgumentException e) {\n- }",
                "Description": "Testing that an exception is thrown when setting 'a' to null and 'b' to null is repetitive. We can remove these tests and only check once.",
                "Start": 22,
                "End": 30
            }
        ],
        "Final code": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  } catch (  final SketchesArgumentException e) {\n  }\n  testANotB(aNb, aEmpty, bEmpty, !ordered, 0.0, true, Long.MAX_VALUE);\n  testANotB(aNb, aEmpty, bC, !ordered, 0.0, true, Long.MAX_VALUE);\n  testANotB(aNb, aEmpty, bO, !ordered, 0.0, true, Long.MAX_VALUE);\n  testANotB(aNb, aEmpty, bHT, !ordered, 0.0, true, Long.MAX_VALUE);\n  testANotB(aNb, aC, bEmpty, !ordered, k, false, Long.MAX_VALUE);\n  testANotB(aNb, aC, bC, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aC, bO, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aC, bHT, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aO, bEmpty, !ordered, k, false, Long.MAX_VALUE);\n  testANotB(aNb, aO, bC, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aO, bO, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aO, bHT, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aHT, bEmpty, !ordered, k, false, Long.MAX_VALUE);\n  testANotB(aNb, aHT, bC, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aHT, bO, !ordered, k / 2.0, false, Long.MAX_VALUE);\n  testANotB(aNb, aHT, bHT, !ordered, k / 2.0, false, Long.MAX_VALUE);\n}\n\nprivate void testANotB(AnotB aNb, CompactSketch a, CompactSketch b, boolean ordered, double expectedEstimate, boolean expectedIsEmpty, long expectedThetaLong) {\n  CompactSketch result = aNb.aNotB(a, b, ordered, null);\n  assertEquals(result.getEstimate(), expectedEstimate);\n  assertEquals(result.isEmpty(), expectedIsEmpty);\n  assertEquals(result.getThetaLong(), expectedThetaLong);\n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
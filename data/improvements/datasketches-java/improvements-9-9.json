{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code to a helper method",
                "Change_Diff": "- result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n- assertEquals(result.getEstimate(),0.0);\n- assertTrue(result.isEmpty());\n- assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n...\n+ performOperationAndAssert(aNb, aEmpty, bEmpty, 0.0, true, Long.MAX_VALUE);",
                "Description": "The same piece of code `aNb.aNotB(a, b, !ordered, null)` is repeatedly used with different variables, this can be extracted to a helper method which accepts variables as parameters and performs the operations.",
                "Start": 31,
                "End": 91
            },
            {
                "Improvement": "Extract repetitive code to a helper method",
                "Change_Diff": "- for (int i=0; i < k; i++) {\n-     aHT.update(i);\n- }\n...\n- for (int i=k / 2; i < k + k / 2; i++) {\n-     bHT.update(i);\n- }\n+ updateSketch(aHT, 0, k);\n+ updateSketch(bHT, k / 2, k + k / 2);",
                "Description": "The same piece of code `for (int i = n; i < 2*n; i++) { s.update(i); }` is repeatedly used with different variables, this can be extracted to a helper method which accepts variables as parameters and performs the operations.",
                "Start": 9,
                "End": 13
            }
        ],
        "Final code": "public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  updateSketch(aHT, 0, k);\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  updateSketch(bHT, k / 2, k + k / 2);\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  performOperationAndAssert(aNb, aEmpty, bEmpty, 0.0, true, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aEmpty, bC, 0.0, true, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aEmpty, bO, 0.0, true, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aEmpty, bHT, 0.0, true, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aC, bEmpty, k, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aC, bC, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aC, bO, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aC, bHT, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aO, bEmpty, k, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aO, bC, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aO, bO, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aO, bHT, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aHT, bEmpty, k, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aHT, bC, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aHT, bO, k / 2.0, false, Long.MAX_VALUE);\n  performOperationAndAssert(aNb, aHT, bHT, k / 2.0, false, Long.MAX_VALUE);\n}\n\nprivate void performOperationAndAssert(AnotB aNb, CompactSketch a, CompactSketch b, double estimate, boolean isEmpty, long thetaLong) {\n  CompactSketch result = aNb.aNotB(a, b, !ordered, null);\n  assertEquals(result.getEstimate(), estimate);\n  assertEquals(result.isEmpty(), isEmpty);\n  assertEquals(result.getThetaLong(), thetaLong);\n}\n\nprivate void updateSketch(UpdateSketch sketch, int start, int end) {\n  for (int i = start; i < end; i++) {\n    sketch.update(i);\n  }\n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove Unused Variables",
                "Change_Diff": "- final int k2=4;\n- final int n2=5 * k2;",
                "Description": "Variables `k2` and `n2` are declared but never used in the code. It's good practice to remove unused variables to improve code readability and efficiency.",
                "Start": 3,
                "End": 4
            },
            {
                "Improvement": "Avoid Redundant Variable Assignment",
                "Change_Diff": "- DoublesSketch result=union.getResult();",
                "Description": "The `DoublesSketch result` variable is assigned twice consecutively without the first assignment being used. We can remove the first assignment to make the code more efficient.",
                "Start": 17,
                "End": 17
            },
            {
                "Improvement": "Consolidate Duplicate Code",
                "Change_Diff": "- assertEquals(result.getN(),16);\n- assertEquals(result.getMaxItem(),n1,0.0);\n- assertEquals(result.getMinItem(),1.0,0.0);\n- assertEquals(result.getK(),k1);",
                "Description": "The `assertEquals` assertions for the `result` object are duplicated. We can extract these into a separate method to improve code readability and reduce duplication.",
                "Start": 18,
                "End": 22
            }
        ],
        "Final code": "@Test public void checkUnion4DirectCompact(){\n  final int k1=8;\n  final int n1=2 * k1;\n  final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n  final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n  final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n  for (int i=0; i < n1; i++) {\n    sketchIn0.update(i + 1);\n  }\n  final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n  final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n  final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n  union.union(sketchIn1);\n  assertEquals(union.getResult().getN(),n1);\n  assertEquals(union.getMaxK(),256);\n  assertEquals(union.getEffectiveK(),k1);\n  verifyResult(union.getResult(), n1, k1);\n  final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n  union.reset();\n  union.union(sketchIn2);\n  DoublesSketch result=union.getResult();\n  verifyResult(result, n2 + 17, k1 + 17);\n  println(\"\\nFinal\" + union.getResult().toString(true,true));\n}\n\nprivate void verifyResult(DoublesSketch result, int expectedN, int expectedK) {\n  assertEquals(result.getN(),expectedN);\n  assertEquals(result.getMaxItem(),expectedN,0.0);\n  assertEquals(result.getMinItem(),1.0,0.0);\n  assertEquals(result.getK(),expectedK);\n}"
    },
    "Old_Method": "@Test public void checkUnion4DirectCompact(){\n  final int k1=8;\n  final int n1=2 * k1;\n  final int k2=4;\n  final int n2=5 * k2;\n  final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n  final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n  final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n  for (int i=0; i < n1; i++) {\n    sketchIn0.update(i + 1);\n  }\n  final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n  final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n  final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n  union.union(sketchIn1);\n  assertEquals(union.getResult().getN(),n1);\n  assertEquals(union.getMaxK(),256);\n  assertEquals(union.getEffectiveK(),k1);\n  DoublesSketch result=union.getResult();\n  assertEquals(result.getN(),16);\n  assertEquals(result.getMaxItem(),n1,0.0);\n  assertEquals(result.getMinItem(),1.0,0.0);\n  assertEquals(result.getK(),k1);\n  final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n  union.reset();\n  union.union(sketchIn2);\n  result=union.getResult();\n  assertEquals(result.getMaxItem(),n2 + 17,0.0);\n  assertEquals(result.getMinItem(),1.0 + 17,0.0);\n  println(\"\\nFinal\" + union.getResult().toString(true,true));\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/DoublesUnionImplTest.java",
    "Start": 9412,
    "Stop": 10835,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkUnion4DirectCompact"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a helper method",
                "Change_Diff": "{ \"oldCode\": \"result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\\n  assertEquals(result.getEstimate(),0.0);\\n  assertTrue(result.isEmpty());\\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\", \"newCode\": \"verifyANotB(aNb, aEmpty, bEmpty, !ordered, null, 0.0, true, Long.MAX_VALUE);\" }",
                "Description": "The segment of code where the aNotB method is called and the resulting object is asserted against multiple conditions is repeated multiple times with different parameters. This repeated code block can be extracted into a helper method to reduce code duplication and increase readability.",
                "Start": 30,
                "End": 94
            },
            {
                "Improvement": "Use JUnit's assertThrows instead of try-catch-fail pattern",
                "Change_Diff": "{ \"oldCode\": \"try {\\n    aNb.setA(aNull);\\n    fail();\\n  }\\n catch (  final SketchesArgumentException e) {\\n  }\", \"newCode\": \"assertThrows(SketchesArgumentException.class, () -> aNb.setA(aNull));\" }",
                "Description": "The current code uses a try-catch pattern with a fail statement for testing exceptions, which is not recommended. Instead, use JUnit's assertThrows method, which is more concise and expressive.",
                "Start": 22,
                "End": 28
            }
        ],
        "Final code": "@Test public void checkCombinations(){\\n  final int k=512;\\n  final UpdateSketch aNull=null;\\n  final UpdateSketch bNull=null;\\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\\n  for (int i=0; i < k; i++) {\\n    aHT.update(i);\\n  }\\n  final CompactSketch aC=aHT.compact(false,null);\\n  final CompactSketch aO=aHT.compact(true,null);\\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\\n  for (int i=k / 2; i < k + k / 2; i++) {\\n    bHT.update(i);\\n  }\\n  final CompactSketch bC=bHT.compact(false,null);\\n  final CompactSketch bO=bHT.compact(true,null);\\n  CompactSketch result;\\n  AnotB aNb;\\n  final boolean ordered=true;\\n  aNb=SetOperation.builder().buildANotB();\\n  assertThrows(SketchesArgumentException.class, () -> aNb.setA(aNull));\\n  aNb.notB(bNull);\\n  assertThrows(SketchesArgumentException.class, () -> aNb.aNotB(aNull,bNull));\\n  assertThrows(SketchesArgumentException.class, () -> aNb.aNotB(aNull,bEmpty));\\n  assertThrows(SketchesArgumentException.class, () -> aNb.aNotB(aEmpty,bNull));\\n  verifyANotB(aNb, aEmpty, bEmpty, !ordered, null, 0.0, true, Long.MAX_VALUE);\\n  verifyANotB(aNb, aEmpty, bC, !ordered, null, 0.0, true, Long.MAX_VALUE);\\n  verifyANotB(aNb, aEmpty, bO, !ordered, null, 0.0, true, Long.MAX_VALUE);\\n  verifyANotB(aNb, aEmpty, bHT, !ordered, null, 0.0, true, Long.MAX_VALUE);\\n  verifyANotB(aNb, aC, bEmpty, !ordered, null, k, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aC, bC, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aC, bO, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aC, bHT, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aO, bEmpty, !ordered, null, k, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aO, bC, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aO, bO, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aO, bHT, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aHT, bEmpty, !ordered, null, k, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aHT, bC, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aHT, bO, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n  verifyANotB(aNb, aHT, bHT, !ordered, null, k / 2.0, false, Long.MAX_VALUE);\\n}\\n\\nprivate void verifyANotB(AnotB aNb, CompactSketch a, CompactSketch b, boolean ordered, Memory memory, double expectedEstimate, boolean isEmpty, long expectedThetaLong) {\\n  CompactSketch result = aNb.aNotB(a, b, ordered, memory);\\n  assertEquals(result.getEstimate(), expectedEstimate);\\n  assertEquals(result.isEmpty(), isEmpty);\\n  assertEquals(result.getThetaLong(), expectedThetaLong);\\n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
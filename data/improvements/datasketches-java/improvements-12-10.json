{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor repetitive code",
            "Change_Diff": "- try {\n    sketch.getMinItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getMaxItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantile(0.5);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantiles(new double[]{0.0,1.0});\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getPMF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getCDF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getRank(\"a\");\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n+ executeAndExpectException(() -> sketch.getMinItem());\n+ executeAndExpectException(() -> sketch.getMaxItem());\n+ executeAndExpectException(() -> sketch.getQuantile(0.5));\n+ executeAndExpectException(() -> sketch.getQuantiles(new double[]{0.0,1.0}));\n+ executeAndExpectException(() -> sketch.getPMF(new String[0]));\n+ executeAndExpectException(() -> sketch.getCDF(new String[0]));\n+ executeAndExpectException(() -> sketch.getRank(\"a\"));",
            "Description": "The method contains repetitive try-catch blocks where the same exception (IllegalArgumentException) is being caught repeatedly. This can be refactored using a method that accepts a lambda function and wraps it in a try-catch block.",
            "Start": 8,
            "End": 43
        }],
        "Final code": "@Test public void empty(){\n  final ItemsSketch<String> sketch=ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n  assertNotNull(sketch);\n  sketch.update(null);\n  assertTrue(sketch.isEmpty());\n  assertEquals(sketch.getN(),0);\n  assertEquals(sketch.getNumRetained(),0);\n  executeAndExpectException(() -> sketch.getMinItem());\n  executeAndExpectException(() -> sketch.getMaxItem());\n  executeAndExpectException(() -> sketch.getQuantile(0.5));\n  executeAndExpectException(() -> sketch.getQuantiles(new double[]{0.0,1.0}));\n  final byte[] byteArr=sketch.toByteArray(new ArrayOfStringsSerDe());\n  assertEquals(byteArr.length,8);\n  executeAndExpectException(() -> sketch.getPMF(new String[0]));\n  executeAndExpectException(() -> sketch.getCDF(new String[0]));\n  executeAndExpectException(() -> sketch.getRank(\"a\"));\n}\n\nprivate void executeAndExpectException(Runnable runnable) {\n  try {\n    runnable.run();\n    fail();\n  } catch (IllegalArgumentException e) {\n    // Exception expected\n  }\n}"
    },
    "Old_Method": "@Test public void empty(){\n  final ItemsSketch<String> sketch=ItemsSketch.getInstance(String.class,128,Comparator.naturalOrder());\n  assertNotNull(sketch);\n  sketch.update(null);\n  assertTrue(sketch.isEmpty());\n  assertEquals(sketch.getN(),0);\n  assertEquals(sketch.getNumRetained(),0);\n  try {\n    sketch.getMinItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getMaxItem();\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantile(0.5);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getQuantiles(new double[]{0.0,1.0});\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  final byte[] byteArr=sketch.toByteArray(new ArrayOfStringsSerDe());\n  assertEquals(byteArr.length,8);\n  try {\n    sketch.getPMF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getCDF(new String[0]);\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    sketch.getRank(\"a\");\n    fail();\n  }\n catch (  IllegalArgumentException e) {\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/ItemsSketchTest.java",
    "Start": 2142,
    "Stop": 3166,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "empty"
}
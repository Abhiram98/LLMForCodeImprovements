{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int i=0; i < bbCount; i++) {\n+ for (double comb : combBuf) {",
                "Description": "Instead of using a traditional for loop to iterate over `bbCount`, use an enhanced for loop. This simplifies the code and improves readability.",
                "Start": 8,
                "End": 8
            },
            {
                "Improvement": "Reduce scope of variable",
                "Change_Diff": "- final int combBufSize=combBuf.length;\n+ // Removed line",
                "Description": "The variable `combBufSize` is only used inside the if block. Declare it inside the if block to reduce its scope and improve readability.",
                "Start": 16,
                "End": 16
            },
            {
                "Improvement": "Avoid complex expressions inside loop",
                "Change_Diff": "- for (int j=2 * k; j < combBufSize; j++) {\n+ int start = 2 * k;\n+ int end = combBuf.length;\n+ for (int j=start; j < end; j++) {",
                "Description": "The complex expressions inside the for loop reduce readability. Calculate them before the loop starts.",
                "Start": 18,
                "End": 18
            }
        ],
        "Final code": "private static String getDataDetail(final DoublesSketch sketchIn) {\n  final DoublesSketch sketch=sketchIn.isCompact() ? copyToHeap(sketchIn) : sketchIn;\n  final StringBuilder sb=new StringBuilder();\n  final String skName=sketch.getClass().getSimpleName();\n  sb.append(LS).append('### Quantiles ').append(skName).append(' DATA DETAIL: ').append(LS);\n  final int k=sketch.getK();\n  final long n=sketch.getN();\n  final int bbCount=sketch.getBaseBufferCount();\n  final long bitPattern=sketch.getBitPattern();\n  final double[] combBuf=sketch.getCombinedBuffer();\n  sb.append('   BaseBuffer   : ');\n  for (double comb : combBuf) {\n    sb.append(String.format('%10.1f', comb));\n  }\n  sb.append(LS);\n  if (n >= (2 * k)) {\n    sb.append('   Valid | Level');\n    int start = 2 * k;\n    int end = combBuf.length;\n    for (int j=start; j < end; j++) {\n      if ((j % k) == 0) {\n        final int levelNum=(j / k) - 2;\n        final String validLvl=((1L << levelNum) & bitPattern) > 0 ? '    T  ' : '    F  ';\n        final String lvl=String.format('%5d', levelNum);\n        sb.append(LS).append('   ').append(validLvl).append(' ').append(lvl).append(': ');\n      }\n      sb.append(String.format('%10.1f', combBuf[j]));\n    }\n    sb.append(LS);\n  }\n  sb.append('### END DATA DETAIL').append(LS);\n  return sb.toString();\n}"
    },
    "Old_Method": "private static String getDataDetail(final DoublesSketch sketchIn){\n  final DoublesSketch sketch=sketchIn.isCompact() ? copyToHeap(sketchIn) : sketchIn;\n  final StringBuilder sb=new StringBuilder();\n  final String skName=sketch.getClass().getSimpleName();\n  sb.append(LS).append(\"### Quantiles \").append(skName).append(\" DATA DETAIL: \").append(LS);\n  final int k=sketch.getK();\n  final long n=sketch.getN();\n  final int bbCount=sketch.getBaseBufferCount();\n  final long bitPattern=sketch.getBitPattern();\n  final double[] combBuf=sketch.getCombinedBuffer();\n  sb.append(\"   BaseBuffer   : \");\n  for (int i=0; i < bbCount; i++) {\n    sb.append(String.format(\"%10.1f\",combBuf[i]));\n  }\n  sb.append(LS);\n  final int combBufSize=combBuf.length;\n  if (n >= (2 * k)) {\n    sb.append(\"   Valid | Level\");\n    for (int j=2 * k; j < combBufSize; j++) {\n      if ((j % k) == 0) {\n        final int levelNum=(j / k) - 2;\n        final String validLvl=((1L << levelNum) & bitPattern) > 0 ? \"    T  \" : \"    F  \";\n        final String lvl=String.format(\"%5d\",levelNum);\n        sb.append(LS).append(\"   \").append(validLvl).append(\" \").append(lvl).append(\": \");\n      }\n      sb.append(String.format(\"%10.1f\",combBuf[j]));\n    }\n    sb.append(LS);\n  }\n  sb.append(\"### END DATA DETAIL\").append(LS);\n  return sb.toString();\n}\n",
    "File_Path": "datasketches-java/src/main/java/org/apache/datasketches/quantiles/DoublesUtil.java",
    "Start": 7871,
    "Stop": 9398,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "getDataDetail"
}
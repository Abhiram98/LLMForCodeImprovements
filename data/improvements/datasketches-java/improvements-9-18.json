{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code to helper method",
                "Change_Diff": "- final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n...\n- final CompactSketch bO=bHT.compact(true,null);\n+ final UpdateSketch aEmpty = createUpdateSketch(k);\n...\n+ final CompactSketch bO = createCompactSketch(bHT, true);",
                "Description": "The code for creating an UpdateSketch and CompactSketch is repetitive and could be extracted to a helper method to improve readability and maintainability.",
                "Start": 5,
                "End": 23
            },
            {
                "Improvement": "Remove redundant variable",
                "Change_Diff": "- final boolean ordered=true;\n- aNb=SetOperation.builder().buildANotB();\n+ aNb=SetOperation.builder().buildANotB(true);",
                "Description": "The variable 'ordered' is not necessary, as its value is always 'true'. You can remove this variable and use 'true' directly in your code.",
                "Start": 28,
                "End": 28
            },
            {
                "Improvement": "Extract repetitive assertions to helper method",
                "Change_Diff": "- assertEquals(result.getEstimate(),k / 2.0);\n- assertFalse(result.isEmpty());\n- assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n+ assertResult(result, k / 2.0, false, Long.MAX_VALUE);",
                "Description": "The assertions for result are repetitive and could be extracted to a helper method to improve readability and maintainability.",
                "Start": 49,
                "End": 93
            }
        ],
        "Final code": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty = createUpdateSketch(k);\n  final UpdateSketch aHT = createUpdateSketch(k);\n  updateHT(aHT, 0, k);\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT = createUpdateSketch(k);\n  updateHT(bHT, k / 2, k + k / 2);\n  final CompactSketch bC = createCompactSketch(bHT, false);\n  final CompactSketch bO = createCompactSketch(bHT, true);\n  CompactSketch result;\n  AnotB aNb;\n  aNb=SetOperation.builder().buildANotB(true);\n  assertException(() -> aNb.setA(aNull));\n  aNb.notB(bNull);\n  assertException(() -> aNb.aNotB(aNull,bNull));\n  assertException(() -> aNb.aNotB(aNull,bEmpty));\n  assertException(() -> aNb.aNotB(aEmpty,bNull));\n  result=aNb.aNotB(aEmpty,bEmpty,false,null);\n  assertResult(result, 0.0, true, Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,false,null);\n  assertResult(result, 0.0, true, Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,false,null);\n  assertResult(result, 0.0, true, Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,false,null);\n  assertResult(result, 0.0, true, Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,false,null);\n  assertResult(result, k, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,false,null);\n  assertResult(result, k, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,false,null);\n  assertResult(result, k, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,false,null);\n  assertResult(result, k / 2.0, false, Long.MAX_VALUE);\n}"
    },
    "Old_Method": "@Test public void checkCombinations(){\n  final int k=512;\n  final UpdateSketch aNull=null;\n  final UpdateSketch bNull=null;\n  final UpdateSketch aEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch bEmpty=UpdateSketch.builder().setNominalEntries(k).build();\n  final UpdateSketch aHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=0; i < k; i++) {\n    aHT.update(i);\n  }\n  final CompactSketch aC=aHT.compact(false,null);\n  final CompactSketch aO=aHT.compact(true,null);\n  final UpdateSketch bHT=UpdateSketch.builder().setNominalEntries(k).build();\n  for (int i=k / 2; i < k + k / 2; i++) {\n    bHT.update(i);\n  }\n  final CompactSketch bC=bHT.compact(false,null);\n  final CompactSketch bO=bHT.compact(true,null);\n  CompactSketch result;\n  AnotB aNb;\n  final boolean ordered=true;\n  aNb=SetOperation.builder().buildANotB();\n  try {\n    aNb.setA(aNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  aNb.notB(bNull);\n  try {\n    aNb.aNotB(aNull,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aNull,bEmpty);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  try {\n    aNb.aNotB(aEmpty,bNull);\n    fail();\n  }\n catch (  final SketchesArgumentException e) {\n  }\n  result=aNb.aNotB(aEmpty,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bC,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bO,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aEmpty,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),0.0);\n  assertTrue(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aC,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aO,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bEmpty,!ordered,null);\n  assertEquals(result.getEstimate(),k);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bC,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bO,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n  result=aNb.aNotB(aHT,bHT,!ordered,null);\n  assertEquals(result.getEstimate(),k / 2.0);\n  assertFalse(result.isEmpty());\n  assertEquals(result.getThetaLong(),Long.MAX_VALUE);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/AnotBimplTest.java",
    "Start": 2863,
    "Stop": 7247,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkCombinations"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code redundancy",
                "Change_Diff": "- switch (format) {<entire switch case code>} \n+ formatCaseHandling(format, mem, sb, lgK, numCoupons, numSv, svLengthInts, svStreamStart, reqBytes, flavor);",
                "Description": "There is a lot of code redundancy in the switch case statement, specifically for the format cases. This redundancy can be reduced to make the code clearer and easier to maintain.",
                "Start": 65,
                "End": 172
            },
            {
                "Improvement": "Use StringBuilder append method chaining",
                "Change_Diff": "- sb.append(\"### CPC SKETCH IMAGE - PREAMBLE:\").append(LS); \n- sb.append(\"Format                          : \").append(format.name()).append(LS); \n+ sb.append(\"### CPC SKETCH IMAGE - PREAMBLE:\").append(LS).append(\"Format                          : \").append(format.name()).append(LS);",
                "Description": "Instead of multiple calls to the append method of StringBuilder in different lines, you can chain calls to the append method to make the code more concise.",
                "Start": 50,
                "End": 64
            }
        ],
        "Final code": "static String toString(final Memory mem,final boolean detail){\n  //..variable declarations..\n  final StringBuilder sb=new StringBuilder();\n  sb.append(LS).append(\"### CPC SKETCH IMAGE - PREAMBLE:\").append(LS).append(\"Format                          : \").append(format.name()).append(LS);\n  formatCaseHandling(format, mem, sb, lgK, numCoupons, numSv, svLengthInts, svStreamStart, reqBytes, flavor);\n  sb.append(\"Actual Bytes                    : \").append(capBytes).append(LS).append(\"Required Bytes                  : \").append(reqBytes).append(LS);\n  if (detail) {\n    sb.append(LS).append(\"### CPC SKETCH IMAGE - DATA\").append(LS);\n    if (wLengthInts > 0) {\n      sb.append(LS).append(\"Window Stream:\").append(LS);\n      listData(mem,wStreamStart,wLengthInts,sb);\n    }\n    if (svLengthInts > 0) {\n      sb.append(LS).append(\"SV Stream:\").append(LS);\n      listData(mem,svStreamStart,svLengthInts,sb);\n    }\n  }\n  sb.append(\"### END CPC SKETCH IMAGE\").append(LS);\n  return sb.toString();\n}\n\n// new function to handle switch case logic\nvoid formatCaseHandling(Format format, Memory mem, StringBuilder sb, int lgK, long numCoupons, long numSv, long svLengthInts, long svStreamStart, long reqBytes, Flavor flavor) {\n // switch case logic here\n}"
    },
    "Old_Method": "static String toString(final Memory mem,final boolean detail){\n  final long capBytes=mem.getCapacity();\n  final int preInts=mem.getByte(getLoFieldOffset(LoField.PRE_INTS)) & 0xFF;\n  final int serVer=mem.getByte(getLoFieldOffset(LoField.SER_VERSION)) & 0xFF;\n  final Family family=Family.idToFamily(mem.getByte(getLoFieldOffset(LoField.FAMILY)) & 0xFF);\n  final int lgK=mem.getByte(getLoFieldOffset(LoField.LG_K)) & 0xFF;\n  final int fiCol=mem.getByte(getLoFieldOffset(LoField.FI_COL)) & 0xFF;\n  final int flags=mem.getByte(getLoFieldOffset(LoField.FLAGS)) & 0XFF;\n  final int seedHash=mem.getShort(getLoFieldOffset(LoField.SEED_HASH)) & 0XFFFF;\n  final String seedHashStr=Integer.toHexString(seedHash);\n  final String flagsStr=zeroPad(Integer.toBinaryString(flags),8) + \", \" + (flags);\n  final boolean bigEndian=(flags & BIG_ENDIAN_FLAG_MASK) > 0;\n  final boolean compressed=(flags & COMPRESSED_FLAG_MASK) > 0;\n  final boolean hasHip=(flags & HIP_FLAG_MASK) > 0;\n  final boolean hasSV=(flags & SUP_VAL_FLAG_MASK) > 0;\n  final boolean hasWindow=(flags & WINDOW_FLAG_MASK) > 0;\n  final int formatOrdinal=(flags >>> 2) & 0x7;\n  final Format format=Format.ordinalToFormat(formatOrdinal);\n  final String nativeOrderStr=ByteOrder.nativeOrder().toString();\n  long numCoupons=0;\n  long numSv=0;\n  long winOffset=0;\n  long svLengthInts=0;\n  long wLengthInts=0;\n  double kxp=0;\n  double hipAccum=0;\n  long svStreamStart=0;\n  long wStreamStart=0;\n  long reqBytes=0;\n  final StringBuilder sb=new StringBuilder();\n  sb.append(LS);\n  sb.append(\"### CPC SKETCH IMAGE - PREAMBLE:\").append(LS);\n  sb.append(\"Format                          : \").append(format.name()).append(LS);\n  sb.append(\"Byte 0: Preamble Ints           : \").append(preInts).append(LS);\n  sb.append(\"Byte 1: SerVer                  : \").append(serVer).append(LS);\n  sb.append(\"Byte 2: Family                  : \").append(family).append(LS);\n  sb.append(\"Byte 3: lgK                     : \").append(lgK).append(LS);\n  sb.append(\"Byte 4: First Interesting Col   : \").append(fiCol).append(LS);\n  sb.append(\"Byte 5: Flags                   : \").append(flagsStr).append(LS);\n  sb.append(\"  BIG_ENDIAN_STORAGE            : \").append(bigEndian).append(LS);\n  sb.append(\"  (Native Byte Order)           : \").append(nativeOrderStr).append(LS);\n  sb.append(\"  Compressed                    : \").append(compressed).append(LS);\n  sb.append(\"  Has HIP                       : \").append(hasHip).append(LS);\n  sb.append(\"  Has Surprising Values         : \").append(hasSV).append(LS);\n  sb.append(\"  Has Window Values             : \").append(hasWindow).append(LS);\n  sb.append(\"Byte 6, 7: Seed Hash            : \").append(seedHashStr).append(LS);\n  final Flavor flavor;\nswitch (format) {\ncase EMPTY_MERGED:\ncase EMPTY_HIP:\n{\n      flavor=CpcUtil.determineFlavor(lgK,numCoupons);\n      sb.append(\"Flavor                          : \").append(flavor).append(LS);\n      break;\n    }\ncase SPARSE_HYBRID_MERGED:\n{\n    numCoupons=mem.getInt(getHiFieldOffset(format,HiField.NUM_COUPONS)) & 0xFFFF_FFFFL;\n    numSv=numCoupons;\n    svLengthInts=mem.getInt(getHiFieldOffset(format,HiField.SV_LENGTH_INTS)) & 0xFFFF_FFFFL;\n    svStreamStart=getSvStreamOffset(mem);\n    reqBytes=svStreamStart + (svLengthInts << 2);\n    flavor=CpcUtil.determineFlavor(lgK,numCoupons);\n    sb.append(\"Flavor                          : \").append(flavor).append(LS);\n    sb.append(\"Num Coupons                     : \").append(numCoupons).append(LS);\n    sb.append(\"Num SV                          : \").append(numSv).append(LS);\n    sb.append(\"SV Length Ints                  : \").append(svLengthInts).append(LS);\n    sb.append(\"SV Stream Start                 : \").append(svStreamStart).append(LS);\n    break;\n  }\ncase SPARSE_HYBRID_HIP:\n{\n  numCoupons=mem.getInt(getHiFieldOffset(format,HiField.NUM_COUPONS)) & 0xFFFF_FFFFL;\n  numSv=numCoupons;\n  svLengthInts=mem.getInt(getHiFieldOffset(format,HiField.SV_LENGTH_INTS)) & 0xFFFF_FFFFL;\n  svStreamStart=getSvStreamOffset(mem);\n  kxp=mem.getDouble(getHiFieldOffset(format,HiField.KXP));\n  hipAccum=mem.getDouble(getHiFieldOffset(format,HiField.HIP_ACCUM));\n  reqBytes=svStreamStart + (svLengthInts << 2);\n  flavor=CpcUtil.determineFlavor(lgK,numCoupons);\n  sb.append(\"Flavor                          : \").append(flavor).append(LS);\n  sb.append(\"Num Coupons                     : \").append(numCoupons).append(LS);\n  sb.append(\"Num SV                          : \").append(numSv).append(LS);\n  sb.append(\"SV Length Ints                  : \").append(svLengthInts).append(LS);\n  sb.append(\"SV Stream Start                 : \").append(svStreamStart).append(LS);\n  sb.append(\"KxP                             : \").append(kxp).append(LS);\n  sb.append(\"HipAccum                        : \").append(hipAccum).append(LS);\n  break;\n}\ncase PINNED_SLIDING_MERGED_NOSV:\n{\nnumCoupons=mem.getInt(getHiFieldOffset(format,HiField.NUM_COUPONS)) & 0xFFFF_FFFFL;\nwinOffset=CpcUtil.determineCorrectOffset(lgK,numCoupons);\nwLengthInts=mem.getInt(getHiFieldOffset(format,HiField.W_LENGTH_INTS)) & 0xFFFF_FFFFL;\nwStreamStart=getWStreamOffset(mem);\nreqBytes=wStreamStart + (wLengthInts << 2);\nflavor=CpcUtil.determineFlavor(lgK,numCoupons);\nsb.append(\"Flavor                          : \").append(flavor).append(LS);\nsb.append(\"Num Coupons                     : \").append(numCoupons).append(LS);\nsb.append(\"Window Offset                   : \").append(winOffset).append(LS);\nsb.append(\"Window Length Ints              : \").append(wLengthInts).append(LS);\nsb.append(\"Window Stream Start             : \").append(wStreamStart).append(LS);\nbreak;\n}\ncase PINNED_SLIDING_HIP_NOSV:\n{\nnumCoupons=mem.getInt(getHiFieldOffset(format,HiField.NUM_COUPONS)) & 0xFFFF_FFFFL;\nwinOffset=CpcUtil.determineCorrectOffset(lgK,numCoupons);\nwLengthInts=mem.getInt(getHiFieldOffset(format,HiField.W_LENGTH_INTS)) & 0xFFFF_FFFFL;\nwStreamStart=getWStreamOffset(mem);\nkxp=mem.getDouble(getHiFieldOffset(format,HiField.KXP));\nhipAccum=mem.getDouble(getHiFieldOffset(format,HiField.HIP_ACCUM));\nreqBytes=wStreamStart + (wLengthInts << 2);\nflavor=CpcUtil.determineFlavor(lgK,numCoupons);\nsb.append(\"Flavor                          : \").append(flavor).append(LS);\nsb.append(\"Num Coupons                     : \").append(numCoupons).append(LS);\nsb.append(\"Window Offset                   : \").append(winOffset).append(LS);\nsb.append(\"Window Length Ints              : \").append(wLengthInts).append(LS);\nsb.append(\"Window Stream Start             : \").append(wStreamStart).append(LS);\nsb.append(\"KxP                             : \").append(kxp).append(LS);\nsb.append(\"HipAccum                        : \").append(hipAccum).append(LS);\nbreak;\n}\ncase PINNED_SLIDING_MERGED:\n{\nnumCoupons=mem.getInt(getHiFieldOffset(format,HiField.NUM_COUPONS) & 0xFFFF_FFFFL);\nwinOffset=CpcUtil.determineCorrectOffset(lgK,numCoupons);\nwLengthInts=mem.getInt(getHiFieldOffset(format,HiField.W_LENGTH_INTS)) & 0xFFFF_FFFFL;\nnumSv=mem.getInt(getHiFieldOffset(format,HiField.NUM_SV)) & 0xFFFF_FFFFL;\nsvLengthInts=mem.getInt(getHiFieldOffset(format,HiField.SV_LENGTH_INTS)) & 0xFFFF_FFFFL;\nwStreamStart=getWStreamOffset(mem);\nsvStreamStart=getSvStreamOffset(mem);\nreqBytes=svStreamStart + (svLengthInts << 2);\nflavor=CpcUtil.determineFlavor(lgK,numCoupons);\nsb.append(\"Flavor                          : \").append(flavor).append(LS);\nsb.append(\"Num Coupons                     : \").append(numCoupons).append(LS);\nsb.append(\"Num SV                          : \").append(numSv).append(LS);\nsb.append(\"SV Length Ints                  : \").append(svLengthInts).append(LS);\nsb.append(\"SV Stream Start                 : \").append(svStreamStart).append(LS);\nsb.append(\"Window Offset                   : \").append(winOffset).append(LS);\nsb.append(\"Window Length Ints              : \").append(wLengthInts).append(LS);\nsb.append(\"Window Stream Start             : \").append(wStreamStart).append(LS);\nbreak;\n}\ncase PINNED_SLIDING_HIP:\n{\nnumCoupons=mem.getInt(getHiFieldOffset(format,HiField.NUM_COUPONS) & 0xFFFF_FFFFL);\nwinOffset=CpcUtil.determineCorrectOffset(lgK,numCoupons);\nwLengthInts=mem.getInt(getHiFieldOffset(format,HiField.W_LENGTH_INTS)) & 0xFFFF_FFFFL;\nnumSv=mem.getInt(getHiFieldOffset(format,HiField.NUM_SV)) & 0xFFFF_FFFFL;\nsvLengthInts=mem.getInt(getHiFieldOffset(format,HiField.SV_LENGTH_INTS)) & 0xFFFF_FFFFL;\nwStreamStart=getWStreamOffset(mem);\nsvStreamStart=getSvStreamOffset(mem);\nkxp=mem.getDouble(getHiFieldOffset(format,HiField.KXP));\nhipAccum=mem.getDouble(getHiFieldOffset(format,HiField.HIP_ACCUM));\nreqBytes=svStreamStart + (svLengthInts << 2);\nflavor=CpcUtil.determineFlavor(lgK,numCoupons);\nsb.append(\"Flavor                          : \").append(flavor).append(LS);\nsb.append(\"Num Coupons                     : \").append(numCoupons).append(LS);\nsb.append(\"Num SV                          : \").append(numSv).append(LS);\nsb.append(\"SV Length Ints                  : \").append(svLengthInts).append(LS);\nsb.append(\"SV Stream Start                 : \").append(svStreamStart).append(LS);\nsb.append(\"Window Offset                   : \").append(winOffset).append(LS);\nsb.append(\"Window Length Ints              : \").append(wLengthInts).append(LS);\nsb.append(\"Window Stream Start             : \").append(wStreamStart).append(LS);\nsb.append(\"KxP                             : \").append(kxp).append(LS);\nsb.append(\"HipAccum                        : \").append(hipAccum).append(LS);\nbreak;\n}\n}\nsb.append(\"Actual Bytes                    : \").append(capBytes).append(LS);\nsb.append(\"Required Bytes                  : \").append(reqBytes).append(LS);\nif (detail) {\nsb.append(LS).append(\"### CPC SKETCH IMAGE - DATA\").append(LS);\nif (wLengthInts > 0) {\nsb.append(LS).append(\"Window Stream:\").append(LS);\nlistData(mem,wStreamStart,wLengthInts,sb);\n}\nif (svLengthInts > 0) {\nsb.append(LS).append(\"SV Stream:\").append(LS);\nlistData(mem,svStreamStart,svLengthInts,sb);\n}\n}\nsb.append(\"### END CPC SKETCH IMAGE\").append(LS);\nreturn sb.toString();\n}\n",
    "File_Path": "datasketches-java/src/main/java/org/apache/datasketches/cpc/PreambleUtil.java",
    "Start": 22718,
    "Stop": 33920,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "toString"
}
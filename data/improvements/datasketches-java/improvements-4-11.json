{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use try-with-resources statement",
                "Change_Diff": "- WritableHandle wh;\n- wh=putOffHeap(Memory.wrap(sv3csk.toByteArray()));\n- try {\n- wh.close();\n- }\n- catch (Exception e) {\n- }\n+ try (WritableHandle wh = putOffHeap(Memory.wrap(sv3csk.toByteArray()))) {",
                "Description": "The try-with-resources statement ensures that each resource is closed at the end of the statement. This could replace the repeated try-catch blocks for wh.close().",
                "Start": 14,
                "End": 19
            },
            {
                "Improvement": "Remove redundant variable declaration",
                "Change_Diff": "- CompactSketch sv3cskResult;\n- sv3cskResult=Sketches.wrapCompactSketch(wh.getWritable(),seed);\n+ CompactSketch sv3cskResult = Sketches.wrapCompactSketch(wh.getWritable(),seed);",
                "Description": "The variable 'sv3cskResult' is declared multiple times. It can be declared once at the start of the method and then just assigned the new value each time.",
                "Start": 10,
                "End": 11
            }
        ],
        "Final code": "@Test public void checkWrapCompactSketchGivenDefaultSeed(){\n  final int k=64;\n  final long seed=ThetaUtil.DEFAULT_UPDATE_SEED;\n  final short seedHash=Util.computeSeedHash(seed);\n  UpdateSketch sv3usk=UpdateSketch.builder().setNominalEntries(k).setSeed(seed).build();\n  for (int i=0; i < k; i++) {\n    sv3usk.update(i);\n  }\n  CompactSketch sv3csk=sv3usk.compact();\n  CompactSketch sv3cskResult = Sketches.wrapCompactSketch(putOffHeap(Memory.wrap(sv3csk.toByteArray())).getWritable(),seed);\n  assertEquals(sv3cskResult.getEstimate(),sv3usk.getEstimate());\n  assertEquals(sv3cskResult.getSeedHash(),seedHash);\n  assertTrue(sv3cskResult.isDirect());\n  try (WritableHandle wh = putOffHeap(Memory.wrap(sv3csk.toByteArray()))) { }\n  sv3cskResult=Sketches.wrapCompactSketch(putOffHeap(BackwardConversions.convertSerVer3toSerVer2(sv3csk,seed)).getWritable(),seed);\n  assertEquals(sv3cskResult.getEstimate(),sv3usk.getEstimate());\n  assertEquals(sv3cskResult.getSeedHash(),seedHash);\n  assertFalse(sv3cskResult.isDirect());\n  try (WritableHandle wh = putOffHeap(BackwardConversions.convertSerVer3toSerVer2(sv3csk,seed))) { }\n  sv3cskResult=Sketches.wrapCompactSketch(putOffHeap(BackwardConversions.convertSerVer3toSerVer1(sv3csk)).getWritable(),seed);\n  assertEquals(sv3cskResult.getEstimate(),sv3usk.getEstimate());\n  assertEquals(sv3cskResult.getSeedHash(),seedHash);\n  assertFalse(sv3cskResult.isDirect());\n  try (WritableHandle wh = putOffHeap(BackwardConversions.convertSerVer3toSerVer1(sv3csk))) { }\n}"
    },
    "Old_Method": "@Test public void checkWrapCompactSketchGivenDefaultSeed(){\n  final int k=64;\n  final long seed=ThetaUtil.DEFAULT_UPDATE_SEED;\n  final short seedHash=Util.computeSeedHash(seed);\n  UpdateSketch sv3usk=UpdateSketch.builder().setNominalEntries(k).setSeed(seed).build();\n  for (int i=0; i < k; i++) {\n    sv3usk.update(i);\n  }\n  CompactSketch sv3cskResult;\n  WritableHandle wh;\n  CompactSketch sv3csk=sv3usk.compact();\n  wh=putOffHeap(Memory.wrap(sv3csk.toByteArray()));\n  sv3cskResult=Sketches.wrapCompactSketch(wh.getWritable(),seed);\n  assertEquals(sv3cskResult.getEstimate(),sv3usk.getEstimate());\n  assertEquals(sv3cskResult.getSeedHash(),seedHash);\n  assertTrue(sv3cskResult.isDirect());\n  try {\n    wh.close();\n  }\n catch (  Exception e) {\n  }\n  wh=putOffHeap(BackwardConversions.convertSerVer3toSerVer2(sv3csk,seed));\n  sv3cskResult=Sketches.wrapCompactSketch(wh.getWritable(),seed);\n  assertEquals(sv3cskResult.getEstimate(),sv3usk.getEstimate());\n  assertEquals(sv3cskResult.getSeedHash(),seedHash);\n  assertFalse(sv3cskResult.isDirect());\n  try {\n    wh.close();\n  }\n catch (  Exception e) {\n  }\n  wh=putOffHeap(BackwardConversions.convertSerVer3toSerVer1(sv3csk));\n  sv3cskResult=Sketches.wrapCompactSketch(wh.getWritable(),seed);\n  assertEquals(sv3cskResult.getEstimate(),sv3usk.getEstimate());\n  assertEquals(sv3cskResult.getSeedHash(),seedHash);\n  assertFalse(sv3cskResult.isDirect());\n  try {\n    wh.close();\n  }\n catch (  Exception e) {\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/theta/HeapifyWrapSerVer1and2Test.java",
    "Start": 14530,
    "Stop": 16090,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkWrapCompactSketchGivenDefaultSeed"
}
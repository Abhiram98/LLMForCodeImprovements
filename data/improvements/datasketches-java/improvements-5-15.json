{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace magic numbers with named constants",
                "Change_Diff": "- int k=256;\n+ final int K_VALUE=256;\n- int n=1000000;\n+ final int N_VALUE=1000000;\n- int numPhiValues=99;\n+ final int NUM_PHI_VALUES=99;\n- assertTrue(reported >= (nominal - 10000.0));\n+ final double NOMINAL_RANGE=10000.0;\n- assertTrue(subtotal >= (phi - 0.01));\n+ final double PHI_RANGE=0.01;\n- assertEquals(result.getRank(500000),0.5,0.01);\n+ final double RANK_VALUE=500000;\n+ final double EXPECTED_RANK=0.5;\n+ final double DELTA=0.01;",
                "Description": "Magic numbers are present in the code, such as 256, 1000000, 99, 10000.0, 0.01, 0.5 etc. These magic numbers should be replaced with named constants to improve readability and maintainability.",
                "Start": 2,
                "End": 38
            },
            {
                "Improvement": "Extract repeated code to a method",
                "Change_Diff": "- assertTrue(subtotal >= (phi - 0.01));\n- assertTrue(subtotal <= (phi + 0.01));\n+ checkSubtotalRange(subtotal, phi);\n\n+ private void checkSubtotalRange(double subtotal, double phi) {\n+     assertTrue(subtotal >= (phi - PHI_RANGE));\n+     assertTrue(subtotal <= (phi + PHI_RANGE));\n+ }",
                "Description": "The code for checking the range of subtotal is repeated twice. This can be extracted into a separate method to follow the DRY principle.",
                "Start": 32,
                "End": 37
            }
        ],
        "Final code": "@Test public void checkEndToEnd(){\n  final int K_VALUE=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(K_VALUE).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(K_VALUE).build();\n  final int N_VALUE=1000000;\n  for (int item=N_VALUE; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    } else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),N_VALUE);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  final int NUM_PHI_VALUES=99;\n  double[] phiArr=new double[NUM_PHI_VALUES];\n  for (int q=1; q <= NUM_PHI_VALUES; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  final double NOMINAL_RANGE=10000.0;\n  for (int q=1; q <= NUM_PHI_VALUES; q++) {\n    double nominal=(1e6 * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - NOMINAL_RANGE));\n    assertTrue(reported <= (nominal + NOMINAL_RANGE));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  final double PHI_RANGE=0.01;\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal+=pmfResult[q - 1];\n    checkSubtotalRange(subtotal, phi);\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal=cdfResult[q - 1];\n    checkSubtotalRange(subtotal, phi);\n  }\n  final double RANK_VALUE=500000;\n  final double EXPECTED_RANK=0.5;\n  final double DELTA=0.01;\n  assertEquals(result.getRank(RANK_VALUE),EXPECTED_RANK,DELTA);\n}\n\nprivate void checkSubtotalRange(double subtotal, double phi) {\n  final double PHI_RANGE=0.01;\n  assertTrue(subtotal >= (phi - PHI_RANGE));\n  assertTrue(subtotal <= (phi + PHI_RANGE));\n}"
    },
    "Old_Method": "@Test public void checkEndToEnd(){\n  int k=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(k).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(k).build();\n  int n=1000000;\n  for (int item=n; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    }\n else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),n);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  int numPhiValues=99;\n  double[] phiArr=new double[numPhiValues];\n  for (int q=1; q <= 99; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  for (int q=1; q <= 99; q++) {\n    double nominal=(1e6 * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal+=pmfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal=cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000),0.5,0.01);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/HeapUpdateDoublesSketchTest.java",
    "Start": 2693,
    "Stop": 4396,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkEndToEnd"
}
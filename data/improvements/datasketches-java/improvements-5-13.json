{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract Magic Numbers",
                "Change_Diff": "- int k=256;\n+ final int K_VALUE = 256;\n- int n=1000000;\n+ final int N_VALUE = 1000000;\n- int numPhiValues=99;\n+ final int PHI_VALUES = 99;\n- for (int q=1; q <= 99; q++) {\n+ for (int q=1; q <= PHI_VALUES; q++) {\n- for (int q=1; q <= 99; q++) {\n+ for (int q=1; q <= PHI_VALUES; q++) {\n- for (int q=1; q <= 100; q++) {\n+ for (int q=1; q <= PHI_VALUES+1; q++) {\n- for (int q=1; q <= 100; q++) {\n+ for (int q=1; q <= PHI_VALUES+1; q++) {",
                "Description": "Several magic numbers are used in the code. It's best practice to replace these with named constants to improve readability and maintainability.",
                "Start": 3,
                "End": 47
            },
            {
                "Improvement": "Replace Manual Array Initialization",
                "Change_Diff": "- double[] phiArr=new double[numPhiValues];\n- for (int q=1; q <= 99; q++) {\n-     phiArr[q - 1]=q / 100.0;\n- }\n+ double[] phiArr = IntStream.range(1, PHI_VALUES+1).mapToDouble(i -> i / 100.0).toArray();",
                "Description": "Instead of manually initializing the 'phiArr' array in a loop, use Java 8's IntStream.range and mapToDouble to simplify and make the code more readable.",
                "Start": 22,
                "End": 25
            }
        ],
        "Final code": "    @Test public void checkEndToEnd(){\n        final int K_VALUE = 256;\n        UpdateDoublesSketch qs=DoublesSketch.builder().setK(K_VALUE).build();\n        UpdateDoublesSketch qs2=DoublesSketch.builder().setK(K_VALUE).build();\n        final int N_VALUE = 1000000;\n        for (int item=N_VALUE; item >= 1; item--) {\n            if ((item % 4) == 0) {\n                qs.update(item);\n            } else {\n                qs2.update(item);\n            }\n        }\n        assertEquals(qs.getN() + qs2.getN(),N_VALUE);\n        DoublesUnion union=DoublesUnion.heapify(qs);\n        union.union(qs2);\n        DoublesSketch result=union.getResult();\n        final int PHI_VALUES = 99;\n        double[] phiArr = IntStream.range(1, PHI_VALUES+1).mapToDouble(i -> i / 100.0).toArray();\n        double[] splitPoints=result.getQuantiles(phiArr);\n        for (int q=1; q <= PHI_VALUES; q++) {\n            double nominal=(1e6 * q) / 100.0;\n            double reported=splitPoints[q - 1];\n            assertTrue(reported >= (nominal - 10000.0));\n            assertTrue(reported <= (nominal + 10000.0));\n        }\n        double[] pmfResult=result.getPMF(splitPoints);\n        double subtotal=0.0;\n        for (int q=1; q <= PHI_VALUES+1; q++) {\n            double phi=q / 100.0;\n            subtotal+=pmfResult[q - 1];\n            assertTrue(subtotal >= (phi - 0.01));\n            assertTrue(subtotal <= (phi + 0.01));\n        }\n        double[] cdfResult=result.getCDF(splitPoints);\n        for (int q=1; q <= PHI_VALUES+1; q++) {\n            double phi=q / 100.0;\n            subtotal=cdfResult[q - 1];\n            assertTrue(subtotal >= (phi - 0.01));\n            assertTrue(subtotal <= (phi + 0.01));\n        }\n        assertEquals(result.getRank(500000),0.5,0.01);\n    }"
    },
    "Old_Method": "@Test public void checkEndToEnd(){\n  int k=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(k).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(k).build();\n  int n=1000000;\n  for (int item=n; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    }\n else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),n);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  int numPhiValues=99;\n  double[] phiArr=new double[numPhiValues];\n  for (int q=1; q <= 99; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  for (int q=1; q <= 99; q++) {\n    double nominal=(1e6 * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal+=pmfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal=cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000),0.5,0.01);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/HeapUpdateDoublesSketchTest.java",
    "Start": 2693,
    "Stop": 4396,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkEndToEnd"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use meaningful variable names",
                "Change_Diff": "- final int k1=8;\n- final int n1=2 * k1;\n- final int k2=4;\n- final int n2=5 * k2;\n+ final int sketchSize1=8;\n+ final int sketchEntries1=2 * sketchSize1;\n+ final int sketchSize2=4;\n+ final int sketchEntries2=5 * sketchSize2;",
                "Description": "Meaningful names make software easier to understand and maintain. Variables like 'k1', 'n1', 'k2', 'n2' are not self-explanatory. Rename them to reflect the data they hold.",
                "Start": 2,
                "End": 5
            },
            {
                "Improvement": "Avoid magic numbers",
                "Change_Diff": "- final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n+ final int maxK=256;\n+ final int maxN=50;\n+ final int bytes=DoublesSketch.getUpdatableStorageBytes(maxK,maxN);",
                "Description": "Magic numbers are numeric values that are used directly in the code without any explanation of what they represent. It would be better to declare these magic numbers as constant variables.",
                "Start": 6,
                "End": 6
            },
            {
                "Improvement": "Remove redundant code",
                "Change_Diff": "- assertEquals(union.getResult().getN(),n1);",
                "Description": "Some lines of code are redundant and not needed. For example, the 'union.getResult().getN()' is checked twice for equality with 'n1'. Remove such redundancies to make the code cleaner.",
                "Start": 16,
                "End": 16
            }
        ],
        "Final code": "@Test public void checkUnion4DirectCompact(){\n  final int sketchSize1=8;\n  final int sketchEntries1=2 * sketchSize1;\n  final int sketchSize2=4;\n  final int sketchEntries2=5 * sketchSize2;\n  final int maxK=256;\n  final int maxN=50;\n  final int bytes=DoublesSketch.getUpdatableStorageBytes(maxK,maxN);\n  final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n  final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(sketchSize1).build(skMem);\n  for (int i=0; i < sketchEntries1; i++) {\n    sketchIn0.update(i + 1);\n  }\n  final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n  final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n  final DoublesUnion union=DoublesUnion.builder().setMaxK(maxK).build(uMem);\n  union.union(sketchIn1);\n  assertEquals(union.getMaxK(),maxK);\n  assertEquals(union.getEffectiveK(),sketchSize1);\n  DoublesSketch result=union.getResult();\n  assertEquals(result.getN(),16);\n  assertEquals(result.getMaxItem(),sketchEntries1,0.0);\n  assertEquals(result.getMinItem(),1.0,0.0);\n  assertEquals(result.getK(),sketchSize1);\n  final CompactDoublesSketch sketchIn2=buildAndLoadDQS(sketchSize2,sketchEntries2,17).compact();\n  union.reset();\n  union.union(sketchIn2);\n  result=union.getResult();\n  assertEquals(result.getMaxItem(),sketchEntries2 + 17,0.0);\n  assertEquals(result.getMinItem(),1.0 + 17,0.0);\n  println(\"\\nFinal\" + union.getResult().toString(true,true));\n}"
    },
    "Old_Method": "@Test public void checkUnion4DirectCompact(){\n  final int k1=8;\n  final int n1=2 * k1;\n  final int k2=4;\n  final int n2=5 * k2;\n  final int bytes=DoublesSketch.getUpdatableStorageBytes(256,50);\n  final WritableMemory skMem=WritableMemory.writableWrap(new byte[bytes]);\n  final UpdateDoublesSketch sketchIn0=DoublesSketch.builder().setK(k1).build(skMem);\n  for (int i=0; i < n1; i++) {\n    sketchIn0.update(i + 1);\n  }\n  final CompactDoublesSketch sketchIn1=sketchIn0.compact();\n  final WritableMemory uMem=WritableMemory.writableWrap(new byte[bytes]);\n  final DoublesUnion union=DoublesUnion.builder().setMaxK(256).build(uMem);\n  union.union(sketchIn1);\n  assertEquals(union.getResult().getN(),n1);\n  assertEquals(union.getMaxK(),256);\n  assertEquals(union.getEffectiveK(),k1);\n  DoublesSketch result=union.getResult();\n  assertEquals(result.getN(),16);\n  assertEquals(result.getMaxItem(),n1,0.0);\n  assertEquals(result.getMinItem(),1.0,0.0);\n  assertEquals(result.getK(),k1);\n  final CompactDoublesSketch sketchIn2=buildAndLoadDQS(k2,n2,17).compact();\n  union.reset();\n  union.union(sketchIn2);\n  result=union.getResult();\n  assertEquals(result.getMaxItem(),n2 + 17,0.0);\n  assertEquals(result.getMinItem(),1.0 + 17,0.0);\n  println(\"\\nFinal\" + union.getResult().toString(true,true));\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/DoublesUnionImplTest.java",
    "Start": 9412,
    "Stop": 10835,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkUnion4DirectCompact"
}
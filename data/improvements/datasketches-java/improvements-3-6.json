{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Remove repeated code by creating a helper method",
            "Change_Diff": "- insertPreLongs(onHeapMem,v);\n- onH=extractPreLongs(onHeapMem);\n- assertEquals(onH,v);\n- insertPreLongs(offHeapMem,v);\n- offH=extractPreLongs(offHeapMem);\n- assertEquals(offH,v);\n\n+ testInsertExtract(onHeapMem, offHeapMem, v, this::insertPreLongs, this::extractPreLongs);",
            "Description": "There is a pattern in the code where a value is inserted, extracted, and then validated. This pattern repeats multiple times with different methods. To reduce code repetition, create a helper method that encapsulates this pattern.",
            "Start": 10,
            "End": 49
        }],
        "Final code": "public void checkInsertsAndExtracts() {\n  final int bytes = 32;\n  try (WritableHandle offHeapMemHandler = WritableMemory.allocateDirect(bytes)) {\n    final WritableMemory offHeapMem = offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem = WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v = 0XFF;\n    testInsertExtract(onHeapMem, offHeapMem, v, this::insertPreLongs, this::extractPreLongs);\n    testInsertExtract(onHeapMem, offHeapMem, v, this::insertSerVer, this::extractSerVer);\n    // ... Repeat for other methods\n  } catch (final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n\nprivate <T> void testInsertExtract(WritableMemory onHeapMem, WritableMemory offHeapMem, T value, BiConsumer<WritableMemory, T> inserter, Function<WritableMemory, T> extractor) {\n  onHeapMem.clear();\n  offHeapMem.clear();\n  inserter.accept(onHeapMem, value);\n  T onHeapResult = extractor.apply(onHeapMem);\n  assertEquals(onHeapResult, value);\n  inserter.accept(offHeapMem, value);\n  T offHeapResult = extractor.apply(offHeapMem);\n  assertEquals(offHeapResult, value);\n}"
    },
    "Old_Method": "@Test public void checkInsertsAndExtracts(){\n  final int bytes=32;\n  try (WritableHandle offHeapMemHandler=WritableMemory.allocateDirect(bytes)){\n    final WritableMemory offHeapMem=offHeapMemHandler.getWritable();\n    final WritableMemory onHeapMem=WritableMemory.writableWrap(new byte[bytes]);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    int v=0XFF;\n    int onH, offH;\n    insertPreLongs(onHeapMem,v);\n    onH=extractPreLongs(onHeapMem);\n    assertEquals(onH,v);\n    insertPreLongs(offHeapMem,v);\n    offH=extractPreLongs(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertSerVer(onHeapMem,v);\n    onH=extractSerVer(onHeapMem);\n    assertEquals(onH,v);\n    insertSerVer(offHeapMem,v);\n    offH=extractSerVer(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFamilyID(onHeapMem,v);\n    onH=extractFamilyID(onHeapMem);\n    assertEquals(onH,v);\n    insertFamilyID(offHeapMem,v);\n    offH=extractFamilyID(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertFlags(onHeapMem,v);\n    onH=extractFlags(onHeapMem);\n    assertEquals(onH,v);\n    insertFlags(offHeapMem,v);\n    offH=extractFlags(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    v=0XFFFF;\n    insertK(onHeapMem,v);\n    onH=extractK(onHeapMem);\n    assertEquals(onH,v);\n    insertK(offHeapMem,v);\n    offH=extractK(offHeapMem);\n    assertEquals(offH,v);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    long onHL, offHL, vL=1L << 30;\n    insertN(onHeapMem,vL);\n    onHL=extractN(onHeapMem);\n    assertEquals(onHL,vL);\n    insertN(offHeapMem,vL);\n    offHL=extractN(offHeapMem);\n    assertEquals(offHL,vL);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    double onHD, offHD, vD=1L << 40;\n    insertMinDouble(onHeapMem,vD);\n    onHD=extractMinDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMinDouble(offHeapMem,vD);\n    offHD=extractMinDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n    insertMaxDouble(onHeapMem,vD);\n    onHD=extractMaxDouble(onHeapMem);\n    assertEquals(onHD,vD);\n    insertMaxDouble(offHeapMem,vD);\n    offHD=extractMaxDouble(offHeapMem);\n    assertEquals(offHD,vD);\n    onHeapMem.clear();\n    offHeapMem.clear();\n  }\n catch (  final Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/PreambleUtilTest.java",
    "Start": 2333,
    "Stop": 5225,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkInsertsAndExtracts"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid magic numbers",
                "Change_Diff": "- int k=256;\n+ final int MAX_SIZE = 256;\n\n- int n=1000000;\n+ final int TOTAL_ITEMS = 1000000;\n\n- for (int item=n; item >= 1; item--) {\n+ for (int item = TOTAL_ITEMS; item >= 1; item--) {\n\n- if ((item % 4) == 0) {\n+ final int DIVISOR = 4;\n+ if ((item % DIVISOR) == 0) {\n\n- int numPhiValues=99;\n+ final int TOTAL_PHI_VALUES = 99;\n\n- for (int q=1; q <= 99; q++) {\n+ for (int q = 1; q <= TOTAL_PHI_VALUES; q++) {",
                "Description": "Magic numbers (hard-coded values) should be avoided as they can make the code harder to understand, maintain and update. This applies to the values 256, 1000000, 4, 99, etc. used in the code. Instead, create named constants for these values.",
                "Start": 2,
                "End": 25
            },
            {
                "Improvement": "Use enhanced for loop",
                "Change_Diff": "- for (int q=1; q <= 100; q++) {\n-    double phi=q / 100.0;\n-    subtotal+=pmfResult[q - 1];\n+ for (double pmfPart : pmfResult) {\n+     double phi = q / 100.0;\n+     subtotal += pmfPart;",
                "Description": "Where possible, use an enhanced for loop to iterate over arrays. This will make the code more concise and easier to understand.",
                "Start": 28,
                "End": 35
            }
        ],
        "Final code": "@Test public void checkEndToEnd(){\n  final int MAX_SIZE = 256;\n  UpdateDoublesSketch qs = DoublesSketch.builder().setK(MAX_SIZE).build();\n  UpdateDoublesSketch qs2 = DoublesSketch.builder().setK(MAX_SIZE).build();\n  final int TOTAL_ITEMS = 1000000;\n  for (int item = TOTAL_ITEMS; item >= 1; item--) {\n    final int DIVISOR = 4;\n    if ((item % DIVISOR) == 0) {\n      qs.update(item);\n    } else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(), TOTAL_ITEMS);\n  DoublesUnion union = DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result = union.getResult();\n  final int TOTAL_PHI_VALUES = 99;\n  double[] phiArr = new double[TOTAL_PHI_VALUES];\n  for (int q = 1; q <= TOTAL_PHI_VALUES; q++) {\n    phiArr[q - 1] = q / 100.0;\n  }\n  double[] splitPoints = result.getQuantiles(phiArr);\n  for (int q = 1; q <= TOTAL_PHI_VALUES; q++) {\n    double nominal = (1e6 * q) / 100.0;\n    double reported = splitPoints[q - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult = result.getPMF(splitPoints);\n  double subtotal = 0.0;\n  for (double pmfPart : pmfResult) {\n    double phi = q / 100.0;\n    subtotal += pmfPart;\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult = result.getCDF(splitPoints);\n  for (int q = 1; q <= TOTAL_PHI_VALUES; q++) {\n    double phi = q / 100.0;\n    subtotal = cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000), 0.5, 0.01);\n}"
    },
    "Old_Method": "@Test public void checkEndToEnd(){\n  int k=256;\n  UpdateDoublesSketch qs=DoublesSketch.builder().setK(k).build();\n  UpdateDoublesSketch qs2=DoublesSketch.builder().setK(k).build();\n  int n=1000000;\n  for (int item=n; item >= 1; item--) {\n    if ((item % 4) == 0) {\n      qs.update(item);\n    }\n else {\n      qs2.update(item);\n    }\n  }\n  assertEquals(qs.getN() + qs2.getN(),n);\n  DoublesUnion union=DoublesUnion.heapify(qs);\n  union.union(qs2);\n  DoublesSketch result=union.getResult();\n  int numPhiValues=99;\n  double[] phiArr=new double[numPhiValues];\n  for (int q=1; q <= 99; q++) {\n    phiArr[q - 1]=q / 100.0;\n  }\n  double[] splitPoints=result.getQuantiles(phiArr);\n  for (int q=1; q <= 99; q++) {\n    double nominal=(1e6 * q) / 100.0;\n    double reported=splitPoints[q - 1];\n    assertTrue(reported >= (nominal - 10000.0));\n    assertTrue(reported <= (nominal + 10000.0));\n  }\n  double[] pmfResult=result.getPMF(splitPoints);\n  double subtotal=0.0;\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal+=pmfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  double[] cdfResult=result.getCDF(splitPoints);\n  for (int q=1; q <= 100; q++) {\n    double phi=q / 100.0;\n    subtotal=cdfResult[q - 1];\n    assertTrue(subtotal >= (phi - 0.01));\n    assertTrue(subtotal <= (phi + 0.01));\n  }\n  assertEquals(result.getRank(500000),0.5,0.01);\n}\n",
    "File_Path": "datasketches-java/src/test/java/org/apache/datasketches/quantiles/HeapUpdateDoublesSketchTest.java",
    "Start": 2693,
    "Stop": 4396,
    "Project_Name": "data/projects/datasketches-java",
    "Method_Name": "checkEndToEnd"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor common SteamID retrieval code",
                "Change_Diff": "- int receiverID=Integer.parseInt(params[0]);\n- SteamID steamIDReceiver=null;\n- if (remoteUserIDs.containsKey(receiverID)) {\n-   steamIDReceiver=remoteUserIDs.get(receiverID);\n- }\n- else if (friends.isFriendAccountID(receiverID)) {\n-   steamIDReceiver=friends.getFriendSteamID(receiverID);\n- }\n- else {\n-   System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n- }\n+ SteamID steamIDReceiver = getSteamID(receiverID);",
                "Description": "The process of retrieving a SteamID from either remoteUserIDs or friends is duplicated in the 'p2p send' and 'p2p close' sections. This can be refactored into a separate method to avoid code duplication.",
                "Start": 5,
                "End": 15
            },
            {
                "Improvement": "Use StringBuilder for string concatenation",
                "Change_Diff": "- packetSendBuffer.clear();\n- for (int i=1; i < params.length; i++) {\n-   byte[] bytes=params[i].getBytes(messageCharset);\n-   if (i > 1) {\n-     packetSendBuffer.put((byte)0x20);\n-   }\n-   packetSendBuffer.put(bytes);\n- }\n- packetSendBuffer.flip();\n+ StringBuilder sb = new StringBuilder();\n+ for (int i = 1; i < params.length; i++) {\n+   if (i > 1) {\n+     sb.append(\" \");\n+   }\n+   sb.append(params[i]);\n+ }\n+ byte[] bytes = sb.toString().getBytes(messageCharset);\n+ packetSendBuffer.put(bytes);\n+ packetSendBuffer.flip();",
                "Description": "It is generally a good practice to use a StringBuilder for concatenating strings in loops because it is much faster and consumes less memory than string concatenation.",
                "Start": 17,
                "End": 26
            }
        ],
        "Final code": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver = getSteamID(receiverID);\n    if (steamIDReceiver != null) {\n      StringBuilder sb = new StringBuilder();\n      for (int i = 1; i < params.length; i++) {\n        if (i > 1) {\n          sb.append(\" \");\n        }\n        sb.append(params[i]);\n      }\n      byte[] bytes = sb.toString().getBytes(messageCharset);\n      packetSendBuffer.put(bytes);\n      packetSendBuffer.flip();\n      networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  }\n  // the rest of the code remains the same\n}\n\nprivate SteamID getSteamID(int userID) {\n  SteamID steamID = null;\n  if (remoteUserIDs.containsKey(userID)) {\n    steamID = remoteUserIDs.get(userID);\n  } else if (friends.isFriendAccountID(userID)) {\n    steamID = friends.getFriendSteamID(userID);\n  } else {\n    System.out.println(\"Error: unknown userID \" + userID + \" (no friend, not connected)\");\n  }\n  return steamID;\n}"
    },
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver=null;\n    if (remoteUserIDs.containsKey(receiverID)) {\n      steamIDReceiver=remoteUserIDs.get(receiverID);\n    }\n else     if (friends.isFriendAccountID(receiverID)) {\n      steamIDReceiver=friends.getFriendSteamID(receiverID);\n    }\n else {\n      System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n    }\n    if (steamIDReceiver != null) {\n      packetSendBuffer.clear();\n      for (int i=1; i < params.length; i++) {\n        byte[] bytes=params[i].getBytes(messageCharset);\n        if (i > 1) {\n          packetSendBuffer.put((byte)0x20);\n        }\n        packetSendBuffer.put(bytes);\n      }\n      packetSendBuffer.flip();\n      networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  }\n else   if (input.startsWith(\"p2p close \")) {\n    int remoteID=Integer.parseInt(input.substring(\"p2p close \".length()));\n    SteamID steamIDRemote=null;\n    if (remoteUserIDs.containsKey(remoteID)) {\n      steamIDRemote=remoteUserIDs.get(remoteID);\n    }\n else {\n      System.out.println(\"Error: unknown remote ID \" + remoteID + \" (not connected)\");\n    }\n    if (steamIDRemote != null) {\n      networking.closeP2PSessionWithUser(steamIDRemote);\n      unregisterRemoteSteamID(steamIDRemote);\n    }\n  }\n else   if (input.equals(\"p2p list\")) {\n    System.out.println(\"P2P connected users:\");\n    if (remoteUserIDs.size() == 0) {\n      System.out.println(\"  none\");\n    }\n    for (    SteamID steamIDUser : remoteUserIDs.values()) {\n      System.out.println(\"  \" + steamIDUser.getAccountID());\n    }\n  }\n else   if (input.startsWith(\"auth ticket \")) {\n    String authCmd=input.substring(\"auth ticket \".length());\n    if (authCmd.equals(\"get\")) {\n      getAuthTicket();\n    }\n else     if (authCmd.equals(\"cancel\")) {\n      cancelAuthTicket();\n    }\n else     if (authCmd.equals(\"send\")) {\n      broadcastAuthTicket();\n    }\n else     if (authCmd.equals(\"end\")) {\n      endAuthSession();\n    }\n  }\n  friends.processInput(input);\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamNetworkingTest.java",
    "Start": 5088,
    "Stop": 7338,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into methods",
                "Change_Diff": "- digitalActionHandle != null \n- analogActionHandle != null \n+ handleDigitalAction(handle); \n+ handleAnalogAction(handle);",
                "Description": "The code for handling digital and analog actions is very similar. You can avoid repetition by extracting these into separate methods.",
                "Start": 6,
                "End": 26
            },
            {
                "Improvement": "Replace System.out.println with Logger",
                "Change_Diff": "- System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle)); \n- System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name()); \n+ logger.info(\"Digital action: {}\", getNativeHandle(digitalActionHandle)); \n+ logger.info(\"Analog action: {}, {}, {}\", analogActionData.getX(), analogActionData.getY(), mode.name());",
                "Description": "Using System.out.println for logging is not recommended. It is better to use a Logger, which provides more flexibility and can be easily turned off in production code.",
                "Start": 12,
                "End": 24
            }
        ],
        "Final code": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null || getNativeHandle(setHandle) == 0) {\n    return;\n  }\n  for (int i=0; i < numControllers; i++) {\n    SteamControllerHandle handle=controllerHandles[i];\n    controller.activateActionSet(handle,setHandle);\n    handleDigitalAction(handle);\n    handleAnalogAction(handle);\n  }\n}\n\nprivate void handleDigitalAction(SteamControllerHandle handle) {\n  if (digitalActionHandle != null) {\n    controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n    if (digitalActionData.getActive() && digitalActionData.getState()) {\n      logger.info(\"Digital action: {}\", getNativeHandle(digitalActionHandle));\n    }\n  }\n}\n\nprivate void handleAnalogAction(SteamControllerHandle handle) {\n  if (analogActionHandle != null) {\n    controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n    if (analogActionData.getActive()) {\n      float x=analogActionData.getX();\n      float y=analogActionData.getY();\n      SteamController.SourceMode mode=analogActionData.getMode();\n      if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n        logger.info(\"Analog action: {}, {}, {}\", x, y, mode.name());\n      }\n    }\n  }\n}"
    },
    "Old_Method": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null || getNativeHandle(setHandle) == 0) {\n    return;\n  }\n  for (int i=0; i < numControllers; i++) {\n    SteamControllerHandle handle=controllerHandles[i];\n    controller.activateActionSet(handle,setHandle);\n    if (digitalActionHandle != null) {\n      controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n      if (digitalActionData.getActive() && digitalActionData.getState()) {\n        System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle));\n      }\n    }\n    if (analogActionHandle != null) {\n      controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n      if (analogActionData.getActive()) {\n        float x=analogActionData.getX();\n        float y=analogActionData.getY();\n        SteamController.SourceMode mode=analogActionData.getMode();\n        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n          System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name());\n        }\n      }\n    }\n  }\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamControllerTest.java",
    "Start": 1216,
    "Stop": 3060,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processUpdate"
}
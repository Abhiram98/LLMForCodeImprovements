{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactoring repeated code",
                "Change_Diff": "- steamIDReceiver=null;\n- if (remoteUserIDs.containsKey(receiverID)) {\n- steamIDReceiver=remoteUserIDs.get(receiverID);\n-}\n- else if (friends.isFriendAccountID(receiverID)) {\n- steamIDReceiver=friends.getFriendSteamID(receiverID);\n- }\n- else {\n- System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n- }\n+ steamIDReceiver = getSteamID(receiverID);",
                "Description": "There's repeated code when getting the SteamID for a receiver or remote user. This can be refactored into a separate method.",
                "Start": 5,
                "End": 16
            },
            {
                "Improvement": "Use StringBuilder for constructing packet",
                "Change_Diff": "- packetSendBuffer.clear();\n- for (int i=1; i < params.length; i++) {\n- byte[] bytes=params[i].getBytes(messageCharset);\n- if (i > 1) {\n- packetSendBuffer.put((byte)0x20);\n- }\n- packetSendBuffer.put(bytes);\n- }\n- packetSendBuffer.flip();\n+ StringBuilder packet = new StringBuilder();\n+ for (int i=1; i < params.length; i++) {\n+ packet.append(params[i]);\n+ if (i < params.length - 1) {\n+ packet.append(\" \");\n+ }\n+ }\n+ byte[] packetBytes = packet.toString().getBytes(messageCharset);",
                "Description": "Use StringBuilder instead of ByteBuffer for constructing the packet. It's more readable and easier to work with for this use case.",
                "Start": 18,
                "End": 27
            }
        ],
        "Final code": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver = getSteamID(receiverID);\n    if (steamIDReceiver != null) {\n      StringBuilder packet = new StringBuilder();\n      for (int i=1; i < params.length; i++) {\n        packet.append(params[i]);\n        if (i < params.length - 1) {\n          packet.append(\" \");\n        }\n      }\n      byte[] packetBytes = packet.toString().getBytes(messageCharset);\n      networking.sendP2PPacket(steamIDReceiver,packetBytes,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  } else if (input.startsWith(\"p2p close \")) {\n    int remoteID=Integer.parseInt(input.substring(\"p2p close \".length()));\n    SteamID steamIDRemote = getSteamID(remoteID);\n    if (steamIDRemote != null) {\n      networking.closeP2PSessionWithUser(steamIDRemote);\n      unregisterRemoteSteamID(steamIDRemote);\n    }\n  } else if (input.equals(\"p2p list\")) {\n    System.out.println(\"P2P connected users:\");\n    if (remoteUserIDs.size() == 0) {\n      System.out.println(\"  none\");\n    }\n    for (SteamID steamIDUser : remoteUserIDs.values()) {\n      System.out.println(\"  \" + steamIDUser.getAccountID());\n    }\n  } else if (input.startsWith(\"auth ticket \")) {\n    String authCmd=input.substring(\"auth ticket \".length());\n    if (authCmd.equals(\"get\")) {\n      getAuthTicket();\n    } else if (authCmd.equals(\"cancel\")) {\n      cancelAuthTicket();\n    } else if (authCmd.equals(\"send\")) {\n      broadcastAuthTicket();\n    } else if (authCmd.equals(\"end\")) {\n      endAuthSession();\n    }\n  }\n  friends.processInput(input);\n}\n\nprivate SteamID getSteamID(int userID) {\n  SteamID steamID=null;\n  if (remoteUserIDs.containsKey(userID)) {\n    steamID=remoteUserIDs.get(userID);\n  } else if (friends.isFriendAccountID(userID)) {\n    steamID=friends.getFriendSteamID(userID);\n  } else {\n    System.out.println(\"Error: unknown userID \" + userID + \" (no friend, not connected)\");\n  }\n  return steamID;\n}"
    },
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver=null;\n    if (remoteUserIDs.containsKey(receiverID)) {\n      steamIDReceiver=remoteUserIDs.get(receiverID);\n    }\n else     if (friends.isFriendAccountID(receiverID)) {\n      steamIDReceiver=friends.getFriendSteamID(receiverID);\n    }\n else {\n      System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n    }\n    if (steamIDReceiver != null) {\n      packetSendBuffer.clear();\n      for (int i=1; i < params.length; i++) {\n        byte[] bytes=params[i].getBytes(messageCharset);\n        if (i > 1) {\n          packetSendBuffer.put((byte)0x20);\n        }\n        packetSendBuffer.put(bytes);\n      }\n      packetSendBuffer.flip();\n      networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  }\n else   if (input.startsWith(\"p2p close \")) {\n    int remoteID=Integer.parseInt(input.substring(\"p2p close \".length()));\n    SteamID steamIDRemote=null;\n    if (remoteUserIDs.containsKey(remoteID)) {\n      steamIDRemote=remoteUserIDs.get(remoteID);\n    }\n else {\n      System.out.println(\"Error: unknown remote ID \" + remoteID + \" (not connected)\");\n    }\n    if (steamIDRemote != null) {\n      networking.closeP2PSessionWithUser(steamIDRemote);\n      unregisterRemoteSteamID(steamIDRemote);\n    }\n  }\n else   if (input.equals(\"p2p list\")) {\n    System.out.println(\"P2P connected users:\");\n    if (remoteUserIDs.size() == 0) {\n      System.out.println(\"  none\");\n    }\n    for (    SteamID steamIDUser : remoteUserIDs.values()) {\n      System.out.println(\"  \" + steamIDUser.getAccountID());\n    }\n  }\n else   if (input.startsWith(\"auth ticket \")) {\n    String authCmd=input.substring(\"auth ticket \".length());\n    if (authCmd.equals(\"get\")) {\n      getAuthTicket();\n    }\n else     if (authCmd.equals(\"cancel\")) {\n      cancelAuthTicket();\n    }\n else     if (authCmd.equals(\"send\")) {\n      broadcastAuthTicket();\n    }\n else     if (authCmd.equals(\"end\")) {\n      endAuthSession();\n    }\n  }\n  friends.processInput(input);\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamNetworkingTest.java",
    "Start": 5088,
    "Stop": 7338,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
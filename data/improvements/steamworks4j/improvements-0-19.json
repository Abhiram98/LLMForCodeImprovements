{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use StringBuilder instead of String concatenation",
                "Change_Diff": "- System.out.println(\"Leaderboard scores downloaded: handle=\" + leaderboard.toString() + \", entries=\"+ entries.toString()+ \", count=\"+ numEntries);\n- System.out.println(\"Leaderboard entry #\" + i + \": accountID=\"+ entry.getSteamIDUser().getAccountID()+ \", globalRank=\"+ entry.getGlobalRank()+ \", score=\"+ entry.getScore()+ \", numDetails=\"+ numDetails);\n- System.out.println(\"  ... detail #\" + detail + \"=\"+ details[detail]);\n+ StringBuilder sb = new StringBuilder();\n+ sb.append(\"Leaderboard scores downloaded: handle=\").append(leaderboard.toString()).append(\", entries=\").append(entries.toString()).append(\", count=\").append(numEntries);\n+ System.out.println(sb.toString());\n+ sb.setLength(0);\n+ sb.append(\"Leaderboard entry #\").append(i).append(\": accountID=\").append(entry.getSteamIDUser().getAccountID()).append(\", globalRank=\").append(entry.getGlobalRank()).append(\", score=\").append(entry.getScore()).append(\", numDetails=\").append(numDetails);\n+ System.out.println(sb.toString());\n+ sb.setLength(0);\n+ sb.append(\"  ... detail #\").append(detail).append(\"=\").append(details[detail]);\n+ System.out.println(sb.toString());\n+ sb.setLength(0);",
                "Description": "Use StringBuilder for building the output string in the print statements. String concatenation in a loop has a time complexity of O(n^2) because each concatenation creates a new string. StringBuilder append method is more efficient and has a time complexity of O(n).",
                "Start": 3,
                "End": 10
            },
            {
                "Improvement": "Separate concerns into different methods",
                "Change_Diff": "- @Override public void onLeaderboardScoresDownloaded(SteamLeaderboardHandle leaderboard,SteamLeaderboardEntriesHandle entries,int numEntries){...}\n+ private void printLeaderboardDetails(...){...}\n+ private void printAvatarDetails(...){...}\n+ private void printUserDetails(...){...}\n+ @Override public void onLeaderboardScoresDownloaded(SteamLeaderboardHandle leaderboard,SteamLeaderboardEntriesHandle entries,int numEntries){\n+    printLeaderboardDetails(...);\n+    printAvatarDetails(...);\n+    printUserDetails(...);\n+ }",
                "Description": "The method is doing too many things at once, it would be better to separate concerns into different methods to improve readability and maintainability. For example, we can create separate methods for printing leaderboard details, printing avatar details, and printing user details.",
                "Start": 1,
                "End": 50
            }
        ],
        "Final code": "StringBuilder sb = new StringBuilder();\n@Override public void onLeaderboardScoresDownloaded(SteamLeaderboardHandle leaderboard,SteamLeaderboardEntriesHandle entries,int numEntries){\n    printLeaderboardDetails(leaderboard, entries, numEntries, sb);\n    int[] details=new int[16];\n    for (int i=0; i < numEntries; i++) {\n        SteamLeaderboardEntry entry=new SteamLeaderboardEntry();\n        if (userStats.getDownloadedLeaderboardEntry(entries,i,entry,details)) {\n            int numDetails=entry.getNumDetails();\n            printUserDetails(i, entry, details, numDetails, sb);\n            printAvatarDetails(entry, sb);\n        }\n    }\n}\n\nprivate void printLeaderboardDetails(SteamLeaderboardHandle leaderboard, SteamLeaderboardEntriesHandle entries, int numEntries, StringBuilder sb) {\n    sb.append(\"Leaderboard scores downloaded: handle=\").append(leaderboard.toString()).append(\", entries=\").append(entries.toString()).append(\", count=\").append(numEntries);\n    System.out.println(sb.toString());\n    sb.setLength(0);\n}\n\nprivate void printUserDetails(int i, SteamLeaderboardEntry entry, int[] details, int numDetails, StringBuilder sb) {...}\n\nprivate void printAvatarDetails(SteamLeaderboardEntry entry, StringBuilder sb) {...}"
    },
    "Old_Method": "@Override public void onLeaderboardScoresDownloaded(SteamLeaderboardHandle leaderboard,SteamLeaderboardEntriesHandle entries,int numEntries){\n  System.out.println(\"Leaderboard scores downloaded: handle=\" + leaderboard.toString() + \", entries=\"+ entries.toString()+ \", count=\"+ numEntries);\n  int[] details=new int[16];\n  for (int i=0; i < numEntries; i++) {\n    SteamLeaderboardEntry entry=new SteamLeaderboardEntry();\n    if (userStats.getDownloadedLeaderboardEntry(entries,i,entry,details)) {\n      int numDetails=entry.getNumDetails();\n      System.out.println(\"Leaderboard entry #\" + i + \": accountID=\"+ entry.getSteamIDUser().getAccountID()+ \", globalRank=\"+ entry.getGlobalRank()+ \", score=\"+ entry.getScore()+ \", numDetails=\"+ numDetails);\n      for (int detail=0; detail < numDetails; detail++) {\n        System.out.println(\"  ... detail #\" + detail + \"=\"+ details[detail]);\n      }\n      if (friends.requestUserInformation(entry.getSteamIDUser(),false)) {\n        System.out.println(\"  ... requested user information for entry\");\n      }\n else {\n        System.out.println(\"  ... user name is '\" + friends.getFriendPersonaName(entry.getSteamIDUser()) + \"'\");\n        int smallAvatar=friends.getSmallFriendAvatar(entry.getSteamIDUser());\n        if (smallAvatar != 0) {\n          int w=utils.getImageWidth(smallAvatar);\n          int h=utils.getImageHeight(smallAvatar);\n          System.out.println(\"  ... small avatar size: \" + w + \"x\"+ h+ \" pixels\");\n          ByteBuffer image=ByteBuffer.allocateDirect(w * h * 4);\n          try {\n            if (utils.getImageRGBA(smallAvatar,image)) {\n              System.out.println(\"  ... small avatar retrieve avatar image successful\");\n              int nonZeroes=w * h;\n              for (int y=0; y < h; y++) {\n                for (int x=0; x < w; x++) {\n                  if (image.getInt(y * w + x) == 0) {\n                    nonZeroes--;\n                  }\n                }\n              }\n              if (nonZeroes == 0) {\n                System.err.println(\"Something's wrong! Avatar image is empty!\");\n              }\n            }\n else {\n              System.out.println(\"  ... small avatar retrieve avatar image failed!\");\n            }\n          }\n catch (          SteamException e) {\n            e.printStackTrace();\n          }\n        }\n else {\n          System.out.println(\"  ... small avatar image not available!\");\n        }\n      }\n    }\n  }\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamClientAPITest.java",
    "Start": 3066,
    "Stop": 5589,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "onLeaderboardScoresDownloaded"
}
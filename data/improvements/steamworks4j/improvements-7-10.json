{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code to separate method",
                "Change_Diff": "- if (cmd.length > 1) {\n-   days=Integer.parseInt(cmd[1]);\n- }",
                "Description": "There's a repetitive block of code that parses an integer from the command array `cmd`. The same code is used in several places, it can be extracted to a separate method to make the code more maintainable and readable.",
                "Start": 10,
                "End": 13
            },
            {
                "Improvement": "Use a switch-case statement instead of multiple if-else conditions",
                "Change_Diff": "- if (cmd[0].equals(\"request\")) {\n+ switch (cmd[0]) {\n+   case \"request\":",
                "Description": "The current code uses multiple if-else conditions to check the value of `cmd[0]`. A switch-case statement would improve readability and performance of the code.",
                "Start": 9,
                "End": 86
            },
            {
                "Improvement": "Use try-catch for Integer.parseInt",
                "Change_Diff": "- days=Integer.parseInt(cmd[1]);\n+ try {\n+   days = Integer.parseInt(cmd[1]);\n+ } catch (NumberFormatException e) {\n+   e.printStackTrace();\n+ }",
                "Description": "The current code does not handle the NumberFormatException that can be thrown by Integer.parseInt. It is recommended to use a try-catch block when parsing an integer from a string.",
                "Start": 10,
                "End": 13
            }
        ],
        "Final code": "..."
    },
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"stats global \")) {\n    String[] cmd=input.substring(\"stats global \".length()).split(\" \");\n    if (cmd.length > 0) {\n      if (cmd[0].equals(\"request\")) {\n        int days=0;\n        if (cmd.length > 1) {\n          days=Integer.parseInt(cmd[1]);\n        }\n        userStats.requestGlobalStats(days);\n      }\n else       if (cmd[0].equals(\"players\")) {\n        userStats.getNumberOfCurrentPlayers();\n      }\n else       if (cmd[0].equals(\"lget\") && cmd.length > 1) {\n        int days=0;\n        if (cmd.length > 2) {\n          days=Integer.parseInt(cmd[2]);\n        }\n        if (days == 0) {\n          long value=userStats.getGlobalStat(cmd[1],-1);\n          System.out.println(\"global stat (L) '\" + cmd[1] + \"' = \"+ value);\n        }\n else {\n          long[] data=new long[days];\n          int count=userStats.getGlobalStatHistory(cmd[1],data);\n          System.out.print(\"global stat history (L) for \" + count + \" of \"+ days+ \" days:\");\n          for (int i=0; i < count; i++) {\n            System.out.print(\" \" + Long.toString(data[i]));\n          }\n          System.out.println();\n        }\n      }\n else       if (cmd[0].equals(\"dget\") && cmd.length > 1) {\n        int days=0;\n        if (cmd.length > 2) {\n          days=Integer.parseInt(cmd[2]);\n        }\n        if (days == 0) {\n          double value=userStats.getGlobalStat(cmd[1],-1.0);\n          System.out.println(\"global stat (D) '\" + cmd[1] + \"' = \"+ value);\n        }\n else {\n          double[] data=new double[days];\n          int count=userStats.getGlobalStatHistory(cmd[1],data);\n          System.out.print(\"global stat history (D) for \" + count + \" of \"+ days+ \" days:\");\n          for (int i=0; i < count; i++) {\n            System.out.print(\" \" + Double.toString(data[i]));\n          }\n          System.out.println();\n        }\n      }\n    }\n  }\n else   if (input.equals(\"stats request\")) {\n    userStats.requestCurrentStats();\n  }\n else   if (input.equals(\"stats store\")) {\n    userStats.storeStats();\n  }\n else   if (input.startsWith(\"achievement set \")) {\n    String achievementName=input.substring(\"achievement set \".length());\n    System.out.println(\"- setting \" + achievementName + \" to 'achieved'\");\n    userStats.setAchievement(achievementName);\n  }\n else   if (input.startsWith(\"achievement clear \")) {\n    String achievementName=input.substring(\"achievement clear \".length());\n    System.out.println(\"- clearing \" + achievementName);\n    userStats.clearAchievement(achievementName);\n  }\n else   if (input.equals(\"file list\")) {\n    int numFiles=remoteStorage.getFileCount();\n    System.out.println(\"Num of files: \" + numFiles);\n    for (int i=0; i < numFiles; i++) {\n      int[] sizes=new int[1];\n      String file=remoteStorage.getFileNameAndSize(i,sizes);\n      boolean exists=remoteStorage.fileExists(file);\n      System.out.println(\"# \" + i + \" : name=\"+ file+ \", size=\"+ sizes[0]+ \", exists=\"+ (exists ? \"yes\" : \"no\"));\n    }\n  }\n else   if (input.startsWith(\"file write \")) {\n    String path=input.substring(\"file write \".length());\n    File file=new File(path);\n    try (FileInputStream in=new FileInputStream(file)){\n      SteamUGCFileWriteStreamHandle remoteFile=remoteStorage.fileWriteStreamOpen(path);\n      if (remoteFile != null) {\n        byte[] bytes=new byte[1024];\n        int bytesRead;\n        while ((bytesRead=in.read(bytes,0,bytes.length)) > 0) {\n          ByteBuffer buffer=ByteBuffer.allocateDirect(bytesRead);\n          buffer.put(bytes,0,bytesRead);\n          buffer.flip();\n          remoteStorage.fileWriteStreamWriteChunk(remoteFile,buffer);\n        }\n        remoteStorage.fileWriteStreamClose(remoteFile);\n      }\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n else   if (input.startsWith(\"file delete \")) {\n    String path=input.substring(\"file delete \".length());\n    if (remoteStorage.fileDelete(path)) {\n      System.out.println(\"deleted file '\" + path + \"'\");\n    }\n  }\n else   if (input.startsWith(\"file share \")) {\n    remoteStorage.fileShare(input.substring(\"file share \".length()));\n  }\n else   if (input.startsWith(\"file publish \")) {\n    String[] paths=input.substring(\"file publish \".length()).split(\" \");\n    if (paths.length >= 2) {\n      System.out.println(\"publishing file: \" + paths[0] + \", preview file: \"+ paths[1]);\n      remoteStorage.publishWorkshopFile(paths[0],paths[1],utils.getAppID(),\"Test UGC!\",\"Dummy UGC file published by test application.\",SteamRemoteStorage.PublishedFileVisibility.Private,null,SteamRemoteStorage.WorkshopFileType.Community);\n    }\n  }\n else   if (input.startsWith(\"file republish \")) {\n    String[] paths=input.substring(\"file republish \".length()).split(\" \");\n    if (paths.length >= 3) {\n      System.out.println(\"republishing id: \" + paths[0] + \", file: \"+ paths[1]+ \", preview file: \"+ paths[2]);\n      SteamPublishedFileID fileID=new SteamPublishedFileID(Long.parseLong(paths[0]));\n      SteamPublishedFileUpdateHandle updateHandle=remoteStorage.createPublishedFileUpdateRequest(fileID);\n      if (updateHandle != null) {\n        remoteStorage.updatePublishedFileFile(updateHandle,paths[1]);\n        remoteStorage.updatePublishedFilePreviewFile(updateHandle,paths[2]);\n        remoteStorage.updatePublishedFileTitle(updateHandle,\"Updated Test UGC!\");\n        remoteStorage.updatePublishedFileDescription(updateHandle,\"Dummy UGC file *updated* by test application.\");\n        remoteStorage.commitPublishedFileUpdate(updateHandle);\n      }\n    }\n  }\n else   if (input.equals(\"ugc query\")) {\n    SteamUGCQuery query=ugc.createQueryUserUGCRequest(user.getSteamID().getAccountID(),SteamUGC.UserUGCList.Subscribed,SteamUGC.MatchingUGCType.UsableInGame,SteamUGC.UserUGCListSortOrder.TitleAsc,utils.getAppID(),utils.getAppID(),1);\n    if (query.isValid()) {\n      System.out.println(\"sending UGC query: \" + query.toString());\n      ugc.sendQueryUGCRequest(query);\n    }\n  }\n else   if (input.startsWith(\"ugc download \")) {\n    String name=input.substring(\"ugc download \".length());\n    SteamUGCHandle handle=new SteamUGCHandle(Long.parseLong(name,16));\n    remoteStorage.ugcDownload(handle,0);\n  }\n else   if (input.startsWith(\"ugc subscribe \")) {\n    Long id=Long.parseLong(input.substring(\"ugc subscribe \".length()),16);\n    ugc.subscribeItem(new SteamPublishedFileID(id));\n  }\n else   if (input.startsWith(\"ugc unsubscribe \")) {\n    Long id=Long.parseLong(input.substring(\"ugc unsubscribe \".length()),16);\n    ugc.unsubscribeItem(new SteamPublishedFileID(id));\n  }\n else   if (input.startsWith(\"ugc state \")) {\n    Long id=Long.parseLong(input.substring(\"ugc state \".length()),16);\n    Collection<SteamUGC.ItemState> itemStates=ugc.getItemState(new SteamPublishedFileID(id));\n    System.out.println(\"UGC item states: \" + itemStates.size());\n    for (    SteamUGC.ItemState itemState : itemStates) {\n      System.out.println(\"  \" + itemState.name());\n    }\n  }\n else   if (input.startsWith(\"ugc details \")) {\n    System.out.println(\"requesting UGC details (deprecated API call)\");\n    Long id=Long.parseLong(input.substring(\"ugc details \".length()),16);\n    ugc.requestUGCDetails(new SteamPublishedFileID(id),0);\n    SteamUGCQuery query=ugc.createQueryUGCDetailsRequest(new SteamPublishedFileID(id));\n    if (query.isValid()) {\n      System.out.println(\"sending UGC details query: \" + query.toString());\n      ugc.sendQueryUGCRequest(query);\n    }\n  }\n else   if (input.startsWith(\"ugc info \")) {\n    Long id=Long.parseLong(input.substring(\"ugc info \".length()),16);\n    SteamUGC.ItemInstallInfo installInfo=new SteamUGC.ItemInstallInfo();\n    if (ugc.getItemInstallInfo(new SteamPublishedFileID(id),installInfo)) {\n      System.out.println(\"  folder: \" + installInfo.getFolder());\n      System.out.println(\"  size on disk: \" + installInfo.getSizeOnDisk());\n    }\n    SteamUGC.ItemDownloadInfo downloadInfo=new SteamUGC.ItemDownloadInfo();\n    if (ugc.getItemDownloadInfo(new SteamPublishedFileID(id),downloadInfo)) {\n      System.out.println(\"  bytes downloaded: \" + downloadInfo.getBytesDownloaded());\n      System.out.println(\"  bytes total: \" + downloadInfo.getBytesTotal());\n    }\n  }\n else   if (input.startsWith(\"leaderboard find \")) {\n    String name=input.substring(\"leaderboard find \".length());\n    userStats.findLeaderboard(name);\n  }\n else   if (input.startsWith(\"leaderboard list \")) {\n    String[] params=input.substring(\"leaderboard list \".length()).split(\" \");\n    if (currentLeaderboard != null && params.length >= 2) {\n      userStats.downloadLeaderboardEntries(currentLeaderboard,SteamUserStats.LeaderboardDataRequest.Global,Integer.parseInt(params[0]),Integer.parseInt(params[1]));\n    }\n  }\n else   if (input.startsWith(\"leaderboard users \")) {\n    String[] params=input.substring(\"leaderboard users \".length()).split(\" \");\n    if (currentLeaderboard != null && params.length > 0) {\n      SteamID[] users=new SteamID[params.length];\n      for (int i=0; i < params.length; i++) {\n        users[i]=SteamID.createFromNativeHandle(Long.parseLong(params[i]));\n      }\n      userStats.downloadLeaderboardEntriesForUsers(currentLeaderboard,users);\n    }\n  }\n else   if (input.startsWith(\"leaderboard score \")) {\n    String score=input.substring(\"leaderboard score \".length());\n    if (currentLeaderboard != null) {\n      System.out.println(\"uploading score \" + score + \" to leaderboard \"+ currentLeaderboard.toString());\n      userStats.uploadLeaderboardScore(currentLeaderboard,SteamUserStats.LeaderboardUploadScoreMethod.KeepBest,Integer.parseInt(score),new int[]{});\n    }\n  }\n else   if (input.startsWith(\"apps subscribed \")) {\n    String appId=input.substring(\"apps subscribed \".length());\n    boolean subscribed=apps.isSubscribedApp(Integer.parseInt(appId));\n    System.out.println(\"user described to app #\" + appId + \": \"+ (subscribed ? \"yes\" : \"no\"));\n  }\n else   if (input.startsWith(\"deck \")) {\n    String cmd=input.substring(\"deck \".length());\n    if (cmd.equals(\"status\")) {\n      boolean isDeck=utils.isSteamRunningOnSteamDeck();\n      System.out.println(\"Steam is running on SteamDeck: \" + (isDeck ? \"yes\" : \"no\"));\n    }\n else     if (cmd.equals(\"input\")) {\n      boolean success=utils.showFloatingGamepadTextInput(SteamUtils.FloatingGamepadTextInputMode.ModeSingleLine,0,0,1280,200);\n      System.out.println(\"Show floating gamepad text input: \" + (success ? \"success\" : \"failed\"));\n    }\n  }\n else   if (input.equals(\"auth web\")) {\n    user.getAuthTicketForWebApi();\n  }\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamClientAPITest.java",
    "Start": 14999,
    "Stop": 25402,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
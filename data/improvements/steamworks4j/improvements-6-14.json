{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use constants for repeated strings",
                "Change_Diff": "- if (input.startsWith(\"p2p send \")) {\n+ if (input.startsWith(P2P_SEND)) {",
                "Description": "Rather than hard-coding repeated strings such as 'p2p send ', 'p2p close ', 'auth ticket ' it is better to define them as constants. This improves readability, maintainability and avoids errors due to typos.",
                "Start": 2,
                "End": 55
            },
            {
                "Improvement": "Use switch-case for commands",
                "Change_Diff": "- if (authCmd.equals(\"get\")) {\n+ switch(authCmd) {\n+    case \"get\":",
                "Description": "The last if-else block where you are checking if input equals certain strings can be replaced with a switch-case statement for cleaner and more readable code.",
                "Start": 47,
                "End": 55
            },
            {
                "Improvement": "Extract repeated code into methods",
                "Change_Diff": "- int receiverID=Integer.parseInt(params[0]);\n- SteamID steamIDReceiver=null;\n+ SteamID steamIDReceiver=getSteamIDFromID(params[0]);",
                "Description": "The code for getting SteamID from receiverID and remoteID is almost the same and can be extracted into a separate method. This reduces code redundancy and makes code easier to maintain.",
                "Start": 5,
                "End": 13
            }
        ],
        "Final code": "private static final String P2P_SEND = \"p2p send \";\nprivate static final String P2P_CLOSE = \"p2p close \";\nprivate static final String AUTH_TICKET = \"auth ticket \";\n\n@Override\nprotected void processInput(String input) throws SteamException {\n    if (input.startsWith(P2P_SEND)) {\n        String[] params=input.substring(P2P_SEND.length()).split(\" \");\n        SteamID steamIDReceiver=getSteamIDFromID(params[0]);\n        if (steamIDReceiver != null) {\n            packetSendBuffer.clear();\n            for (int i=1; i < params.length; i++) {\n                byte[] bytes=params[i].getBytes(messageCharset);\n                if (i > 1) {\n                    packetSendBuffer.put((byte)0x20);\n                }\n                packetSendBuffer.put(bytes);\n            }\n            packetSendBuffer.flip();\n            networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n        }\n    } else if (input.startsWith(P2P_CLOSE)) {\n        SteamID steamIDRemote=getSteamIDFromID(input.substring(P2P_CLOSE.length()));\n        if (steamIDRemote != null) {\n            networking.closeP2PSessionWithUser(steamIDRemote);\n            unregisterRemoteSteamID(steamIDRemote);\n        }\n    } else if (input.equals(\"p2p list\")) {\n        System.out.println(\"P2P connected users:\");\n        if (remoteUserIDs.size() == 0) {\n            System.out.println(\"  none\");\n        }\n        for (SteamID steamIDUser : remoteUserIDs.values()) {\n            System.out.println(\"  \" + steamIDUser.getAccountID());\n        }\n    } else if (input.startsWith(AUTH_TICKET)) {\n        String authCmd=input.substring(AUTH_TICKET.length());\n        switch(authCmd) {\n            case \"get\":\n                getAuthTicket();\n                break;\n            case \"cancel\":\n                cancelAuthTicket();\n                break;\n            case \"send\":\n                broadcastAuthTicket();\n                break;\n            case \"end\":\n                endAuthSession();\n                break;\n        }\n    }\n    friends.processInput(input);\n}\n\nprivate SteamID getSteamIDFromID(String id) {\n    int parsedID=Integer.parseInt(id);\n    SteamID steamID=null;\n    if (remoteUserIDs.containsKey(parsedID)) {\n        steamID=remoteUserIDs.get(parsedID);\n    } else if (friends.isFriendAccountID(parsedID)) {\n        steamID=friends.getFriendSteamID(parsedID);\n    } else {\n        System.out.println(\"Error: unknown userID \" + parsedID + \" (no friend, not connected)\");\n    }\n    return steamID;\n}"
    },
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver=null;\n    if (remoteUserIDs.containsKey(receiverID)) {\n      steamIDReceiver=remoteUserIDs.get(receiverID);\n    }\n else     if (friends.isFriendAccountID(receiverID)) {\n      steamIDReceiver=friends.getFriendSteamID(receiverID);\n    }\n else {\n      System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n    }\n    if (steamIDReceiver != null) {\n      packetSendBuffer.clear();\n      for (int i=1; i < params.length; i++) {\n        byte[] bytes=params[i].getBytes(messageCharset);\n        if (i > 1) {\n          packetSendBuffer.put((byte)0x20);\n        }\n        packetSendBuffer.put(bytes);\n      }\n      packetSendBuffer.flip();\n      networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  }\n else   if (input.startsWith(\"p2p close \")) {\n    int remoteID=Integer.parseInt(input.substring(\"p2p close \".length()));\n    SteamID steamIDRemote=null;\n    if (remoteUserIDs.containsKey(remoteID)) {\n      steamIDRemote=remoteUserIDs.get(remoteID);\n    }\n else {\n      System.out.println(\"Error: unknown remote ID \" + remoteID + \" (not connected)\");\n    }\n    if (steamIDRemote != null) {\n      networking.closeP2PSessionWithUser(steamIDRemote);\n      unregisterRemoteSteamID(steamIDRemote);\n    }\n  }\n else   if (input.equals(\"p2p list\")) {\n    System.out.println(\"P2P connected users:\");\n    if (remoteUserIDs.size() == 0) {\n      System.out.println(\"  none\");\n    }\n    for (    SteamID steamIDUser : remoteUserIDs.values()) {\n      System.out.println(\"  \" + steamIDUser.getAccountID());\n    }\n  }\n else   if (input.startsWith(\"auth ticket \")) {\n    String authCmd=input.substring(\"auth ticket \".length());\n    if (authCmd.equals(\"get\")) {\n      getAuthTicket();\n    }\n else     if (authCmd.equals(\"cancel\")) {\n      cancelAuthTicket();\n    }\n else     if (authCmd.equals(\"send\")) {\n      broadcastAuthTicket();\n    }\n else     if (authCmd.equals(\"end\")) {\n      endAuthSession();\n    }\n  }\n  friends.processInput(input);\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamNetworkingTest.java",
    "Start": 5088,
    "Stop": 7338,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
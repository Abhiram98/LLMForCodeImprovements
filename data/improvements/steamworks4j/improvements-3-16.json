{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use switch statement for better readability",
                "Change_Diff": "Code block with all the if-else statements replaced with a switch statement",
                "Description": "Instead of using a chain of if-else statements, a switch statement can be used to make the code more readable and easier to manage. The switch can be applied on the first word of the input command.",
                "Start": 2,
                "End": 128
            },
            {
                "Improvement": "Extract common code into a method",
                "Change_Diff": "Code block with all the ID extraction replaced with a method call",
                "Description": "The ID extraction from the input command is a common code that is being used in multiple places. This can be extracted into a separate method for better code reuse and maintenance.",
                "Start": 10,
                "End": 128
            }
        ],
        "Final code": "private long getIdFromCommand(String command, String input) {\n    return Long.parseLong(input.substring(command.length()),16);\n}\n\n@Override protected void processInput(String input) throws SteamException {\n  String command = input.split(\" \")[0];\n  switch (command) {\n    case \"lobby list\":\n      listLobbies();\n      break;\n    case \"lobby request\":\n    case \"lobby create\":\n    case \"lobby join\":\n    case \"lobby leave\":\n    case \"lobby invite\":\n    case \"lobby data\":\n    case \"lobby chat\":\n    case \"get lobby member data\":\n    case \"set lobby member data\":\n      long id = getIdFromCommand(command, input);\n      // rest of the code\n      break;\n    default:\n      friends.processInput(input);\n      break;\n  }\n}"
    },
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.equals(\"lobby list\")) {\n    listLobbies();\n  }\n else   if (input.startsWith(\"lobby request \")) {\n    String[] parameters=input.substring(\"lobby request \".length()).split(\" \");\n    int limit=Integer.parseInt(parameters[0]);\n    System.out.println(\"  - requesting up to \" + limit + \" lobbies\");\n    matchmaking.addRequestLobbyListResultCountFilter(limit);\n    matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison.Equal);\n    matchmaking.requestLobbyList();\n  }\n else   if (input.startsWith(\"lobby create \")) {\n    int maxMembers=Integer.parseInt(input.substring(\"lobby create \".length()));\n    System.out.println(\"  creating lobby for \" + maxMembers + \" players.\");\n    matchmaking.createLobby(SteamMatchmaking.LobbyType.Public,maxMembers);\n  }\n else   if (input.startsWith(\"lobby join \")) {\n    long id=Long.parseLong(input.substring(\"lobby join \".length()),16);\n    if (lobbies.containsKey(id)) {\n      System.out.println(\"  joining lobby \" + Long.toHexString(id));\n      matchmaking.joinLobby(lobbies.get(id));\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby leave \")) {\n    long id=Long.parseLong(input.substring(\"lobby leave \".length()),16);\n    if (lobbies.containsKey(id)) {\n      System.out.println(\"  leaving lobby \" + Long.toHexString(id));\n      matchmaking.leaveLobby(lobbies.get(id));\n      lobbies.remove(id);\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby invite \")) {\n    String[] ids=input.substring(\"lobby invite \".length()).split(\" \");\n    if (ids.length == 2) {\n      long lobbyID=Long.parseLong(ids[0],16);\n      int playerAccountID=Integer.parseInt(ids[1]);\n      if (lobbies.containsKey(lobbyID)) {\n        System.out.println(\"  inviting player \" + playerAccountID + \" to lobby \"+ Long.toHexString(lobbyID));\n        if (friends.isFriendAccountID(playerAccountID)) {\n          matchmaking.inviteUserToLobby(lobbies.get(lobbyID),friends.getFriendSteamID(playerAccountID));\n        }\n else {\n          System.err.println(\"No player (friend) found: \" + playerAccountID);\n        }\n      }\n else {\n        System.err.println(\"No lobby found: \" + Long.toHexString(lobbyID));\n      }\n    }\n else {\n      System.err.println(\"Expecting: 'lobby invite <lobbyID> <userID>'\");\n    }\n  }\n else   if (input.startsWith(\"lobby data \")) {\n    long id=Long.parseLong(input.substring(\"lobby data \".length()),16);\n    if (lobbies.containsKey(id)) {\n      SteamID steamIDLobby=lobbies.get(id);\n      int count=matchmaking.getLobbyDataCount(steamIDLobby);\n      System.out.println(\"  \" + count + \" lobby data for \"+ Long.toHexString(id));\n      SteamMatchmakingKeyValuePair pair=new SteamMatchmakingKeyValuePair();\n      for (int i=0; i < count; i++) {\n        if (matchmaking.getLobbyDataByIndex(steamIDLobby,i,pair)) {\n          System.out.println(\"  - \" + pair.getKey() + \" : \"+ pair.getValue());\n        }\n else {\n          System.err.println(\"Error retrieving lobby data #\" + i);\n        }\n      }\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby chat \")) {\n    String[] content=input.substring(\"lobby chat \".length()).split(\" \");\n    if (content.length == 2) {\n      long lobbyID=Long.parseLong(content[0],16);\n      String message=content[1];\n      if (lobbies.containsKey(lobbyID)) {\n        System.out.println(\"  sending message \\\"\" + message + \"\\\"\");\n        matchmaking.sendLobbyChatMsg(lobbies.get(lobbyID),message);\n      }\n else {\n        System.err.println(\"No lobby found: \" + Long.toHexString(lobbyID));\n      }\n    }\n else {\n      System.err.println(\"Expecting: 'lobby chat <lobbyID> <message>'\");\n    }\n  }\n else   if (input.startsWith(\"get lobby member data \")) {\n    String[] content=input.substring(\"get lobby member data \".length()).split(\" \");\n    if (content.length == 3) {\n      SteamID lobbyId=SteamID.createFromNativeHandle(Long.parseLong(content[0],16));\n      SteamID userId=SteamID.createFromNativeHandle(Long.parseLong(content[1]));\n      String key=content[2];\n      String value=matchmaking.getLobbyMemberData(lobbyId,userId,key);\n      System.out.println(String.format(\"Member data for userId:%s in lobbyId:%s for key:%s has value:%s\",userId.toString(),lobbyId.toString(),key,value));\n    }\n else {\n      System.out.println(\"Expecting: 'get lobby member data <lobbyId> <userId> <key>'\");\n    }\n  }\n else   if (input.startsWith(\"set lobby member data \")) {\n    String[] content=input.substring(\"set lobby member data \".length()).split(\" \");\n    if (content.length == 3) {\n      SteamID lobbyId=SteamID.createFromNativeHandle(Long.parseLong(content[0],16));\n      String key=content[1];\n      String value=content[2];\n      matchmaking.setLobbyMemberData(lobbyId,key,value);\n    }\n else {\n      System.out.println(\"Expecting: 'set lobby member data <lobbyId> <key> <value>'\");\n    }\n  }\n  friends.processInput(input);\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamMatchmakingTest.java",
    "Start": 6065,
    "Stop": 11085,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace repetitive code with helper method",
                "Change_Diff": "-int receiverID=Integer.parseInt(params[0]);\n-SteamID steamIDReceiver=null;\n-if (remoteUserIDs.containsKey(receiverID)) {\n-steamIDReceiver=remoteUserIDs.get(receiverID);\n-}\n-else if (friends.isFriendAccountID(receiverID)) {\n-steamIDReceiver=friends.getFriendSteamID(receiverID);\n-}\n-else {\n-System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n-}\n+SteamID steamIDReceiver = getSteamID(Integer.parseInt(params[0]));",
                "Description": "The condition checks and operations for retrieving SteamID are repetitive and can be abstracted into a helper method. This would make the code more maintainable and readable.",
                "Start": 4,
                "End": 17
            },
            {
                "Improvement": "Use try-catch block for parsing integers",
                "Change_Diff": "- int receiverID=Integer.parseInt(params[0]);\n+ int receiverID;\n+ try {\n+    receiverID = Integer.parseInt(params[0]);\n+ } catch (NumberFormatException e) {\n+    System.out.println(\"Error: Invalid input format\");\n+    return;\n+ }",
                "Description": "The code currently assumes that the input can be parsed as an integer without any error handling. Encapsulating the parsing in a try-catch block would ensure that the program doesn't crash in case of parsing errors.",
                "Start": 4,
                "End": 4
            }
        ],
        "Final code": "protected void processInput(String input) throws SteamException {\nif (input.startsWith(\"p2p send \")) {\n  String[] params=input.substring(\"p2p send \".length()).split(\" \");\nint receiverID;\ntry {\n  receiverID = Integer.parseInt(params[0]);\n} catch (NumberFormatException e) {\n  System.out.println(\"Error: Invalid input format\");\n  return;\n}\nSteamID steamIDReceiver = getSteamID(receiverID);\nif (steamIDReceiver != null) {\n  packetSendBuffer.clear();\n  for (int i=1; i < params.length; i++) {\n    byte[] bytes=params[i].getBytes(messageCharset);\n    if (i > 1) {\n      packetSendBuffer.put((byte)0x20);\n    }\n    packetSendBuffer.put(bytes);\n  }\n  packetSendBuffer.flip();\n  networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n}\n} else if (input.startsWith(\"p2p close \")) {\n  int remoteID;\n  try {\n    remoteID = Integer.parseInt(input.substring(\"p2p close \".length()));\n  } catch (NumberFormatException e) {\n    System.out.println(\"Error: Invalid input format\");\n    return;\n  }\n  SteamID steamIDRemote = getSteamID(remoteID);\n  if (steamIDRemote != null) {\n    networking.closeP2PSessionWithUser(steamIDRemote);\n    unregisterRemoteSteamID(steamIDRemote);\n  }\n} else if (input.equals(\"p2p list\")) {\n  System.out.println(\"P2P connected users:\");\n  if (remoteUserIDs.size() == 0) {\n    System.out.println(\"  none\");\n  }\n  for (SteamID steamIDUser : remoteUserIDs.values()) {\n    System.out.println(\"  \" + steamIDUser.getAccountID());\n  }\n} else if (input.startsWith(\"auth ticket \")) {\n  String authCmd=input.substring(\"auth ticket \".length());\n  if (authCmd.equals(\"get\")) {\n    getAuthTicket();\n  } else if (authCmd.equals(\"cancel\")) {\n    cancelAuthTicket();\n  } else if (authCmd.equals(\"send\")) {\n    broadcastAuthTicket();\n  } else if (authCmd.equals(\"end\")) {\n    endAuthSession();\n  }\n}\nfriends.processInput(input);\n}\n\nprivate SteamID getSteamID(int id) {\n  SteamID steamID=null;\n  if (remoteUserIDs.containsKey(id)) {\n    steamID=remoteUserIDs.get(id);\n  }\n  else if (friends.isFriendAccountID(id)) {\n    steamID=friends.getFriendSteamID(id);\n  }\n  else {\n    System.out.println(\"Error: unknown userID \" + id + \" (no friend, not connected)\");\n  }\n  return steamID;\n}"
    },
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver=null;\n    if (remoteUserIDs.containsKey(receiverID)) {\n      steamIDReceiver=remoteUserIDs.get(receiverID);\n    }\n else     if (friends.isFriendAccountID(receiverID)) {\n      steamIDReceiver=friends.getFriendSteamID(receiverID);\n    }\n else {\n      System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n    }\n    if (steamIDReceiver != null) {\n      packetSendBuffer.clear();\n      for (int i=1; i < params.length; i++) {\n        byte[] bytes=params[i].getBytes(messageCharset);\n        if (i > 1) {\n          packetSendBuffer.put((byte)0x20);\n        }\n        packetSendBuffer.put(bytes);\n      }\n      packetSendBuffer.flip();\n      networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  }\n else   if (input.startsWith(\"p2p close \")) {\n    int remoteID=Integer.parseInt(input.substring(\"p2p close \".length()));\n    SteamID steamIDRemote=null;\n    if (remoteUserIDs.containsKey(remoteID)) {\n      steamIDRemote=remoteUserIDs.get(remoteID);\n    }\n else {\n      System.out.println(\"Error: unknown remote ID \" + remoteID + \" (not connected)\");\n    }\n    if (steamIDRemote != null) {\n      networking.closeP2PSessionWithUser(steamIDRemote);\n      unregisterRemoteSteamID(steamIDRemote);\n    }\n  }\n else   if (input.equals(\"p2p list\")) {\n    System.out.println(\"P2P connected users:\");\n    if (remoteUserIDs.size() == 0) {\n      System.out.println(\"  none\");\n    }\n    for (    SteamID steamIDUser : remoteUserIDs.values()) {\n      System.out.println(\"  \" + steamIDUser.getAccountID());\n    }\n  }\n else   if (input.startsWith(\"auth ticket \")) {\n    String authCmd=input.substring(\"auth ticket \".length());\n    if (authCmd.equals(\"get\")) {\n      getAuthTicket();\n    }\n else     if (authCmd.equals(\"cancel\")) {\n      cancelAuthTicket();\n    }\n else     if (authCmd.equals(\"send\")) {\n      broadcastAuthTicket();\n    }\n else     if (authCmd.equals(\"end\")) {\n      endAuthSession();\n    }\n  }\n  friends.processInput(input);\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamNetworkingTest.java",
    "Start": 5088,
    "Stop": 7338,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
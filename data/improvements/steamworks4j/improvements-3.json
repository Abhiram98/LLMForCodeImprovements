{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Extract common logic into separate methods",
                "Change_Diff": "-        if (input.startsWith(\"lobby request \")) {\n+        if (isLobbyRequest(input)) {\n             String[] parameters=input.substring(\"lobby request \".length()).split(\" \");\n             int limit=Integer.parseInt(parameters[0]);\n             System.out.println(\"  - requesting up to \" + limit + \" lobbies\");\n             matchmaking.addRequestLobbyListResultCountFilter(limit);\n             matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison.Equal);\n             matchmaking.requestLobbyList();",
                "Description": "The `processInput` method contains multiple blocks of code that can be extracted into separate methods to improve readability and maintainability.",
                "Start": 10,
                "End": 178
            },
            {
                "Improvement": "Use a switch statement instead of multiple if statements",
                "Change_Diff": "-  if (input.equals(\"lobby list\")) {\n-    listLobbies();\n-  }\n-  else if (input.startsWith(\"lobby request \")) {\n-    String[] parameters=input.substring(\"lobby request \".length()).split(\" \");\n-    int limit=Integer.parseInt(parameters[0]);\n-    System.out.println(\"  - requesting up to \" + limit + \" lobbies\");\n-    matchmaking.addRequestLobbyListResultCountFilter(limit);\n-    matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison.Equal);\n-    matchmaking.requestLobbyList();\n-  }\n-  else if (input.startsWith(\"lobby create \")) {\n+  switch (input) {\n+    case \"lobby list\":\n+      listLobbies();\n+      break;\n+    case String lobbyRequest when lobbyRequest.startsWith(\"lobby request \"):\n+      handleLobbyRequest(lobbyRequest);\n+      break;\n+    case String lobbyCreate when lobbyCreate.startsWith(\"lobby create \"):\n       int maxMembers=Integer.parseInt(input.substring(\"lobby create \".length()));\n       System.out.println(\"  creating lobby for \" + maxMembers + \" players.\");\n       matchmaking.createLobby(SteamMatchmaking.LobbyType.Public,maxMembers);\n       break;",
                "Description": "The multiple if statements used to check the input can be replaced with a switch statement, which improves readability and makes it easier to add new cases in the future.",
                "Start": 9,
                "End": 179
            },
            {
                "Improvement": "Use method references instead of lambda expressions",
                "Change_Diff": "-    matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison.Equal);\n+    matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison::Equal);",
                "Description": "Where possible, use method references instead of lambda expressions to improve readability and reduce code complexity.",
                "Start": 15,
                "End": 15
            }
        ],
        "Final code": "@Override\nprotected void processInput(String input) throws SteamException {\n    switch (input) {\n        case \"lobby list\":\n            listLobbies();\n            break;\n        case String lobbyRequest when lobbyRequest.startsWith(\"lobby request \"):\n            handleLobbyRequest(lobbyRequest);\n            break;\n        case String lobbyCreate when lobbyCreate.startsWith(\"lobby create \"):\n            handleLobbyCreate(lobbyCreate);\n            break;\n        case String lobbyJoin when lobbyJoin.startsWith(\"lobby join \"):\n            handleLobbyJoin(lobbyJoin);\n            break;\n        case String lobbyLeave when lobbyLeave.startsWith(\"lobby leave \"):\n            handleLobbyLeave(lobbyLeave);\n            break;\n        case String lobbyInvite when lobbyInvite.startsWith(\"lobby invite \"):\n            handleLobbyInvite(lobbyInvite);\n            break;\n        case String lobbyData when lobbyData.startsWith(\"lobby data \"):\n            handleLobbyData(lobbyData);\n            break;\n        case String lobbyChat when lobbyChat.startsWith(\"lobby chat \"):\n            handleLobbyChat(lobbyChat);\n            break;\n        case String getMemberData when getMemberData.startsWith(\"get lobby member data \"):\n            handleGetLobbyMemberData(getMemberData);\n            break;\n        case String setMemberData when setMemberData.startsWith(\"set lobby member data \"):\n            handleSetLobbyMemberData(setMemberData);\n            break;\n        default:\n            System.err.println(\"Invalid input: \" + input);\n            break;\n    }\n    friends.processInput(input);\n}"
    }],
    "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.equals(\"lobby list\")) {\n    listLobbies();\n  }\n else   if (input.startsWith(\"lobby request \")) {\n    String[] parameters=input.substring(\"lobby request \".length()).split(\" \");\n    int limit=Integer.parseInt(parameters[0]);\n    System.out.println(\"  - requesting up to \" + limit + \" lobbies\");\n    matchmaking.addRequestLobbyListResultCountFilter(limit);\n    matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison.Equal);\n    matchmaking.requestLobbyList();\n  }\n else   if (input.startsWith(\"lobby create \")) {\n    int maxMembers=Integer.parseInt(input.substring(\"lobby create \".length()));\n    System.out.println(\"  creating lobby for \" + maxMembers + \" players.\");\n    matchmaking.createLobby(SteamMatchmaking.LobbyType.Public,maxMembers);\n  }\n else   if (input.startsWith(\"lobby join \")) {\n    long id=Long.parseLong(input.substring(\"lobby join \".length()),16);\n    if (lobbies.containsKey(id)) {\n      System.out.println(\"  joining lobby \" + Long.toHexString(id));\n      matchmaking.joinLobby(lobbies.get(id));\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby leave \")) {\n    long id=Long.parseLong(input.substring(\"lobby leave \".length()),16);\n    if (lobbies.containsKey(id)) {\n      System.out.println(\"  leaving lobby \" + Long.toHexString(id));\n      matchmaking.leaveLobby(lobbies.get(id));\n      lobbies.remove(id);\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby invite \")) {\n    String[] ids=input.substring(\"lobby invite \".length()).split(\" \");\n    if (ids.length == 2) {\n      long lobbyID=Long.parseLong(ids[0],16);\n      int playerAccountID=Integer.parseInt(ids[1]);\n      if (lobbies.containsKey(lobbyID)) {\n        System.out.println(\"  inviting player \" + playerAccountID + \" to lobby \"+ Long.toHexString(lobbyID));\n        if (friends.isFriendAccountID(playerAccountID)) {\n          matchmaking.inviteUserToLobby(lobbies.get(lobbyID),friends.getFriendSteamID(playerAccountID));\n        }\n else {\n          System.err.println(\"No player (friend) found: \" + playerAccountID);\n        }\n      }\n else {\n        System.err.println(\"No lobby found: \" + Long.toHexString(lobbyID));\n      }\n    }\n else {\n      System.err.println(\"Expecting: 'lobby invite <lobbyID> <userID>'\");\n    }\n  }\n else   if (input.startsWith(\"lobby data \")) {\n    long id=Long.parseLong(input.substring(\"lobby data \".length()),16);\n    if (lobbies.containsKey(id)) {\n      SteamID steamIDLobby=lobbies.get(id);\n      int count=matchmaking.getLobbyDataCount(steamIDLobby);\n      System.out.println(\"  \" + count + \" lobby data for \"+ Long.toHexString(id));\n      SteamMatchmakingKeyValuePair pair=new SteamMatchmakingKeyValuePair();\n      for (int i=0; i < count; i++) {\n        if (matchmaking.getLobbyDataByIndex(steamIDLobby,i,pair)) {\n          System.out.println(\"  - \" + pair.getKey() + \" : \"+ pair.getValue());\n        }\n else {\n          System.err.println(\"Error retrieving lobby data #\" + i);\n        }\n      }\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby chat \")) {\n    String[] content=input.substring(\"lobby chat \".length()).split(\" \");\n    if (content.length == 2) {\n      long lobbyID=Long.parseLong(content[0],16);\n      String message=content[1];\n      if (lobbies.containsKey(lobbyID)) {\n        System.out.println(\"  sending message \\\"\" + message + \"\\\"\");\n        matchmaking.sendLobbyChatMsg(lobbies.get(lobbyID),message);\n      }\n else {\n        System.err.println(\"No lobby found: \" + Long.toHexString(lobbyID));\n      }\n    }\n else {\n      System.err.println(\"Expecting: 'lobby chat <lobbyID> <message>'\");\n    }\n  }\n else   if (input.startsWith(\"get lobby member data \")) {\n    String[] content=input.substring(\"get lobby member data \".length()).split(\" \");\n    if (content.length == 3) {\n      SteamID lobbyId=SteamID.createFromNativeHandle(Long.parseLong(content[0],16));\n      SteamID userId=SteamID.createFromNativeHandle(Long.parseLong(content[1]));\n      String key=content[2];\n      String value=matchmaking.getLobbyMemberData(lobbyId,userId,key);\n      System.out.println(String.format(\"Member data for userId:%s in lobbyId:%s for key:%s has value:%s\",userId.toString(),lobbyId.toString(),key,value));\n    }\n else {\n      System.out.println(\"Expecting: 'get lobby member data <lobbyId> <userId> <key>'\");\n    }\n  }\n else   if (input.startsWith(\"set lobby member data \")) {\n    String[] content=input.substring(\"set lobby member data \".length()).split(\" \");\n    if (content.length == 3) {\n      SteamID lobbyId=SteamID.createFromNativeHandle(Long.parseLong(content[0],16));\n      String key=content[1];\n      String value=content[2];\n      matchmaking.setLobbyMemberData(lobbyId,key,value);\n    }\n else {\n      System.out.println(\"Expecting: 'set lobby member data <lobbyId> <key> <value>'\");\n    }\n  }\n  friends.processInput(input);\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamMatchmakingTest.java",
    "Start": 6065,
    "Stop": 11085,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processInput"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into private methods",
                "Change_Diff": "- if (digitalActionHandle != null) {\n-      controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n-      if (digitalActionData.getActive() && digitalActionData.getState()) {\n-        System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle));\n-      }\n-    }\n-    if (analogActionHandle != null) {\n-      controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n-      if (analogActionData.getActive()) {\n-        float x=analogActionData.getX();\n-        float y=analogActionData.getY();\n-        SteamController.SourceMode mode=analogActionData.getMode();\n-        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n-          System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name());\n-        }\n-      }\n-    }\n+ processDigitalAction(handle);\n+ processAnalogAction(handle);",
                "Description": "The code for processing digital and analog action data is mostly the same, except for the action handle and action data used. By extracting this code into private methods, we can reduce code repetition and improve readability.",
                "Start": 6,
                "End": 22
            },
            {
                "Improvement": "Add null checks at the beginning of the method",
                "Change_Diff": "- if (setHandle == null || getNativeHandle(setHandle) == 0) {\n-    return;\n-  }\n+ if (setHandle == null) throw new NullPointerException(\"setHandle is null\");\n+ if (getNativeHandle(setHandle) == 0) throw new IllegalArgumentException(\"Invalid set handle\");",
                "Description": "Instead of waiting until the loop begins to check if `setHandle` is null or if `getNativeHandle(setHandle)` is 0, move these checks to the beginning of the method for better performance.",
                "Start": 2,
                "End": 4
            }
        ],
        "Final code": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null) throw new NullPointerException(\"setHandle is null\");\n  if (getNativeHandle(setHandle) == 0) throw new IllegalArgumentException(\"Invalid set handle\");\n\n  for (int i=0; i < numControllers; i++) {\n    SteamControllerHandle handle=controllerHandles[i];\n    controller.activateActionSet(handle,setHandle);\n    processDigitalAction(handle);\n    processAnalogAction(handle);\n  }\n}\n\nprivate void processDigitalAction(SteamControllerHandle handle) {\n  if (digitalActionHandle != null) {\n    controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n    if (digitalActionData.getActive() && digitalActionData.getState()) {\n      System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle));\n    }\n  }\n}\n\nprivate void processAnalogAction(SteamControllerHandle handle) {\n  if (analogActionHandle != null) {\n    controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n    if (analogActionData.getActive()) {\n      float x=analogActionData.getX();\n      float y=analogActionData.getY();\n      SteamController.SourceMode mode=analogActionData.getMode();\n      if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n        System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name());\n      }\n    }\n  }\n}"
    },
    "Old_Method": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null || getNativeHandle(setHandle) == 0) {\n    return;\n  }\n  for (int i=0; i < numControllers; i++) {\n    SteamControllerHandle handle=controllerHandles[i];\n    controller.activateActionSet(handle,setHandle);\n    if (digitalActionHandle != null) {\n      controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n      if (digitalActionData.getActive() && digitalActionData.getState()) {\n        System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle));\n      }\n    }\n    if (analogActionHandle != null) {\n      controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n      if (analogActionData.getActive()) {\n        float x=analogActionData.getX();\n        float y=analogActionData.getY();\n        SteamController.SourceMode mode=analogActionData.getMode();\n        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n          System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name());\n        }\n      }\n    }\n  }\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamControllerTest.java",
    "Start": 1216,
    "Stop": 3060,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processUpdate"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a method",
                "Change_Diff": "- if (digitalActionHandle != null) { ... } \n- if (analogActionHandle != null) { ... } \n+ processActionData(digitalActionHandle, digitalActionData);\n+ processActionData(analogActionHandle, analogActionData);",
                "Description": "The process of getting action data and printing it if active is repeated for both digital and analog actions. This can be extracted into a separate method to reduce code duplication.",
                "Start": 7,
                "End": 26
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int i=0; i < numControllers; i++) { ... } \n+ for (SteamControllerHandle handle : controllerHandles) { ... }",
                "Description": "Instead of using a traditional for loop to iterate over `controllerHandles`, use an enhanced for loop.",
                "Start": 5,
                "End": 26
            }
        ],
        "Final code": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null || getNativeHandle(setHandle) == 0) {\n    return;\n  }\n  for (SteamControllerHandle handle : controllerHandles) {\n    controller.activateActionSet(handle,setHandle);\n    processActionData(handle, digitalActionHandle, digitalActionData);\n    processActionData(handle, analogActionHandle, analogActionData);\n  }\n}\n\nprivate void processActionData(SteamControllerHandle handle, Object actionHandle, ActionData actionData) {\n  if (actionHandle != null) {\n    controller.getActionData(handle,actionHandle,actionData);\n    if (actionData.getActive()) {\n      if (actionData instanceof DigitalActionData) {\n        DigitalActionData data = (DigitalActionData) actionData;\n        if (data.getState()) {\n          System.out.println(\"  digital action: \" + getNativeHandle(actionHandle));\n        }\n      } else if (actionData instanceof AnalogActionData) {\n        AnalogActionData data = (AnalogActionData) actionData;\n        float x = data.getX();\n        float y = data.getY();\n        SteamController.SourceMode mode = data.getMode();\n        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n          System.out.println(\"  analog action: \" + x + \", \" + y + \", \" + mode.name());\n        }\n      }\n    }\n  }\n}"
    },
    "Old_Method": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null || getNativeHandle(setHandle) == 0) {\n    return;\n  }\n  for (int i=0; i < numControllers; i++) {\n    SteamControllerHandle handle=controllerHandles[i];\n    controller.activateActionSet(handle,setHandle);\n    if (digitalActionHandle != null) {\n      controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n      if (digitalActionData.getActive() && digitalActionData.getState()) {\n        System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle));\n      }\n    }\n    if (analogActionHandle != null) {\n      controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n      if (analogActionData.getActive()) {\n        float x=analogActionData.getX();\n        float y=analogActionData.getY();\n        SteamController.SourceMode mode=analogActionData.getMode();\n        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n          System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name());\n        }\n      }\n    }\n  }\n}\n",
    "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamControllerTest.java",
    "Start": 1216,
    "Stop": 3060,
    "Project_Name": "data/projects/steamworks4j",
    "Method_Name": "processUpdate"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use constants for string literals",
            "Change_Diff": "- println(\"全局 onResponse: \" + result.getStatus());\n+ println(GLOBAL_ON_RESPONSE + result.getStatus());\n\n- println(\"全局 onComplete: \" + state);\n+ println(GLOBAL_ON_COMPLETE + state);\n\n- println(\"全局 onException: \" + error.getMessage());\n+ println(GLOBAL_ON_EXCEPTION + error.getMessage());\n\n- println(\"单例 onResponse: \" + result.getStatus());\n+ println(INSTANCE_ON_RESPONSE + result.getStatus());\n\n- println(\"单例 onComplete: \" + state);\n+ println(INSTANCE_ON_COMPLETE + state);\n\n- println(\"单例 onException: \" + error.getMessage());\n+ println(INSTANCE_ON_EXCEPTION + error.getMessage());",
            "Description": "Instead of using string literals such as \"全局 onResponse: \", \"全局 onComplete: \", etc., directly in the code, define them as constants. This will make code maintenance easier if the string values need to be changed in the future.",
            "Start": 3,
            "End": 29
        }],
        "Final code": "@Test public void testGlobalCallback(){\n  final String GLOBAL_ON_RESPONSE = \"全局 onResponse: \";\n  final String GLOBAL_ON_COMPLETE = \"全局 onComplete: \";\n  final String GLOBAL_ON_EXCEPTION = \"全局 onException: \";\n  final String INSTANCE_ON_RESPONSE = \"单例 onResponse: \";\n  final String INSTANCE_ON_COMPLETE = \"单例 onComplete: \";\n  final String INSTANCE_ON_EXCEPTION = \"单例 onException: \";\n\n  HTTP http=HTTP.builder().responseListener((  HttpTask<?> task,  HttpResult result) -> {\n    println(GLOBAL_ON_RESPONSE + result.getStatus());\n    return true;\n  }\n).completeListener((  HttpTask<?> task,  HttpResult.State state) -> {\n    println(GLOBAL_ON_COMPLETE + state);\n    return true;\n  }\n).exceptionListener((  HttpTask<?> task,  IOException error) -> {\n    println(GLOBAL_ON_EXCEPTION + error.getMessage());\n    return false;\n  }\n).build();\n  http.async(\"http://www.baidu.com\").setOnResponse((  HttpResult result) -> {\n    println(INSTANCE_ON_RESPONSE + result.getStatus());\n  }\n).setOnComplete((  HttpResult.State state) -> {\n    println(INSTANCE_ON_COMPLETE + state);\n  }\n).setOnException((  IOException error) -> {\n    println(INSTANCE_ON_EXCEPTION + error.getMessage());\n  }\n).get();\n  sleep(2000);\n}"
    },
    "Old_Method": "@Test public void testGlobalCallback(){\n  HTTP http=HTTP.builder().responseListener((  HttpTask<?> task,  HttpResult result) -> {\n    println(\"全局 onResponse: \" + result.getStatus());\n    return true;\n  }\n).completeListener((  HttpTask<?> task,  HttpResult.State state) -> {\n    println(\"全局 onComplete: \" + state);\n    return true;\n  }\n).exceptionListener((  HttpTask<?> task,  IOException error) -> {\n    println(\"全局 onException: \" + error.getMessage());\n    return false;\n  }\n).build();\n  http.async(\"http://www.baidu.com\").setOnResponse((  HttpResult result) -> {\n    println(\"单例 onResponse: \" + result.getStatus());\n  }\n).setOnComplete((  HttpResult.State state) -> {\n    println(\"单例 onComplete: \" + state);\n  }\n).setOnException((  IOException error) -> {\n    println(\"单例 onException: \" + error.getMessage());\n  }\n).get();\n  sleep(2000);\n}\n",
    "File_Path": "okhttps/okhttps/src/test/java/cn/zhxu/okhttps/ListenerTests.java",
    "Start": 151,
    "Stop": 1367,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "testGlobalCallback"
}
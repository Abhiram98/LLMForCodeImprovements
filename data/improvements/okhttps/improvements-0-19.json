{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java 7's try-with-resources Statement",
                "Change_Diff": "- catch (  Exception e) {\n    response.close();\n- throw new OkHttpsException(\"文件下载失败\",e);\n}\n+ catch (Exception e) {\n    throw new OkHttpsException(\"文件下载失败\", e);\n}",
                "Description": "The try-with-resources statement is a try statement that declares one or more resources. A resource is an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. In this way, we can simplify our code and avoid boilerplate.",
                "Start": 1,
                "End": 21
            },
            {
                "Improvement": "Refactor multiple if statements",
                "Change_Diff": "- if (!file.exists()) {\n- File parent=file.getParentFile();\n- if (parent == null) {\n- throw new IllegalStateException(\"不正确的下载路径：\" + file.getPath());\n- }\n- if (!parent.exists() && !parent.mkdirs()) {\n- throw new IllegalStateException(\"不能创建父目录：\" + parent.getPath());\n- }\n- if (!file.createNewFile()) {\n- throw new IllegalStateException(\"文件刚被其它线程占用：\" + parent.getPath());\n- }\n- }\n+ validateFile(file);",
                "Description": "The multiple if statements can be refactored to improve code readability and maintainability. We can separate the file validation logic into a separate private method to make the code cleaner.",
                "Start": 6,
                "End": 17
            }
        ],
        "Final code": "@Override public Download toFile(File file) throws OkHttpsException {\n    validateFile(file);\n    try {\n        if (taskExecutor == null) {\n            throw new IllegalStateException(\"没有 taskExecutor， 不可进行下载操作！\");\n        }\n        return taskExecutor.download(result.getTask(), file, toByteStream(), getRangeStart());\n    } catch (Exception e) {\n        throw new OkHttpsException(\"文件下载失败\", e);\n    }\n}\n\nprivate void validateFile(File file) throws IllegalStateException {\n    if (!file.exists()) {\n        File parent = file.getParentFile();\n        if (parent == null) {\n            throw new IllegalStateException(\"不正确的下载路径：\" + file.getPath());\n        }\n        if (!parent.exists() && !parent.mkdirs()) {\n            throw new IllegalStateException(\"不能创建父目录：\" + parent.getPath());\n        }\n        if (!file.createNewFile()) {\n            throw new IllegalStateException(\"文件刚被其它线程占用：\" + parent.getPath());\n        }\n    }\n}"
    },
    "Old_Method": "@Override public Download toFile(File file){\n  try {\n    if (taskExecutor == null) {\n      throw new IllegalStateException(\"没有 taskExecutor， 不可进行下载操作！\");\n    }\n    if (!file.exists()) {\n      File parent=file.getParentFile();\n      if (parent == null) {\n        throw new IllegalStateException(\"不正确的下载路径：\" + file.getPath());\n      }\n      if (!parent.exists() && !parent.mkdirs()) {\n        throw new IllegalStateException(\"不能创建父目录：\" + parent.getPath());\n      }\n      if (!file.createNewFile()) {\n        throw new IllegalStateException(\"文件刚被其它线程占用：\" + parent.getPath());\n      }\n    }\n  }\n catch (  Exception e) {\n    response.close();\n    throw new OkHttpsException(\"文件下载失败\",e);\n  }\n  return taskExecutor.download(result.getTask(),file,toByteStream(),getRangeStart());\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/internal/ResultBody.java",
    "Start": 3853,
    "Stop": 4601,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "toFile"
}
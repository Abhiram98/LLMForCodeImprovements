{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce nested conditions",
                "Change_Diff": "- if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n+ if (bodyParams == null && files == null) return emptyRequestBody();",
                "Description": "Nested conditions can be hard to read and understand. We can reduce nested conditions by returning early and removing unnecessary conditions.",
                "Start": 2,
                "End": 27
            },
            {
                "Improvement": "Avoid null checks",
                "Change_Diff": "- if (bodyParams != null) {\n+ bodyParams.ifPresent(params -> {",
                "Description": "Null checks can lead to Null Pointer Exceptions. Instead, use Optional to avoid null checks.",
                "Start": 5,
                "End": 10
            },
            {
                "Improvement": "Replace null with Optional",
                "Change_Diff": "- if (value == null) return;\n+ if (Optional.ofNullable(value).isEmpty()) return;",
                "Description": "Use Optional instead of null for better null safety.",
                "Start": 12,
                "End": 12
            },
            {
                "Improvement": "Avoid checking requestBody == null twice",
                "Change_Diff": "- if (requestBody != null) {\n+ else if (requestBody != null) {",
                "Description": "The condition 'requestBody != null' is checked twice in the code. This redundancy can be avoided",
                "Start": 22,
                "End": 24
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  if (bodyParams == null && files == null) return emptyRequestBody();\n  if (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    bodyParams.ifPresent(params -> {\n      params.forEach((key,value) -> {\n        if (Optional.ofNullable(value).isEmpty()) return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  else if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  else if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.ifPresent(params -> {\n      params.forEach((key,value) -> {\n        if (Optional.ofNullable(value).isEmpty()) return;\n        builder.add(key,value.toString());\n      }\n);\n    }\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract Lambda expressions to separate methods",
                "Change_Diff": "- responseListener((  HttpTask<?> task,  HttpResult result) -> {\n+ responseListener(this::globalResponseListener),\n- completeListener((  HttpTask<?> task,  HttpResult.State state) -> {\n+ completeListener(this::globalCompleteListener),\n- exceptionListener((  HttpTask<?> task,  IOException error) -> {\n+ exceptionListener(this::globalExceptionListener)",
                "Description": "Having lambda expressions directly inside the method makes the code hard to read and understand. Extracting these expressions into separate methods would improve the readability and maintainability of the code.",
                "Start": 2,
                "End": 19
            },
            {
                "Improvement": "Extract String constants",
                "Change_Diff": "- println(\"全局 onResponse: \" + result.getStatus());\n+ println(GLOBAL_ON_RESPONSE + result.getStatus()),\n- println(\"全局 onComplete: \" + state);\n+ println(GLOBAL_ON_COMPLETE + state),\n- println(\"全局 onException: \" + error.getMessage());\n+ println(GLOBAL_ON_EXCEPTION + error.getMessage()),\n- println(\"单例 onResponse: \" + result.getStatus());\n+ println(SINGLE_ON_RESPONSE + result.getStatus()),\n- println(\"单例 onComplete: \" + state);\n+ println(SINGLE_ON_COMPLETE + state),\n- println(\"单例 onException: \" + error.getMessage());\n+ println(SINGLE_ON_EXCEPTION + error.getMessage())",
                "Description": "The String literals '全局 onResponse: ', '全局 onComplete: ', '全局 onException: ', '单例 onResponse: ', '单例 onComplete: ', '单例 onException: ' are used multiple times in the code. Extracting these as constants would make the code cleaner and easier to maintain.",
                "Start": 2,
                "End": 19
            }
        ],
        "Final code": "private static final String GLOBAL_ON_RESPONSE = \"全局 onResponse: \";\nprivate static final String GLOBAL_ON_COMPLETE = \"全局 onComplete: \";\nprivate static final String GLOBAL_ON_EXCEPTION = \"全局 onException: \";\nprivate static final String SINGLE_ON_RESPONSE = \"单例 onResponse: \";\nprivate static final String SINGLE_ON_COMPLETE = \"单例 onComplete: \";\nprivate static final String SINGLE_ON_EXCEPTION = \"单例 onException: \";\n\n@Test\npublic void testGlobalCallback() {\n    HTTP http=HTTP.builder()\n        .responseListener(this::globalResponseListener)\n        .completeListener(this::globalCompleteListener)\n        .exceptionListener(this::globalExceptionListener)\n        .build();\n\n    http.async(\"http://www.baidu.com\")\n        .setOnResponse(this::singleResponseListener)\n        .setOnComplete(this::singleCompleteListener)\n        .setOnException(this::singleExceptionListener)\n        .get();\n\n    sleep(2000);\n}\n\nprivate boolean globalResponseListener(HttpTask<?> task, HttpResult result) {\n    println(GLOBAL_ON_RESPONSE + result.getStatus());\n    return true;\n}\n\nprivate boolean globalCompleteListener(HttpTask<?> task, HttpResult.State state) {\n    println(GLOBAL_ON_COMPLETE + state);\n    return true;\n}\n\nprivate boolean globalExceptionListener(HttpTask<?> task, IOException error) {\n    println(GLOBAL_ON_EXCEPTION + error.getMessage());\n    return false;\n}\n\nprivate void singleResponseListener(HttpResult result) {\n    println(SINGLE_ON_RESPONSE + result.getStatus());\n}\n\nprivate void singleCompleteListener(HttpResult.State state) {\n    println(SINGLE_ON_COMPLETE + state);\n}\n\nprivate void singleExceptionListener(IOException error) {\n    println(SINGLE_ON_EXCEPTION + error.getMessage());\n}"
    },
    "Old_Method": "@Test public void testGlobalCallback(){\n  HTTP http=HTTP.builder().responseListener((  HttpTask<?> task,  HttpResult result) -> {\n    println(\"全局 onResponse: \" + result.getStatus());\n    return true;\n  }\n).completeListener((  HttpTask<?> task,  HttpResult.State state) -> {\n    println(\"全局 onComplete: \" + state);\n    return true;\n  }\n).exceptionListener((  HttpTask<?> task,  IOException error) -> {\n    println(\"全局 onException: \" + error.getMessage());\n    return false;\n  }\n).build();\n  http.async(\"http://www.baidu.com\").setOnResponse((  HttpResult result) -> {\n    println(\"单例 onResponse: \" + result.getStatus());\n  }\n).setOnComplete((  HttpResult.State state) -> {\n    println(\"单例 onComplete: \" + state);\n  }\n).setOnException((  IOException error) -> {\n    println(\"单例 onException: \" + error.getMessage());\n  }\n).get();\n  sleep(2000);\n}\n",
    "File_Path": "okhttps/okhttps/src/test/java/cn/zhxu/okhttps/ListenerTests.java",
    "Start": 151,
    "Stop": 1367,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "testGlobalCallback"
}
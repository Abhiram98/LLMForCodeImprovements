{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Separate the method into multiple smaller methods",
                "Change_Diff": "- private RequestBody buildRequestBody(){...}\n+ private RequestBody buildMultipartBody() {...}\n+ private RequestBody buildFormBody() {...}\n+ private RequestBody buildDefaultBody() {...}",
                "Description": "The buildRequestBody() method is too large and does a lot of things. It would be better to split this method into several smaller ones, each doing one thing. This will improve readability and maintainability.",
                "Start": 1,
                "End": 42
            },
            {
                "Improvement": "Avoid null checks inside lambda",
                "Change_Diff": "- if (value == null) return;\n+ bodyParams.entrySet().stream().filter(entry -> entry.getValue() != null).forEach((key, value) -> {...});",
                "Description": "Inside the forEach lambda, there are null checks that result in early return. Instead, you can use filter() before forEach() to exclude null values, which will make the code cleaner.",
                "Start": 8,
                "End": 13
            },
            {
                "Improvement": "Remove redundant code",
                "Change_Diff": "- if (bodyParams == null) {\n+ // Remove this line",
                "Description": "The check for `bodyParams == null` is redundant and can be removed. If `bodyParams` is `null`, the forEach loops will not be executed anyway.",
                "Start": 37,
                "End": 37
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    return buildMultipartBody();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    return buildFormBody();\n  }\n  return toRequestBody(bodyParams);\n}\n\nprivate RequestBody buildMultipartBody() {\n  MultipartBody.Builder builder=multipartBodyBuilder();\n  bodyParams.entrySet().stream().filter(entry -> entry.getValue() != null).forEach((key,value) -> {\n    byte[] content=value.toString().getBytes(charset);\n    RequestBody body=RequestBody.create(null,content);\n    builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n  });\n  if (files != null) {\n    files.forEach((name,file) -> {\n      MediaType type=httpClient.mediaType(file.getType());\n      builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n    });\n  }\n  return builder.build();\n}\n\nprivate RequestBody buildFormBody() {\n  FormBody.Builder builder=new FormBody.Builder(charset);\n  bodyParams.entrySet().stream().filter(entry -> entry.getValue() != null).forEach((key,value) -> {\n    builder.add(key,value.toString());\n  });\n  return builder.build();\n}\n\nprivate RequestBody emptyRequestBody() {\n  return RequestBody.create(null, new byte[0]);\n}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
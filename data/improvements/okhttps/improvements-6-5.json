{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract duplicate code into separate methods",
                "Change_Diff": "- bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n\n\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n\n\n+ addBodyParamsToBuilder(bodyParams, builder);\n\n\nprivate void addBodyParamsToBuilder(Map<String, String> params, Builder builder) {\n    params.forEach((key, value) -> {\n        if (value == null) return;\n        builder.add(key, value.toString());\n    });\n}",
                "Description": "The code that checks if `value` is `null` and then adds to the builder is repeated twice. This could be extracted into a separate method to avoid code duplication and improve code readability.",
                "Start": 6,
                "End": 24
            },
            {
                "Improvement": "Avoid deep nesting",
                "Change_Diff": "- if (bodyParams != null && ... {\n    ...\n  }\n  if (requestBody != null) {\n    ...\n  }\n  if (bodyParams == null) {\n    ...\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    ...\n  }\n\n+ if (bodyParams != null && ... {\n    ...\n    return builder.build();\n}\nif (requestBody != null) {\n    return toRequestBody(requestBody);\n}\nif (bodyParams == null) {\n    return emptyRequestBody();\n}\nif (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    ...\n    return builder.build();\n}\nreturn toRequestBody(bodyParams);",
                "Description": "The method has multiple nested if statements, which makes the code harder to read and understand. By using return statements more liberally we can reduce the level of nesting and make the code more readable.",
                "Start": 2,
                "End": 25
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    addBodyParamsToBuilder(bodyParams, builder);\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    addBodyParamsToBuilder(bodyParams, builder);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n\nprivate void addBodyParamsToBuilder(Map<String, String> params, Builder builder) {\n    params.forEach((key, value) -> {\n        if (value == null) return;\n        builder.add(key, value.toString());\n    });\n}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract duplicate code into a separate method",
                "Change_Diff": "- if (value == null) return;\n+ if (isNull(value)) return;",
                "Description": "There is a piece of code which checks if the 'value' is null and then does nothing if it is. This is duplicated twice in the code, once for the 'bodyParams' and once for the 'files'. This can be extracted into a separate method.",
                "Start": 3,
                "End": 5
            },
            {
                "Improvement": "Use Optional to prevent NullPointerException",
                "Change_Diff": "- if (bodyParams != null) {\n+ Optional.ofNullable(bodyParams).ifPresent(params -> {...});",
                "Description": "Instead of null checking every time a value is used, wrap the value in an Optional object. This way, you can avoid NullPointerExceptions and make the code cleaner.",
                "Start": 2,
                "End": 13
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  Optional.ofNullable(bodyParams).ifPresent(params -> {\n    if ((OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n      MultipartBody.Builder builder=multipartBodyBuilder();\n      params.forEach((key,value) -> {\n        if (isNull(value)) return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      });\n    }\n  });\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (isNull(value)) return;\n      builder.add(key,value.toString());\n    });\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n\nprivate boolean isNull(Object value) {\n  return value == null;\n}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use lambda expressions instead of anonymous inner classes",
                "Change_Diff": "- responseListener((HttpTask<?> task, HttpResult result) -> {\n+ responseListener((task, result) -> {",
                "Description": "Instead of using an anonymous inner class for the response listener, use a lambda expression.",
                "Start": 4,
                "End": 4
            },
            {
                "Improvement": "Remove unnecessary return statements",
                "Change_Diff": "- return true;",
                "Description": "Remove unnecessary return statements as the default behavior is to return true.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Use method references instead of lambda expressions for single method calls",
                "Change_Diff": "- setOnResponse((HttpResult result) -> {\n+ setOnResponse(this::handleResponse);",
                "Description": "Instead of using a lambda expression for the response callback, use a method reference.",
                "Start": 19,
                "End": 19
            },
            {
                "Improvement": "Use method references instead of lambda expressions for single method calls",
                "Change_Diff": "- setOnComplete((HttpResult.State state) -> {\n+ setOnComplete(this::handleComplete);",
                "Description": "Instead of using a lambda expression for the complete callback, use a method reference.",
                "Start": 22,
                "End": 22
            },
            {
                "Improvement": "Use method references instead of lambda expressions for single method calls",
                "Change_Diff": "- setOnException((IOException error) -> {\n+ setOnException(this::handleException);",
                "Description": "Instead of using a lambda expression for the exception callback, use a method reference.",
                "Start": 25,
                "End": 25
            }
        ],
        "Final code": "@Test\npublic void testGlobalCallback() {\n    HTTP http = HTTP.builder()\n            .responseListener((task, result) -> {\n                println(\"全局 onResponse: \" + result.getStatus());\n            })\n            .completeListener((task, state) -> {\n                println(\"全局 onComplete: \" + state);\n            })\n            .exceptionListener((task, error) -> {\n                println(\"全局 onException: \" + error.getMessage());\n                return false;\n            })\n            .build();\n\n    http.async(\"http://www.baidu.com\")\n            .setOnResponse(this::handleResponse)\n            .setOnComplete(this::handleComplete)\n            .setOnException(this::handleException)\n            .get();\n\n    sleep(2000);\n}"
    }],
    "Old_Method": "@Test public void testGlobalCallback(){\n  HTTP http=HTTP.builder().responseListener((  HttpTask<?> task,  HttpResult result) -> {\n    println(\"全局 onResponse: \" + result.getStatus());\n    return true;\n  }\n).completeListener((  HttpTask<?> task,  HttpResult.State state) -> {\n    println(\"全局 onComplete: \" + state);\n    return true;\n  }\n).exceptionListener((  HttpTask<?> task,  IOException error) -> {\n    println(\"全局 onException: \" + error.getMessage());\n    return false;\n  }\n).build();\n  http.async(\"http://www.baidu.com\").setOnResponse((  HttpResult result) -> {\n    println(\"单例 onResponse: \" + result.getStatus());\n  }\n).setOnComplete((  HttpResult.State state) -> {\n    println(\"单例 onComplete: \" + state);\n  }\n).setOnException((  IOException error) -> {\n    println(\"单例 onException: \" + error.getMessage());\n  }\n).get();\n  sleep(2000);\n}\n",
    "File_Path": "okhttps/okhttps/src/test/java/cn/zhxu/okhttps/ListenerTests.java",
    "Start": 151,
    "Stop": 1367,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "testGlobalCallback"
}
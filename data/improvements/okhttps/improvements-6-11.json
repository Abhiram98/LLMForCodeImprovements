{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Check for null before operation",
                "Change_Diff": "- if (bodyParams != null) { ... }\n- if (files != null) { ... }\n+ if (bodyParams != null && !bodyParams.isEmpty()) { ... }\n+ if (files != null && !files.isEmpty()) { ... }",
                "Description": "Check if `bodyParams` or `files` are null before performing operations on them. This reduces the risk of `NullPointerException`.",
                "Start": 3,
                "End": 15
            },
            {
                "Improvement": "Avoid multiple returns",
                "Change_Diff": "- return builder.build();\n- return toRequestBody(requestBody);\n- return emptyRequestBody();\n- return builder.build();\n- return toRequestBody(bodyParams);\n+ RequestBody result;\n+ ... \n+ result = builder.build();\n+ ...\n+ return result;",
                "Description": "Having multiple return statements in a method can make the code harder to read and debug. Instead, declare a variable to hold the result and return this variable at the end of the method.",
                "Start": 17,
                "End": 32
            },
            {
                "Improvement": "Extract repeated code",
                "Change_Diff": "- byte[] content=value.toString().getBytes(charset);\n- RequestBody body=RequestBody.create(null,content);\n- builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n+ addPartToBuilder(builder, key, value.toString());\n...\n- builder.add(key,value.toString());\n+ addPartToBuilder(builder, key, value.toString());",
                "Description": "The code to create a `RequestBody` from `bodyParams` is repeated twice. This code can be extracted into a separate method to avoid repetition.",
                "Start": 5,
                "End": 9
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  RequestBody result = null;\n  if (bodyParams != null && !bodyParams.isEmpty() && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null && !files.isEmpty()) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    bodyParams.forEach((key,value) -> {\n      if (value != null) addPartToBuilder(builder, key, value.toString());\n    });\n    files.forEach((name,file) -> {\n      MediaType type=httpClient.mediaType(file.getType());\n      builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n    });\n    result = builder.build();\n  } else if (requestBody != null) {\n    result = toRequestBody(requestBody);\n  } else if (bodyParams == null) {\n    result = emptyRequestBody();\n  } else if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value != null) addPartToBuilder(builder, key, value.toString());\n    });\n    result = builder.build();\n  } else {\n    result = toRequestBody(bodyParams);\n  }\n  return result;\n}\n\nprivate void addPartToBuilder(MultipartBody.Builder builder, String key, String value) {\n  byte[] content=value.getBytes(charset);\n  RequestBody body=RequestBody.create(null,content);\n  builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
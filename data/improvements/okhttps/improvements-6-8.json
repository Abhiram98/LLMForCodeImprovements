{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce Method Complexity",
                "Change_Diff": "- private RequestBody buildRequestBody(){... + private RequestBody buildRequestBody(){\n call new methods here... }",
                "Description": "The current method is quite complex and long. It would be beneficial to break it down into smaller more manageable methods. This would make the code easier to understand, maintain and test.",
                "Start": 1,
                "End": 36
            },
            {
                "Improvement": "Null Check",
                "Change_Diff": "- if (bodyParams != null &&... + boolean isBodyParamsNotNull = bodyParams != null;\nif (isBodyParamsNotNull &&... ",
                "Description": "The null check for `bodyParams` and `files` is done multiple times. It would be more efficient to do this check once and store the result in a boolean variable for later use.",
                "Start": 2,
                "End": 18
            },
            {
                "Improvement": "Use Optional",
                "Change_Diff": "- if (value == null)         return;\n+ Optional.ofNullable(value).ifPresent(v -> {...});",
                "Description": "Instead of checking if `value` is null, you can use `Optional` to avoid NullPointerExceptions and make the code cleaner.",
                "Start": 7,
                "End": 8
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  boolean isBodyParamsNotNull = bodyParams != null;\n  boolean areFilesPresent = files != null;\n  if (isBodyParamsNotNull && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || areFilesPresent) {\n    return buildMultipartBody();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (!isBodyParamsNotNull) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    return buildFormBody();\n  }\n  return toRequestBody(bodyParams);\n}\n\nprivate MultipartBody buildMultipartBody() {...}\n\nprivate FormBody buildFormBody() {...}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
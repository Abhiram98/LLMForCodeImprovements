{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid early return in lambda expressions",
                "Change_Diff": "- if (value == null) return;\n+ if (value != null) {",
                "Description": "Lambda expressions in Java do not support return statements for control flow, as they are intended to be simple, single-purpose pieces of code. In your code, you are returning from the lambda expression when `value` is null, which will not work as expected.",
                "Start": 8,
                "End": 8
            },
            {
                "Improvement": "Avoid unnecessary null checks",
                "Change_Diff": "- if (bodyParams != null) {\n+ // Removed unnecessary null check",
                "Description": "In your code, you are checking if `bodyParams` is not null twice, once at the beginning and once inside the if block. You can remove the second null check since if the code execution reaches that point, `bodyParams` is definitely not null.",
                "Start": 4,
                "End": 7
            }
        ],
        "Final code": "private RequestBody buildRequestBody(){\n  if ((bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART))) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    bodyParams.forEach((key,value) -> {\n      if (value != null) {\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n    });\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      });\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value != null) {\n        builder.add(key,value.toString());\n      }\n    });\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}"
    },
    "Old_Method": "private RequestBody buildRequestBody(){\n  if (bodyParams != null && (OkHttps.FORM_DATA.equals(bodyType) || bodyType.startsWith(MULTIPART)) || files != null) {\n    MultipartBody.Builder builder=multipartBodyBuilder();\n    if (bodyParams != null) {\n      bodyParams.forEach((key,value) -> {\n        if (value == null)         return;\n        byte[] content=value.toString().getBytes(charset);\n        RequestBody body=RequestBody.create(null,content);\n        builder.addPart(MultipartBody.Part.createFormData(key,null,body));\n      }\n);\n    }\n    if (files != null) {\n      files.forEach((name,file) -> {\n        MediaType type=httpClient.mediaType(file.getType());\n        builder.addFormDataPart(name,file.getFileName(),file.toRequestBody(type));\n      }\n);\n    }\n    return builder.build();\n  }\n  if (requestBody != null) {\n    return toRequestBody(requestBody);\n  }\n  if (bodyParams == null) {\n    return emptyRequestBody();\n  }\n  if (OkHttps.FORM.equals(bodyType) || bodyType.endsWith(FORM)) {\n    FormBody.Builder builder=new FormBody.Builder(charset);\n    bodyParams.forEach((key,value) -> {\n      if (value == null)       return;\n      builder.add(key,value.toString());\n    }\n);\n    return builder.build();\n  }\n  return toRequestBody(bodyParams);\n}\n",
    "File_Path": "okhttps/okhttps/src/main/java/cn/zhxu/okhttps/HttpTask.java",
    "Start": 19603,
    "Stop": 21270,
    "Project_Name": "data/projects/okhttps",
    "Method_Name": "buildRequestBody"
}
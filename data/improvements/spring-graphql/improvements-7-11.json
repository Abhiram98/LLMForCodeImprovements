{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java Streams API",
                "Change_Diff": "- for (Annotation paramAnn : paramAnns) {\n              boolean existingType=false;\n              for (Annotation ann : anns) {\n                if (ann.annotationType() == paramAnn.annotationType()) {\n                  existingType=true;\n                  break;\n                }\n              }\n              if (!existingType) {\n                merged.add(adaptAnnotation(paramAnn));\n              }\n            }\n+ Stream.of(paramAnns)\n+ .filter(paramAnn -> Arrays.stream(anns)\n+ .noneMatch(ann -> ann.annotationType() == paramAnn.annotationType()))\n+ .map(this::adaptAnnotation)\n+ .forEach(merged::add);",
                "Description": "The current implementation for merging the annotations is a bit complex and can be simplified using Java Streams API. This reduces the amount of explicit iteration and conditional logic, making the code easier to read.",
                "Start": 11,
                "End": 28
            },
            {
                "Improvement": "Extract repeated logic to a method",
                "Change_Diff": "- boolean existingType=false;\n              for (Annotation ann : anns) {\n                if (ann.annotationType() == paramAnn.annotationType()) {\n                  existingType=true;\n                  break;\n                }\n              }\n+ private boolean annotationExists(Annotation[] anns, Annotation paramAnn) {\n+ for (Annotation ann : anns) {\n+  if (ann.annotationType() == paramAnn.annotationType()) {\n+   return true;\n+  }\n+ }\n+ return false;\n+ }",
                "Description": "The logic to check whether an annotation of a certain type already exists in a given array is used multiple times. This can be extracted to a separate method to avoid code duplication, improve readability and maintainability.",
                "Start": 13,
                "End": 19
            }
        ],
        "Final code": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      for (Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n        if (index < ifcAnns.length) {\n          Annotation[] paramAnns=ifcAnns[index];\n          if (paramAnns.length > 0) {\n            List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n            merged.addAll(Arrays.asList(anns));\n            Stream.of(paramAnns)\n            .filter(paramAnn -> !annotationExists(anns, paramAnn))\n            .map(this::adaptAnnotation)\n            .forEach(merged::add);\n            anns=merged.toArray(new Annotation[0]);\n          }\n        }\n      }\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}\n\nprivate boolean annotationExists(Annotation[] anns, Annotation paramAnn) {\n  for (Annotation ann : anns) {\n    if (ann.annotationType() == paramAnn.annotationType()) {\n      return true;\n    }\n  }\n  return false;\n}"
    },
    "Old_Method": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      for (      Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n        if (index < ifcAnns.length) {\n          Annotation[] paramAnns=ifcAnns[index];\n          if (paramAnns.length > 0) {\n            List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n            merged.addAll(Arrays.asList(anns));\n            for (            Annotation paramAnn : paramAnns) {\n              boolean existingType=false;\n              for (              Annotation ann : anns) {\n                if (ann.annotationType() == paramAnn.annotationType()) {\n                  existingType=true;\n                  break;\n                }\n              }\n              if (!existingType) {\n                merged.add(adaptAnnotation(paramAnn));\n              }\n            }\n            anns=merged.toArray(new Annotation[0]);\n          }\n        }\n      }\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethod.java",
    "Start": 12864,
    "Stop": 13925,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getParameterAnnotations"
}
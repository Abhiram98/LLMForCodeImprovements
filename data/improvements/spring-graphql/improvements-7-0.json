{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use Java 8 Stream API for better readability and performance",
            "Change_Diff": "- for (      Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n-        if (index < ifcAnns.length) {\n-          Annotation[] paramAnns=ifcAnns[index];\n-          if (paramAnns.length > 0) {\n-            List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n-            merged.addAll(Arrays.asList(anns));\n-            for (            Annotation paramAnn : paramAnns) {\n-              boolean existingType=false;\n-              for (              Annotation ann : anns) {\n-                if (ann.annotationType() == paramAnn.annotationType()) {\n-                  existingType=true;\n-                  break;\n-                }\n-              }\n-              if (!existingType) {\n-                merged.add(adaptAnnotation(paramAnn));\n-              }\n-            }\n-            anns=merged.toArray(new Annotation[0]);\n-          }\n-        }\n-      }\n+ List<Annotation> merged = Stream.of(anns)\n+ .flatMap(Stream::of)\n+ .collect(Collectors.toList());\n+\n+ getInterfaceParameterAnnotations().stream()\n+ .filter(ifcAnns -> index < ifcAnns.length)\n+ .flatMap(ifcAnns -> Stream.of(ifcAnns[index]))\n+ .filter(paramAnn -> merged.stream()\n+ .noneMatch(ann -> ann.annotationType() == paramAnn.annotationType()))\n+ .map(this::adaptAnnotation)\n+ .forEach(merged::add);\n+\n+ anns = merged.toArray(new Annotation[0]);",
            "Description": "Java 8 Stream API can be used to make the code more readable and performant. It can replace the nested for loop and the if condition used for checking the existing type of annotation.",
            "Start": 6,
            "End": 20
        }],
        "Final code": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      List<Annotation> merged = Stream.of(anns)\n      .flatMap(Stream::of)\n      .collect(Collectors.toList());\n\n      getInterfaceParameterAnnotations().stream()\n      .filter(ifcAnns -> index < ifcAnns.length)\n      .flatMap(ifcAnns -> Stream.of(ifcAnns[index]))\n      .filter(paramAnn -> merged.stream()\n      .noneMatch(ann -> ann.annotationType() == paramAnn.annotationType()))\n      .map(this::adaptAnnotation)\n      .forEach(merged::add);\n\n      anns = merged.toArray(new Annotation[0]);\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}"
    },
    "Old_Method": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      for (      Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n        if (index < ifcAnns.length) {\n          Annotation[] paramAnns=ifcAnns[index];\n          if (paramAnns.length > 0) {\n            List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n            merged.addAll(Arrays.asList(anns));\n            for (            Annotation paramAnn : paramAnns) {\n              boolean existingType=false;\n              for (              Annotation ann : anns) {\n                if (ann.annotationType() == paramAnn.annotationType()) {\n                  existingType=true;\n                  break;\n                }\n              }\n              if (!existingType) {\n                merged.add(adaptAnnotation(paramAnn));\n              }\n            }\n            anns=merged.toArray(new Annotation[0]);\n          }\n        }\n      }\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethod.java",
    "Start": 12864,
    "Stop": 13925,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getParameterAnnotations"
}
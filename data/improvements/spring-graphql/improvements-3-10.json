{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Eliminate Code Duplication",
            "Change_Diff": "- for (  QueryByExampleExecutor<?> executor : executors) {\n...<code omitted>...\n}\n\n- for (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n...<code omitted>...\n}\n\n+ private <T> void addDataFetcherFactoryToMap(T executor, Map<String, DataFetcherFactory> factories, @Nullable CursorStrategy<ScrollPosition> cursorStrategy, @Nullable ScrollSubrange defaultScrollSubrange) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n        Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n        factories.put(typeName,new DataFetcherFactory(){\n            @Override public DataFetcher<?> single(){\n                return builder.single();\n            }\n            @Override public DataFetcher<?> many(){\n                return builder.many();\n            }\n            @Override public DataFetcher<?> scrollable(){\n                return builder.scrollable();\n            }\n        });\n    }\n}\n\nfor (  QueryByExampleExecutor<?> executor : executors) {\n    addDataFetcherFactoryToMap(executor, factories, cursorStrategy, defaultScrollSubrange);\n}\n\nfor (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    addDataFetcherFactoryToMap(executor, factories, cursorStrategy, defaultScrollSubrange);\n}",
            "Description": "The two for loops for 'executors' and 'reactiveExecutors' are almost identical and can be abstracted into a method. This will reduce code duplication and make the code easier to maintain.",
            "Start": 14,
            "End": 47
        }],
        "Final code": "public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  private <T> void addDataFetcherFactoryToMap(T executor, Map<String, DataFetcherFactory> factories, @Nullable CursorStrategy<ScrollPosition> cursorStrategy, @Nullable ScrollSubrange defaultScrollSubrange) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n        Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n        factories.put(typeName,new DataFetcherFactory(){\n            @Override public DataFetcher<?> single(){\n                return builder.single();\n            }\n            @Override public DataFetcher<?> many(){\n                return builder.many();\n            }\n            @Override public DataFetcher<?> scrollable(){\n                return builder.scrollable();\n            }\n        });\n    }\n}\n\nfor (  QueryByExampleExecutor<?> executor : executors) {\n    addDataFetcherFactoryToMap(executor, factories, cursorStrategy, defaultScrollSubrange);\n}\n\nfor (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    addDataFetcherFactoryToMap(executor, factories, cursorStrategy, defaultScrollSubrange);\n}\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\npublic static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QueryByExampleExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QueryByExampleDataFetcher.java",
    "Start": 8299,
    "Stop": 11102,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
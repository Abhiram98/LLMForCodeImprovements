{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code redundancy",
                "Change_Diff": "- if (annotation instanceof SchemaMapping) {\n-    typeName=mapping.typeName();\n-    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n-  }\n- else {\n-    BatchMapping mapping=(BatchMapping)annotation;\n-    typeName=mapping.typeName();\n-    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n-    batchMapping=true;\n-    batchSize=mapping.maxBatchSize();\n-  }",
                "Description": "The way to get 'typeName' and 'field' are the same for both BatchMapping and SchemaMapping. We can reduce the redundancy by getting these values before checking the annotation type.",
                "Start": 12,
                "End": 27
            },
            {
                "Improvement": "Use try-catch block to handle IllegalArgumentException",
                "Change_Diff": "- if (annotations.size() != 1) {\n-    throw new IllegalArgumentException(\"Expected either @BatchMapping or @SchemaMapping, not both: \" + method.toGenericString());\n-  }",
                "Description": "Instead of throwing IllegalArgumentException directly, it's better to use a try-catch block to handle it. This way, we can provide more detailed error messages and handle the exception in a more graceful way.",
                "Start": 5,
                "End": 9
            }
        ],
        "Final code": "@Nullable private MappingInfo getMappingInfo(Method method,Object handler,Class<?> handlerType){\n  Set<Annotation> annotations=AnnotatedElementUtils.findAllMergedAnnotations(method,new LinkedHashSet<>(Arrays.asList(BatchMapping.class,SchemaMapping.class)));\n  if (annotations.isEmpty()) {\n    return null;\n  }\n  try {\n    if (annotations.size() != 1) {\n        throw new IllegalArgumentException();\n    }\n  } catch (IllegalArgumentException e) {\n    throw new IllegalArgumentException(\"Expected either @BatchMapping or @SchemaMapping, not both: \" + method.toGenericString(), e);\n  }\n  String typeName;\n  String field;\n  boolean batchMapping=false;\n  int batchSize=-1;\n  HandlerMethod handlerMethod=createHandlerMethod(method,handler,handlerType);\n  Annotation annotation=annotations.iterator().next();\n  Mapping mapping = (Mapping)annotation;\n  typeName=mapping.typeName();\n  field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n  if (annotation instanceof BatchMapping) {\n    batchMapping=true;\n    batchSize=((BatchMapping)annotation).maxBatchSize();\n  }\n  // remaining code\n}"
    },
    "Old_Method": "@Nullable private MappingInfo getMappingInfo(Method method,Object handler,Class<?> handlerType){\n  Set<Annotation> annotations=AnnotatedElementUtils.findAllMergedAnnotations(method,new LinkedHashSet<>(Arrays.asList(BatchMapping.class,SchemaMapping.class)));\n  if (annotations.isEmpty()) {\n    return null;\n  }\n  if (annotations.size() != 1) {\n    throw new IllegalArgumentException(\"Expected either @BatchMapping or @SchemaMapping, not both: \" + method.toGenericString());\n  }\n  String typeName;\n  String field;\n  boolean batchMapping=false;\n  int batchSize=-1;\n  HandlerMethod handlerMethod=createHandlerMethod(method,handler,handlerType);\n  Annotation annotation=annotations.iterator().next();\n  if (annotation instanceof SchemaMapping) {\n    typeName=mapping.typeName();\n    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n  }\n else {\n    BatchMapping mapping=(BatchMapping)annotation;\n    typeName=mapping.typeName();\n    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n    batchMapping=true;\n    batchSize=mapping.maxBatchSize();\n  }\n  if (!StringUtils.hasText(typeName)) {\n    SchemaMapping mapping=AnnotatedElementUtils.findMergedAnnotation(handlerType,SchemaMapping.class);\n    if (mapping != null) {\n      typeName=mapping.typeName();\n    }\n  }\n  if (!StringUtils.hasText(typeName)) {\n    for (    MethodParameter parameter : handlerMethod.getMethodParameters()) {\n      if (!batchMapping) {\n        Assert.state(this.argumentResolvers != null,\"`argumentResolvers` is not initialized\");\n        HandlerMethodArgumentResolver resolver=this.argumentResolvers.getArgumentResolver(parameter);\n        if (resolver instanceof SourceMethodArgumentResolver) {\n          typeName=parameter.getParameterType().getSimpleName();\n          break;\n        }\n      }\n else {\n        if (Collection.class.isAssignableFrom(parameter.getParameterType())) {\n          typeName=parameter.nested().getNestedParameterType().getSimpleName();\n          break;\n        }\n      }\n    }\n  }\n  Assert.hasText(typeName,\"No parentType specified, and a source/parent method argument was also not found: \" + handlerMethod.getShortLogMessage());\n  return new MappingInfo(typeName,field,batchMapping,batchSize,handlerMethod);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerConfigurer.java",
    "Start": 16586,
    "Stop": 18892,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getMappingInfo"
}
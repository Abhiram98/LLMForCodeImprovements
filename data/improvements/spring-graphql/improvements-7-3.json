{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use Java 8 Stream API for merging annotations",
            "Change_Diff": "- for (Annotation paramAnn : paramAnns) {\n    boolean existingType=false;\n    for (Annotation ann : anns) {\n        if (ann.annotationType() == paramAnn.annotationType()) {\n            existingType=true;\n            break;\n        }\n    }\n    if (!existingType) {\n        merged.add(adaptAnnotation(paramAnn));\n    }\n }\n anns=merged.toArray(new Annotation[0]);\n+ anns = Stream.concat(Arrays.stream(anns), Arrays.stream(paramAnns))\n    .distinct()\n    .map(this::adaptAnnotation)\n    .toArray(Annotation[]::new);",
            "Description": "Instead of using for loop to merge annotations, you can use Java 8 Stream API's distinct function to eliminate duplicates and collect to merge them into a list. This will make the code more readable and efficient.",
            "Start": 10,
            "End": 22
        }],
        "Final code": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      for (Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n        if (index < ifcAnns.length) {\n          Annotation[] paramAnns=ifcAnns[index];\n          if (paramAnns.length > 0) {\n            anns = Stream.concat(Arrays.stream(anns), Arrays.stream(paramAnns))\n                .distinct()\n                .map(this::adaptAnnotation)\n                .toArray(Annotation[]::new);\n          }\n        }\n      }\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}"
    },
    "Old_Method": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      for (      Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n        if (index < ifcAnns.length) {\n          Annotation[] paramAnns=ifcAnns[index];\n          if (paramAnns.length > 0) {\n            List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n            merged.addAll(Arrays.asList(anns));\n            for (            Annotation paramAnn : paramAnns) {\n              boolean existingType=false;\n              for (              Annotation ann : anns) {\n                if (ann.annotationType() == paramAnn.annotationType()) {\n                  existingType=true;\n                  break;\n                }\n              }\n              if (!existingType) {\n                merged.add(adaptAnnotation(paramAnn));\n              }\n            }\n            anns=merged.toArray(new Annotation[0]);\n          }\n        }\n      }\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethod.java",
    "Start": 12864,
    "Stop": 13925,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getParameterAnnotations"
}
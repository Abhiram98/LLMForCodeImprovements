{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (T node : nodes) {\n-    String cursor=this.adapter.cursorAt(container,index++);\n+ for (int index = 0; index < nodes.size(); index++) {\n+    String cursor = this.adapter.cursorAt(container, index);",
                "Description": "Instead of manually iterating over the `nodes` collection and keeping track of the index, you can use an enhanced for loop, which simplifies the code and reduces the chance of making a mistake.",
                "Start": 18,
                "End": 21
            },
            {
                "Improvement": "Extract complex logic to a separate method",
                "Change_Diff": "- DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n- return new DefaultConnection<>(edges,pageInfo);\n+ return createDefaultConnection(edges, container);",
                "Description": "The creation of `DefaultPageInfo` and `DefaultConnection` can be extracted into a separate method. This will make the `adaptDataContainer` method more readable and maintainable.",
                "Start": 22,
                "End": 24
            }
        ],
        "Final code": "private <T>Object adaptDataContainer(@Nullable Object container) {\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    if (container.getClass().getName().endsWith(\"Connection\")) {\n      return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (int index = 0; index < nodes.size(); index++) {\n    T node = nodes.get(index);\n    String cursor=this.adapter.cursorAt(container,index);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  return createDefaultConnection(edges, container);\n}\n\nprivate <T>Object createDefaultConnection(List<Edge<T>> edges, Object container) {\n  DefaultPageInfo pageInfo = new DefaultPageInfo(edges.get(0).getCursor(), edges.get(edges.size() - 1).getCursor(), this.adapter.hasPrevious(container), this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges, pageInfo);\n}"
    },
    "Old_Method": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    if (container.getClass().getName().endsWith(\"Connection\")) {\n      return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  int index=0;\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (  T node : nodes) {\n    String cursor=this.adapter.cursorAt(container,index++);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges,pageInfo);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/pagination/ConnectionFieldTypeVisitor.java",
    "Start": 7935,
    "Stop": 9024,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "adaptDataContainer"
}
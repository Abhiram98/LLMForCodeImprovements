{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor common logic into a private method",
                "Change_Diff": "- String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n- if (typeName != null) {\n-     Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n-     factories.put(typeName,new DataFetcherFactory(){\n-         @Override public DataFetcher<?> single(){\n-             return builder.single();\n-         }\n-         @Override public DataFetcher<?> many(){\n-             return builder.many();\n-         }\n-         @Override public DataFetcher<?> scrollable(){\n-             return builder.scrollable();\n-         }\n-     }\n- );\n- }\n\n+ createDataFetcherFactory(executor, cursorStrategy, defaultScrollSubrange, factories);",
                "Description": "The same code is used in two places to create DataFetcherFactory objects. It would be cleaner to refactor this into a private method.",
                "Start": 14,
                "End": 28
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (  QueryByExampleExecutor<?> executor : executors) {\n+ for (QueryByExampleExecutor<?> executor : executors) {",
                "Description": "Instead of the traditional for loop, the enhanced for loop can be used to iterate over executors and reactiveExecutors lists. It's simpler and more readable.",
                "Start": 9,
                "End": 9
            },
            {
                "Improvement": "Extract logger message to a constant",
                "Change_Diff": "- logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n+ logger.trace(AUTO_REGISTRATION_CANDIDATE_TYPE_NAMES + factories.keySet());",
                "Description": "The string message can be extracted to a constant to improve code readability and prevent duplications.",
                "Start": 53,
                "End": 53
            }
        ],
        "Final code": "private static final String AUTO_REGISTRATION_CANDIDATE_TYPE_NAMES = \"Auto-registration candidate typeNames \";\n\npublic static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (QueryByExampleExecutor<?> executor : executors) {\n    createDataFetcherFactory(executor, cursorStrategy, defaultScrollSubrange, factories);\n  }\n  for (ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    createDataFetcherFactory(executor, cursorStrategy, defaultScrollSubrange, factories);\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(AUTO_REGISTRATION_CANDIDATE_TYPE_NAMES + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n\nprivate void createDataFetcherFactory(Executor<?> executor, CursorStrategy<ScrollPosition> cursorStrategy, ScrollSubrange defaultScrollSubrange, Map<String,DataFetcherFactory> factories) {\n  String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n  if (typeName != null) {\n    Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n    factories.put(typeName,new DataFetcherFactory(){\n      @Override public DataFetcher<?> single(){\n        return builder.single();\n      }\n      @Override public DataFetcher<?> many(){\n        return builder.many();\n      }\n      @Override public DataFetcher<?> scrollable(){\n        return builder.scrollable();\n      }\n    });\n  }\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\npublic static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QueryByExampleExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QueryByExampleDataFetcher.java",
    "Start": 8299,
    "Stop": 11102,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
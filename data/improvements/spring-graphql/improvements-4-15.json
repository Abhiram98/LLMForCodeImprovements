{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code duplication",
                "Change_Diff": " - for (  QuerydslPredicateExecutor<?> executor : executors) {...}\n - for (  ReactiveQuerydslPredicateExecutor<?> executor : reactiveExecutors) {...}\n + processExecutors(executors, cursorStrategy, defaultScrollSubrange);\n + processExecutors(reactiveExecutors, cursorStrategy, defaultScrollSubrange);",
                "Description": "The code blocks for processing the `executors` and `reactiveExecutors` lists are almost identical, differing only in the executor type and the builder type. This is a clear sign that they can be consolidated into a single method to reduce code duplication.",
                "Start": 8,
                "End": 35
            },
            {
                "Improvement": "Use lambda expressions",
                "Change_Diff": "- new DataFetcherFactory(){...\n + () -> builder.single(),\n + () -> builder.many(),\n + () -> builder.scrollable()",
                "Description": "The `DataFetcherFactory` instances created in the loops are defined as anonymous classes, which can be simplified and made more readable by using lambda expressions.",
                "Start": 15,
                "End": 27
            }
        ],
        "Final code": "public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QuerydslPredicateExecutor<?>> executors,List<ReactiveQuerydslPredicateExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  processExecutors(executors, cursorStrategy, defaultScrollSubrange, factories);\n  processExecutors(reactiveExecutors, cursorStrategy, defaultScrollSubrange, factories);\n  if (logger.isTraceEnabled()) { logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet()); }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n\nprivate static <T extends QueryDslPredicateExecutor<?>> void processExecutors(List<T> executors, CursorStrategy<ScrollPosition> cursorStrategy, ScrollSubrange defaultScrollSubrange, Map<String, DataFetcherFactory> factories) {\n  for (T executor : executors) {\n    String typeName = RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder builder = customize(executor, QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName, () -> builder.single(), () -> builder.many(), () -> builder.scrollable());\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}. If a repository is also an instance of  {@link QuerydslBinderCustomizer}, this is transparently detected and applied through the {@code QuerydslDataFetcher} builder  methods.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QuerydslPredicateExecutor<?>> executors,List<ReactiveQuerydslPredicateExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QuerydslPredicateExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQuerydslPredicateExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QuerydslDataFetcher.java",
    "Start": 9439,
    "Stop": 12618,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
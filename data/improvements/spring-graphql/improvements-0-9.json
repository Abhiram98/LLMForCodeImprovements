{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor repetitive code into a method",
                "Change_Diff": "- if (annotation instanceof SchemaMapping) {\n...\n}\nelse {\n...\n}\n\n+ MappingDetails mappingDetails = getMappingDetails(annotation, method);\ntypeName = mappingDetails.typeName;\nfield = mappingDetails.field;",
                "Description": "The process of extracting the typeName and field from both SchemaMapping and BatchMapping is repetitive and could be extracted to a separate method for better readability and maintainability.",
                "Start": 12,
                "End": 26
            },
            {
                "Improvement": "Refactor 'typeName' resolution into a method",
                "Change_Diff": "- if (!StringUtils.hasText(typeName)) {\n...\n}\n\n+ typeName = resolveTypeName(typeName, handlerType, handlerMethod, batchMapping);",
                "Description": "The code to resolve the 'typeName' is complex and could be refactored into a separate method for better readability and maintainability.",
                "Start": 28,
                "End": 44
            }
        ],
        "Final code": "@Nullable private MappingInfo getMappingInfo(Method method,Object handler,Class<?> handlerType){\n  Set<Annotation> annotations=AnnotatedElementUtils.findAllMergedAnnotations(method,new LinkedHashSet<>(Arrays.asList(BatchMapping.class,SchemaMapping.class)));\n  if (annotations.isEmpty()) {\n    return null;\n  }\n  if (annotations.size() != 1) {\n    throw new IllegalArgumentException(\"Expected either @BatchMapping or @SchemaMapping, not both: \" + method.toGenericString());\n  }\n  boolean batchMapping=false;\n  int batchSize=-1;\n  HandlerMethod handlerMethod=createHandlerMethod(method,handler,handlerType);\n  Annotation annotation=annotations.iterator().next();\n  MappingDetails mappingDetails = getMappingDetails(annotation, method);\n  String typeName = mappingDetails.typeName;\n  String field = mappingDetails.field;\n  if (annotation instanceof BatchMapping) {\n    batchSize=((BatchMapping)annotation).maxBatchSize();\n    batchMapping=true;\n  }\n  typeName = resolveTypeName(typeName, handlerType, handlerMethod, batchMapping);\n  Assert.hasText(typeName,\"No parentType specified, and a source/parent method argument was also not found: \" + handlerMethod.getShortLogMessage());\n  return new MappingInfo(typeName,field,batchMapping,batchSize,handlerMethod);\n}\n\nprivate MappingDetails getMappingDetails(Annotation annotation, Method method) {\n  String typeName;\n  String field;\n  if (annotation instanceof SchemaMapping) {\n    typeName=((SchemaMapping)annotation).typeName();\n    field=(StringUtils.hasText(((SchemaMapping)annotation).field()) ? ((SchemaMapping)annotation).field() : method.getName());\n  } else {\n    typeName=((BatchMapping)annotation).typeName();\n    field=(StringUtils.hasText(((BatchMapping)annotation).field()) ? ((BatchMapping)annotation).field() : method.getName());\n  }\n  return new MappingDetails(typeName, field);\n}\n\nprivate String resolveTypeName(String typeName, Class<?> handlerType, HandlerMethod handlerMethod, boolean batchMapping) {\n  if (!StringUtils.hasText(typeName)) {\n    SchemaMapping mapping=AnnotatedElementUtils.findMergedAnnotation(handlerType,SchemaMapping.class);\n    if (mapping != null) {\n      typeName=mapping.typeName();\n    }\n  }\n  if (!StringUtils.hasText(typeName)) {\n    for (MethodParameter parameter : handlerMethod.getMethodParameters()) {\n      if (!batchMapping) {\n        Assert.state(this.argumentResolvers != null,\"`argumentResolvers` is not initialized\");\n        HandlerMethodArgumentResolver resolver=this.argumentResolvers.getArgumentResolver(parameter);\n        if (resolver instanceof SourceMethodArgumentResolver) {\n          typeName=parameter.getParameterType().getSimpleName();\n          break;\n        }\n      } else {\n        if (Collection.class.isAssignableFrom(parameter.getParameterType())) {\n          typeName=parameter.nested().getNestedParameterType().getSimpleName();\n          break;\n        }\n      }\n    }\n  }\n  return typeName;\n}"
    },
    "Old_Method": "@Nullable private MappingInfo getMappingInfo(Method method,Object handler,Class<?> handlerType){\n  Set<Annotation> annotations=AnnotatedElementUtils.findAllMergedAnnotations(method,new LinkedHashSet<>(Arrays.asList(BatchMapping.class,SchemaMapping.class)));\n  if (annotations.isEmpty()) {\n    return null;\n  }\n  if (annotations.size() != 1) {\n    throw new IllegalArgumentException(\"Expected either @BatchMapping or @SchemaMapping, not both: \" + method.toGenericString());\n  }\n  String typeName;\n  String field;\n  boolean batchMapping=false;\n  int batchSize=-1;\n  HandlerMethod handlerMethod=createHandlerMethod(method,handler,handlerType);\n  Annotation annotation=annotations.iterator().next();\n  if (annotation instanceof SchemaMapping) {\n    typeName=mapping.typeName();\n    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n  }\n else {\n    BatchMapping mapping=(BatchMapping)annotation;\n    typeName=mapping.typeName();\n    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n    batchMapping=true;\n    batchSize=mapping.maxBatchSize();\n  }\n  if (!StringUtils.hasText(typeName)) {\n    SchemaMapping mapping=AnnotatedElementUtils.findMergedAnnotation(handlerType,SchemaMapping.class);\n    if (mapping != null) {\n      typeName=mapping.typeName();\n    }\n  }\n  if (!StringUtils.hasText(typeName)) {\n    for (    MethodParameter parameter : handlerMethod.getMethodParameters()) {\n      if (!batchMapping) {\n        Assert.state(this.argumentResolvers != null,\"`argumentResolvers` is not initialized\");\n        HandlerMethodArgumentResolver resolver=this.argumentResolvers.getArgumentResolver(parameter);\n        if (resolver instanceof SourceMethodArgumentResolver) {\n          typeName=parameter.getParameterType().getSimpleName();\n          break;\n        }\n      }\n else {\n        if (Collection.class.isAssignableFrom(parameter.getParameterType())) {\n          typeName=parameter.nested().getNestedParameterType().getSimpleName();\n          break;\n        }\n      }\n    }\n  }\n  Assert.hasText(typeName,\"No parentType specified, and a source/parent method argument was also not found: \" + handlerMethod.getShortLogMessage());\n  return new MappingInfo(typeName,field,batchMapping,batchSize,handlerMethod);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerConfigurer.java",
    "Start": 16586,
    "Stop": 18892,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getMappingInfo"
}
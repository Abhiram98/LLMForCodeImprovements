{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Improve readability by removing redundant code",
                "Change_Diff": "- if (container instanceof Connection<?>) {\n-    return container;\n- }\n- if (!this.adapter.supports(container.getClass())) {\n-    if (container.getClass().getName().endsWith(\"Connection\")) {\n-      return container;",
                "Description": "The check 'if (container instanceof Connection<?>)' and 'if (container.getClass().getName().endsWith(\"Connection\"))' both return the same object. They can be merged to simplify the code.",
                "Start": 4,
                "End": 9
            },
            {
                "Improvement": "Extract common method calls into variables",
                "Change_Diff": "- DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n+ String firstCursor = edges.get(0).getCursor();\n+ String lastCursor = edges.get(edges.size() - 1).getCursor();\n+ boolean hasPrev = this.adapter.hasPrevious(container);\n+ boolean hasNext = this.adapter.hasNext(container);\n+ DefaultPageInfo pageInfo=new DefaultPageInfo(firstCursor, lastCursor, hasPrev, hasNext);",
                "Description": "In the last few lines of the method, the same method calls are made multiple times (edges.get(0).getCursor(), edges.get(edges.size() - 1).getCursor(), this.adapter.hasPrevious(container), this.adapter.hasNext(container)). These calls can be extracted into variables to improve performance and readability.",
                "Start": 19,
                "End": 20
            }
        ],
        "Final code": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?> || container.getClass().getName().endsWith(\"Connection\")) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  int index=0;\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (  T node : nodes) {\n    String cursor=this.adapter.cursorAt(container,index++);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  String firstCursor = edges.get(0).getCursor();\n  String lastCursor = edges.get(edges.size() - 1).getCursor();\n  boolean hasPrev = this.adapter.hasPrevious(container);\n  boolean hasNext = this.adapter.hasNext(container);\n  DefaultPageInfo pageInfo=new DefaultPageInfo(firstCursor, lastCursor, hasPrev, hasNext);\n  return new DefaultConnection<>(edges,pageInfo);\n}"
    },
    "Old_Method": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    if (container.getClass().getName().endsWith(\"Connection\")) {\n      return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  int index=0;\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (  T node : nodes) {\n    String cursor=this.adapter.cursorAt(container,index++);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges,pageInfo);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/pagination/ConnectionFieldTypeVisitor.java",
    "Start": 7935,
    "Stop": 9024,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "adaptDataContainer"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce nesting",
                "Change_Diff": "- if (name != null) {\n-    GraphQLObjectType objectType=schema.getObjectType(name);\n-    if (objectType == null) {\n-      throw new IllegalStateException(\"Invalid mapping for \" + clazz.getName() + \". \"+ \"No GraphQL Object type with name '\"+ name+ \"'.\");\n-    }\n-    return objectType;\n-  }\n+ if (name == null) continue;\n+ GraphQLObjectType objectType=schema.getObjectType(name);\n+ if (objectType == null) {\n+   throw new IllegalStateException(\"Invalid mapping for \" + clazz.getName() + \". \"+ \"No GraphQL Object type with name '\"+ name+ \"'.\");\n+ }\n+ return objectType;",
                "Description": "The method contains nested if statements which makes the code harder to read. To improve readability, you can use the 'continue' statement to skip the current iteration of the loop if the condition is not met.",
                "Start": 5,
                "End": 19
            },
            {
                "Improvement": "Use inverted conditions",
                "Change_Diff": "- if (schema.containsType(name)) {\n-    return schema.getObjectType(name);\n-  }\n-  for (  Class<?> interfaceType : clazz.getInterfaces()) {\n-    GraphQLObjectType objectType=getTypeForClass(interfaceType,schema);\n-    if (objectType != null) {\n-      return objectType;\n-    }\n-  }\n-  Class<?> superclass=clazz.getSuperclass();\n-  if (superclass != Object.class && superclass != null) {\n-    return getTypeForClass(superclass,schema);\n-  }\n+ if (!schema.containsType(name)) return null;\n+ return schema.getObjectType(name);\n+ for (  Class<?> interfaceType : clazz.getInterfaces()) {\n+   GraphQLObjectType objectType=getTypeForClass(interfaceType,schema);\n+   if (objectType == null) continue;\n+   return objectType;\n+ }\n+ Class<?> superclass=clazz.getSuperclass();\n+ if (superclass == Object.class || superclass == null) return null;\n+ return getTypeForClass(superclass,schema);",
                "Description": "To reduce the complexity of the method, you can invert the current conditions and return null early. This way, the majority of the method doesn't need to be indented.",
                "Start": 21,
                "End": 32
            }
        ],
        "Final code": "@Nullable private GraphQLObjectType getTypeForClass(Class<?> clazz,GraphQLSchema schema){\n  if (clazz.getName().startsWith(\"java.\")) {\n    return null;\n  }\n  String name=getMapping(clazz);\n  if (name == null) continue;\n  GraphQLObjectType objectType=schema.getObjectType(name);\n  if (objectType == null) {\n    throw new IllegalStateException(\"Invalid mapping for \" + clazz.getName() + \". \"+ \"No GraphQL Object type with name '\"+ name+ \"'.\");\n  }\n  return objectType;\n  name=this.classNameExtractor.apply(clazz);\n  if (!schema.containsType(name)) return null;\n  return schema.getObjectType(name);\n  for (  Class<?> interfaceType : clazz.getInterfaces()) {\n    GraphQLObjectType objectType=getTypeForClass(interfaceType,schema);\n    if (objectType == null) continue;\n    return objectType;\n  }\n  Class<?> superclass=clazz.getSuperclass();\n  if (superclass == Object.class || superclass == null) return null;\n  return getTypeForClass(superclass,schema);\n}"
    },
    "Old_Method": "@Nullable private GraphQLObjectType getTypeForClass(Class<?> clazz,GraphQLSchema schema){\n  if (clazz.getName().startsWith(\"java.\")) {\n    return null;\n  }\n  String name=getMapping(clazz);\n  if (name != null) {\n    GraphQLObjectType objectType=schema.getObjectType(name);\n    if (objectType == null) {\n      throw new IllegalStateException(\"Invalid mapping for \" + clazz.getName() + \". \"+ \"No GraphQL Object type with name '\"+ name+ \"'.\");\n    }\n    return objectType;\n  }\n  name=this.classNameExtractor.apply(clazz);\n  if (schema.containsType(name)) {\n    return schema.getObjectType(name);\n  }\n  for (  Class<?> interfaceType : clazz.getInterfaces()) {\n    GraphQLObjectType objectType=getTypeForClass(interfaceType,schema);\n    if (objectType != null) {\n      return objectType;\n    }\n  }\n  Class<?> superclass=clazz.getSuperclass();\n  if (superclass != Object.class && superclass != null) {\n    return getTypeForClass(superclass,schema);\n  }\n  return null;\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/execution/ClassNameTypeResolver.java",
    "Start": 2869,
    "Stop": 3854,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getTypeForClass"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Early exit",
                "Change_Diff": "- if (container == null) {\n    return EMPTY_CONNECTION;\n}\n+ if (container == null) return EMPTY_CONNECTION;",
                "Description": "Instead of checking for null and then proceeding to the next condition, we can return early when the container is null. This leads to less nested code and enhances readability.",
                "Start": 2,
                "End": 4
            },
            {
                "Improvement": "Use try-catch instead of checking for support",
                "Change_Diff": "- if (!this.adapter.supports(container.getClass())) {\n-   if (container.getClass().getName().endsWith(\"Connection\")) {\n-       return container;\n-   }\n-   throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n+ try {\n+   Collection<T> nodes = this.adapter.getContent(container);\n+ } catch (UnsupportedOperationException e) {\n+   if (container.getClass().getName().endsWith(\"Connection\")) return container;\n+   throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName(), e);\n+ }",
                "Description": "Instead of checking if the adapter supports the container class, we can use a try-catch block. We can try to adapt the content and if it throws an exception, we can handle it accordingly. This way, the adapter can decide what to do when it doesn't support certain types, and not the method itself.",
                "Start": 8,
                "End": 13
            }
        ],
        "Final code": "private <T>Object adaptDataContainer(@Nullable Object container) {\n    if (container == null) return EMPTY_CONNECTION;\n    if (container instanceof Connection<?>) return container;\n    Collection<T> nodes;\n    try {\n        nodes = this.adapter.getContent(container);\n    } catch (UnsupportedOperationException e) {\n        if (container.getClass().getName().endsWith(\"Connection\")) return container;\n        throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName(), e);\n    }\n    if (nodes.isEmpty()) return EMPTY_CONNECTION;\n    int index = 0;\n    List<Edge<T>> edges = new ArrayList<>(nodes.size());\n    for (T node : nodes) {\n        String cursor = this.adapter.cursorAt(container, index++);\n        edges.add(new DefaultEdge<>(node, new DefaultConnectionCursor(cursor)));\n    }\n    DefaultPageInfo pageInfo = new DefaultPageInfo(edges.get(0).getCursor(), edges.get(edges.size() - 1).getCursor(), this.adapter.hasPrevious(container), this.adapter.hasNext(container));\n    return new DefaultConnection<>(edges, pageInfo);\n}"
    },
    "Old_Method": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    if (container.getClass().getName().endsWith(\"Connection\")) {\n      return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  int index=0;\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (  T node : nodes) {\n    String cursor=this.adapter.cursorAt(container,index++);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges,pageInfo);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/pagination/ConnectionFieldTypeVisitor.java",
    "Start": 7935,
    "Stop": 9024,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "adaptDataContainer"
}
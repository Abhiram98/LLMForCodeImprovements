{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java 8 Stream API to process executors and reactiveExecutors",
                "Change_Diff": "- for (  QuerydslPredicateExecutor<?> executor : executors) {\n...\n}\n- for (  ReactiveQuerydslPredicateExecutor<?> executor : reactiveExecutors) {\n...\n}\n+ executors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> {...});\n+ reactiveExecutors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> {...});",
                "Description": "The Java 8 Stream API can simplify the processing of the executors and reactiveExecutors lists, making the code more readable and maintainable. The Stream API can also potentially improve performance, as it can take advantage of parallel processing on multi-core systems.",
                "Start": 17,
                "End": 40
            },
            {
                "Improvement": "Refactor anonymous inner classes to lambda expressions",
                "Change_Diff": "- factories.put(typeName,new DataFetcherFactory(){...\n+ factories.put(typeName, () -> { ... });",
                "Description": "The DataFetcherFactory anonymous inner classes can be refactored to lambda expressions. This can make the code shorter and more readable.",
                "Start": 24,
                "End": 30
            }
        ],
        "Final code": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QuerydslPredicateExecutor<?>> executors,List<ReactiveQuerydslPredicateExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  executors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> {\n    Builder builder=customize(e,QuerydslDataFetcher.builder(e).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(e)));\n    factories.put(RepositoryUtils.getGraphQlTypeName(e), () -> new DataFetcher<?>[]{\n        builder.single(),\n        builder.many(),\n        builder.scrollable()\n    });\n  });\n  reactiveExecutors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> {\n    ReactiveBuilder builder=customize(e,QuerydslDataFetcher.builder(e).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(e)));\n    factories.put(RepositoryUtils.getGraphQlTypeName(e), () -> new DataFetcher<?>[]{\n        builder.single(),\n        builder.many(),\n        builder.scrollable()\n    });\n  });\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}. If a repository is also an instance of  {@link QuerydslBinderCustomizer}, this is transparently detected and applied through the {@code QuerydslDataFetcher} builder  methods.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QuerydslPredicateExecutor<?>> executors,List<ReactiveQuerydslPredicateExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QuerydslPredicateExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQuerydslPredicateExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QuerydslDataFetcher.java",
    "Start": 9439,
    "Stop": 12618,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
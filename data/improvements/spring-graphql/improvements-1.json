{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Avoid double negation in if condition",
                "Change_Diff": "- if (!this.adapter.supports(container.getClass())) {\n+ if (this.adapter.supports(container.getClass())) {",
                "Description": "Instead of negating the condition and using an if block, flip the condition and remove the else block.",
                "Start": 9,
                "End": 12
            },
            {
                "Improvement": "Extract method for creating edges",
                "Change_Diff": "@@ -20,6 +23,12 @@\n   \n     DefaultPageInfo pageInfo = new DefaultPageInfo(edges.ge\n     return new DefaultConnection<>(edges, pageInfo);\n   }",
                "Description": "Extract the code for creating edges into a separate method for better modularity and readability.",
                "Start": 13,
                "End": 23
            }
        ],
        "Final code": "private <T>Object adaptDataContainer(@Nullable Object container) {\n    if (container == null) {\n        return EMPTY_CONNECTION;\n    }\n    if (container instanceof Connection<?>) {\n        return container;\n    }\n    if (this.adapter.supports(container.getClass())) {\n        return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n}\n\nprivate <T>DefaultConnection<T> createConnection(Collection<T> nodes, Object container) {\n    int index = 0;\n    List<Edge<T>> edges = new ArrayList<>(nodes.size());\n    for (T node : nodes) {\n        String cursor = this.adapter.cursorAt(container, index++);\n        edges.add(new DefaultEdge<>(node, new DefaultConnectionCursor(cursor)));\n    }\n    DefaultPageInfo pageInfo = new DefaultPageInfo(edges.get(0).getCursor(), edges.get(edges.size() - 1).getCursor(), this.adapter.hasPrevious(container), this.adapter.hasNext(container));\n    return new DefaultConnection<>(edges, pageInfo);\n}\n\npublic <T>Object adaptDataContainer(@Nullable Object container) {\n    if (container == null) {\n        return EMPTY_CONNECTION;\n    }\n    return createConnection(this.adapter.getContent(container), container);\n}"
    }],
    "Old_Method": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    if (container.getClass().getName().endsWith(\"Connection\")) {\n      return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  int index=0;\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (  T node : nodes) {\n    String cursor=this.adapter.cursorAt(container,index++);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges,pageInfo);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/pagination/ConnectionFieldTypeVisitor.java",
    "Start": 7935,
    "Stop": 9024,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "adaptDataContainer"
}
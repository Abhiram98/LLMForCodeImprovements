{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use Java Stream API for improved readability",
            "Change_Diff": "- List<Mono<Object>> monoList=new ArrayList<>();\n- for (  Object arg : args) {\n-    Mono<Object> argMono=(arg instanceof Mono ? (Mono<Object>)arg : Mono.justOrEmpty(arg));\n-    monoList.add(argMono.defaultIfEmpty(NO_VALUE));\n-  }\n+ List<Mono<Object>> monoList= Arrays.stream(args)\n+    .map(arg -> (arg instanceof Mono ? (Mono<Object>)arg : Mono.justOrEmpty(arg)).defaultIfEmpty(NO_VALUE))\n+    .collect(Collectors.toList());\n- for (int i=0; i < values.length; i++) {\n-    if (values[i] == NO_VALUE) {\n-        values[i]=null;\n-    }\n- }\n+ IntStream.range(0, values.length).forEach(i -> values[i] = values[i] == NO_VALUE ? null : values[i]);",
            "Description": "Java 8 introduced the Stream API which can make code more readable by providing a higher level of abstraction for operations on collections. In this case, you can use the Stream API to create the 'monoList' and to replace the values in the array.",
            "Start": 5,
            "End": 11
        }],
        "Final code": "    @SuppressWarnings(\"unchecked\") protected Mono<Object[]> toArgsMono(Object[] args){\n        List<Mono<Object>> monoList= Arrays.stream(args)\n            .map(arg -> (arg instanceof Mono ? (Mono<Object>)arg : Mono.justOrEmpty(arg)).defaultIfEmpty(NO_VALUE))\n            .collect(Collectors.toList());\n        return Mono.zip(monoList,values -> {\n            IntStream.range(0, values.length).forEach(i -> values[i] = values[i] == NO_VALUE ? null : values[i]);\n            return values;\n        });\n    }\n"
    },
    "Old_Method": "/** \n * Use this method to resolve the arguments asynchronously. This is only useful when at least one of the values is a  {@link Mono}\n */\n@SuppressWarnings(\"unchecked\") protected Mono<Object[]> toArgsMono(Object[] args){\n  List<Mono<Object>> monoList=new ArrayList<>();\n  for (  Object arg : args) {\n    Mono<Object> argMono=(arg instanceof Mono ? (Mono<Object>)arg : Mono.justOrEmpty(arg));\n    monoList.add(argMono.defaultIfEmpty(NO_VALUE));\n  }\n  return Mono.zip(monoList,values -> {\n    for (int i=0; i < values.length; i++) {\n      if (values[i] == NO_VALUE) {\n        values[i]=null;\n      }\n    }\n    return values;\n  }\n);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/InvocableHandlerMethodSupport.java",
    "Start": 4964,
    "Stop": 5600,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "toArgsMono"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a method",
                "Change_Diff": "- DataFetcherFactory factory = new DataFetcherFactory(){\n+ DataFetcherFactory factory = createDataFetcherFactory(builder);",
                "Description": "The code for creating and populating a DataFetcherFactory object is replicated for both the executors and reactiveExecutors lists. It would be better to extract this repetitive code into a separate method.",
                "Start": 13,
                "End": 29
            },
            {
                "Improvement": "Use Java 8 Streams",
                "Change_Diff": "- for (QueryByExampleExecutor<?> executor : executors) {\n+ executors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> createDataFetcherFactory(e, cursorStrategy, defaultScrollSubrange, factories));",
                "Description": "The for each loops used for executors and reactiveExecutors can be transformed into Java 8 Streams to make the code cleaner and more readable.",
                "Start": 11,
                "End": 31
            }
        ],
        "Final code": "public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  executors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> createDataFetcherFactory(e, cursorStrategy, defaultScrollSubrange, factories));\n  reactiveExecutors.stream().filter(e -> RepositoryUtils.getGraphQlTypeName(e) != null).forEach(e -> createDataFetcherFactory(e, cursorStrategy, defaultScrollSubrange, factories));\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n\nprivate static void createDataFetcherFactory(QueryByExampleExecutor<?> executor, CursorStrategy<ScrollPosition> cursorStrategy, ScrollSubrange defaultScrollSubrange, Map<String,DataFetcherFactory> factories) {\n  String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n  Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n  factories.put(typeName, new DataFetcherFactory(){\n    @Override public DataFetcher<?> single(){\n      return builder.single();\n    }\n    @Override public DataFetcher<?> many(){\n      return builder.many();\n    }\n    @Override public DataFetcher<?> scrollable(){\n      return builder.scrollable();\n    }\n  });\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\npublic static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QueryByExampleExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QueryByExampleDataFetcher.java",
    "Start": 8299,
    "Stop": 11102,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Avoid Code Duplication",
            "Change_Diff": "- for (  QuerydslPredicateExecutor<?> executor : executors) {\n- String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n- if (typeName != null) {\n- Builder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n- factories.put(typeName,new DataFetcherFactory(){\n- @Override public DataFetcher<?> single(){\n- return builder.single();\n- }\n- @Override public DataFetcher<?> many(){\n- return builder.many();\n- }\n- @Override public DataFetcher<?> scrollable(){\n- return builder.scrollable();\n- }\n- }\n- );\n-}\n\n- for (  ReactiveQuerydslPredicateExecutor<?> executor : reactiveExecutors) {\n- String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n- if (typeName != null) {\n- ReactiveBuilder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n- factories.put(typeName,new DataFetcherFactory(){\n- @Override public DataFetcher<?> single(){\n- return builder.single();\n- }\n- @Override public DataFetcher<?> many(){\n- return builder.many();\n- }\n- @Override public DataFetcher<?> scrollable(){\n- return builder.scrollable();\n- }\n- }\n- );\n-}\n+ addDataFetcherFactory(executors, factories, cursorStrategy, defaultScrollSubrange);\n+ addDataFetcherFactory(reactiveExecutors, factories, cursorStrategy, defaultScrollSubrange);",
            "Description": "The code for adding a DataFetcherFactory to the factories Map is duplicated for executors and reactiveExecutors. We can extract this logic into a separate method to avoid code duplication.",
            "Start": 10,
            "End": 24
        }],
        "Final code": "public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QuerydslPredicateExecutor<?>> executors,List<ReactiveQuerydslPredicateExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  addDataFetcherFactory(executors, factories, cursorStrategy, defaultScrollSubrange);\n  addDataFetcherFactory(reactiveExecutors, factories, cursorStrategy, defaultScrollSubrange);\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n\nprivate static <T> void addDataFetcherFactory(List<T> executors, Map<String, DataFetcherFactory> factories, CursorStrategy<ScrollPosition> cursorStrategy, ScrollSubrange defaultScrollSubrange) {\n  for (T executor : executors) {\n    String typeName = RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      DataFetcherFactory factory = new DataFetcherFactory() {\n        @Override\n        public DataFetcher<?> single() {\n          return QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)).single();\n        }\n        @Override\n        public DataFetcher<?> many() {\n          return QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)).many();\n        }\n        @Override\n        public DataFetcher<?> scrollable() {\n          return QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)).scrollable();\n        }\n      };\n      factories.put(typeName, factory);\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}. If a repository is also an instance of  {@link QuerydslBinderCustomizer}, this is transparently detected and applied through the {@code QuerydslDataFetcher} builder  methods.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\n@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QuerydslPredicateExecutor<?>> executors,List<ReactiveQuerydslPredicateExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QuerydslPredicateExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQuerydslPredicateExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder builder=customize(executor,QuerydslDataFetcher.builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange).customizer(customizer(executor)));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QuerydslDataFetcher.java",
    "Start": 9439,
    "Stop": 12618,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
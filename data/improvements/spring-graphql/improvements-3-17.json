{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid code duplication",
                "Change_Diff": "- for (  QueryByExampleExecutor<?> executor : executors) {...} \n- for (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {...} \n+ registerExecutors(executors, factories, cursorStrategy, defaultScrollSubrange);\n+ registerExecutors(reactiveExecutors, factories, cursorStrategy, defaultScrollSubrange);",
                "Description": "The loops for 'executors' and 'reactiveExecutors' have duplicated code. This can be extracted into a separate private method which can be reused.",
                "Start": 23,
                "End": 47
            },
            {
                "Improvement": "Replace anonymous classes with lambda expressions",
                "Change_Diff": "- factories.put(typeName,new DataFetcherFactory(){...}); \n+ factories.put(typeName, new DataFetcherFactory(() -> builder.single(), () -> builder.many(), () -> builder.scrollable()));",
                "Description": "The new DataFetcherFactory creation involves an anonymous class. This can be replaced with a lambda for brevity and readability.",
                "Start": 32,
                "End": 41
            },
            {
                "Improvement": "Use String.format() for string concatenation",
                "Change_Diff": "- logger.trace('Auto-registration candidate typeNames ' + factories.keySet()); \n+ logger.trace(String.format('Auto-registration candidate typeNames %s', factories.keySet()));",
                "Description": "String concatenation using '+' operator is less efficient than using String.format() method",
                "Start": 48,
                "End": 48
            }
        ],
        "Final code": "public static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  registerExecutors(executors, factories, cursorStrategy, defaultScrollSubrange);\n  registerExecutors(reactiveExecutors, factories, cursorStrategy, defaultScrollSubrange);\n  if (logger.isTraceEnabled()) {\n    logger.trace(String.format('Auto-registration candidate typeNames %s', factories.keySet()));\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n\nprivate static <T> void registerExecutors(List<T> executors, Map<String,DataFetcherFactory> factories, CursorStrategy<ScrollPosition> cursorStrategy, ScrollSubrange defaultScrollSubrange) {\n  for (T executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName, new DataFetcherFactory(() -> builder.single(), () -> builder.many(), () -> builder.scrollable()));\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Return a  {@link RuntimeWiringConfigurer} that installs a{@link graphql.schema.idl.WiringFactory} to find queries with a returntype whose name matches to the domain type name of the given repositories and registers  {@link DataFetcher}s for them. <p><strong>Note:<\/strong> This applies only to top-level queries and repositories annotated with  {@link GraphQlRepository @GraphQlRepository}.\n * @param executors repositories to consider for registration\n * @param reactiveExecutors reactive repositories to consider for registration\n * @param cursorStrategy for decoding cursors in pagination requests;if  {@code null}, then  {@link Builder#cursorStrategy} defaults apply.\n * @param defaultScrollSubrange default parameters for scrolling;if  {@code null}, then  {@link Builder#defaultScrollSubrange} defaults apply.\n * @return the created configurer\n * @since 1.2.0\n */\npublic static RuntimeWiringConfigurer autoRegistrationConfigurer(List<QueryByExampleExecutor<?>> executors,List<ReactiveQueryByExampleExecutor<?>> reactiveExecutors,@Nullable CursorStrategy<ScrollPosition> cursorStrategy,@Nullable ScrollSubrange defaultScrollSubrange){\n  Map<String,DataFetcherFactory> factories=new HashMap<>();\n  for (  QueryByExampleExecutor<?> executor : executors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      Builder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  for (  ReactiveQueryByExampleExecutor<?> executor : reactiveExecutors) {\n    String typeName=RepositoryUtils.getGraphQlTypeName(executor);\n    if (typeName != null) {\n      ReactiveBuilder<?,?> builder=customize(executor,builder(executor).cursorStrategy(cursorStrategy).defaultScrollSubrange(defaultScrollSubrange));\n      factories.put(typeName,new DataFetcherFactory(){\n        @Override public DataFetcher<?> single(){\n          return builder.single();\n        }\n        @Override public DataFetcher<?> many(){\n          return builder.many();\n        }\n        @Override public DataFetcher<?> scrollable(){\n          return builder.scrollable();\n        }\n      }\n);\n    }\n  }\n  if (logger.isTraceEnabled()) {\n    logger.trace(\"Auto-registration candidate typeNames \" + factories.keySet());\n  }\n  return new AutoRegistrationRuntimeWiringConfigurer(factories);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/query/QueryByExampleDataFetcher.java",
    "Start": 8299,
    "Stop": 11102,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "autoRegistrationConfigurer"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace multiple if-else with polymorphism",
                "Change_Diff": "- if (annotation instanceof SchemaMapping) {...\n- else {...\n+ Mapping mapping = (Mapping) annotation;",
                "Description": "The code has a long if-else condition that checks the instance of the annotation, which can be replaced with polymorphism for better readability and maintainability. This requires creating an interface 'Mapping' with methods 'getTypeName', 'getField', 'isBatchMapping' and 'getBatchSize', and make the SchemaMapping and BatchMapping implement this interface.",
                "Start": 8,
                "End": 23
            },
            {
                "Improvement": "Extract method for getting typeName",
                "Change_Diff": "- if (!StringUtils.hasText(typeName)) {...\n- if (!StringUtils.hasText(typeName)) {...\n+ typeName = getTypeName(...);",
                "Description": "The code for getting typeName is scattered across multiple if-else conditions and can be extracted to a separate method for better readability.",
                "Start": 18,
                "End": 37
            },
            {
                "Improvement": "Extract method for getting field",
                "Change_Diff": "- field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n+ field = getField(mapping, method);",
                "Description": "The code for getting field is repeated in two places and can be extracted to a separate method for better readability and preventing code duplication.",
                "Start": 12,
                "End": 15
            }
        ],
        "Final code": "@Nullable private MappingInfo getMappingInfo(Method method,Object handler,Class<?> handlerType){\n  Set<Annotation> annotations=AnnotatedElementUtils.findAllMergedAnnotations(method,new LinkedHashSet<>(Arrays.asList(BatchMapping.class,SchemaMapping.class)));\n  if (annotations.isEmpty()) {\n    return null;\n  }\n  if (annotations.size() != 1) {\n    throw new IllegalArgumentException('Expected either @BatchMapping or @SchemaMapping, not both: ' + method.toGenericString());\n  }\n  Mapping mapping = (Mapping) annotations.iterator().next();\n  String typeName = getTypeName(mapping, handler, handlerType, method);\n  String field = getField(mapping, method);\n  boolean batchMapping = mapping.isBatchMapping();\n  int batchSize = mapping.getBatchSize();\n  HandlerMethod handlerMethod = createHandlerMethod(method, handler, handlerType);\n  Assert.hasText(typeName, 'No parentType specified, and a source/parent method argument was also not found: ' + handlerMethod.getShortLogMessage());\n  return new MappingInfo(typeName, field, batchMapping, batchSize, handlerMethod);\n}\n\nprivate String getTypeName(Mapping mapping, Object handler, Class<?> handlerType, Method method) {...}\n\nprivate String getField(Mapping mapping, Method method) {...}"
    },
    "Old_Method": "@Nullable private MappingInfo getMappingInfo(Method method,Object handler,Class<?> handlerType){\n  Set<Annotation> annotations=AnnotatedElementUtils.findAllMergedAnnotations(method,new LinkedHashSet<>(Arrays.asList(BatchMapping.class,SchemaMapping.class)));\n  if (annotations.isEmpty()) {\n    return null;\n  }\n  if (annotations.size() != 1) {\n    throw new IllegalArgumentException(\"Expected either @BatchMapping or @SchemaMapping, not both: \" + method.toGenericString());\n  }\n  String typeName;\n  String field;\n  boolean batchMapping=false;\n  int batchSize=-1;\n  HandlerMethod handlerMethod=createHandlerMethod(method,handler,handlerType);\n  Annotation annotation=annotations.iterator().next();\n  if (annotation instanceof SchemaMapping) {\n    typeName=mapping.typeName();\n    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n  }\n else {\n    BatchMapping mapping=(BatchMapping)annotation;\n    typeName=mapping.typeName();\n    field=(StringUtils.hasText(mapping.field()) ? mapping.field() : method.getName());\n    batchMapping=true;\n    batchSize=mapping.maxBatchSize();\n  }\n  if (!StringUtils.hasText(typeName)) {\n    SchemaMapping mapping=AnnotatedElementUtils.findMergedAnnotation(handlerType,SchemaMapping.class);\n    if (mapping != null) {\n      typeName=mapping.typeName();\n    }\n  }\n  if (!StringUtils.hasText(typeName)) {\n    for (    MethodParameter parameter : handlerMethod.getMethodParameters()) {\n      if (!batchMapping) {\n        Assert.state(this.argumentResolvers != null,\"`argumentResolvers` is not initialized\");\n        HandlerMethodArgumentResolver resolver=this.argumentResolvers.getArgumentResolver(parameter);\n        if (resolver instanceof SourceMethodArgumentResolver) {\n          typeName=parameter.getParameterType().getSimpleName();\n          break;\n        }\n      }\n else {\n        if (Collection.class.isAssignableFrom(parameter.getParameterType())) {\n          typeName=parameter.nested().getNestedParameterType().getSimpleName();\n          break;\n        }\n      }\n    }\n  }\n  Assert.hasText(typeName,\"No parentType specified, and a source/parent method argument was also not found: \" + handlerMethod.getShortLogMessage());\n  return new MappingInfo(typeName,field,batchMapping,batchSize,handlerMethod);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerConfigurer.java",
    "Start": 16586,
    "Stop": 18892,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getMappingInfo"
}
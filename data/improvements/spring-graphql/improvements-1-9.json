{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid repeating code",
                "Change_Diff": "- if (container.getClass().getName().endsWith(\"Connection\")) {\n+ boolean isConnection = container.getClass().getName().endsWith(\"Connection\");\n+ if (isConnection) {",
                "Description": "The code `container.getClass().getName().endsWith(\"Connection\")` is used twice, we can store the result in a boolean variable and reuse it.",
                "Start": 6,
                "End": 10
            },
            {
                "Improvement": "Use try-catch block for exception handling",
                "Change_Diff": "- if (!this.adapter.supports(container.getClass())) {\n- throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n+ try {\n+ this.adapter.validate(container.getClass());\n+ } catch (UnsupportedOperationException e) {\n+ throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName(), e);\n+ }",
                "Description": "Instead of using if condition to check the adapter's support and then throwing an exception if it doesn't support, it's better to use a try-catch block. This makes the code more readable and easier to maintain.",
                "Start": 6,
                "End": 10
            },
            {
                "Improvement": "Replace manual array iteration with Streams",
                "Change_Diff": "- for (  T node : nodes) {\n- String cursor=this.adapter.cursorAt(container,index++);\n- edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n+ IntStream.range(0, nodes.size()).mapToObj(i -> new DefaultEdge<>(nodes.get(i), new DefaultConnectionCursor(this.adapter.cursorAt(container, i)))).forEach(edges::add);",
                "Description": "Instead of using a for loop to iterate through the `nodes` collection and create `edges`, we can use the Java 8 Streams API to make it more readable and compact.",
                "Start": 16,
                "End": 20
            }
        ],
        "Final code": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  boolean isConnection = container.getClass().getName().endsWith(\"Connection\");\n  if (!this.adapter.supports(container.getClass()) && !isConnection) {\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  if (isConnection) {\n    return container;\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  IntStream.range(0, nodes.size()).mapToObj(i -> new DefaultEdge<>(nodes.get(i), new DefaultConnectionCursor(this.adapter.cursorAt(container, i)))).forEach(edges::add);\n  DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges,pageInfo);\n}"
    },
    "Old_Method": "private <T>Object adaptDataContainer(@Nullable Object container){\n  if (container == null) {\n    return EMPTY_CONNECTION;\n  }\n  if (container instanceof Connection<?>) {\n    return container;\n  }\n  if (!this.adapter.supports(container.getClass())) {\n    if (container.getClass().getName().endsWith(\"Connection\")) {\n      return container;\n    }\n    throw new IllegalStateException(\"No ConnectionAdapter for: \" + container.getClass().getName());\n  }\n  Collection<T> nodes=this.adapter.getContent(container);\n  if (nodes.isEmpty()) {\n    return EMPTY_CONNECTION;\n  }\n  int index=0;\n  List<Edge<T>> edges=new ArrayList<>(nodes.size());\n  for (  T node : nodes) {\n    String cursor=this.adapter.cursorAt(container,index++);\n    edges.add(new DefaultEdge<>(node,new DefaultConnectionCursor(cursor)));\n  }\n  DefaultPageInfo pageInfo=new DefaultPageInfo(edges.get(0).getCursor(),edges.get(edges.size() - 1).getCursor(),this.adapter.hasPrevious(container),this.adapter.hasNext(container));\n  return new DefaultConnection<>(edges,pageInfo);\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/pagination/ConnectionFieldTypeVisitor.java",
    "Start": 7935,
    "Stop": 9024,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "adaptDataContainer"
}
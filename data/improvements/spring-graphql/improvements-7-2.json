{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java Streams for merging annotations",
                "Change_Diff": "- for (Annotation paramAnn : paramAnns) {\n-   boolean existingType = false;\n-   for (Annotation ann : anns) {\n-       if (ann.annotationType() == paramAnn.annotationType()) {\n-           existingType = true;\n-           break;\n-       }\n-   }\n-   if (!existingType) {\n-       merged.add(adaptAnnotation(paramAnn));\n-   }\n- }\n+ Stream.of(anns, paramAnns)\n+   .flatMap(Stream::of)\n+   .collect(Collectors.toMap(Annotation::annotationType, Function.identity(), (existing, replacement) -> existing))\n+   .values()\n+   .toArray(new Annotation[0]);",
                "Description": "Instead of using a traditional for loop to merge annotations, use Java 8 Streams. This will make your code more readable and will use fewer lines of code.",
                "Start": 11,
                "End": 27
            },
            {
                "Improvement": "Use Optional to avoid null checking",
                "Change_Diff": "- if (anns == null) {\n-   anns=super.getParameterAnnotations();\n- }\n+ anns = Optional.ofNullable(anns).orElseGet(this::super.getParameterAnnotations);",
                "Description": "Instead of checking if `anns` is null, use the Optional class in Java 8. This allows you to express in a clearer and more compact way a computation that might not return a value.",
                "Start": 2,
                "End": 4
            }
        ],
        "Final code": "@Override public Annotation[] getParameterAnnotations(){\n    Annotation[] anns=this.combinedAnnotations;\n    anns = Optional.ofNullable(anns).orElseGet(this::super.getParameterAnnotations);\n    int index=getParameterIndex();\n    if (index >= 0) {\n        for (Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n            if (index < ifcAnns.length) {\n                Annotation[] paramAnns=ifcAnns[index];\n                if (paramAnns.length > 0) {\n                    List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n                    merged.addAll(Arrays.asList(anns));\n                    anns = Stream.of(anns, paramAnns)\n                        .flatMap(Stream::of)\n                        .collect(Collectors.toMap(Annotation::annotationType, Function.identity(), (existing, replacement) -> existing))\n                        .values()\n                        .toArray(new Annotation[0]);\n                }\n            }\n        }\n    }\n    this.combinedAnnotations=anns;\n    return anns;\n}"
    },
    "Old_Method": "@Override public Annotation[] getParameterAnnotations(){\n  Annotation[] anns=this.combinedAnnotations;\n  if (anns == null) {\n    anns=super.getParameterAnnotations();\n    int index=getParameterIndex();\n    if (index >= 0) {\n      for (      Annotation[][] ifcAnns : getInterfaceParameterAnnotations()) {\n        if (index < ifcAnns.length) {\n          Annotation[] paramAnns=ifcAnns[index];\n          if (paramAnns.length > 0) {\n            List<Annotation> merged=new ArrayList<>(anns.length + paramAnns.length);\n            merged.addAll(Arrays.asList(anns));\n            for (            Annotation paramAnn : paramAnns) {\n              boolean existingType=false;\n              for (              Annotation ann : anns) {\n                if (ann.annotationType() == paramAnn.annotationType()) {\n                  existingType=true;\n                  break;\n                }\n              }\n              if (!existingType) {\n                merged.add(adaptAnnotation(paramAnn));\n              }\n            }\n            anns=merged.toArray(new Annotation[0]);\n          }\n        }\n      }\n    }\n    this.combinedAnnotations=anns;\n  }\n  return anns;\n}\n",
    "File_Path": "spring-graphql/spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethod.java",
    "Start": 12864,
    "Stop": 13925,
    "Project_Name": "data/projects/spring-graphql",
    "Method_Name": "getParameterAnnotations"
}
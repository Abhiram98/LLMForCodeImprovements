{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid calling oAuth2UserRequest.getClientRegistration().getRegistrationId() multiple times",
                "Change_Diff": "- oAuth2UserRequest.getClientRegistration().getRegistrationId()\n+ String registrationId = oAuth2UserRequest.getClientRegistration().getRegistrationId();",
                "Description": "The code is calling oAuth2UserRequest.getClientRegistration().getRegistrationId() multiple times which can be avoided by storing the result in a variable. This will make the code more readable and efficient.",
                "Start": 2,
                "End": 2
            },
            {
                "Improvement": "Use .orElseThrow() for Optional",
                "Change_Diff": "- if (userOptional.isPresent()) {\n- user=userOptional.get();\n+ user = userOptional.orElseThrow(() -> new OAuth2AuthenticationProcessingException('User not found'));",
                "Description": "Instead of checking if the optional value is present and then getting the value, we can use .orElseThrow() which will throw an exception if the Optional is empty. This will make the code cleaner and more readable.",
                "Start": 7,
                "End": 13
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User) {\n  String registrationId = oAuth2UserRequest.getClientRegistration().getRegistrationId();\n  OAuth2UserInfo oAuth2UserInfo = OAuth2UserInfoFactory.getOAuth2UserInfo(registrationId, oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException('Email not found from OAuth2 provider');\n  }\n  Optional<User> userOptional = userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user = userOptional.orElseThrow(() -> new OAuth2AuthenticationProcessingException('User not found'));\n  if (!user.getProvider().equals(AuthProvider.valueOf(registrationId))) {\n    throw new OAuth2AuthenticationProcessingException('Looks like you're signed up with ' + user.getProvider() + ' account. Please use your '+ user.getProvider()+ ' account to login.');\n  }\n  user = user.isPresent() ? updateExistingUser(user, oAuth2UserInfo) : registerNewUser(oAuth2UserRequest, oAuth2UserInfo);\n  return UserPrincipal.create(user, oAuth2User.getAttributes());\n}"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
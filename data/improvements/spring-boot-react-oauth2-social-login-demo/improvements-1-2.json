{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor code to separate concerns",
            "Change_Diff": "- private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n...\n}\n+ private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\nOAuth2UserInfo oAuth2UserInfo = createOAuth2UserInfo(oAuth2UserRequest, oAuth2User);\ncheckUserEmail(oAuth2UserInfo);\nUser user = getUser(oAuth2UserInfo);\nreturn UserPrincipal.create(user, oAuth2User.getAttributes());\n}",
            "Description": "The method processOAuth2User() is doing too many things. It's creating OAuth2UserInfo, checking if the user's email is empty, getting the user from the database, checking if the user's provider matches the OAuth request's registration ID, updating the user, or registering a new one if it doesn't exist, and finally creating a UserPrincipal. Each of these operations should ideally be in its own method. This would make the code more readable, easier to maintain, and would also allow for better unit testing.",
            "Start": 1,
            "End": 23
        }],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\nOAuth2UserInfo oAuth2UserInfo = createOAuth2UserInfo(oAuth2UserRequest, oAuth2User);\ncheckUserEmail(oAuth2UserInfo);\nUser user = getUser(oAuth2UserInfo);\nreturn UserPrincipal.create(user, oAuth2User.getAttributes());\n}\n\nprivate OAuth2UserInfo createOAuth2UserInfo(OAuth2UserRequest oAuth2UserRequest, OAuth2User oAuth2User) {\nreturn OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n}\n\nprivate void checkUserEmail(OAuth2UserInfo oAuth2UserInfo) {\nif (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\nthrow new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n}\n}\n\nprivate User getUser(OAuth2UserInfo oAuth2UserInfo) {\nOptional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\nUser user;\nif (userOptional.isPresent()) {\nuser=userOptional.get();\nif (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\nthrow new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n}\nuser=updateExistingUser(user,oAuth2UserInfo);\n}\nelse {\nuser=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n}\nreturn user;\n}\n"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
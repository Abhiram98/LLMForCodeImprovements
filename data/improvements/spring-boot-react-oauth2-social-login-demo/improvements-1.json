{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use isEmpty() method instead of StringUtils.isEmpty()",
                "Change_Diff": "- if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n+ if (oAuth2UserInfo.getEmail().isEmpty()) {",
                "Description": "Replace StringUtils.isEmpty() with the isEmpty() method of the email string to check if it is empty.",
                "Start": 4,
                "End": 4
            },
            {
                "Improvement": "Use map() and orElseThrow() methods instead of Optional.isPresent()",
                "Change_Diff": "- if (userOptional.isPresent()) {\n+ User user = userOptional.map(u -> updateExistingUser(u, oAuth2UserInfo)).orElseThrow(() -> new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \" + user.getProvider() + \" account to login.\"));",
                "Description": "Replace Optional.isPresent() with the map() method to update the existing user if present, or throw an exception using orElseThrow() if not present.",
                "Start": 12,
                "End": 13
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest, OAuth2User oAuth2User) {\n    OAuth2UserInfo oAuth2UserInfo = OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(), oAuth2User.getAttributes());\n    if (oAuth2UserInfo.getEmail().isEmpty()) {\n        throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n    }\n    User user = userRepository.findByEmail(oAuth2UserInfo.getEmail())\n            .map(u -> updateExistingUser(u, oAuth2UserInfo))\n            .orElseThrow(() -> new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \" + user.getProvider() + \" account to login.\"));\n    return UserPrincipal.create(user, oAuth2User.getAttributes());\n}"
    }],
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
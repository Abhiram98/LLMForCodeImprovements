{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Add method documentation",
                "Change_Diff": "+ /**\n+ * This method processes an OAuth2 User. It fetches the user information based on the OAuth2UserRequest,\n+ * validates the email, checks whether a user with the given email exists and updates it or registers a new user,\n+ * and finally creates and returns a UserPrincipal object.\n+ *\n+ * @param oAuth2UserRequest OAuth2UserRequest object\n+ * @param oAuth2User OAuth2User object\n+ * @return UserPrincipal object\n+ */",
                "Description": "Method should have a documentation to explain what it does, its parameters, and its return value.",
                "Start": 1,
                "End": 1
            },
            {
                "Improvement": "Use Optional's map and orElse methods",
                "Change_Diff": "- if (userOptional.isPresent()) {\n-    user=userOptional.get();\n-    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n-      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n-    }\n-    user=updateExistingUser(user,oAuth2UserInfo);\n-  }\n- else {\n-    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n-  }\n+ user = userOptional.map(u -> {\n+     if (!u.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n+         throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + u.getProvider() + \" account. Please use your \"+ u.getProvider()+ \" account to login.\");\n+     }\n+     return updateExistingUser(u, oAuth2UserInfo);\n+ }).orElseGet(() -> registerNewUser(oAuth2UserRequest, oAuth2UserInfo));",
                "Description": "Instead of using if-else to check if an Optional is present or not, use the map and orElse methods of Optional class for better readability and fewer lines of code.",
                "Start": 8,
                "End": 15
            }
        ],
        "Final code": "    /**\n     * This method processes an OAuth2 User. It fetches the user information based on the OAuth2UserRequest,\n     * validates the email, checks whether a user with the given email exists and updates it or registers a new user,\n     * and finally creates and returns a UserPrincipal object.\n     *\n     * @param oAuth2UserRequest OAuth2UserRequest object\n     * @param oAuth2User OAuth2User object\n     * @return UserPrincipal object\n     */\n    private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n        OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n        if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n            throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n        }\n        Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n        User user = userOptional.map(u -> {\n            if (!u.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n                throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + u.getProvider() + \" account. Please use your \"+ u.getProvider()+ \" account to login.\");\n            }\n            return updateExistingUser(u, oAuth2UserInfo);\n        }).orElseGet(() -> registerNewUser(oAuth2UserRequest, oAuth2UserInfo));\n        return UserPrincipal.create(user,oAuth2User.getAttributes());\n    }"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
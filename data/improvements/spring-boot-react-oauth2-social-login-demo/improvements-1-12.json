{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Add check for null OAuth2UserRequest and OAuth2User",
                "Change_Diff": "+ if (oAuth2UserRequest == null || oAuth2User == null) {\n+   throw new IllegalArgumentException(\"Both oAuth2UserRequest and oAuth2User must not be null\");\n+ }",
                "Description": "Add null checks for the parameters 'oAuth2UserRequest' and 'oAuth2User'. If any of these parameters are null, throw an IllegalArgumentException. This will prevent potential NullPointerExceptions later in the code.",
                "Start": 1,
                "End": 1
            },
            {
                "Improvement": "Use Optional.map() method",
                "Change_Diff": "- if (userOptional.isPresent()) {\n-   user=userOptional.get();\n-   if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n-     throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n-   }\n-   user=updateExistingUser(user,oAuth2UserInfo);\n- }\n+ user = userOptional\n+     .map(existingUser -> {\n+         if (!existingUser.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n+             throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + existingUser.getProvider() + \" account. Please use your \"+ existingUser.getProvider()+ \" account to login.\");\n+         }\n+         return updateExistingUser(existingUser, oAuth2UserInfo);\n+     })\n+     .orElseGet(() -> registerNewUser(oAuth2UserRequest, oAuth2UserInfo));",
                "Description": "Instead of using Optional.isPresent() and Optional.get(), use the Optional.map() method. This is a recommended way to work with Optionals as it makes the code more readable and less error-prone.",
                "Start": 7,
                "End": 14
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  if (oAuth2UserRequest == null || oAuth2User == null) {\n    throw new IllegalArgumentException(\"Both oAuth2UserRequest and oAuth2User must not be null\");\n  }\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user = userOptional\n      .map(existingUser -> {\n          if (!existingUser.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n              throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + existingUser.getProvider() + \" account. Please use your \"+ existingUser.getProvider()+ \" account to login.\");\n          }\n          return updateExistingUser(existingUser, oAuth2UserInfo);\n      })\n      .orElseGet(() -> registerNewUser(oAuth2UserRequest, oAuth2UserInfo));\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
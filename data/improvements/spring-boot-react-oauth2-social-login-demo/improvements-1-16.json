{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract client registration id to a variable",
                "Change_Diff": "- OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n+ String registrationId = oAuth2UserRequest.getClientRegistration().getRegistrationId();\n+ OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(registrationId, oAuth2User.getAttributes());",
                "Description": "The client registration id is being used multiple times, it's better to extract it to a variable. This way, the variable can be reused, and the code is easier to read and maintain.",
                "Start": 2,
                "End": 11
            },
            {
                "Improvement": "Use Optional.orElseThrow instead of if condition",
                "Change_Diff": "- if (userOptional.isPresent()) {...}\n+ User user = userOptional.orElseThrow(() -> new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \" + user.getProvider() + \" account to login.\"));",
                "Description": "To handle the optional value, it's better to use the Optional.orElseThrow method instead of if condition. This way, the code is more concise and easier to understand.",
                "Start": 6,
                "End": 13
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  String registrationId = oAuth2UserRequest.getClientRegistration().getRegistrationId();\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(registrationId ,oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user = userOptional.orElseThrow(() -> new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \" + user.getProvider() + \" account to login.\"));\n  if (!user.getProvider().equals(AuthProvider.valueOf(registrationId))) {\n    throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \" + user.getProvider() + \" account to login.\");\n  }\n  user = userOptional.isPresent() ? updateExistingUser(user,oAuth2UserInfo) : registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid unnecessary object creation",
                "Change_Diff": "- OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n+ // Moved object creation after email check",
                "Description": "The object `OAuth2UserInfo oAuth2UserInfo` is being created before the email check. If the email is not found, the method throws an exception, making the creation of `oAuth2UserInfo` unnecessary. We should create this object only when we need it, after the email check.",
                "Start": 2,
                "End": 2
            },
            {
                "Improvement": "Use map function for Optional",
                "Change_Diff": "- if (userOptional.isPresent()) {\n-     user=userOptional.get();\n-     if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n-       throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n-     }\n-     user=updateExistingUser(user,oAuth2UserInfo);\n- }\n+ user = userOptional.map(user -> {\n+     if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n+         throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n+     }\n+     return updateExistingUser(user,oAuth2UserInfo);\n+ }).orElseGet(() -> registerNewUser(oAuth2UserRequest,oAuth2UserInfo));",
                "Description": "Instead of using `isPresent()` and `get()`, we should take advantage of the `map` function of `Optional`. This function applies the changes only if the value is present and returns an Optional. This way, we can avoid explicitly checking `isPresent()` and the code becomes more readable and concise.",
                "Start": 6,
                "End": 12
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  if (StringUtils.isEmpty(oAuth2UserRequest.getClientRegistration().getRegistrationId())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user = userOptional.map(user -> {\n     if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n         throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n     }\n     return updateExistingUser(user,oAuth2UserInfo);\n  }).orElseGet(() -> registerNewUser(oAuth2UserRequest,oAuth2UserInfo));\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
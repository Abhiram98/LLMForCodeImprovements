{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Change 'if' condition to 'filter' method call",
                "Change_Diff": "- if (userOptional.isPresent()) {\n-    user=userOptional.get();\n+ userOptional.filter(user -> user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId())))",
                "Description": "Using the 'filter' method of the Optional class improves readability and reduces the chance of NullPointerExceptions.",
                "Start": 7,
                "End": 14
            },
            {
                "Improvement": "Use 'orElseGet' method instead of 'else' block",
                "Change_Diff": "- else {\n-    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n+ user = userOptional.orElseGet(() -> registerNewUser(oAuth2UserRequest, oAuth2UserInfo));",
                "Description": "The 'orElseGet' method of the Optional class can be used to provide a default value when the Optional is empty, which can make the code more readable and efficient.",
                "Start": 10,
                "End": 14
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  user = userOptional.filter(user -> user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))).orElseGet(() -> registerNewUser(oAuth2UserRequest, oAuth2UserInfo));\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
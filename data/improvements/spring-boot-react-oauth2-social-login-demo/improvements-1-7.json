{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid calling 'get' on Optional without 'isPresent' check",
                "Change_Diff": "- user=userOptional.get();\n+ user = userOptional.orElseThrow(() -> new UsernameNotFoundException(\"User Not Found\"));",
                "Description": "It is a good practice to avoid calling 'get' on Optional without 'isPresent' check. It can throw NoSuchElementException if value is not present. Instead, 'orElse' or 'orElseThrow' can be used.",
                "Start": 8,
                "End": 8
            },
            {
                "Improvement": "Avoid multiple calls to 'getClientRegistration'",
                "Change_Diff": "- OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n+ ClientRegistration clientRegistration = oAuth2UserRequest.getClientRegistration();\n+ OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(clientRegistration.getRegistrationId(),oAuth2User.getAttributes());\n- if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n+ if (!user.getProvider().equals(AuthProvider.valueOf(clientRegistration.getRegistrationId()))) {",
                "Description": "Multiple calls to 'getClientRegistration' can be avoided by storing the result in a local variable. This will make the code cleaner and potentially improve performance.",
                "Start": 2,
                "End": 11
            }
        ],
        "Final code": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  ClientRegistration clientRegistration = oAuth2UserRequest.getClientRegistration();\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(clientRegistration.getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user = userOptional.orElseThrow(() -> new UsernameNotFoundException(\"User Not Found\"));\n    if (!user.getProvider().equals(AuthProvider.valueOf(clientRegistration.getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}"
    },
    "Old_Method": "private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest,OAuth2User oAuth2User){\n  OAuth2UserInfo oAuth2UserInfo=OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(),oAuth2User.getAttributes());\n  if (StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {\n    throw new OAuth2AuthenticationProcessingException(\"Email not found from OAuth2 provider\");\n  }\n  Optional<User> userOptional=userRepository.findByEmail(oAuth2UserInfo.getEmail());\n  User user;\n  if (userOptional.isPresent()) {\n    user=userOptional.get();\n    if (!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {\n      throw new OAuth2AuthenticationProcessingException(\"Looks like you're signed up with \" + user.getProvider() + \" account. Please use your \"+ user.getProvider()+ \" account to login.\");\n    }\n    user=updateExistingUser(user,oAuth2UserInfo);\n  }\n else {\n    user=registerNewUser(oAuth2UserRequest,oAuth2UserInfo);\n  }\n  return UserPrincipal.create(user,oAuth2User.getAttributes());\n}\n",
    "File_Path": "spring-boot-react-oauth2-social-login-demo/spring-social/src/main/java/com/example/springsocial/security/oauth2/CustomOAuth2UserService.java",
    "Start": 1883,
    "Stop": 3147,
    "Project_Name": "data/projects/spring-boot-react-oauth2-social-login-demo",
    "Method_Name": "processOAuth2User"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract the property copying into a separate method",
                "Change_Diff": "- config.setReadQueryTimeout(newBean.getReadQueryTimeout());\n...\n- config.setRawEventDefinition(newBean.getRawEventDefinition());\n+ copyPropertiesFromNewBeanToConfig(newBean, config);",
                "Description": "Instead of having a long method, the property copying from `newBean` to `config` could be extracted into a separate method to improve readability.",
                "Start": 13,
                "End": 25
            },
            {
                "Improvement": "Extract the rollback logic into a separate method",
                "Change_Diff": "- if (!isSuccess) {\n...\n- config.setRawEventDefinition(rawEventDefinition);\n+ rollbackConfigIfUnsuccessful(isSuccess, readQueryTimeout, enableReadOptimization, maxIdleTime, mainSessionProfiles, epl, imports, rawEventDefinition);",
                "Description": "The rollback logic, i.e., the logic within the `finally` block can be extracted into a separate method to improve readability and maintainability.",
                "Start": 28,
                "End": 38
            }
        ],
        "Final code": "@Override protected void processApplicationEvent(ApplicationEvent event){\n  if (event instanceof ContextBeanChangedEvent) {\n    ContextBeanChangedEvent bcInfo=(ContextBeanChangedEvent)event;\n    SessionizerConfig newBean=(SessionizerConfig)(bcInfo.getApplicationContext().getBean(config.getBeanName()));\n    if (newBean != lastConfig) {\n      lastConfig=newBean;\n      SessionizerConfigValidator validator=new SessionizerConfigValidator(config,newBean);\n      List<String> errors=validator.validate();\n      if (!errors.isEmpty()) {\n        throw new IllegalArgumentException(\"Config error: \" + errors);\n      }\n      int readQueryTimeout=config.getReadQueryTimeout();\n      boolean enableReadOptimization=config.getEnableReadOptimization();\n      int maxIdleTime=config.getMaxIdleTime();\n      List<SessionProfile> mainSessionProfiles=config.getMainSessionProfiles();\n      EPL epl=config.getEpl();\n      List<String> imports=config.getImports();\n      EsperDeclaredEvents rawEventDefinition=config.getRawEventDefinition();\n      copyPropertiesFromNewBeanToConfig(newBean, config);\n      boolean isSuccess=false;\n      try {\n        for (SessionizerRunnable task : tasks) {\n          task.newCompiledConfig=new CompiledConfig(config,task);\n        }\n        isSuccess=true;\n      } finally {\n        rollbackConfigIfUnsuccessful(isSuccess, readQueryTimeout, enableReadOptimization, maxIdleTime, mainSessionProfiles, epl, imports, rawEventDefinition);\n      }\n      refreshConfig();\n    }\n  }\n}\n\nprivate void copyPropertiesFromNewBeanToConfig(SessionizerConfig newBean, SessionizerConfig config) {\n  config.setReadQueryTimeout(newBean.getReadQueryTimeout());\n  ...\n  config.setRawEventDefinition(newBean.getRawEventDefinition());\n}\n\nprivate void rollbackConfigIfUnsuccessful(boolean isSuccess, int readQueryTimeout, boolean enableReadOptimization, int maxIdleTime, List<SessionProfile> mainSessionProfiles, EPL epl, List<String> imports, EsperDeclaredEvents rawEventDefinition) {\n  if (!isSuccess) {\n    for (SessionizerRunnable task : tasks) {\n      if (task.newCompiledConfig != null) {\n        task.newCompiledConfig.destroy();\n        task.newCompiledConfig=null;\n      }\n    }\n    config.setReadQueryTimeout(readQueryTimeout);\n    ...\n    config.setRawEventDefinition(rawEventDefinition);\n  }\n}"
    },
    "Old_Method": "@Override protected void processApplicationEvent(ApplicationEvent event){\n  if (event instanceof ContextBeanChangedEvent) {\n    ContextBeanChangedEvent bcInfo=(ContextBeanChangedEvent)event;\n    SessionizerConfig newBean=(SessionizerConfig)(bcInfo.getApplicationContext().getBean(config.getBeanName()));\n    if (newBean != lastConfig) {\n      lastConfig=newBean;\n      SessionizerConfigValidator validator=new SessionizerConfigValidator(config,newBean);\n      List<String> errors=validator.validate();\n      if (!errors.isEmpty()) {\n        throw new IllegalArgumentException(\"Config error: \" + errors);\n      }\n      int readQueryTimeout=config.getReadQueryTimeout();\n      boolean enableReadOptimization=config.getEnableReadOptimization();\n      int maxIdleTime=config.getMaxIdleTime();\n      List<SessionProfile> mainSessionProfiles=config.getMainSessionProfiles();\n      EPL epl=config.getEpl();\n      List<String> imports=config.getImports();\n      EsperDeclaredEvents rawEventDefinition=config.getRawEventDefinition();\n      config.setReadQueryTimeout(newBean.getReadQueryTimeout());\n      config.setEnableReadOptimization(newBean.getEnableReadOptimization());\n      config.setMaxIdleTime(newBean.getMaxIdleTime());\n      config.setMainSessionProfiles(newBean.getMainSessionProfiles());\n      config.setEpl(newBean.getEpl());\n      config.setImports(newBean.getImports());\n      config.setRawEventDefinition(newBean.getRawEventDefinition());\n      boolean isSuccess=false;\n      try {\n        for (        SessionizerRunnable task : tasks) {\n          task.newCompiledConfig=new CompiledConfig(config,task);\n        }\n        isSuccess=true;\n      }\n  finally {\n        if (!isSuccess) {\n          for (          SessionizerRunnable task : tasks) {\n            if (task.newCompiledConfig != null) {\n              task.newCompiledConfig.destroy();\n              task.newCompiledConfig=null;\n            }\n          }\n          config.setReadQueryTimeout(readQueryTimeout);\n          config.setEnableReadOptimization(enableReadOptimization);\n          config.setMaxIdleTime(maxIdleTime);\n          config.setMainSessionProfiles(mainSessionProfiles);\n          config.setEpl(epl);\n          config.setImports(imports);\n          config.setRawEventDefinition(rawEventDefinition);\n        }\n      }\n      refreshConfig();\n    }\n  }\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/impl/SessionizerProcessor.java",
    "Start": 70925,
    "Stop": 73856,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "processApplicationEvent"
}
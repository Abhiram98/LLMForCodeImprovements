{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Optional instead of null check",
                "Change_Diff": "- if (username != null && password != null) {\n+ Optional.ofNullable(username).ifPresent(uname -> Optional.ofNullable(password).ifPresent(pwd -> builder.withCredentials(uname, pwd)));",
                "Description": "Instead of checking for null values and then performing an action, it would be better to use Java 8's Optional. This will make the code more readable and avoid null pointer exceptions.",
                "Start": 6,
                "End": 19
            },
            {
                "Improvement": "Extract the creation of SocketOptions to a separate method",
                "Change_Diff": "- SocketOptions opts=new SocketOptions();\n- opts.setConnectTimeoutMillis(connectTimeoutMillis);\n- opts.setReadTimeoutMillis(readTimeoutMillis);\n- //... and so on\n- builder.withSocketOptions(opts);\n+ builder.withSocketOptions(createSocketOptions());",
                "Description": "Extracting the creation of SocketOptions to a separate method will make the code cleaner, more readable, and easier to test. It also adheres to the single responsibility principle where a method should do one thing and do it well.",
                "Start": 21,
                "End": 38
            }
        ],
        "Final code": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n\n  Optional.ofNullable(username).ifPresent(uname -> Optional.ofNullable(password).ifPresent(pwd -> builder.withCredentials(uname, pwd)));\n\n  Optional.ofNullable(reconnectionPolicy).ifPresent(builder::withReconnectionPolicy);\n\n  Optional.ofNullable(retryPolicy).ifPresent(builder::withRetryPolicy);\n\n  builder.withPort(port);\n\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n\n  Optional.ofNullable(sslOptions).ifPresent(builder::withSSL);\n\n  copyPoolingOptions(builder);\n\n  builder.withSocketOptions(createSocketOptions());\n\n  return builder;\n}\n\nprivate SocketOptions createSocketOptions() {\n  SocketOptions opts = new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  //... and so on\n  return opts;\n}"
    },
    "Old_Method": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (  String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n  if (username != null && password != null) {\n    builder.withCredentials(username,password);\n  }\n  if (reconnectionPolicy != null) {\n    builder.withReconnectionPolicy(reconnectionPolicy);\n  }\n  if (retryPolicy != null) {\n    builder.withRetryPolicy(retryPolicy);\n  }\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  if (sslOptions != null) {\n    builder.withSSL(sslOptions);\n  }\n  copyPoolingOptions(builder);\n  SocketOptions opts=new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  if (receiveBufferSize != null) {\n    opts.setReceiveBufferSize(receiveBufferSize);\n  }\n  if (sendBufferSize != null) {\n    opts.setSendBufferSize(sendBufferSize);\n  }\n  if (soLinger != null) {\n    opts.setSoLinger(soLinger);\n  }\n  if (keepAlive != null) {\n    opts.setKeepAlive(keepAlive);\n  }\n  if (reuseAddress != null) {\n    opts.setReuseAddress(reuseAddress);\n  }\n  if (tcpNoDelay != null) {\n    opts.setTcpNoDelay(tcpNoDelay);\n  }\n  builder.withSocketOptions(opts);\n  return builder;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/cassandra/CassandraConfig.java",
    "Start": 4542,
    "Stop": 6218,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "createBuilder"
}
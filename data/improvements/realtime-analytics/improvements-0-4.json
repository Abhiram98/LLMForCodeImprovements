{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code duplication",
                "Change_Diff": "- if (subSession == null) {...} else if (subSession.getExpirationTime() < session.getLastModifiedTime()) {...}\n+ if (subSession == null || subSession.getExpirationTime() < session.getLastModifiedTime()) { initializeSubSession(subSession, info, profile, currentTime, eventTimestamp); }",
                "Description": "The code to initialize a new or expired SubSession is duplicated. This could be refactored into a separate method to reduce redundancy and improve maintainability.",
                "Start": 8,
                "End": 33
            },
            {
                "Improvement": "Extract logic into helper methods",
                "Change_Diff": "- if (subSession.getEventCount() == 1 && profile.getBeginMarker() != null) {...}\n+ if (isStartOfNewSession(subSession, profile)) { handleStartOfSession(subSession, profile, session, mainSessionProfile, event); }",
                "Description": "The method is quite long and does a lot of different things. This reduces readability and maintainability. Extracting some of the logic into helper methods would make the code easier to understand and modify. For example, the code for handling the start of a new session (lines 49-66) could be moved into a separate method.",
                "Start": 49,
                "End": 66
            }
        ],
        "Final code": "private void processSubSession(JetstreamEvent event, Session session, String mainIdentifier, SessionizationInfo info, SubSessionProfile profile, long eventTimestamp) {\n    String subSessionIdenfifier = info.getIdentifier();\n    SubSession subSession = session.getSubSession(subSessionIdenfifier, profile.getName());\n    long currentTime = session.getLastModifiedTime();\n    if (subSession == null || subSession.getExpirationTime() < session.getLastModifiedTime()) {\n        initializeSubSession(subSession, info, profile, currentTime, eventTimestamp);\n    } else {\n        updateSubSession(subSession, currentTime);\n    }\n    if (session.getExpirationTime() < subSession.getExpirationTime()) {\n        session.setExpirationTime(subSession.getExpirationTime());\n    }\n    EsperSessionizer subEsperSessionizer = subEsperSessionizerMap.get(profile.getName());\n    if (subEsperSessionizer != null && subEsperSessionizer.isEventSupported(event)) {\n        subEsperSessionizer.process(subSession, session, event);\n    }\n    if (isStartOfNewSession(subSession, profile)) { \n        handleStartOfSession(subSession, profile, session, mainSessionProfile, event); \n    }\n}"
    },
    "Old_Method": "private void processSubSession(JetstreamEvent event,Session session,String mainIdentifier,SessionizationInfo info,SubSessionProfile profile,long eventTimestamp){\n  String subSessionIdenfifier=info.getIdentifier();\n  SubSession subSession=session.getSubSession(subSessionIdenfifier,profile.getName());\n  long currentTime=session.getLastModifiedTime();\n  if (subSession == null) {\n    subSession=new SubSession();\n    subSession.setIdentifier(subSessionIdenfifier);\n    subSession.setName(profile.getName());\n    subSession.setCreationTime(currentTime);\n    subSession.setEventCount(1);\n    if (info.getTtl() > 0) {\n      subSession.setTtl(Math.min(info.getTtl(),maxSessionIdleTime));\n    }\n else {\n      subSession.setTtl(Math.min(profile.getDefaultTtl(),maxSessionIdleTime));\n    }\n    if (subSession.getTtl() > session.getTtl()) {\n      subSession.setTtl(session.getTtl());\n    }\n    subSession.setFirstEventTimestamp(eventTimestamp);\n    subSession.setLastModifiedTime(currentTime);\n    subSession.setExpirationTime(currentTime + subSession.getTtl());\n    subSession.setSessionId(concatTimestamp(session.getIdentifier(),subSessionIdenfifier,subSession.getFirstEventTimestamp()));\n    session.addSubSession(subSession);\n  }\n else   if (subSession.getExpirationTime() < session.getLastModifiedTime()) {\n    subSessionEnd(mainIdentifier,session,subSession);\n    subSession.setCreationTime(currentTime);\n    subSession.setEventCount(1);\n    if (info.getTtl() > 0) {\n      subSession.setTtl(Math.min(info.getTtl(),maxSessionIdleTime));\n    }\n else {\n      subSession.setTtl(Math.min(profile.getDefaultTtl(),maxSessionIdleTime));\n    }\n    if (subSession.getTtl() > session.getTtl()) {\n      subSession.setTtl(session.getTtl());\n    }\n    subSession.setFirstEventTimestamp(eventTimestamp);\n    subSession.setLastModifiedTime(currentTime);\n    subSession.setExpirationTime(currentTime + subSession.getTtl());\n    subSession.setSessionId(concatTimestamp(session.getIdentifier(),subSessionIdenfifier,subSession.getFirstEventTimestamp()));\n    if (subSession.getInitialAttributes() != null) {\n      subSession.getInitialAttributes().clear();\n    }\n    if (subSession.getDynamicAttributes() != null) {\n      subSession.getDynamicAttributes().clear();\n    }\n  }\n else {\n    subSession.setSessionId(concatTimestamp(session.getIdentifier(),subSessionIdenfifier,subSession.getFirstEventTimestamp()));\n    if (subSession.getEventCount() < Integer.MAX_VALUE) {\n      subSession.setEventCount(subSession.getEventCount() + 1);\n    }\n    subSession.setExpirationTime(currentTime + subSession.getTtl());\n    subSession.setLastModifiedTime(currentTime);\n  }\n  if (session.getExpirationTime() < subSession.getExpirationTime()) {\n    session.setExpirationTime(subSession.getExpirationTime());\n  }\n  EsperSessionizer subEsperSessionizer=subEsperSessionizerMap.get(profile.getName());\n  if (subEsperSessionizer != null && subEsperSessionizer.isEventSupported(event)) {\n    subEsperSessionizer.process(subSession,session,event);\n  }\n  if (subSession.getEventCount() == 1 && profile.getBeginMarker() != null) {\n    JetstreamEvent sessionBeginEvent=new JetstreamEvent();\n    sessionBeginEvent.setEventType(profile.getBeginMarker());\n    Map<String,Object> initialAttributes=subSession.getInitialAttributes();\n    if (initialAttributes != null) {\n      sessionBeginEvent.putAll(initialAttributes);\n    }\n    if (profile.getSessionIdKey() != null) {\n      sessionBeginEvent.put(profile.getSessionIdKey(),subSession.getSessionId());\n    }\n    if (mainSessionProfile.getSessionStartTimestampKey() != null) {\n      sessionBeginEvent.put(mainSessionProfile.getSessionStartTimestampKey(),subSession.getCreationTime());\n    }\n    if (subEsperSessionizer != null && subEsperSessionizer.isEventSupported(sessionBeginEvent)) {\n      subEsperSessionizer.process(subSession,session,sessionBeginEvent);\n    }\n    eventSender.sendSubSessionBeginEvent(mainSessionProfile.getSessionType(),subSession,sessionBeginEvent);\n  }\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/impl/Sessionizer.java",
    "Start": 7838,
    "Stop": 12484,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "processSubSession"
}
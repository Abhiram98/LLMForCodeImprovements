{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Optional to avoid null checks",
                "Change_Diff": "- if (username != null && password != null) { \n+ Optional.ofNullable(username).ifPresent(uname -> Optional.ofNullable(password).ifPresent(pwd -> builder.withCredentials(uname, pwd))); \n- if (reconnectionPolicy != null) { \n+ Optional.ofNullable(reconnectionPolicy).ifPresent(policy -> builder.withReconnectionPolicy(policy)); \n- if (retryPolicy != null) { \n+ Optional.ofNullable(retryPolicy).ifPresent(policy -> builder.withRetryPolicy(policy)); \n- if (sslOptions != null) { \n+ Optional.ofNullable(sslOptions).ifPresent(opts -> builder.withSSL(opts));",
                "Description": "Java 8 introduced Optional, which is a container object that can contain non-null values. This can be used to avoid null checks. Instead of checking if a variable is not null before using it, use Optional.ofNullable(variable).ifPresent(value -> use(value)).",
                "Start": 6,
                "End": 29
            },
            {
                "Improvement": "Replace conditional with polymorphism for JMX and Metrics",
                "Change_Diff": "- if (!jmxEnabled) { \n+ enableJMX(builder); \n- if (!metricsEnabled) { \n+ enableMetrics(builder);",
                "Description": "Rather than using a conditional statement to decide whether or not to enable JMX and Metrics, create a method that always does the action, and then override that method in a subclass that doesn't. This is a cleaner way to handle conditional logic and makes the code more maintainable.",
                "Start": 17,
                "End": 20
            }
        ],
        "Final code": "public Builder createBuilder(){ \n    Builder builder=Cluster.builder(); \n    for (String address : contactPoints) { \n        builder.addContactPoint(address); \n    } \n    builder.withCompression(compression); \n    Optional.ofNullable(username).ifPresent(uname -> Optional.ofNullable(password).ifPresent(pwd -> builder.withCredentials(uname, pwd))); \n    Optional.ofNullable(reconnectionPolicy).ifPresent(policy -> builder.withReconnectionPolicy(policy)); \n    Optional.ofNullable(retryPolicy).ifPresent(policy -> builder.withRetryPolicy(policy)); \n    builder.withPort(port); \n    enableJMX(builder); \n    enableMetrics(builder); \n    Optional.ofNullable(sslOptions).ifPresent(opts -> builder.withSSL(opts)); \n    copyPoolingOptions(builder); \n    SocketOptions opts=new SocketOptions(); \n    opts.setConnectTimeoutMillis(connectTimeoutMillis); \n    opts.setReadTimeoutMillis(readTimeoutMillis); \n    ... \n    builder.withSocketOptions(opts); \n    return builder; \n}"
    },
    "Old_Method": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (  String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n  if (username != null && password != null) {\n    builder.withCredentials(username,password);\n  }\n  if (reconnectionPolicy != null) {\n    builder.withReconnectionPolicy(reconnectionPolicy);\n  }\n  if (retryPolicy != null) {\n    builder.withRetryPolicy(retryPolicy);\n  }\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  if (sslOptions != null) {\n    builder.withSSL(sslOptions);\n  }\n  copyPoolingOptions(builder);\n  SocketOptions opts=new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  if (receiveBufferSize != null) {\n    opts.setReceiveBufferSize(receiveBufferSize);\n  }\n  if (sendBufferSize != null) {\n    opts.setSendBufferSize(sendBufferSize);\n  }\n  if (soLinger != null) {\n    opts.setSoLinger(soLinger);\n  }\n  if (keepAlive != null) {\n    opts.setKeepAlive(keepAlive);\n  }\n  if (reuseAddress != null) {\n    opts.setReuseAddress(reuseAddress);\n  }\n  if (tcpNoDelay != null) {\n    opts.setTcpNoDelay(tcpNoDelay);\n  }\n  builder.withSocketOptions(opts);\n  return builder;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/cassandra/CassandraConfig.java",
    "Start": 4542,
    "Stop": 6218,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "createBuilder"
}
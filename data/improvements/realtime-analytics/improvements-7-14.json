{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove redundant null check",
                "Change_Diff": "- else if (conf == null && counterMap.size() > getConfiguration().getGroupCounterMax()) {\n+ else if (counterMap.size() > getConfiguration().getGroupCounterMax()) {",
                "Description": "The null check for `conf` is performed twice. The nested if-else conditions check for both `null` and `non-null` scenarios. Hence, the second null check for `conf` inside the else condition is redundant and can be removed.",
                "Start": 12,
                "End": 12
            },
            {
                "Improvement": "Avoid unnecessary synchronization",
                "Change_Diff": "- synchronized (this) {\n+ Map<MCMetricGroupDemension,Counter> newCounterMap = (conf != null) ? CacheManager.getCounterOffHeapCache(metricName,conf) : CacheManager.getCounterCache();\n+ synchronized (this) {",
                "Description": "The synchronization block is used twice. It can be avoided by creating the `newCounterMap` outside the synchronization block and only synchronizing on the `groupbyWithTagsMetricMap.put()` call which is the critical section.",
                "Start": 15,
                "End": 19
            },
            {
                "Improvement": "Combine similar code blocks",
                "Change_Diff": "- if (conf != null) {\n...\n} else if (...) {\n...\n}\n+ Map<MCMetricGroupDemension,Counter> newCounterMap = (conf != null) ? CacheManager.getCounterOffHeapCache(metricName,conf) : CacheManager.getCounterCache();\n+ synchronized (this) {\n    groupbyWithTagsMetricMap.put(metricName,newCounterMap);\n}\n+ mapClear = true;",
                "Description": "The code to create the `newCounterMap` and put it into `groupbyWithTagsMetricMap` is the same in two places. This can be combined into a single block. The condition to check `conf` can be used to decide the type of `newCounterMap`.",
                "Start": 15,
                "End": 29
            }
        ],
        "Final code": "private List<JetstreamEvent> createJetStreamGroupbyCountEventsWithTags(String metricName){\n  Map<MCMetricGroupDemension,Counter> counterMap=groupbyWithTagsMetricMap.get(metricName);\n  if (counterMap == null) return Collections.emptyList();\n  OffHeapCacheConfig conf = (getConfiguration().getOffheapMetricConf() != null) ? getConfiguration().getOffheapMetricConf().get(metricName) : null;\n  Integer threshold=getConfiguration().getMetricsThreshold().get(metricName);\n  int _threshold = (threshold != null) ? threshold.intValue() : 0;\n  boolean mapClear = false;\n  if (conf != null || counterMap.size() > getConfiguration().getGroupCounterMax()) {\n    Map<MCMetricGroupDemension,Counter> newCounterMap = (conf != null) ? CacheManager.getCounterOffHeapCache(metricName,conf) : CacheManager.getCounterCache();\n    synchronized (this) {\n      groupbyWithTagsMetricMap.put(metricName,newCounterMap);\n    }\n    mapClear = true;\n  }\n  ... // Rest of the code remains the same\n}"
    },
    "Old_Method": "private List<JetstreamEvent> createJetStreamGroupbyCountEventsWithTags(String metricName){\n  Map<MCMetricGroupDemension,Counter> counterMap=groupbyWithTagsMetricMap.get(metricName);\n  if (counterMap == null)   return Collections.emptyList();\n  OffHeapCacheConfig conf=null;\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    conf=getConfiguration().getOffheapMetricConf().get(metricName);\n  }\n  Integer threshold=getConfiguration().getMetricsThreshold().get(metricName);\n  int _threshold=0;\n  if (threshold != null) {\n    _threshold=threshold.intValue();\n  }\n  boolean mapClear=false;\n  if (conf != null) {\nsynchronized (this) {\n      Map<MCMetricGroupDemension,Counter> newCounterMap=CacheManager.getCounterOffHeapCache(metricName,conf);\n      groupbyWithTagsMetricMap.put(metricName,newCounterMap);\n    }\n    mapClear=true;\n  }\n else   if (conf == null && counterMap.size() > getConfiguration().getGroupCounterMax()) {\nsynchronized (this) {\n      Map<MCMetricGroupDemension,Counter> newCounterMap=CacheManager.getCounterCache();\n      groupbyWithTagsMetricMap.put(metricName,newCounterMap);\n    }\n    mapClear=true;\n  }\n  List<JetstreamEvent> result=new ArrayList<JetstreamEvent>(counterMap.size());\n  long now=System.currentTimeMillis();\n  for (  Map.Entry<MCMetricGroupDemension,Counter> entry : counterMap.entrySet()) {\n    MCMetricGroupDemension groupDemension=entry.getKey();\n    Counter counter=entry.getValue();\n    counter.mark();\n    boolean timeBasedMetric=false;\n    if (groupDemension.getDimensions() != null && groupDemension.getDimensions().get(MCCounterHelper.TAG_METRICTIME) != null) {\n      timeBasedMetric=true;\n    }\n    if (counter.getLastDeltaValue() > _threshold) {\n      Map<String,Object> internalMap=new LinkedHashMap<String,Object>();\n      if (timeBasedMetric) {\n        internalMap.put(MCConstant.METRIC_TIME,Long.valueOf(groupDemension.getDimensions().get(MCCounterHelper.TAG_METRICTIME)));\n      }\n else {\n        internalMap.put(MCConstant.METRIC_TIME,now);\n      }\n      if (counter instanceof AvgCounter) {\n        internalMap.put(MCConstant.AGGREGATED_COUNT,((AvgCounter)counter).getLatestAvgValue());\n      }\n else {\n        internalMap.put(MCConstant.AGGREGATED_COUNT,counter.getLastDeltaValue());\n      }\n      internalMap.put(MCConstant.METRIC_NAME,metricName);\n      internalMap.put(MCConstant.METRIC_FREQUENCY,getFrequencyByMetricName(metricName));\n      internalMap.put(MCConstant.METRIC_DEMENSION,groupDemension);\n      if (counter.getLastCounterTime() != null) {\n        internalMap.put(MCConstant.TAG_TIME_IGNORE,counter.getLastCounterTime());\n      }\n      if (shutdownFlag.get()) {\n        internalMap.put(MCConstant.SHUTDOWN_FLUSH,MCConstant.SHUTDOWN_FLUSH);\n      }\n      if ((metricCollectionCounts.get(metricName) != null) && metricCollectionCounts.get(metricName).get() == 1) {\n        internalMap.put(MCConstant.FIRST_FLUSH,MCConstant.FIRST_FLUSH);\n      }\n      JetstreamEvent event=new JetstreamEvent(metricTables.get(metricName),null,internalMap);\n      result.add(event);\n    }\n    if (timeBasedMetric && counter.getLastDeltaValue() == 0) {\n      counterMap.remove(groupDemension);\n    }\n  }\n  if (result.size() > 0) {\n    JetstreamEvent lastEvent=result.get(result.size() - 1);\n    lastEvent.put(\"LastEventInBatch\",\"true\");\n  }\n  if (mapClear) {\n    counterMap.clear();\n    counterMap=null;\n    mapClearCount.increment();\n  }\n  return result;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 13857,
    "Stop": 18700,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "createJetStreamGroupbyCountEventsWithTags"
}
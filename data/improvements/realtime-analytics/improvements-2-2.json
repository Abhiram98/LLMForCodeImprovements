{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract validation logic to a separate method",
                "Change_Diff": "- List<String> errors=validator.validate();\n- if (!errors.isEmpty()) {\n-     throw new IllegalArgumentException(\"Config error: \" + errors);\n- }\n+ validateConfig(validator);",
                "Description": "The validation logic inside processApplicationEvent method is a separate concern and should be extracted to a separate method to improve readability and separation of concerns.",
                "Start": 8,
                "End": 11
            },
            {
                "Improvement": "Extract config update logic to a separate method",
                "Change_Diff": "- int readQueryTimeout=config.getReadQueryTimeout();\n- boolean enableReadOptimization=config.getEnableReadOptimization();\n- int maxIdleTime=config.getMaxIdleTime();\n- List<SessionProfile> mainSessionProfiles=config.getMainSessionProfiles();\n- EPL epl=config.getEpl();\n- List<String> imports=config.getImports();\n- EsperDeclaredEvents rawEventDefinition=config.getRawEventDefinition();\n- config.setReadQueryTimeout(newBean.getReadQueryTimeout());\n- config.setEnableReadOptimization(newBean.getEnableReadOptimization());\n- config.setMaxIdleTime(newBean.getMaxIdleTime());\n- config.setMainSessionProfiles(newBean.getMainSessionProfiles());\n- config.setEpl(newBean.getEpl());\n- config.setImports(newBean.getImports());\n- config.setRawEventDefinition(newBean.getRawEventDefinition());\n+ updateConfig(config, newBean);",
                "Description": "The config update logic inside processApplicationEvent method is a separate concern and should be extracted to a separate method to improve readability and separation of concerns.",
                "Start": 13,
                "End": 23
            },
            {
                "Improvement": "Extract error handling in the finally block to a separate method",
                "Change_Diff": "- for (SessionizerRunnable task : tasks) {\n-   if (task.newCompiledConfig != null) {\n-     task.newCompiledConfig.destroy();\n-     task.newCompiledConfig=null;\n-   }\n- }\n- config.setReadQueryTimeout(readQueryTimeout);\n- config.setEnableReadOptimization(enableReadOptimization);\n- config.setMaxIdleTime(maxIdleTime);\n- config.setMainSessionProfiles(mainSessionProfiles);\n- config.setEpl(epl);\n- config.setImports(imports);\n- config.setRawEventDefinition(rawEventDefinition);\n+ handleError(tasks, config, readQueryTimeout, enableReadOptimization, maxIdleTime, mainSessionProfiles, epl, imports, rawEventDefinition);",
                "Description": "The error handling logic in the finally block is a separate concern and should be extracted to a separate method to improve readability and separation of concerns.",
                "Start": 31,
                "End": 40
            }
        ],
        "Final code": "@Override protected void processApplicationEvent(ApplicationEvent event){\n  if (event instanceof ContextBeanChangedEvent) {\n    ContextBeanChangedEvent bcInfo=(ContextBeanChangedEvent)event;\n    SessionizerConfig newBean=(SessionizerConfig)(bcInfo.getApplicationContext().getBean(config.getBeanName()));\n    if (newBean != lastConfig) {\n      lastConfig=newBean;\n      SessionizerConfigValidator validator=new SessionizerConfigValidator(config,newBean);\n      validateConfig(validator);\n      int readQueryTimeout=config.getReadQueryTimeout();\n      boolean enableReadOptimization=config.getEnableReadOptimization();\n      int maxIdleTime=config.getMaxIdleTime();\n      List<SessionProfile> mainSessionProfiles=config.getMainSessionProfiles();\n      EPL epl=config.getEpl();\n      List<String> imports=config.getImports();\n      EsperDeclaredEvents rawEventDefinition=config.getRawEventDefinition();\n      updateConfig(config, newBean);\n      boolean isSuccess=false;\n      try {\n        for (SessionizerRunnable task : tasks) {\n          task.newCompiledConfig=new CompiledConfig(config,task);\n        }\n        isSuccess=true;\n      }\n  finally {\n        handleError(tasks, config, readQueryTimeout, enableReadOptimization, maxIdleTime, mainSessionProfiles, epl, imports, rawEventDefinition);\n      }\n      refreshConfig();\n    }\n  }\n}\n\nprivate void validateConfig(SessionizerConfigValidator validator) {\n  List<String> errors=validator.validate();\n  if (!errors.isEmpty()) {\n    throw new IllegalArgumentException(\"Config error: \" + errors);\n  }\n}\n\nprivate void updateConfig(SessionizerConfig oldConfig, SessionizerConfig newConfig) {\n  oldConfig.setReadQueryTimeout(newConfig.getReadQueryTimeout());\n  oldConfig.setEnableReadOptimization(newConfig.getEnableReadOptimization());\n  oldConfig.setMaxIdleTime(newConfig.getMaxIdleTime());\n  oldConfig.setMainSessionProfiles(newConfig.getMainSessionProfiles());\n  oldConfig.setEpl(newConfig.getEpl());\n  oldConfig.setImports(newConfig.getImports());\n  oldConfig.setRawEventDefinition(newConfig.getRawEventDefinition());\n}\n\nprivate void handleError(List<SessionizerRunnable> tasks, SessionizerConfig oldConfig, int readQueryTimeout, boolean enableReadOptimization, int maxIdleTime, List<SessionProfile> mainSessionProfiles, EPL epl, List<String> imports, EsperDeclaredEvents rawEventDefinition) {\n  for (SessionizerRunnable task : tasks) {\n    if (task.newCompiledConfig != null) {\n      task.newCompiledConfig.destroy();\n      task.newCompiledConfig=null;\n    }\n  }\n  oldConfig.setReadQueryTimeout(readQueryTimeout);\n  oldConfig.setEnableReadOptimization(enableReadOptimization);\n  oldConfig.setMaxIdleTime(maxIdleTime);\n  oldConfig.setMainSessionProfiles(mainSessionProfiles);\n  oldConfig.setEpl(epl);\n  oldConfig.setImports(imports);\n  oldConfig.setRawEventDefinition(rawEventDefinition);\n}"
    },
    "Old_Method": "@Override protected void processApplicationEvent(ApplicationEvent event){\n  if (event instanceof ContextBeanChangedEvent) {\n    ContextBeanChangedEvent bcInfo=(ContextBeanChangedEvent)event;\n    SessionizerConfig newBean=(SessionizerConfig)(bcInfo.getApplicationContext().getBean(config.getBeanName()));\n    if (newBean != lastConfig) {\n      lastConfig=newBean;\n      SessionizerConfigValidator validator=new SessionizerConfigValidator(config,newBean);\n      List<String> errors=validator.validate();\n      if (!errors.isEmpty()) {\n        throw new IllegalArgumentException(\"Config error: \" + errors);\n      }\n      int readQueryTimeout=config.getReadQueryTimeout();\n      boolean enableReadOptimization=config.getEnableReadOptimization();\n      int maxIdleTime=config.getMaxIdleTime();\n      List<SessionProfile> mainSessionProfiles=config.getMainSessionProfiles();\n      EPL epl=config.getEpl();\n      List<String> imports=config.getImports();\n      EsperDeclaredEvents rawEventDefinition=config.getRawEventDefinition();\n      config.setReadQueryTimeout(newBean.getReadQueryTimeout());\n      config.setEnableReadOptimization(newBean.getEnableReadOptimization());\n      config.setMaxIdleTime(newBean.getMaxIdleTime());\n      config.setMainSessionProfiles(newBean.getMainSessionProfiles());\n      config.setEpl(newBean.getEpl());\n      config.setImports(newBean.getImports());\n      config.setRawEventDefinition(newBean.getRawEventDefinition());\n      boolean isSuccess=false;\n      try {\n        for (        SessionizerRunnable task : tasks) {\n          task.newCompiledConfig=new CompiledConfig(config,task);\n        }\n        isSuccess=true;\n      }\n  finally {\n        if (!isSuccess) {\n          for (          SessionizerRunnable task : tasks) {\n            if (task.newCompiledConfig != null) {\n              task.newCompiledConfig.destroy();\n              task.newCompiledConfig=null;\n            }\n          }\n          config.setReadQueryTimeout(readQueryTimeout);\n          config.setEnableReadOptimization(enableReadOptimization);\n          config.setMaxIdleTime(maxIdleTime);\n          config.setMainSessionProfiles(mainSessionProfiles);\n          config.setEpl(epl);\n          config.setImports(imports);\n          config.setRawEventDefinition(rawEventDefinition);\n        }\n      }\n      refreshConfig();\n    }\n  }\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/impl/SessionizerProcessor.java",
    "Start": 70925,
    "Stop": 73856,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "processApplicationEvent"
}
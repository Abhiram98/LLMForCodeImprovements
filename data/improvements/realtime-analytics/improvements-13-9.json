{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "- for (Map.Entry<String,Object> entry : event.entrySet()) {\n- if (entry.getKey().toLowerCase().contains(\"total\")) {\n- total=(Long)entry.getValue();\n- break;\n- }\n- }",
                "Description": "The code that checks for 'total' in the event entries is repeated twice. This could be extracted into a separate method to follow the DRY (Don't Repeat Yourself) principle.",
                "Start": 10,
                "End": 16
            },
            {
                "Improvement": "Use constants for repeated string values",
                "Change_Diff": "- entry.getKey().toLowerCase().contains(\"total\")\n+ entry.getKey().toLowerCase().contains(TOTAL)\n- entry.getKey().toLowerCase().contains(\"count\")\n+ entry.getKey().toLowerCase().contains(COUNT)",
                "Description": "The strings 'total' and 'count' are used multiple times throughout this method. Define these as constants to avoid potential typos and make the code cleaner and more maintainable.",
                "Start": 6,
                "End": 58
            },
            {
                "Improvement": "Improve null checks",
                "Change_Diff": "- Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n+ Long count = Optional.ofNullable((Long)event.get(MCConstant.METRIC_COUNT)).orElse(0L);",
                "Description": "Instead of checking if each map value is not null before casting it to a Long, use the Optional class with orElse to provide a default value and avoid NullPointerExceptions.",
                "Start": 17,
                "End": 53
            }
        ],
        "Final code": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\nif (isPaused() || shutdownFlag.get()) {\nsuper.incrementEventDroppedCounter();\nreturn;\n}\nincrementEventRecievedCounter();\nif (MCCounterHelper.isMCCounterEvent(event)) {\nString metricName=(String)event.get(MCConstant.METRIC_NAME);\nLong total = getTotalFromEvent(event);\nLong count = getCountFromEvent(event);\nif (total != null) {\n((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n}\nelse getCounterByMetricName(metricName,false).inc(count);\n}\nelse if (MCCounterHelper.isMCMultiCounterEvent(event)) {\nfor (Map.Entry<String,Object> entry : event.entrySet()) {\nif (entry.getKey().toLowerCase().contains(COUNT)) {\nString metricName=entry.getKey();\nLong count=(Long)entry.getValue();\nif (count != null) {\ngetCounterByMetricName(metricName,false).inc(count);\n}\nelse {\nLOGGER.warn(\"Null Count returned by EPL, CountName:\" + metricName);\n}\n}\n}\n}\nelse if (MCCounterHelper.isGroupByCounterEvent(event)) {\nif (getConfiguration().isEnableGroupByCounter()) {\nString metricName=(String)event.get(MCConstant.METRIC_NAME);\nString groupId=(String)event.get(MCConstant.GROUP_ID);\nif (groupId != null && groupId.trim().length() != 0) {\nlong registerdFreq=getFrequencyByMetricName(metricName);\nif (event.get(MCConstant.FREQUENCY_IN_MIN) == null && registerdFreq <= 0) {\nsetMetricFrequency(metricName,MetricFrequency.ONE_MINUTE.getValue());\n}\nelse if (event.get(MCConstant.FREQUENCY_IN_MIN) != null) {\nInteger frequencyInMin=(Integer)event.get(MCConstant.FREQUENCY_IN_MIN);\nlong frequency=frequencyInMin * MetricFrequency.ONE_MINUTE.getValue();\nif (frequency > 0 && frequency != registerdFreq) {\nsetMetricFrequency(metricName,frequency);\n}\n}\nmetricTables.put(metricName,event.getEventType());\nMap<String,String> tags=new HashMap<String,String>(5);\nMCCounterHelper.isGroupByCounterEventWithTag(event,tags);\nLong total = getTotalFromEvent(event);\nLong count = getCountFromEvent(event);\nif (total != null) {\ngetCounterByMetricDemensionAndInc(metricName,groupId,tags,true,count,total);\n}\nelse {\ngetCounterByMetricDemensionAndInc(metricName,groupId,tags,false,count,null);\n}\n}\nelse {\nLOGGER.warn(\"Null or empty groupId returned by EPL, metricName:\" + metricName);\n}\n}\n}\nelse {\nevaluateRawEvent(event);\n}\n}\n\nprivate Long getTotalFromEvent(JetstreamEvent event) {\nfor (Map.Entry<String,Object> entry : event.entrySet()) {\nif (entry.getKey().toLowerCase().contains(TOTAL)) {\nreturn (Long)entry.getValue();\n}\n}\nreturn null;\n}\n\nprivate Long getCountFromEvent(JetstreamEvent event) {\nreturn Optional.ofNullable((Long)event.get(MCConstant.METRIC_COUNT)).orElse(0L);\n}\n}"
    },
    "Old_Method": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\n  if (isPaused() || shutdownFlag.get()) {\n    super.incrementEventDroppedCounter();\n    return;\n  }\n  incrementEventRecievedCounter();\n  if (MCCounterHelper.isMCCounterEvent(event)) {\n    String metricName=(String)event.get(MCConstant.METRIC_NAME);\n    Long total=null;\n    if (MCCounterHelper.isAvgEvent(metricName)) {\n      for (      Map.Entry<String,Object> entry : event.entrySet()) {\n        if (entry.getKey().toLowerCase().contains(\"total\")) {\n          total=(Long)entry.getValue();\n          break;\n        }\n      }\n    }\n    if (event.get(MCConstant.METRIC_COUNT) != null) {\n      Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n      if (total != null) {\n        ((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n      }\n else       getCounterByMetricName(metricName,false).inc(count);\n    }\n else {\n      getCounterByMetricName(metricName,false).inc();\n    }\n  }\n else   if (MCCounterHelper.isMCMultiCounterEvent(event)) {\n    for (    Map.Entry<String,Object> entry : event.entrySet()) {\n      if (entry.getKey().toLowerCase().contains(\"count\")) {\n        String metricName=entry.getKey();\n        Long count=(Long)entry.getValue();\n        if (count != null) {\n          getCounterByMetricName(metricName,false).inc(count);\n        }\n else {\n          LOGGER.warn(\"Null Count returned by EPL, CountName:\" + metricName);\n        }\n      }\n    }\n  }\n else   if (MCCounterHelper.isGroupByCounterEvent(event)) {\n    if (getConfiguration().isEnableGroupByCounter()) {\n      String metricName=(String)event.get(MCConstant.METRIC_NAME);\n      String groupId=(String)event.get(MCConstant.GROUP_ID);\n      if (groupId != null && groupId.trim().length() != 0) {\n        long registerdFreq=getFrequencyByMetricName(metricName);\n        if (event.get(MCConstant.FREQUENCY_IN_MIN) == null && registerdFreq <= 0) {\n          setMetricFrequency(metricName,MetricFrequency.ONE_MINUTE.getValue());\n        }\n else         if (event.get(MCConstant.FREQUENCY_IN_MIN) != null) {\n          Integer frequencyInMin=(Integer)event.get(MCConstant.FREQUENCY_IN_MIN);\n          long frequency=frequencyInMin * MetricFrequency.ONE_MINUTE.getValue();\n          if (frequency > 0 && frequency != registerdFreq) {\n            setMetricFrequency(metricName,frequency);\n          }\n        }\n        metricTables.put(metricName,event.getEventType());\n        Map<String,String> tags=new HashMap<String,String>(5);\n        MCCounterHelper.isGroupByCounterEventWithTag(event,tags);\n        Long total=null;\n        if (MCCounterHelper.isAvgEvent(metricName)) {\n          for (          Map.Entry<String,Object> entry : event.entrySet()) {\n            if (entry.getKey().toLowerCase().contains(\"total\")) {\n              total=(Long)entry.getValue();\n              break;\n            }\n          }\n        }\n        if (event.get(MCConstant.METRIC_COUNT) != null) {\n          Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n          if (total != null) {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,true,count,total);\n          }\n else {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,count,null);\n          }\n        }\n else {\n          getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,null,null);\n        }\n      }\n else {\n        LOGGER.warn(\"Null or empty groupId returned by EPL, metricName:\" + metricName);\n      }\n    }\n  }\n else {\n    evaluateRawEvent(event);\n  }\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 18706,
    "Stop": 23760,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "sendEvent"
}
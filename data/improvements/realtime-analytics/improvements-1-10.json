{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated logic to method",
                "Change_Diff": "- CacheManager.getCounterOffHeapCache(metricName,conf);\n- CacheManager.getCounterCache();\n- counters.put(groupDemension,counter);\n+ getCounter(metricName, counters, groupDemension, conf, isAvg);",
                "Description": "There is a repeated logic for creating and retrieving Counter objects which can be extracted into a separate method. This will make the code cleaner and easier to maintain.",
                "Start": 7,
                "End": 34
            },
            {
                "Improvement": "Avoid multiple calls to methods",
                "Change_Diff": "- if (getConfiguration().getOffheapMetricConf() != null) {\n- conf=getConfiguration().getOffheapMetricConf().get(metricName);\n+ OffHeapCacheConfig conf = getConfiguration().getOffheapMetricConf();\n+ if (conf != null) {\n+ conf = conf.get(metricName);",
                "Description": "The method 'getConfiguration().getOffheapMetricConf()' is called multiple times. Instead, you can call it once and store the result in a variable, then use this variable in the rest of your code. This will improve the performance of your code.",
                "Start": 5,
                "End": 6
            }
        ],
        "Final code": "private Counter getCounter(String metricName, Map<MCMetricGroupDemension,Counter> counters, MCMetricGroupDemension groupDemension, OffHeapCacheConfig conf, boolean isAvg) {\n    Counter counter = counters.get(groupDemension);\n    if (counter == null) {\n        counter = isAvg ? new AvgCounter() : new Counter();\n        if (conf == null) {\n            counters.put(groupDemension,counter);\n        }\n    }\n    return counter;\n}\n\nprivate Counter getCounterByMetricDemensionAndInc(String metricName, String groupId, Map<String,String> tags, boolean isAvg, Long count, Long total) {\n    Map<MCMetricGroupDemension,Counter> counters = groupbyWithTagsMetricMap.get(metricName);\n\n    OffHeapCacheConfig conf = getConfiguration().getOffheapMetricConf();\n    if (conf != null) {\n        conf = conf.get(metricName);\n    }\n\n    if (counters == null) {\n        synchronized (this) {\n            if (counters == null) {\n                counters = conf != null ? CacheManager.getCounterOffHeapCache(metricName,conf) : CacheManager.getCounterCache();\n                groupbyWithTagsMetricMap.put(metricName,counters);\n            }\n        }\n    }\n\n    MCMetricGroupDemension groupDemension = tags == null || tags.isEmpty() ? new MCMetricGroupDemension(metricName,groupId) : new MCMetricGroupDemension(metricName,groupId,tags);\n    String tag_time = tags != null && tags.containsKey(MCConstant.TAG_TIME_IGNORE) ? tags.remove(MCConstant.TAG_TIME_IGNORE) : null;\n\n    Counter counter = getCounter(metricName, counters, groupDemension, conf, isAvg);\n\n    if (tag_time != null) {\n        counter.setLastCounterTime(tag_time);\n    }\n\n    if (isAvg) {\n        ((AvgCounter)counter).inc(count,total);\n    } else {\n        if (count != null) {\n            counter.inc(count);\n        } else {\n            counter.inc();\n        }\n    }\n\n    if (conf != null) {\n        counters.put(groupDemension,counter);\n    }\n\n    return counter;\n}"
    },
    "Old_Method": "private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  Map<MCMetricGroupDemension,Counter> counters=groupbyWithTagsMetricMap.get(metricName);\n  OffHeapCacheConfig conf=null;\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    conf=getConfiguration().getOffheapMetricConf().get(metricName);\n  }\n  if (counters == null) {\nsynchronized (this) {\n      if (counters == null) {\n        if (conf != null) {\n          counters=CacheManager.getCounterOffHeapCache(metricName,conf);\n        }\n else {\n          counters=CacheManager.getCounterCache();\n        }\n        groupbyWithTagsMetricMap.put(metricName,counters);\n      }\n    }\n  }\n  MCMetricGroupDemension groupDemension=null;\n  String tag_time=null;\n  if (tags == null || tags.isEmpty()) {\n    groupDemension=new MCMetricGroupDemension(metricName,groupId);\n  }\n else {\n    if (tags.containsKey(MCConstant.TAG_TIME_IGNORE)) {\n      tag_time=tags.remove(MCConstant.TAG_TIME_IGNORE);\n    }\n    groupDemension=new MCMetricGroupDemension(metricName,groupId,tags);\n  }\n  Counter counter=counters.get(groupDemension);\n  if (counter == null) {\n    if (isAvg) {\n      counter=new AvgCounter();\n    }\n else {\n      counter=new Counter();\n    }\n    if (conf == null) {\n      counters.put(groupDemension,counter);\n    }\n  }\n  if (tag_time != null) {\n    counter.setLastCounterTime(tag_time);\n  }\n  if (isAvg) {\n    ((AvgCounter)counter).inc(count,total);\n  }\n else {\n    if (count != null) {\n      counter.inc(count);\n    }\n else {\n      counter.inc();\n    }\n  }\n  if (conf != null) {\n    counters.put(groupDemension,counter);\n  }\n  return counter;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 9927,
    "Stop": 12300,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "getCounterByMetricDemensionAndInc"
}
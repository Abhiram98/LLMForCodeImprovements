{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace the repeated calls to getCounterByMetricName with a single call",
                "Change_Diff": "- getCounterByMetricName(metricName,false).inc(count);\n- getCounterByMetricName(metricName,false).inc();\n+ Counter counter = getCounterByMetricName(metricName,false);\n+ counter.inc(count);\n+ counter.inc();",
                "Description": "Instead of calling getCounterByMetricName multiple times with the same parameters, call it once and store the result in a variable. This will improve the efficiency of the code.",
                "Start": 14,
                "End": 24
            },
            {
                "Improvement": "Replace the repeated calls to event.get with a single call",
                "Change_Diff": "- String metricName=(String)event.get(MCConstant.METRIC_NAME);\n- Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n+ String metricName=(String)event.get(MCConstant.METRIC_NAME);\n+ Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n+ Long total=(Long)event.get(\"total\");",
                "Description": "Instead of calling event.get multiple times with the same parameters, call it once and store the result in a variable. This will improve the efficiency of the code.",
                "Start": 6,
                "End": 8
            },
            {
                "Improvement": "Combine nested if conditions",
                "Change_Diff": "- if (MCCounterHelper.isMCMultiCounterEvent(event)) {\n-   for (Map.Entry<String,Object> entry : event.entrySet()) {\n-       if (entry.getKey().toLowerCase().contains(\"count\")) {\n+ if (MCCounterHelper.isMCMultiCounterEvent(event) && entry.getKey().toLowerCase().contains(\"count\")) {",
                "Description": "Instead of having nested if conditions, you can combine them using logical AND operator. It makes the code cleaner and easier to read.",
                "Start": 26,
                "End": 34
            }
        ],
        "Final code": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\n  if (isPaused() || shutdownFlag.get()) {\n    super.incrementEventDroppedCounter();\n    return;\n  }\n  incrementEventRecievedCounter();\n  String metricName=(String)event.get(MCConstant.METRIC_NAME);\n  Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n  Long total=(Long)event.get(\"total\");\n  if (MCCounterHelper.isMCCounterEvent(event)) {\n    if (total != null) {\n      ((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n    } else {\n      Counter counter = getCounterByMetricName(metricName,false);\n      counter.inc(count);\n      counter.inc();\n    }\n  } else if (MCCounterHelper.isMCMultiCounterEvent(event) && entry.getKey().toLowerCase().contains(\"count\")) {\n    String metricName=entry.getKey();\n    Long count=(Long)entry.getValue();\n    if (count != null) {\n      getCounterByMetricName(metricName,false).inc(count);\n    } else {\n      LOGGER.warn(\"Null Count returned by EPL, CountName:\" + metricName);\n    }\n    ... // Rest of the code remains the same\n  }\n}"
    },
    "Old_Method": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\n  if (isPaused() || shutdownFlag.get()) {\n    super.incrementEventDroppedCounter();\n    return;\n  }\n  incrementEventRecievedCounter();\n  if (MCCounterHelper.isMCCounterEvent(event)) {\n    String metricName=(String)event.get(MCConstant.METRIC_NAME);\n    Long total=null;\n    if (MCCounterHelper.isAvgEvent(metricName)) {\n      for (      Map.Entry<String,Object> entry : event.entrySet()) {\n        if (entry.getKey().toLowerCase().contains(\"total\")) {\n          total=(Long)entry.getValue();\n          break;\n        }\n      }\n    }\n    if (event.get(MCConstant.METRIC_COUNT) != null) {\n      Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n      if (total != null) {\n        ((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n      }\n else       getCounterByMetricName(metricName,false).inc(count);\n    }\n else {\n      getCounterByMetricName(metricName,false).inc();\n    }\n  }\n else   if (MCCounterHelper.isMCMultiCounterEvent(event)) {\n    for (    Map.Entry<String,Object> entry : event.entrySet()) {\n      if (entry.getKey().toLowerCase().contains(\"count\")) {\n        String metricName=entry.getKey();\n        Long count=(Long)entry.getValue();\n        if (count != null) {\n          getCounterByMetricName(metricName,false).inc(count);\n        }\n else {\n          LOGGER.warn(\"Null Count returned by EPL, CountName:\" + metricName);\n        }\n      }\n    }\n  }\n else   if (MCCounterHelper.isGroupByCounterEvent(event)) {\n    if (getConfiguration().isEnableGroupByCounter()) {\n      String metricName=(String)event.get(MCConstant.METRIC_NAME);\n      String groupId=(String)event.get(MCConstant.GROUP_ID);\n      if (groupId != null && groupId.trim().length() != 0) {\n        long registerdFreq=getFrequencyByMetricName(metricName);\n        if (event.get(MCConstant.FREQUENCY_IN_MIN) == null && registerdFreq <= 0) {\n          setMetricFrequency(metricName,MetricFrequency.ONE_MINUTE.getValue());\n        }\n else         if (event.get(MCConstant.FREQUENCY_IN_MIN) != null) {\n          Integer frequencyInMin=(Integer)event.get(MCConstant.FREQUENCY_IN_MIN);\n          long frequency=frequencyInMin * MetricFrequency.ONE_MINUTE.getValue();\n          if (frequency > 0 && frequency != registerdFreq) {\n            setMetricFrequency(metricName,frequency);\n          }\n        }\n        metricTables.put(metricName,event.getEventType());\n        Map<String,String> tags=new HashMap<String,String>(5);\n        MCCounterHelper.isGroupByCounterEventWithTag(event,tags);\n        Long total=null;\n        if (MCCounterHelper.isAvgEvent(metricName)) {\n          for (          Map.Entry<String,Object> entry : event.entrySet()) {\n            if (entry.getKey().toLowerCase().contains(\"total\")) {\n              total=(Long)entry.getValue();\n              break;\n            }\n          }\n        }\n        if (event.get(MCConstant.METRIC_COUNT) != null) {\n          Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n          if (total != null) {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,true,count,total);\n          }\n else {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,count,null);\n          }\n        }\n else {\n          getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,null,null);\n        }\n      }\n else {\n        LOGGER.warn(\"Null or empty groupId returned by EPL, metricName:\" + metricName);\n      }\n    }\n  }\n else {\n    evaluateRawEvent(event);\n  }\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 18706,
    "Stop": 23760,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "sendEvent"
}
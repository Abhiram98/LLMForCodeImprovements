{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Extract duplicated code into separate method",
                "Change_Diff": "-        session.setFirstEventTimestamp(unsignedLongEncoder.decode(payload));\n-        session.setCreationTime(unsignedLongEncoder.decode(payload));\n-        session.setLastModifiedTime(unsignedLongEncoder.decode(payload));\n-        session.setExpirationTime(unsignedLongEncoder.decode(payload));\n-        session.setFirstExpirationTime(unsignedLongEncoder.decode(payload));\n-        session.setTtl(unsignedIntEncoder.decode(payload));\n-        session.setEventCount(unsignedIntEncoder.decode(payload));\n-        session.setBotEventCount(unsignedIntEncoder.decode(payload));\n-        session.setBotType(unsignedIntEncoder.decode(payload));\n-        session.setVersion(unsignedIntEncoder.decode(payload));\n-        session.setAffinityKey(encoder.decode(payload));\n-        session.setMetadataLastModifiedTime(unsignedLongEncoder.decode(payload));\n-        session.setRemoteServerInfo(encoder.decode(payload));\n-        session.setDynamicAttributes(bytePrimitiveEncoder.decode(payload));\n+        decodeSessionAttributes(session, unsignedLongEncoder, unsignedIntEncoder, encoder, bytePrimitiveEncoder, payload);",
                "Description": "Extract duplicated code into a separate method that decodes the session attributes from the payload.",
                "Start": 11,
                "End": 28
            },
            {
                "Improvement": "Use a foreach loop to iterate over sub sessions",
                "Change_Diff": "-        for (int i=0; i < subSize; i++) {\n-            SubSession sub=new SubSession();\n-            sub.setIdentifier(encoder.decode(payload));\n-            sub.setName(encoder.decode(payload));\n-            sub.setFirstEventTimestamp(unsignedLongEncoder.decode(payload));\n-            sub.setCreationTime(unsignedLongEncoder.decode(payload));\n-            sub.setLastModifiedTime(unsignedLongEncoder.decode(payload));\n-            sub.setExpirationTime(unsignedLongEncoder.decode(payload));\n-            sub.setTtl(unsignedIntEncoder.decode(payload));\n-            sub.setEventCount(payload.getInt());\n-            sub.setDynamicAttributes(bytePrimitiveEncoder.decode(payload));\n-            sub.setInitialAttributes(bytePrimitiveEncoder.decode(payload));\n-            subSessions.add(sub);\n-        }",
                "Description": "Use a foreach loop to iterate over the sub sessions instead of a traditional for loop with an index variable.",
                "Start": 42,
                "End": 57
            }
        ],
        "Final code": "public boolean setSessionPayload(Session session,ByteBuffer payload){\n    byte version=payload.get();\n    if (version != SESSION_VERSION) {\n        return false;\n    }\n\n    decodeSessionAttributes(session, unsignedLongEncoder, unsignedIntEncoder, encoder, bytePrimitiveEncoder, payload);\n\n    int subSize=payload.getInt();\n    if (subSize != -1) {\n        List<SubSession> subSessions=new ArrayList<SubSession>(subSize);\n        for (int i=0; i < subSize; i++) {\n            SubSession sub=new SubSession();\n            sub.setIdentifier(encoder.decode(payload));\n            sub.setName(encoder.decode(payload));\n            sub.setFirstEventTimestamp(unsignedLongEncoder.decode(payload));\n            sub.setCreationTime(unsignedLongEncoder.decode(payload));\n            sub.setLastModifiedTime(unsignedLongEncoder.decode(payload));\n            sub.setExpirationTime(unsignedLongEncoder.decode(payload));\n            sub.setTtl(unsignedIntEncoder.decode(payload));\n            sub.setEventCount(payload.getInt());\n            sub.setDynamicAttributes(bytePrimitiveEncoder.decode(payload));\n            sub.setInitialAttributes(bytePrimitiveEncoder.decode(payload));\n            subSessions.add(sub);\n        }\n        session.setSubSessions(subSessions);\n    }\n    return true;\n}"
    }],
    "Old_Method": "/** \n * Deserialize the payload and set the content to the session. Return false when version did not match.\n * @param session\n * @param metaData\n * @return\n */\npublic boolean setSessionPayload(Session session,ByteBuffer payload){\n  byte version=payload.get();\n  if (version != SESSION_VERSION) {\n    return false;\n  }\n  session.setFirstEventTimestamp(unsignedLongEncoder.decode(payload));\n  session.setCreationTime(unsignedLongEncoder.decode(payload));\n  session.setLastModifiedTime(unsignedLongEncoder.decode(payload));\n  session.setExpirationTime(unsignedLongEncoder.decode(payload));\n  session.setFirstExpirationTime(unsignedLongEncoder.decode(payload));\n  session.setTtl(unsignedIntEncoder.decode(payload));\n  session.setEventCount(unsignedIntEncoder.decode(payload));\n  session.setBotEventCount(unsignedIntEncoder.decode(payload));\n  session.setBotType(unsignedIntEncoder.decode(payload));\n  session.setVersion(unsignedIntEncoder.decode(payload));\n  session.setAffinityKey(encoder.decode(payload));\n  session.setMetadataLastModifiedTime(unsignedLongEncoder.decode(payload));\n  session.setRemoteServerInfo(encoder.decode(payload));\n  session.setDynamicAttributes(bytePrimitiveEncoder.decode(payload));\n  int subSize=payload.getInt();\n  if (subSize != -1) {\n    List<SubSession> subSessions=new ArrayList<SubSession>(subSize);\n    for (int i=0; i < subSize; i++) {\n      SubSession sub=new SubSession();\n      sub.setIdentifier(encoder.decode(payload));\n      sub.setName(encoder.decode(payload));\n      sub.setFirstEventTimestamp(unsignedLongEncoder.decode(payload));\n      sub.setCreationTime(unsignedLongEncoder.decode(payload));\n      sub.setLastModifiedTime(unsignedLongEncoder.decode(payload));\n      sub.setExpirationTime(unsignedLongEncoder.decode(payload));\n      sub.setTtl(unsignedIntEncoder.decode(payload));\n      sub.setEventCount(payload.getInt());\n      sub.setDynamicAttributes(bytePrimitiveEncoder.decode(payload));\n      sub.setInitialAttributes(bytePrimitiveEncoder.decode(payload));\n      subSessions.add(sub);\n    }\n    session.setSubSessions(subSessions);\n  }\n  return true;\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/util/BinaryFormatSerializer.java",
    "Start": 6177,
    "Stop": 8633,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "setSessionPayload"
}
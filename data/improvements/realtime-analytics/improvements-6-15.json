{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a separate method",
                "Change_Diff": "- processSessionizableEvent(event,sessionizerMap.get(next.getName()),next);\n...\n- processSessionizableEvent(event,sessionizerMap.get(entry.getKey()),entry.getValue());\n...\n- processSessionizableEvent(event,sessionizerMap.get(sessionizationInfo.getName()),sessionizationInfo);\n+ processEvent(event);",
                "Description": "The code for processing a sessionizable event is repeated multiple times. This code can be extracted into a separate method to improve readability and maintainability.",
                "Start": 6,
                "End": 8
            },
            {
                "Improvement": "Use a switch statement instead of multiple if-else statements",
                "Change_Diff": "- if (REFRESH_EVENT == event) {...}\nelse if (RESET_EVENT == event) {...}\nelse if (CONFIG_REFRESH_EVENT == event) {...}\n+ switch (event) {\ncase REFRESH_EVENT: ...\ncase RESET_EVENT: ...\ncase CONFIG_REFRESH_EVENT: ...\ndefault: ...",
                "Description": "The multiple if-else statements can be replaced with a switch statement. This will improve readability and make the code easier to maintain.",
                "Start": 17,
                "End": 32
            }
        ],
        "Final code": "@Override public void run(){\n  while (running) {\n    JetstreamEvent event;\n    while ((event=localQueue.poll()) != null) {\n      processEvent(event);\n    }\n    try {\n      event=responseQueue.poll();\n      if (event == null) {\n        event=requestQueue.take();\n      }\n    }\n catch (    InterruptedException e) {\n      continue;\n    }\n    switch (event) {\n      case REFRESH_EVENT:\n        refreshCounter.incrementAndGet();\n        break;\n      case RESET_EVENT:\n        resetHighWaterMark();\n        break;\n      case CONFIG_REFRESH_EVENT:\n        try {\n          updateConfig(config);\n        }\n catch (        Throwable ex) {\n          registerError(ex);\n        }\n        break;\n      default:\n        processDefaultEvent(event);\n        break;\n    }\n  }\n}\n\nprivate void processEvent(JetstreamEvent event) {\n  LinkedList<SessionizationInfo> pendingSessionizers=(LinkedList<SessionizationInfo>)event.get(SESSIONIZER_LIST);\n  SessionizationInfo next=pendingSessionizers.removeFirst();\n  if (pendingSessionizers.isEmpty()) {\n    event.remove(SESSIONIZER_LIST);\n  }\n  processSessionizableEvent(event,sessionizerMap.get(next.getName()),next);\n}\n\nprivate void registerError(Throwable ex) {\n  exceptionCounter.incrementAndGet();\n  errorManager.registerError(ex,ErrorType.Unexpected);\n}\n\nprivate void processDefaultEvent(JetstreamEvent event) {\n  try {\n    if (TIMER_EVENT == event || event == CONTINUE_EXPIRATION_EVENT) {\n      expiredTimeoutSessions(event);\n    }\n else {\n      handleEvent(event);\n    }\n  }\n catch (  Throwable ex) {\n    registerError(ex);\n  }\n}"
    },
    "Old_Method": "@Override public void run(){\n  while (running) {\n    JetstreamEvent event;\n    while ((event=localQueue.poll()) != null) {\n      @SuppressWarnings(\"unchecked\") LinkedList<SessionizationInfo> pendingSessionizers=(LinkedList<SessionizationInfo>)event.get(SESSIONIZER_LIST);\n      SessionizationInfo next=pendingSessionizers.removeFirst();\n      if (pendingSessionizers.isEmpty()) {\n        event.remove(SESSIONIZER_LIST);\n      }\n      processSessionizableEvent(event,sessionizerMap.get(next.getName()),next);\n    }\n    try {\n      event=responseQueue.poll();\n      if (event == null) {\n        event=requestQueue.take();\n      }\n    }\n catch (    InterruptedException e) {\n      continue;\n    }\n    if (REFRESH_EVENT == event) {\n      refreshCounter.incrementAndGet();\n      continue;\n    }\n else     if (RESET_EVENT == event) {\n      resetHighWaterMark();\n      continue;\n    }\n else     if (CONFIG_REFRESH_EVENT == event) {\n      try {\n        updateConfig(config);\n      }\n catch (      Throwable ex) {\n        exceptionCounter.incrementAndGet();\n        errorManager.registerError(ex,ErrorType.Unexpected);\n      }\n      continue;\n    }\n    try {\n      if (TIMER_EVENT == event || event == CONTINUE_EXPIRATION_EVENT) {\n        expiredTimeoutSessions(event);\n      }\n else {\n        String eventType=(String)event.get(JS_EVENT_TYPE);\n        if (!interEventTypes.contains(eventType)) {\n          eventCounters[taskId]++;\n          Map<String,SessionizationInfo> m=selector.process(event);\n          if (m == null || m.isEmpty()) {\n            bypassEventCounter++;\n            sendRawEvent(event);\n          }\n else           if (m.size() == 1) {\n            Entry<String,SessionizationInfo> entry=m.entrySet().iterator().next();\n            event.put(CURRENT_SESSIOIZERINFO,entry.getValue());\n            processSessionizableEvent(event,sessionizerMap.get(entry.getKey()),entry.getValue());\n          }\n else {\n            LinkedList<SessionizationInfo> slist=new LinkedList<SessionizationInfo>(m.values());\n            event.put(SESSIONIZER_LIST,slist);\n            SessionizationInfo sessionizationInfo=slist.removeFirst();\n            event.put(CURRENT_SESSIOIZERINFO,sessionizationInfo);\n            processSessionizableEvent(event,sessionizerMap.get(sessionizationInfo.getName()),sessionizationInfo);\n          }\n        }\n else {\n          handleInternalEvent(event,eventType);\n        }\n      }\n    }\n catch (    Throwable ex) {\n      exceptionCounter.incrementAndGet();\n      errorManager.registerError(ex,event,ErrorType.Unexpected);\n    }\n  }\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/impl/SessionizerProcessor.java",
    "Start": 32821,
    "Stop": 36449,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "run"
}
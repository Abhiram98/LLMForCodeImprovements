{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use String Joiner for concatenation",
                "Change_Diff": "- StringBuilder builder=new StringBuilder();\n+ StringJoiner joiner = new StringJoiner(\", \", \"InternalOffHeapManagerInfo: [\", \"]\");",
                "Description": "Instead of using StringBuilder for multiple concatenation, use StringJoiner which is more efficient in terms of performance and also provides more readability",
                "Start": 3,
                "End": 28
            },
            {
                "Improvement": "Use Optional to avoid null check",
                "Change_Diff": "- if (manager != null) {\n+ Optional.ofNullable(manager).ifPresent(mgr -> {",
                "Description": "Instead of checking for null explicitly, use Optional.ofNullable() which will return an Optional object that may or may not contain a non-null value",
                "Start": 9,
                "End": 23
            }
        ],
        "Final code": "public String getInternalOffHeapManagerInfo(){\n  StringJoiner joiner = new StringJoiner(\", \", \"InternalOffHeapManagerInfo: [\", \"]\");\n  Map<String,OffHeapMemoryManager> memoryManagers=OffHeapMemoryManagerRegistry.getInstance().getMemoryManagers();\n  for (  Map.Entry<String,OffHeapMemoryManager> entry : memoryManagers.entrySet()) {\n    joiner.add(\"MemoryManager-\" + entry.getKey() + \":\");\n    OffHeapMemoryManager manager=entry.getValue();\n    Optional.ofNullable(manager).ifPresent(mgr -> {\n      joiner.add(\"[FreeMemory:\" + mgr.getFreeMemory() + \";MaxMemory:\" + mgr.getMaxMemory() + \";ReservedMemory:\" + mgr.getReservedMemory() + \";UsedMemory:\" + mgr.getUsedMemory() + \";OutOfMeomoryErrorCount:\" + mgr.getOOMErrorCount() + \"]\");\n    });\n  }\n  return joiner.toString();\n}"
    },
    "Old_Method": "public String getInternalOffHeapManagerInfo(){\n  StringBuilder builder=new StringBuilder();\n  builder.append(\"InternalOffHeapManagerInfo:\");\n  Map<String,OffHeapMemoryManager> memoryManagers=OffHeapMemoryManagerRegistry.getInstance().getMemoryManagers();\n  for (  Map.Entry<String,OffHeapMemoryManager> entry : memoryManagers.entrySet()) {\n    builder.append(\"MemoryManager-\");\n    builder.append(entry.getKey());\n    builder.append(\":\");\n    OffHeapMemoryManager manager=entry.getValue();\n    if (manager != null) {\n      builder.append(\"[\");\n      builder.append(\"FreeMemory:\");\n      builder.append(manager.getFreeMemory());\n      builder.append(\";\");\n      builder.append(\"MaxMemory:\");\n      builder.append(manager.getMaxMemory());\n      builder.append(\";\");\n      builder.append(\"ReservedMemory:\");\n      builder.append(manager.getReservedMemory());\n      builder.append(\";\");\n      builder.append(\"UsedMemory:\");\n      builder.append(manager.getUsedMemory());\n      builder.append(\";\");\n      builder.append(\"OutOfMeomoryErrorCount:\");\n      builder.append(manager.getOOMErrorCount());\n      builder.append(\"]\");\n    }\n  }\n  return builder.toString();\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 27123,
    "Stop": 28572,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "getInternalOffHeapManagerInfo"
}
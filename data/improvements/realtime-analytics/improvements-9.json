{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Use method chaining",
                "Change_Diff": "- Builder builder = Cluster.builder();\n+ Builder builder = Cluster.builder()\n            .addContactPoints(contactPoints)\n            .withCompression(compression)",
                "Description": "Use method chaining to simplify the code and improve readability",
                "Start": 1,
                "End": 3
            },
            {
                "Improvement": "Use StringUtils.isNotBlank instead of null check",
                "Change_Diff": "- if (username != null && password != null) {\n+ if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {",
                "Description": "Use StringUtils.isNotBlank from Apache Commons Lang library to simplify the null check",
                "Start": 11,
                "End": 11
            },
            {
                "Improvement": "Use Objects.nonNull instead of null check",
                "Change_Diff": "- if (reconnectionPolicy != null) {\n+ if (Objects.nonNull(reconnectionPolicy)) {",
                "Description": "Use Objects.nonNull from Java 8 to simplify the null check",
                "Start": 14,
                "End": 14
            },
            {
                "Improvement": "Use optional with method chaining instead of null check",
                "Change_Diff": "- if (retryPolicy != null) {\n+ Optional.ofNullable(retryPolicy).ifPresent(builder::withRetryPolicy);",
                "Description": "Use Optional.ofNullable with method chaining to simplify the null check",
                "Start": 17,
                "End": 17
            },
            {
                "Improvement": "Use try-with-resources for SocketOptions",
                "Change_Diff": "- SocketOptions opts = new SocketOptions();\n+ try (SocketOptions opts = new SocketOptions()) {",
                "Description": "Use try-with-resources to automatically close SocketOptions",
                "Start": 23,
                "End": 23
            }
        ],
        "Final code": "public Builder createBuilder(){\n  Builder builder = Cluster.builder()\n            .addContactPoints(contactPoints)\n            .withCompression(compression);\n\n  if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n    builder.withCredentials(username,password);\n  }\n\n  if (Objects.nonNull(reconnectionPolicy)) {\n    builder.withReconnectionPolicy(reconnectionPolicy);\n  }\n\n  Optional.ofNullable(retryPolicy).ifPresent(builder::withRetryPolicy);\n\n  builder.withPort(port);\n\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n\n  if (sslOptions != null) {\n    builder.withSSL(sslOptions);\n  }\n\n  copyPoolingOptions(builder);\n\n  try (SocketOptions opts = new SocketOptions()) {\n    opts.setConnectTimeoutMillis(connectTimeoutMillis);\n    opts.setReadTimeoutMillis(readTimeoutMillis);\n\n    if (receiveBufferSize != null) {\n      opts.setReceiveBufferSize(receiveBufferSize);\n    }\n\n    if (sendBufferSize != null) {\n      opts.setSendBufferSize(sendBufferSize);\n    }\n\n    if (soLinger != null) {\n      opts.setSoLinger(soLinger);\n    }\n\n    if (keepAlive != null) {\n      opts.setKeepAlive(keepAlive);\n    }\n\n    if (reuseAddress != null) {\n      opts.setReuseAddress(reuseAddress);\n    }\n\n    if (tcpNoDelay != null) {\n      opts.setTcpNoDelay(tcpNoDelay);\n    }\n\n    builder.withSocketOptions(opts);\n  }\n\n  return builder;\n}"
    }],
    "Old_Method": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (  String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n  if (username != null && password != null) {\n    builder.withCredentials(username,password);\n  }\n  if (reconnectionPolicy != null) {\n    builder.withReconnectionPolicy(reconnectionPolicy);\n  }\n  if (retryPolicy != null) {\n    builder.withRetryPolicy(retryPolicy);\n  }\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  if (sslOptions != null) {\n    builder.withSSL(sslOptions);\n  }\n  copyPoolingOptions(builder);\n  SocketOptions opts=new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  if (receiveBufferSize != null) {\n    opts.setReceiveBufferSize(receiveBufferSize);\n  }\n  if (sendBufferSize != null) {\n    opts.setSendBufferSize(sendBufferSize);\n  }\n  if (soLinger != null) {\n    opts.setSoLinger(soLinger);\n  }\n  if (keepAlive != null) {\n    opts.setKeepAlive(keepAlive);\n  }\n  if (reuseAddress != null) {\n    opts.setReuseAddress(reuseAddress);\n  }\n  if (tcpNoDelay != null) {\n    opts.setTcpNoDelay(tcpNoDelay);\n  }\n  builder.withSocketOptions(opts);\n  return builder;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/cassandra/CassandraConfig.java",
    "Start": 4542,
    "Stop": 6218,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "createBuilder"
}
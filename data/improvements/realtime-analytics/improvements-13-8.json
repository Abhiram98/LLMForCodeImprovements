{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract methods for readability",
                "Change_Diff": "- @Override public void sendEvent(JetstreamEvent event) throws EventException { ... } \n+ @Override public void sendEvent(JetstreamEvent event) throws EventException { \n+ handlePauseAndShutdown(event); \n+ handleEventCounters(event); \n+ handleMultiCounterEvent(event); \n+ handleGroupByCounterEvent(event); \n+ evaluateRawEvent(event); \n+ }",
                "Description": "The method is very long and encapsulates several different functionalities. It would be more readable and maintainable to extract these functionalities into separate methods.",
                "Start": 1,
                "End": 85
            },
            {
                "Improvement": "Avoid using magic numbers",
                "Change_Diff": "- Map<String,String> tags=new HashMap<String,String>(5); \n+ final int INITIAL_TAG_MAP_SIZE = 5; \n+ Map<String,String> tags=new HashMap<String,String>(INITIAL_TAG_MAP_SIZE);",
                "Description": "There is a magic number 5 when creating a new HashMap. This number should be replaced with a named constant for clarity and to make changes easier.",
                "Start": 60,
                "End": 60
            },
            {
                "Improvement": "Avoid calling `toLowerCase()` multiple times",
                "Change_Diff": "- if (entry.getKey().toLowerCase().contains(\"count\")) { ... } \n+ String lowerCaseKey = entry.getKey().toLowerCase(); \n+ if (lowerCaseKey.contains(\"count\")) { ... }",
                "Description": "The method `toLowerCase()` is being called multiple times on the same string value, which is unnecessary. It would be better to call it once and store the result in a variable.",
                "Start": 42,
                "End": 43
            }
        ],
        "Final code": "private void handlePauseAndShutdown(JetstreamEvent event) { ... } \nprivate void handleEventCounters(JetstreamEvent event) { ... } \nprivate void handleMultiCounterEvent(JetstreamEvent event) { ... } \nprivate void handleGroupByCounterEvent(JetstreamEvent event) { ... } \n@Override public void sendEvent(JetstreamEvent event) throws EventException { \nhandlePauseAndShutdown(event); \nhandleEventCounters(event); \nhandleMultiCounterEvent(event); \nhandleGroupByCounterEvent(event); \nevaluateRawEvent(event); \n} \nfinal int INITIAL_TAG_MAP_SIZE = 5; \nMap<String,String> tags=new HashMap<String,String>(INITIAL_TAG_MAP_SIZE); \nString lowerCaseKey = entry.getKey().toLowerCase(); \nif (lowerCaseKey.contains(\"count\")) { ... }"
    },
    "Old_Method": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\n  if (isPaused() || shutdownFlag.get()) {\n    super.incrementEventDroppedCounter();\n    return;\n  }\n  incrementEventRecievedCounter();\n  if (MCCounterHelper.isMCCounterEvent(event)) {\n    String metricName=(String)event.get(MCConstant.METRIC_NAME);\n    Long total=null;\n    if (MCCounterHelper.isAvgEvent(metricName)) {\n      for (      Map.Entry<String,Object> entry : event.entrySet()) {\n        if (entry.getKey().toLowerCase().contains(\"total\")) {\n          total=(Long)entry.getValue();\n          break;\n        }\n      }\n    }\n    if (event.get(MCConstant.METRIC_COUNT) != null) {\n      Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n      if (total != null) {\n        ((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n      }\n else       getCounterByMetricName(metricName,false).inc(count);\n    }\n else {\n      getCounterByMetricName(metricName,false).inc();\n    }\n  }\n else   if (MCCounterHelper.isMCMultiCounterEvent(event)) {\n    for (    Map.Entry<String,Object> entry : event.entrySet()) {\n      if (entry.getKey().toLowerCase().contains(\"count\")) {\n        String metricName=entry.getKey();\n        Long count=(Long)entry.getValue();\n        if (count != null) {\n          getCounterByMetricName(metricName,false).inc(count);\n        }\n else {\n          LOGGER.warn(\"Null Count returned by EPL, CountName:\" + metricName);\n        }\n      }\n    }\n  }\n else   if (MCCounterHelper.isGroupByCounterEvent(event)) {\n    if (getConfiguration().isEnableGroupByCounter()) {\n      String metricName=(String)event.get(MCConstant.METRIC_NAME);\n      String groupId=(String)event.get(MCConstant.GROUP_ID);\n      if (groupId != null && groupId.trim().length() != 0) {\n        long registerdFreq=getFrequencyByMetricName(metricName);\n        if (event.get(MCConstant.FREQUENCY_IN_MIN) == null && registerdFreq <= 0) {\n          setMetricFrequency(metricName,MetricFrequency.ONE_MINUTE.getValue());\n        }\n else         if (event.get(MCConstant.FREQUENCY_IN_MIN) != null) {\n          Integer frequencyInMin=(Integer)event.get(MCConstant.FREQUENCY_IN_MIN);\n          long frequency=frequencyInMin * MetricFrequency.ONE_MINUTE.getValue();\n          if (frequency > 0 && frequency != registerdFreq) {\n            setMetricFrequency(metricName,frequency);\n          }\n        }\n        metricTables.put(metricName,event.getEventType());\n        Map<String,String> tags=new HashMap<String,String>(5);\n        MCCounterHelper.isGroupByCounterEventWithTag(event,tags);\n        Long total=null;\n        if (MCCounterHelper.isAvgEvent(metricName)) {\n          for (          Map.Entry<String,Object> entry : event.entrySet()) {\n            if (entry.getKey().toLowerCase().contains(\"total\")) {\n              total=(Long)entry.getValue();\n              break;\n            }\n          }\n        }\n        if (event.get(MCConstant.METRIC_COUNT) != null) {\n          Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n          if (total != null) {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,true,count,total);\n          }\n else {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,count,null);\n          }\n        }\n else {\n          getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,null,null);\n        }\n      }\n else {\n        LOGGER.warn(\"Null or empty groupId returned by EPL, metricName:\" + metricName);\n      }\n    }\n  }\n else {\n    evaluateRawEvent(event);\n  }\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 18706,
    "Stop": 23760,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "sendEvent"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use the Optional class for handling null values",
                "Change_Diff": "- if (username != null && password != null) {\n-    builder.withCredentials(username,password);\n-  }\n-  if (reconnectionPolicy != null) {\n-    builder.withReconnectionPolicy(reconnectionPolicy);\n-  }\n-  if (retryPolicy != null) {\n-    builder.withRetryPolicy(retryPolicy);\n-  }\n-  if (sslOptions != null) {\n-    builder.withSSL(sslOptions);\n-  }\n+ Optional.ofNullable(username).ifPresent(uname -> builder.withCredentials(uname, password));\n+ Optional.ofNullable(reconnectionPolicy).ifPresent(builder::withReconnectionPolicy);\n+ Optional.ofNullable(retryPolicy).ifPresent(builder::withRetryPolicy);\n+ Optional.ofNullable(sslOptions).ifPresent(builder::withSSL);",
                "Description": "Instead of manually checking for null values, use the Optional class from Java 8, which can help to prevent NullPointerExceptions.",
                "Start": 5,
                "End": 29
            },
            {
                "Improvement": "Use Builder Design Pattern",
                "Change_Diff": "- Builder builder=Cluster.builder();\n- for (  String address : contactPoints) {\n-    builder.addContactPoint(address);\n-  }\n-  builder.withCompression(compression);\n+ Builder builder = Cluster.builder().withCompression(compression);\n+ for (String address : contactPoints) {\n+    builder = builder.addContactPoint(address);\n+  }",
                "Description": "The method creates a Builder and then manually sets its properties. It would be cleaner to use a Builder pattern, which would allow you to chain method calls.",
                "Start": 1,
                "End": 29
            }
        ],
        "Final code": "public Builder createBuilder(){\n  Builder builder = Cluster.builder().withCompression(compression);\n  for (String address : contactPoints) {\n    builder = builder.addContactPoint(address);\n  }\n  Optional.ofNullable(username).ifPresent(uname -> builder.withCredentials(uname, password));\n  Optional.ofNullable(reconnectionPolicy).ifPresent(builder::withReconnectionPolicy);\n  Optional.ofNullable(retryPolicy).ifPresent(builder::withRetryPolicy);\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  Optional.ofNullable(sslOptions).ifPresent(builder::withSSL);\n  copyPoolingOptions(builder);\n  SocketOptions opts = new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  if (receiveBufferSize != null) {\n    opts.setReceiveBufferSize(receiveBufferSize);\n  }\n  if (sendBufferSize != null) {\n    opts.setSendBufferSize(sendBufferSize);\n  }\n  if (soLinger != null) {\n    opts.setSoLinger(soLinger);\n  }\n  if (keepAlive != null) {\n    opts.setKeepAlive(keepAlive);\n  }\n  if (reuseAddress != null) {\n    opts.setReuseAddress(reuseAddress);\n  }\n  if (tcpNoDelay != null) {\n    opts.setTcpNoDelay(tcpNoDelay);\n  }\n  builder.withSocketOptions(opts);\n  return builder;\n}"
    },
    "Old_Method": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (  String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n  if (username != null && password != null) {\n    builder.withCredentials(username,password);\n  }\n  if (reconnectionPolicy != null) {\n    builder.withReconnectionPolicy(reconnectionPolicy);\n  }\n  if (retryPolicy != null) {\n    builder.withRetryPolicy(retryPolicy);\n  }\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  if (sslOptions != null) {\n    builder.withSSL(sslOptions);\n  }\n  copyPoolingOptions(builder);\n  SocketOptions opts=new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  if (receiveBufferSize != null) {\n    opts.setReceiveBufferSize(receiveBufferSize);\n  }\n  if (sendBufferSize != null) {\n    opts.setSendBufferSize(sendBufferSize);\n  }\n  if (soLinger != null) {\n    opts.setSoLinger(soLinger);\n  }\n  if (keepAlive != null) {\n    opts.setKeepAlive(keepAlive);\n  }\n  if (reuseAddress != null) {\n    opts.setReuseAddress(reuseAddress);\n  }\n  if (tcpNoDelay != null) {\n    opts.setTcpNoDelay(tcpNoDelay);\n  }\n  builder.withSocketOptions(opts);\n  return builder;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/cassandra/CassandraConfig.java",
    "Start": 4542,
    "Stop": 6218,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "createBuilder"
}
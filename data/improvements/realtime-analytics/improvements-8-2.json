{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Optional to avoid null checks",
                "Change_Diff": "- Session transferInSession=reconstructSession(event,uid);\n+ Optional<Session> transferInSession=Optional.ofNullable(reconstructSession(event,uid));",
                "Description": "The null checks for `transferInSession` and `localSession` can be avoided by using Java 8's Optional. This results in cleaner and safer code.",
                "Start": 6,
                "End": 6
            },
            {
                "Improvement": "Reduce code duplication",
                "Change_Diff": "- if (transferInSession.getFirstEventTimestamp() != localSession.getFirstEventTimestamp()) {\n      transferInSession.setIdentifier(identifier);\n      transferInSession.setType(sessionizer.getType());\n      fireSessionEndMarkerEvent(transferInSession,sessionizer);\n    }\n+ handleSessionTimestamp(transferInSession, localSession, identifier, sessionizer);",
                "Description": "The code block that checks the `getFirstEventTimestamp` of `transferInSession` and `localSession` or `session` is repeated twice. This can be extracted into a separate method to reduce code duplication.",
                "Start": 35,
                "End": 39
            }
        ],
        "Final code": "private void handleTransferedSession(String identifier,String uid,JetstreamEvent event,Sessionizer sessionizer){\n  String ak=(String)event.get(AFFINITY_KEY);\n  Optional<Session> transferInSession=Optional.ofNullable(reconstructSession(event,uid));\n  if (!transferInSession.isPresent()) {\n    return;\n  }\n  event.put(Constants.EVENT_PAYLOAD_SESSION_OBJ,transferInSession.get());\n  sessionizer.updateSessionId(transferInSession.get());\n  if (transferInSession.get().getExpirationTime() <= System.currentTimeMillis() && recentlyExpiredSessions.containsKey(transferInSession.get().getSessionId())) {\n    String s=recentlyExpiredSessions.get(transferInSession.get().getSessionId());\n    if (Long.parseLong(s.split(\":\")[1]) == transferInSession.get().getExpirationTime()) {\n      return;\n    }\n  }\n  Optional<Session> localSession=Optional.ofNullable(localSessionCache.get(uid));\n  if (!localSession.isPresent() && !pendingReadEvents.containsKey(uid)) {\n    RemoteStoreProvider remoteDAO=provider;\n    if (remoteDAO != null && remoteDAO.asyncLoadSupport()) {\n      asyncLoadFromRemoteStore(event,uid,remoteDAO,ak);\n    }\n else     if (remoteDAO != null) {\n      Session session=remoteDAO.load(uid);\n      if (session == null) {\n        session=transferInSession.get();\n        if (session != null) {\n          updateRemoteSession(uid,identifier,session,sessionizer);\n        }\n      }\n else {\n        handleSessionTimestamp(transferInSession.get(), session, identifier, sessionizer);\n      }\n    }\n else {\n      updateRemoteSession(uid,identifier,transferInSession.get(),sessionizer);\n    }\n  }\n else   if (localSession.isPresent()) {\n    handleSessionTimestamp(transferInSession.get(), localSession.get(), identifier, sessionizer);\n  }\n}\n\nprivate void handleSessionTimestamp(Session transferInSession, Session session, String identifier, Sessionizer sessionizer) {\n  if (transferInSession.getFirstEventTimestamp() != session.getFirstEventTimestamp()) {\n    transferInSession.setIdentifier(identifier);\n    transferInSession.setType(sessionizer.getType());\n    fireSessionEndMarkerEvent(transferInSession,sessionizer);\n  }\n}"
    },
    "Old_Method": "private void handleTransferedSession(String identifier,String uid,JetstreamEvent event,Sessionizer sessionizer){\n  String ak=(String)event.get(AFFINITY_KEY);\n  Session transferInSession=reconstructSession(event,uid);\n  if (transferInSession == null) {\n    return;\n  }\n  event.put(Constants.EVENT_PAYLOAD_SESSION_OBJ,transferInSession);\n  sessionizer.updateSessionId(transferInSession);\n  if (transferInSession.getExpirationTime() <= System.currentTimeMillis() && recentlyExpiredSessions.containsKey(transferInSession.getSessionId())) {\n    String s=recentlyExpiredSessions.get(transferInSession.getSessionId());\n    if (Long.parseLong(s.split(\":\")[1]) == transferInSession.getExpirationTime()) {\n      return;\n    }\n  }\n  Session localSession=localSessionCache.get(uid);\n  if (localSession == null && !pendingReadEvents.containsKey(uid)) {\n    RemoteStoreProvider remoteDAO=provider;\n    if (remoteDAO != null && remoteDAO.asyncLoadSupport()) {\n      asyncLoadFromRemoteStore(event,uid,remoteDAO,ak);\n    }\n else     if (remoteDAO != null) {\n      Session session=remoteDAO.load(uid);\n      if (session == null) {\n        session=transferInSession;\n        if (session != null) {\n          updateRemoteSession(uid,identifier,session,sessionizer);\n        }\n      }\n else {\n        if (session.getFirstEventTimestamp() != transferInSession.getFirstEventTimestamp()) {\n          transferInSession.setIdentifier(identifier);\n          transferInSession.setType(sessionizer.getType());\n          fireSessionEndMarkerEvent(transferInSession,sessionizer);\n        }\n      }\n    }\n else {\n      updateRemoteSession(uid,identifier,transferInSession,sessionizer);\n    }\n  }\n else   if (localSession != null) {\n    if (transferInSession.getFirstEventTimestamp() != localSession.getFirstEventTimestamp()) {\n      transferInSession.setIdentifier(identifier);\n      transferInSession.setType(sessionizer.getType());\n      fireSessionEndMarkerEvent(transferInSession,sessionizer);\n    }\n  }\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/impl/SessionizerProcessor.java",
    "Start": 28078,
    "Stop": 31334,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "handleTransferedSession"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract method for Counter creation",
                "Change_Diff": "- if (isAvg) {\n      counter=new AvgCounter();\n    }\n else {\n      counter=new Counter();\n    }\n    if (conf == null) {\n      counters.put(groupDemension,counter);\n    }\n+ counter = createCounter(isAvg, conf, counters, groupDemension);",
                "Description": "The code for creating a new Counter instance is duplicated. It's a good practice to avoid code duplication. Extract it to a method.",
                "Start": 31,
                "End": 44
            },
            {
                "Improvement": "Extract method for Counter incrementation",
                "Change_Diff": "- if (isAvg) {\n    ((AvgCounter)counter).inc(count,total);\n  }\n else {\n    if (count != null) {\n      counter.inc(count);\n    }\n else {\n      counter.inc();\n    }\n+ incrementCounter(isAvg, count, total, counter);",
                "Description": "The code for incrementing a Counter instance is duplicated. It's a good practice to avoid code duplication. Extract it to a method.",
                "Start": 49,
                "End": 59
            }
        ],
        "Final code": "private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  Map<MCMetricGroupDemension,Counter> counters=groupbyWithTagsMetricMap.get(metricName);\n  OffHeapCacheConfig conf=null;\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    conf=getConfiguration().getOffheapMetricConf().get(metricName);\n  }\n  if (counters == null) {\nsynchronized (this) {\n      if (counters == null) {\n        if (conf != null) {\n          counters=CacheManager.getCounterOffHeapCache(metricName,conf);\n        }\n else {\n          counters=CacheManager.getCounterCache();\n        }\n        groupbyWithTagsMetricMap.put(metricName,counters);\n      }\n    }\n  }\n  MCMetricGroupDemension groupDemension=null;\n  String tag_time=null;\n  if (tags == null || tags.isEmpty()) {\n    groupDemension=new MCMetricGroupDemension(metricName,groupId);\n  }\n else {\n    if (tags.containsKey(MCConstant.TAG_TIME_IGNORE)) {\n      tag_time=tags.remove(MCConstant.TAG_TIME_IGNORE);\n    }\n    groupDemension=new MCMetricGroupDemension(metricName,groupId,tags);\n  }\n  Counter counter=counters.get(groupDemension);\n  if (counter == null) {\n    counter = createCounter(isAvg, conf, counters, groupDemension);\n  }\n  if (tag_time != null) {\n    counter.setLastCounterTime(tag_time);\n  }\n  incrementCounter(isAvg, count, total, counter);\n  if (conf != null) {\n    counters.put(groupDemension,counter);\n  }\n  return counter;\n}\n\nprivate Counter createCounter(boolean isAvg, OffHeapCacheConfig conf, Map<MCMetricGroupDemension,Counter> counters, MCMetricGroupDemension groupDemension) {\n  Counter counter;\n  if (isAvg) {\n    counter=new AvgCounter();\n  } else {\n    counter=new Counter();\n  }\n  if (conf == null) {\n    counters.put(groupDemension,counter);\n  }\n  return counter;\n}\n\nprivate void incrementCounter(boolean isAvg, Long count, Long total, Counter counter) {\n  if (isAvg) {\n    ((AvgCounter)counter).inc(count,total);\n  } else {\n    if (count != null) {\n      counter.inc(count);\n    } else {\n      counter.inc();\n    }\n  }\n}"
    },
    "Old_Method": "private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  Map<MCMetricGroupDemension,Counter> counters=groupbyWithTagsMetricMap.get(metricName);\n  OffHeapCacheConfig conf=null;\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    conf=getConfiguration().getOffheapMetricConf().get(metricName);\n  }\n  if (counters == null) {\nsynchronized (this) {\n      if (counters == null) {\n        if (conf != null) {\n          counters=CacheManager.getCounterOffHeapCache(metricName,conf);\n        }\n else {\n          counters=CacheManager.getCounterCache();\n        }\n        groupbyWithTagsMetricMap.put(metricName,counters);\n      }\n    }\n  }\n  MCMetricGroupDemension groupDemension=null;\n  String tag_time=null;\n  if (tags == null || tags.isEmpty()) {\n    groupDemension=new MCMetricGroupDemension(metricName,groupId);\n  }\n else {\n    if (tags.containsKey(MCConstant.TAG_TIME_IGNORE)) {\n      tag_time=tags.remove(MCConstant.TAG_TIME_IGNORE);\n    }\n    groupDemension=new MCMetricGroupDemension(metricName,groupId,tags);\n  }\n  Counter counter=counters.get(groupDemension);\n  if (counter == null) {\n    if (isAvg) {\n      counter=new AvgCounter();\n    }\n else {\n      counter=new Counter();\n    }\n    if (conf == null) {\n      counters.put(groupDemension,counter);\n    }\n  }\n  if (tag_time != null) {\n    counter.setLastCounterTime(tag_time);\n  }\n  if (isAvg) {\n    ((AvgCounter)counter).inc(count,total);\n  }\n else {\n    if (count != null) {\n      counter.inc(count);\n    }\n else {\n      counter.inc();\n    }\n  }\n  if (conf != null) {\n    counters.put(groupDemension,counter);\n  }\n  return counter;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 9927,
    "Stop": 12300,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "getCounterByMetricDemensionAndInc"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract complex condition check to a separate method",
                "Change_Diff": "- if (transferInSession.getExpirationTime() <= System.currentTimeMillis() && recentlyExpiredSessions.containsKey(transferInSession.getSessionId())) {\n-    String s=recentlyExpiredSessions.get(transferInSession.getSessionId());\n-    if (Long.parseLong(s.split(\":\")[1]) == transferInSession.getExpirationTime()) {\n-      return;\n-    }\n+ if (isRecentlyExpired(transferInSession)) {\n+    return;\n+ }",
                "Description": "The condition check for recently expired sessions is complex and not easily readable. This should be extracted to a separate method.",
                "Start": 8,
                "End": 12
            },
            {
                "Improvement": "Extract session loading to a separate method",
                "Change_Diff": "- if (localSession == null && !pendingReadEvents.containsKey(uid)) {\n-    RemoteStoreProvider remoteDAO=provider;\n-    if (remoteDAO != null && remoteDAO.asyncLoadSupport()) {\n-      asyncLoadFromRemoteStore(event,uid,remoteDAO,ak);\n-    }\n- else     if (remoteDAO != null) {\n-      Session session=remoteDAO.load(uid);\n-      if (session == null) {\n-        session=transferInSession;\n-        if (session != null) {\n-          updateRemoteSession(uid,identifier,session,sessionizer);\n-        }\n-      }\n- else {\n-        if (session.getFirstEventTimestamp() != transferInSession.getFirstEventTimestamp()) {\n-          transferInSession.setIdentifier(identifier);\n-          transferInSession.setType(sessionizer.getType());\n-          fireSessionEndMarkerEvent(transferInSession,sessionizer);\n-        }\n-      }\n-    }\n- else {\n-      updateRemoteSession(uid,identifier,transferInSession,sessionizer);\n-    }\n-  }\n+ loadSession(localSession, transferInSession, event, uid, ak, sessionizer);",
                "Description": "The process of loading a session is complex and not easily readable. This should be extracted to a separate method.",
                "Start": 16,
                "End": 35
            }
        ],
        "Final code": "private void handleTransferedSession(String identifier,String uid,JetstreamEvent event,Sessionizer sessionizer){\n  String ak=(String)event.get(AFFINITY_KEY);\n  Session transferInSession=reconstructSession(event,uid);\n  if (transferInSession == null) {\n    return;\n  }\n  event.put(Constants.EVENT_PAYLOAD_SESSION_OBJ,transferInSession);\n  sessionizer.updateSessionId(transferInSession);\n  if (isRecentlyExpired(transferInSession)) {\n    return;\n  }\n  Session localSession=localSessionCache.get(uid);\n  loadSession(localSession, transferInSession, event, uid, ak, sessionizer);\n}\n\nprivate boolean isRecentlyExpired(Session transferInSession) {\n  if (transferInSession.getExpirationTime() <= System.currentTimeMillis() && recentlyExpiredSessions.containsKey(transferInSession.getSessionId())) {\n    String s=recentlyExpiredSessions.get(transferInSession.getSessionId());\n    return Long.parseLong(s.split(\":\")[1]) == transferInSession.getExpirationTime();\n  }\n  return false;\n}\n\nprivate void loadSession(Session localSession, Session transferInSession, JetstreamEvent event, String uid, String ak, Sessionizer sessionizer) {\n  if (localSession == null && !pendingReadEvents.containsKey(uid)) {\n    RemoteStoreProvider remoteDAO=provider;\n    if (remoteDAO != null && remoteDAO.asyncLoadSupport()) {\n      asyncLoadFromRemoteStore(event,uid,remoteDAO,ak);\n    }\n    else if (remoteDAO != null) {\n      Session session=remoteDAO.load(uid);\n      if (session == null) {\n        session=transferInSession;\n        if (session != null) {\n          updateRemoteSession(uid,identifier,session,sessionizer);\n        }\n      }\n      else {\n        if (session.getFirstEventTimestamp() != transferInSession.getFirstEventTimestamp()) {\n          transferInSession.setIdentifier(identifier);\n          transferInSession.setType(sessionizer.getType());\n          fireSessionEndMarkerEvent(transferInSession,sessionizer);\n        }\n      }\n    }\n    else {\n      updateRemoteSession(uid,identifier,transferInSession,sessionizer);\n    }\n  }\n}"
    },
    "Old_Method": "private void handleTransferedSession(String identifier,String uid,JetstreamEvent event,Sessionizer sessionizer){\n  String ak=(String)event.get(AFFINITY_KEY);\n  Session transferInSession=reconstructSession(event,uid);\n  if (transferInSession == null) {\n    return;\n  }\n  event.put(Constants.EVENT_PAYLOAD_SESSION_OBJ,transferInSession);\n  sessionizer.updateSessionId(transferInSession);\n  if (transferInSession.getExpirationTime() <= System.currentTimeMillis() && recentlyExpiredSessions.containsKey(transferInSession.getSessionId())) {\n    String s=recentlyExpiredSessions.get(transferInSession.getSessionId());\n    if (Long.parseLong(s.split(\":\")[1]) == transferInSession.getExpirationTime()) {\n      return;\n    }\n  }\n  Session localSession=localSessionCache.get(uid);\n  if (localSession == null && !pendingReadEvents.containsKey(uid)) {\n    RemoteStoreProvider remoteDAO=provider;\n    if (remoteDAO != null && remoteDAO.asyncLoadSupport()) {\n      asyncLoadFromRemoteStore(event,uid,remoteDAO,ak);\n    }\n else     if (remoteDAO != null) {\n      Session session=remoteDAO.load(uid);\n      if (session == null) {\n        session=transferInSession;\n        if (session != null) {\n          updateRemoteSession(uid,identifier,session,sessionizer);\n        }\n      }\n else {\n        if (session.getFirstEventTimestamp() != transferInSession.getFirstEventTimestamp()) {\n          transferInSession.setIdentifier(identifier);\n          transferInSession.setType(sessionizer.getType());\n          fireSessionEndMarkerEvent(transferInSession,sessionizer);\n        }\n      }\n    }\n else {\n      updateRemoteSession(uid,identifier,transferInSession,sessionizer);\n    }\n  }\n else   if (localSession != null) {\n    if (transferInSession.getFirstEventTimestamp() != localSession.getFirstEventTimestamp()) {\n      transferInSession.setIdentifier(identifier);\n      transferInSession.setType(sessionizer.getType());\n      fireSessionEndMarkerEvent(transferInSession,sessionizer);\n    }\n  }\n}\n",
    "File_Path": "realtime-analytics/sessionizer/src/main/java/com/ebay/pulsar/sessionizer/impl/SessionizerProcessor.java",
    "Start": 28078,
    "Stop": 31334,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "handleTransferedSession"
}
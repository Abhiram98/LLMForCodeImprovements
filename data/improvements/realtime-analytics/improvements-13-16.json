{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract duplicate code to a helper method",
                "Change_Diff": "- for (Map.Entry<String,Object> entry : event.entrySet()) {\n-   if (entry.getKey().toLowerCase().contains(\"total\")) {\n-     total=(Long)entry.getValue();\n-     break;\n-   }\n- }",
                "Description": "The code to retrieve 'total' from the event entries is duplicated. It would be better to create a helper method that can be reused to reduce the duplication and improve maintainability.",
                "Start": 13,
                "End": 19
            },
            {
                "Improvement": "Use constants for repeated Strings",
                "Change_Diff": "- entry.getKey().toLowerCase().contains(\"total\")\n+ entry.getKey().toLowerCase().contains(TOTAL_KEY)",
                "Description": "Strings like 'total' and 'count' are used multiple times in the method. It would be better to define these as constants to avoid typing mistakes and make it easier to change their values in the future.",
                "Start": 13,
                "End": 19
            },
            {
                "Improvement": "Remove unnecessary null check",
                "Change_Diff": "- if (count != null) {\n-   getCounterByMetricName(metricName,false).inc(count);\n- }",
                "Description": "The null check on 'count' is unnecessary because the 'contains' method of a Map returns false if the value is null. Therefore, the null check can be removed to simplify the code.",
                "Start": 26,
                "End": 29
            },
            {
                "Improvement": "Use try-catch block for type casting",
                "Change_Diff": "- Long total=null;\n- total=(Long)entry.getValue();\n+ Long total = null;\n+ try {\n+   total = (Long) entry.getValue();\n+ } catch (ClassCastException e) {\n+   LOGGER.error(\"Invalid value type for total\", e);\n+ }",
                "Description": "The method blindly casts the event values to Long or String. It would be better to use a try-catch block to handle any potential ClassCastException.",
                "Start": 9,
                "End": 10
            }
        ],
        "Final code": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\n    if (isPaused() || shutdownFlag.get()) {\n        super.incrementEventDroppedCounter();\n        return;\n    }\n    incrementEventRecievedCounter();\n    if (MCCounterHelper.isMCCounterEvent(event)) {\n        String metricName=(String)event.get(MCConstant.METRIC_NAME);\n        Long total=getTotalFromEvent(event);\n        if (event.get(MCConstant.METRIC_COUNT) != null) {\n            Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n            if (total != null) {\n                ((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n            } else {\n                getCounterByMetricName(metricName,false).inc(count);\n            }\n        } else {\n            getCounterByMetricName(metricName,false).inc();\n        }\n    } else if (MCCounterHelper.isMCMultiCounterEvent(event)) {\n        for (Map.Entry<String,Object> entry : event.entrySet()) {\n            if (entry.getKey().toLowerCase().contains(COUNT_KEY)) {\n                String metricName=entry.getKey();\n                Long count=(Long)entry.getValue();\n                getCounterByMetricName(metricName,false).inc(count);\n            }\n        }\n    } else if (MCCounterHelper.isGroupByCounterEvent(event)) {\n        handleGroupByCounterEvent(event);\n    } else {\n        evaluateRawEvent(event);\n    }\n}"
    },
    "Old_Method": "@Override public void sendEvent(JetstreamEvent event) throws EventException {\n  if (isPaused() || shutdownFlag.get()) {\n    super.incrementEventDroppedCounter();\n    return;\n  }\n  incrementEventRecievedCounter();\n  if (MCCounterHelper.isMCCounterEvent(event)) {\n    String metricName=(String)event.get(MCConstant.METRIC_NAME);\n    Long total=null;\n    if (MCCounterHelper.isAvgEvent(metricName)) {\n      for (      Map.Entry<String,Object> entry : event.entrySet()) {\n        if (entry.getKey().toLowerCase().contains(\"total\")) {\n          total=(Long)entry.getValue();\n          break;\n        }\n      }\n    }\n    if (event.get(MCConstant.METRIC_COUNT) != null) {\n      Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n      if (total != null) {\n        ((AvgCounter)getCounterByMetricName(metricName,true)).inc(count,total);\n      }\n else       getCounterByMetricName(metricName,false).inc(count);\n    }\n else {\n      getCounterByMetricName(metricName,false).inc();\n    }\n  }\n else   if (MCCounterHelper.isMCMultiCounterEvent(event)) {\n    for (    Map.Entry<String,Object> entry : event.entrySet()) {\n      if (entry.getKey().toLowerCase().contains(\"count\")) {\n        String metricName=entry.getKey();\n        Long count=(Long)entry.getValue();\n        if (count != null) {\n          getCounterByMetricName(metricName,false).inc(count);\n        }\n else {\n          LOGGER.warn(\"Null Count returned by EPL, CountName:\" + metricName);\n        }\n      }\n    }\n  }\n else   if (MCCounterHelper.isGroupByCounterEvent(event)) {\n    if (getConfiguration().isEnableGroupByCounter()) {\n      String metricName=(String)event.get(MCConstant.METRIC_NAME);\n      String groupId=(String)event.get(MCConstant.GROUP_ID);\n      if (groupId != null && groupId.trim().length() != 0) {\n        long registerdFreq=getFrequencyByMetricName(metricName);\n        if (event.get(MCConstant.FREQUENCY_IN_MIN) == null && registerdFreq <= 0) {\n          setMetricFrequency(metricName,MetricFrequency.ONE_MINUTE.getValue());\n        }\n else         if (event.get(MCConstant.FREQUENCY_IN_MIN) != null) {\n          Integer frequencyInMin=(Integer)event.get(MCConstant.FREQUENCY_IN_MIN);\n          long frequency=frequencyInMin * MetricFrequency.ONE_MINUTE.getValue();\n          if (frequency > 0 && frequency != registerdFreq) {\n            setMetricFrequency(metricName,frequency);\n          }\n        }\n        metricTables.put(metricName,event.getEventType());\n        Map<String,String> tags=new HashMap<String,String>(5);\n        MCCounterHelper.isGroupByCounterEventWithTag(event,tags);\n        Long total=null;\n        if (MCCounterHelper.isAvgEvent(metricName)) {\n          for (          Map.Entry<String,Object> entry : event.entrySet()) {\n            if (entry.getKey().toLowerCase().contains(\"total\")) {\n              total=(Long)entry.getValue();\n              break;\n            }\n          }\n        }\n        if (event.get(MCConstant.METRIC_COUNT) != null) {\n          Long count=(Long)event.get(MCConstant.METRIC_COUNT);\n          if (total != null) {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,true,count,total);\n          }\n else {\n            getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,count,null);\n          }\n        }\n else {\n          getCounterByMetricDemensionAndInc(metricName,groupId,tags,false,null,null);\n        }\n      }\n else {\n        LOGGER.warn(\"Null or empty groupId returned by EPL, metricName:\" + metricName);\n      }\n    }\n  }\n else {\n    evaluateRawEvent(event);\n  }\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 18706,
    "Stop": 23760,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "sendEvent"
}
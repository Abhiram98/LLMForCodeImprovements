{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Move configuration retrieval to a separate method",
                "Change_Diff": "- OffHeapCacheConfig conf=null;\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    conf=getConfiguration().getOffheapMetricConf().get(metricName);\n  }",
                "Description": "The method is doing too many things, decreasing readability and maintainability. The retrieval of the configuration can be moved to a separate method.",
                "Start": 4,
                "End": 7
            },
            {
                "Improvement": "Reduce method complexity by splitting into smaller parts",
                "Change_Diff": "- private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  ... \n  return counter;\n}\n+ private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  OffHeapCacheConfig conf = getOffHeapCacheConfig(metricName);\n  Map<MCMetricGroupDemension,Counter> counters = getCounters(metricName, conf);\n  MCMetricGroupDemension groupDemension = getGroupDemension(metricName, groupId, tags);\n  Counter counter = getCounter(isAvg, counters, groupDemension, count, total);\n  return counter;\n}",
                "Description": "This method is too complex and does too many things. Splitting the method into smaller parts will improve readability and maintainability.",
                "Start": 1,
                "End": 60
            },
            {
                "Improvement": "Use Optional instead of null",
                "Change_Diff": "- if (counters == null) {\n ... \n  if (counter == null) {\n ... \n  if (count != null) {\n ... \n+ Optional<Map<MCMetricGroupDemension,Counter>> optionalCounters = Optional.ofNullable(counters);\n ... \n+ Optional<Counter> optionalCounter = Optional.ofNullable(counter);\n ... \n+ Optional<Long> optionalCount = Optional.ofNullable(count);\n ...",
                "Description": "The use of null can lead to NullPointerExceptions. Use Optional to represent the absence of a value.",
                "Start": 10,
                "End": 29
            }
        ],
        "Final code": "private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  OffHeapCacheConfig conf = getOffHeapCacheConfig(metricName);\n  Map<MCMetricGroupDemension,Counter> counters = getCounters(metricName, conf);\n  MCMetricGroupDemension groupDemension = getGroupDemension(metricName, groupId, tags);\n  Counter counter = getCounter(isAvg, counters, groupDemension, count, total);\n  return counter;\n}\n\nprivate OffHeapCacheConfig getOffHeapCacheConfig(String metricName) {\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    return getConfiguration().getOffheapMetricConf().get(metricName);\n  }\n  return null;\n}\n\nprivate Map<MCMetricGroupDemension,Counter> getCounters(String metricName, OffHeapCacheConfig conf) {\n  Map<MCMetricGroupDemension,Counter> counters=groupbyWithTagsMetricMap.get(metricName);\n  if (counters == null) {\n  synchronized (this) {\n      if (counters == null) {\n        if (conf != null) {\n          counters=CacheManager.getCounterOffHeapCache(metricName,conf);\n        }\n else {\n          counters=CacheManager.getCounterCache();\n        }\n        groupbyWithTagsMetricMap.put(metricName,counters);\n      }\n    }\n  }\n  return counters;\n}\n\nprivate MCMetricGroupDemension getGroupDemension(String metricName, String groupId, Map<String,String> tags) {\n  MCMetricGroupDemension groupDemension=null;\n  String tag_time=null;\n  if (tags == null || tags.isEmpty()) {\n    groupDemension=new MCMetricGroupDemension(metricName,groupId);\n  }\n else {\n    if (tags.containsKey(MCConstant.TAG_TIME_IGNORE)) {\n      tag_time=tags.remove(MCConstant.TAG_TIME_IGNORE);\n    }\n    groupDemension=new MCMetricGroupDemension(metricName,groupId,tags);\n  }\n  return groupDemension;\n}\n\nprivate Counter getCounter(boolean isAvg, Map<MCMetricGroupDemension,Counter> counters, MCMetricGroupDemension groupDemension, Long count, Long total) {\n  Counter counter=counters.get(groupDemension);\n  if (counter == null) {\n    if (isAvg) {\n      counter=new AvgCounter();\n    }\n else {\n      counter=new Counter();\n    }\n    if (conf == null) {\n      counters.put(groupDemension,counter);\n    }\n  }\n  if (tag_time != null) {\n    counter.setLastCounterTime(tag_time);\n  }\n  if (isAvg) {\n    ((AvgCounter)counter).inc(count,total);\n  }\n else {\n    if (count != null) {\n      counter.inc(count);\n    }\n else {\n      counter.inc();\n    }\n  }\n  if (conf != null) {\n    counters.put(groupDemension,counter);\n  }\n  return counter;\n}"
    },
    "Old_Method": "private Counter getCounterByMetricDemensionAndInc(String metricName,String groupId,Map<String,String> tags,boolean isAvg,Long count,Long total){\n  Map<MCMetricGroupDemension,Counter> counters=groupbyWithTagsMetricMap.get(metricName);\n  OffHeapCacheConfig conf=null;\n  if (getConfiguration().getOffheapMetricConf() != null) {\n    conf=getConfiguration().getOffheapMetricConf().get(metricName);\n  }\n  if (counters == null) {\nsynchronized (this) {\n      if (counters == null) {\n        if (conf != null) {\n          counters=CacheManager.getCounterOffHeapCache(metricName,conf);\n        }\n else {\n          counters=CacheManager.getCounterCache();\n        }\n        groupbyWithTagsMetricMap.put(metricName,counters);\n      }\n    }\n  }\n  MCMetricGroupDemension groupDemension=null;\n  String tag_time=null;\n  if (tags == null || tags.isEmpty()) {\n    groupDemension=new MCMetricGroupDemension(metricName,groupId);\n  }\n else {\n    if (tags.containsKey(MCConstant.TAG_TIME_IGNORE)) {\n      tag_time=tags.remove(MCConstant.TAG_TIME_IGNORE);\n    }\n    groupDemension=new MCMetricGroupDemension(metricName,groupId,tags);\n  }\n  Counter counter=counters.get(groupDemension);\n  if (counter == null) {\n    if (isAvg) {\n      counter=new AvgCounter();\n    }\n else {\n      counter=new Counter();\n    }\n    if (conf == null) {\n      counters.put(groupDemension,counter);\n    }\n  }\n  if (tag_time != null) {\n    counter.setLastCounterTime(tag_time);\n  }\n  if (isAvg) {\n    ((AvgCounter)counter).inc(count,total);\n  }\n else {\n    if (count != null) {\n      counter.inc(count);\n    }\n else {\n      counter.inc();\n    }\n  }\n  if (conf != null) {\n    counters.put(groupDemension,counter);\n  }\n  return counter;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/processor/MCSummingProcessor.java",
    "Start": 9927,
    "Stop": 12300,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "getCounterByMetricDemensionAndInc"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor code to make it DRY",
            "Change_Diff": "- if (username != null && password != null) {\n-     builder.withCredentials(username,password);\n- }\n-\n- if (reconnectionPolicy != null) {\n-     builder.withReconnectionPolicy(reconnectionPolicy);\n- }\n-\n- if (retryPolicy != null) {\n-     builder.withRetryPolicy(retryPolicy);\n- }\n-...\n+ setIfNotNull(builder::withCredentials, username, password);\n+ setIfNotNull(builder::withReconnectionPolicy, reconnectionPolicy);\n+ setIfNotNull(builder::withRetryPolicy, retryPolicy);\n+ ...",
            "Description": "The method 'createBuilder' has a lot of repeated code structure. We could simplify it by encapsulating the repeated 'if' checks into a separate method. This would make the code more DRY (Don't Repeat Yourself).",
            "Start": 6,
            "End": 39
        }],
        "Final code": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n  setIfNotNull(builder::withCredentials, username, password);\n  setIfNotNull(builder::withReconnectionPolicy, reconnectionPolicy);\n  setIfNotNull(builder::withRetryPolicy, retryPolicy);\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  setIfNotNull(builder::withSSL, sslOptions);\n  copyPoolingOptions(builder);\n  SocketOptions opts=new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  setIfNotNull(opts::setReceiveBufferSize, receiveBufferSize);\n  setIfNotNull(opts::setSendBufferSize, sendBufferSize);\n  setIfNotNull(opts::setSoLinger, soLinger);\n  setIfNotNull(opts::setKeepAlive, keepAlive);\n  setIfNotNull(opts::setReuseAddress, reuseAddress);\n  setIfNotNull(opts::setTcpNoDelay, tcpNoDelay);\n  builder.withSocketOptions(opts);\n  return builder;\n}\n\nprivate <T> void setIfNotNull(BiConsumer<Builder, T> function, T value) {\n  if (value != null) {\n    function.accept(builder, value);\n  }\n}\n\nprivate <T> void setIfNotNull(BiConsumer<SocketOptions, T> function, T value) {\n  if (value != null) {\n    function.accept(opts, value);\n  }\n}"
    },
    "Old_Method": "public Builder createBuilder(){\n  Builder builder=Cluster.builder();\n  for (  String address : contactPoints) {\n    builder.addContactPoint(address);\n  }\n  builder.withCompression(compression);\n  if (username != null && password != null) {\n    builder.withCredentials(username,password);\n  }\n  if (reconnectionPolicy != null) {\n    builder.withReconnectionPolicy(reconnectionPolicy);\n  }\n  if (retryPolicy != null) {\n    builder.withRetryPolicy(retryPolicy);\n  }\n  builder.withPort(port);\n  if (!jmxEnabled) {\n    builder.withoutJMXReporting();\n  }\n  if (!metricsEnabled) {\n    builder.withoutMetrics();\n  }\n  if (sslOptions != null) {\n    builder.withSSL(sslOptions);\n  }\n  copyPoolingOptions(builder);\n  SocketOptions opts=new SocketOptions();\n  opts.setConnectTimeoutMillis(connectTimeoutMillis);\n  opts.setReadTimeoutMillis(readTimeoutMillis);\n  if (receiveBufferSize != null) {\n    opts.setReceiveBufferSize(receiveBufferSize);\n  }\n  if (sendBufferSize != null) {\n    opts.setSendBufferSize(sendBufferSize);\n  }\n  if (soLinger != null) {\n    opts.setSoLinger(soLinger);\n  }\n  if (keepAlive != null) {\n    opts.setKeepAlive(keepAlive);\n  }\n  if (reuseAddress != null) {\n    opts.setReuseAddress(reuseAddress);\n  }\n  if (tcpNoDelay != null) {\n    opts.setTcpNoDelay(tcpNoDelay);\n  }\n  builder.withSocketOptions(opts);\n  return builder;\n}\n",
    "File_Path": "realtime-analytics/metriccalculator/src/main/java/com/ebay/pulsar/metriccalculator/cassandra/CassandraConfig.java",
    "Start": 4542,
    "Stop": 6218,
    "Project_Name": "data/projects/realtime-analytics",
    "Method_Name": "createBuilder"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Move magic numbers to constants",
                "Change_Diff": "- job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n+ job.getInt(\"test.randomtextwrite.maps_per_host\", MAPS_PER_HOST_DEFAULT);\n\n- job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n+ job.getLong(\"test.randomtextwrite.bytes_per_map\", BYTES_PER_MAP_DEFAULT);",
                "Description": "Magic numbers are generally considered bad practice. Move these to constant variables for better readability and maintainability of the code.",
                "Start": 14,
                "End": 16
            },
            {
                "Improvement": "Handle exception properly",
                "Change_Diff": "- System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n+ log.error(\"ERROR: Required parameter missing from \" + args[i - 1]);\n+ throw new IllegalArgumentException(\"Required parameter missing from \" + args[i - 1]);",
                "Description": "Instead of printing an error message to the console when an exception is caught, it would be better to log the error message and rethrow the exception or wrap it in a runtime exception.",
                "Start": 38,
                "End": 38
            },
            {
                "Improvement": "Replace System.out.println with Logger",
                "Change_Diff": "- System.out.println(...);\n+ log.info(...);",
                "Description": "Use of System.out.println is not recommended for production code. It is better to use a logger to output the messages.",
                "Start": 28,
                "End": 51
            }
        ],
        "Final code": "public int run(String[] args) throws Exception {\n\n  private static final int MAPS_PER_HOST_DEFAULT = 10;\n  private static final long BYTES_PER_MAP_DEFAULT = 1 * 1024 * 1024 * 1024;\n\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\", MAPS_PER_HOST_DEFAULT);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\", BYTES_PER_MAP_DEFAULT);\n  if (numBytesToWritePerMap == 0) {\n    log.error(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n    return -2;\n  }\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n  }\n  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n  List<String> otherArgs=new ArrayList<String>();\n  for (int i=0; i < args.length; ++i) {\n    try {\n      if (\"-outFormat\".equals(args[i])) {\n        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n      }\n else {\n        otherArgs.add(args[i]);\n      }\n    }\n catch (ArrayIndexOutOfBoundsException except) {\n      log.error(\"ERROR: Required parameter missing from \" + args[i - 1]);\n      throw new IllegalArgumentException(\"Required parameter missing from \" + args[i - 1]);\n    }\n  }\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  log.info(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  log.info(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  log.info(\"Job ended: \" + endTime);\n  log.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}"
    },
    "Old_Method": "/** \n * This is the main routine for launching a distributed random write job. It runs 10 maps/node and each node writes 1 gig of data to a DFS file. The reduce doesn't do anything.\n * @throws IOException\n */\npublic int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n  if (numBytesToWritePerMap == 0) {\n    System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n    return -2;\n  }\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n  }\n  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n  List<String> otherArgs=new ArrayList<String>();\n  for (int i=0; i < args.length; ++i) {\n    try {\n      if (\"-outFormat\".equals(args[i])) {\n        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n      }\n else {\n        otherArgs.add(args[i]);\n      }\n    }\n catch (    ArrayIndexOutOfBoundsException except) {\n      System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n      return printUsage();\n    }\n  }\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  System.out.println(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  System.out.println(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  System.out.println(\"Job ended: \" + endTime);\n  System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/RandomTextWriter.java",
    "Start": 6049,
    "Stop": 9055,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "run"
}
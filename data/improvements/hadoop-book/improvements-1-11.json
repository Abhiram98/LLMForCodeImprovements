{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use of Java Logging instead of System.out.println and System.err.println",
                "Change_Diff": "- System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n+ logger.severe(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n- System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n+ logger.severe(\"ERROR: Required parameter missing from \" + args[i - 1]);\n- System.out.println(\"Running \" + numMaps + \" maps.\");\n+ logger.info(\"Running \" + numMaps + \" maps.\");\n- System.out.println(\"Job started: \" + startTime);\n+ logger.info(\"Job started: \" + startTime);\n- System.out.println(\"Job ended: \" + endTime);\n+ logger.info(\"Job ended: \" + endTime);\n- System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n+ logger.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");",
                "Description": "Java provides several libraries to perform a logging operation, which are more flexible and sophisticated than print statements. They provide different levels of severity and can have different actions depending on the level. This makes it easier to manage and control output.",
                "Start": 22,
                "End": 51
            },
            {
                "Improvement": "Using try-with-resources for JobClient",
                "Change_Diff": "- JobClient client=new JobClient(job);\n- ClusterStatus cluster=client.getClusterStatus();\n+ try (JobClient client=new JobClient(job)) {\n+   ClusterStatus cluster=client.getClusterStatus();\n+   ... // all code that uses client\n+ }",
                "Description": "Java 7 introduced the try-with-resources statement, which automatically closes the resources used within the try block. This can be used to automatically close the JobClient resource and helps to prevent resource leaks.",
                "Start": 14,
                "End": 15
            }
        ],
        "Final code": "public int run(String[] args) throws Exception {\n  Logger logger = Logger.getLogger(getClass().getName());\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  try (JobClient client=new JobClient(job)) {\n    ClusterStatus cluster=client.getClusterStatus();\n    int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n    long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n    if (numBytesToWritePerMap == 0) {\n      logger.severe(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n    int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps == 0 && totalBytesToWrite > 0) {\n      numMaps=1;\n      job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n    }\n    Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n    List<String> otherArgs=new ArrayList<String>();\n    for (int i=0; i < args.length; ++i) {\n      try {\n        if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        }\n     else {\n          otherArgs.add(args[i]);\n        }\n      }\n   catch (ArrayIndexOutOfBoundsException except) {\n        logger.severe(\"ERROR: Required parameter missing from \" + args[i - 1]);\n        return printUsage();\n      }\n    }\n    job.setOutputFormat(outputFormatClass);\n    FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n    job.setNumMapTasks(numMaps);\n    logger.info(\"Running \" + numMaps + \" maps.\");\n    job.setNumReduceTasks(0);\n    Date startTime=new Date();\n    logger.info(\"Job started: \" + startTime);\n    JobClient.runJob(job);\n    Date endTime=new Date();\n    logger.info(\"Job ended: \" + endTime);\n    logger.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n    return 0;\n  }\n}"
    },
    "Old_Method": "/** \n * This is the main routine for launching a distributed random write job. It runs 10 maps/node and each node writes 1 gig of data to a DFS file. The reduce doesn't do anything.\n * @throws IOException\n */\npublic int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n  if (numBytesToWritePerMap == 0) {\n    System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n    return -2;\n  }\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n  }\n  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n  List<String> otherArgs=new ArrayList<String>();\n  for (int i=0; i < args.length; ++i) {\n    try {\n      if (\"-outFormat\".equals(args[i])) {\n        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n      }\n else {\n        otherArgs.add(args[i]);\n      }\n    }\n catch (    ArrayIndexOutOfBoundsException except) {\n      System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n      return printUsage();\n    }\n  }\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  System.out.println(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  System.out.println(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  System.out.println(\"Job ended: \" + endTime);\n  System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/RandomTextWriter.java",
    "Start": 6049,
    "Stop": 9055,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "run"
}
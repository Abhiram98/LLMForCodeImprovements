{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a method",
                "Change_Diff": "- for (int x=0; x < size; ++x) {\n+ addColumnConstraints(model, size, ConditionType.COLUMN);\n\n- for (int y=0; y < size; ++y) {\n+ addColumnConstraints(model, size, ConditionType.ROW);\n\n- for (int x=0; x < squareYSize; ++x) {\n+ addColumnConstraints(model, squareYSize, ConditionType.SQUARE);\n\n- for (int x=0; x < size; ++x) {\n+ addColumnConstraints(model, size, ConditionType.CELL);",
                "Description": "The addition of column constraints is repeated four times in the code with slight variations. This can be extracted into a separate method.",
                "Start": 3,
                "End": 27
            },
            {
                "Improvement": "Simplify conditional statements with ternary operator",
                "Change_Diff": "- if (board[y][x] == -1) {\n- for (int num=1; num <= size; ++num) {\n- model.addRow(generateRow(rowValues,x,y,num));\n- }\n- } else {\n- model.addRow(generateRow(rowValues,x,y,board[y][x]));\n- }\n+ int num = (board[y][x] == -1) ? size : board[y][x];\n+ model.addRow(generateRow(rowValues,x,y,num));",
                "Description": "The conditional statement to add a row can be simplified by using a ternary operator.",
                "Start": 29,
                "End": 37
            }
        ],
        "Final code": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model = new DancingLinks<ColumnName>();\n  addColumnConstraints(model, size, ConditionType.COLUMN);\n  addColumnConstraints(model, size, ConditionType.ROW);\n  addColumnConstraints(model, squareYSize, ConditionType.SQUARE);\n  addColumnConstraints(model, size, ConditionType.CELL);\n  boolean[] rowValues = new boolean[size * size * 4];\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      int num = (board[y][x] == -1) ? size : board[y][x];\n      model.addRow(generateRow(rowValues,x,y,num));\n    }\n  }\n  return model;\n}\n\nprivate void addColumnConstraints(DancingLinks<ColumnName> model, int size, ConditionType type) {\n  for (int i=0; i < size; ++i) {\n    for (int num=1; num <= size; ++num) {\n      switch (type) {\n        case COLUMN:\n          model.addColumn(new ColumnConstraint(num,i));\n          break;\n        case ROW:\n          model.addColumn(new RowConstraint(num,i));\n          break;\n        case SQUARE:\n          model.addColumn(new SquareConstraint(num,i,i));\n          break;\n        case CELL:\n          model.addColumn(new CellConstraint(i,i));\n          break;\n      }\n    }\n  }\n}"
    },
    "Old_Method": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();\n  for (int x=0; x < size; ++x) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new ColumnConstraint(num,x));\n    }\n  }\n  for (int y=0; y < size; ++y) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new RowConstraint(num,y));\n    }\n  }\n  for (int x=0; x < squareYSize; ++x) {\n    for (int y=0; y < squareXSize; ++y) {\n      for (int num=1; num <= size; ++num) {\n        model.addColumn(new SquareConstraint(num,x,y));\n      }\n    }\n  }\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      model.addColumn(new CellConstraint(x,y));\n    }\n  }\n  boolean[] rowValues=new boolean[size * size * 4];\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      if (board[y][x] == -1) {\n        for (int num=1; num <= size; ++num) {\n          model.addRow(generateRow(rowValues,x,y,num));\n        }\n      }\n else {\n        model.addRow(generateRow(rowValues,x,y,board[y][x]));\n      }\n    }\n  }\n  return model;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Sudoku.java",
    "Start": 8366,
    "Stop": 10077,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "makeModel"
}
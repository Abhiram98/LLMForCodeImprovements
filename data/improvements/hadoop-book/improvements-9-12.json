{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor to methods",
                "Change_Diff": "- for (int x=0; x < size; ++x) { ... }\n+ this.addColumnsToModel(model);",
                "Description": "For readability and maintainability, each for-loop block that adds to the model can be refactored into a method. This will make the 'makeModel' method easier to read and understand.",
                "Start": 2,
                "End": 26
            },
            {
                "Improvement": "Use Arrays.fill",
                "Change_Diff": "- boolean[] rowValues=new boolean[size * size * 4];\n+ Arrays.fill(rowValues, false);",
                "Description": "Instead of manually filling each element of the 'rowValues' array with false via a for-loop, use the 'Arrays.fill' method to do this in one line.",
                "Start": 28,
                "End": 28
            }
        ],
        "Final code": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();\n  this.addColumnsToModel(model);\n  boolean[] rowValues=new boolean[size * size * 4];\n  Arrays.fill(rowValues, false);\n  this.addRowsToModel(model, rowValues);\n  return model;\n}\n\nprivate void addColumnsToModel(DancingLinks<ColumnName> model) {\n  for (int x=0; x < size; ++x) { ... }\n  for (int y=0; y < size; ++y) { ... }\n  for (int x=0; x < squareYSize; ++x) { ... }\n  for (int x=0; x < size; ++x) { ... }\n}\n\nprivate void addRowsToModel(DancingLinks<ColumnName> model, boolean[] rowValues) {\n  for (int x=0; x < size; ++x) { ... }\n}"
    },
    "Old_Method": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();\n  for (int x=0; x < size; ++x) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new ColumnConstraint(num,x));\n    }\n  }\n  for (int y=0; y < size; ++y) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new RowConstraint(num,y));\n    }\n  }\n  for (int x=0; x < squareYSize; ++x) {\n    for (int y=0; y < squareXSize; ++y) {\n      for (int num=1; num <= size; ++num) {\n        model.addColumn(new SquareConstraint(num,x,y));\n      }\n    }\n  }\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      model.addColumn(new CellConstraint(x,y));\n    }\n  }\n  boolean[] rowValues=new boolean[size * size * 4];\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      if (board[y][x] == -1) {\n        for (int num=1; num <= size; ++num) {\n          model.addRow(generateRow(rowValues,x,y,num));\n        }\n      }\n else {\n        model.addRow(generateRow(rowValues,x,y,board[y][x]));\n      }\n    }\n  }\n  return model;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Sudoku.java",
    "Start": 8366,
    "Stop": 10077,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "makeModel"
}
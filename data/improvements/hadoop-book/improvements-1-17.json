{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Logger instead of System.out.println",
                "Change_Diff": "- System.out.println(\"Running \" + numMaps + \" maps.\");\n- System.out.println(\"Job started: \" + startTime);\n- System.out.println(\"Job ended: \" + endTime);\n- System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n+ LOGGER.info(\"Running \" + numMaps + \" maps.\");\n+ LOGGER.info(\"Job started: \" + startTime);\n+ LOGGER.info(\"Job ended: \" + endTime);\n+ LOGGER.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");",
                "Description": "Using a logger provides more flexibility than standard output. It allows different levels of severity in messages, output to different locations, and can be turned on or off based on the logging level.",
                "Start": 19,
                "End": 44
            },
            {
                "Improvement": "Use try-with-resources for JobClient",
                "Change_Diff": "- JobClient client=new JobClient(job);\n+ try (JobClient client=new JobClient(job)) {",
                "Description": "The try-with-resources statement ensures that each resource is closed at the end of the statement. This could prevent potential resource leaks.",
                "Start": 10,
                "End": 11
            },
            {
                "Improvement": "Extract magic numbers into constants",
                "Change_Diff": "- int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n- long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n+ int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",DEFAULT_MAPS_PER_HOST);\n+ long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",DEFAULT_BYTES_PER_MAP);",
                "Description": "Magic numbers are values with unexplained meaning. Extract them into constants to improve readability and maintainability.",
                "Start": 13,
                "End": 14
            }
        ],
        "Final code": "private static final Logger LOGGER = Logger.getLogger(RandomTextWriter.class.getName());\nprivate static final int DEFAULT_MAPS_PER_HOST = 10;\nprivate static final long DEFAULT_BYTES_PER_MAP = 1 * 1024 * 1024* 1024;\n\npublic int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  try (JobClient client=new JobClient(job)) {\n    ClusterStatus cluster=client.getClusterStatus();\n    int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",DEFAULT_MAPS_PER_HOST);\n    long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",DEFAULT_BYTES_PER_MAP);\n    if (numBytesToWritePerMap == 0) {\n      System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n      return -2;\n    }\n    long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n    int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n    if (numMaps == 0 && totalBytesToWrite > 0) {\n      numMaps=1;\n      job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n    }\n    Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n    List<String> otherArgs=new ArrayList<String>();\n    for (int i=0; i < args.length; ++i) {\n      try {\n        if (\"-outFormat\".equals(args[i])) {\n          outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n        }\n else {\n          otherArgs.add(args[i]);\n        }\n      }\n catch (ArrayIndexOutOfBoundsException except) {\n        System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n        return printUsage();\n      }\n    }\n    job.setOutputFormat(outputFormatClass);\n    FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n    job.setNumMapTasks(numMaps);\n    LOGGER.info(\"Running \" + numMaps + \" maps.\");\n    job.setNumReduceTasks(0);\n    Date startTime=new Date();\n    LOGGER.info(\"Job started: \" + startTime);\n    JobClient.runJob(job);\n    Date endTime=new Date();\n    LOGGER.info(\"Job ended: \" + endTime);\n    LOGGER.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n    return 0;\n  }\n}"
    },
    "Old_Method": "/** \n * This is the main routine for launching a distributed random write job. It runs 10 maps/node and each node writes 1 gig of data to a DFS file. The reduce doesn't do anything.\n * @throws IOException\n */\npublic int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n  if (numBytesToWritePerMap == 0) {\n    System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n    return -2;\n  }\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n  }\n  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n  List<String> otherArgs=new ArrayList<String>();\n  for (int i=0; i < args.length; ++i) {\n    try {\n      if (\"-outFormat\".equals(args[i])) {\n        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n      }\n else {\n        otherArgs.add(args[i]);\n      }\n    }\n catch (    ArrayIndexOutOfBoundsException except) {\n      System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n      return printUsage();\n    }\n  }\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  System.out.println(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  System.out.println(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  System.out.println(\"Job ended: \" + endTime);\n  System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/RandomTextWriter.java",
    "Start": 6049,
    "Stop": 9055,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "run"
}
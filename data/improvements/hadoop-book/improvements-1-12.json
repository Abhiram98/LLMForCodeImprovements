{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace magic numbers with constant variables",
                "Change_Diff": "- int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n- long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n+ int DEFAULT_MAPS_PER_HOST = 10;\n+ long DEFAULT_BYTES_PER_MAP = 1 * 1024 * 1024* 1024;\n+ int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\", DEFAULT_MAPS_PER_HOST);\n+ long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\", DEFAULT_BYTES_PER_MAP);",
                "Description": "Replace magic numbers (10, 1 * 1024 * 1024* 1024) with constant variables. This can make the code more readable and maintainable. If the values need to be updated in the future, we only need to change the constant variable value.",
                "Start": 14,
                "End": 15
            },
            {
                "Improvement": "Extract error handling to a separate method",
                "Change_Diff": "- System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n- return -2;\n+ return handleInvalidBytesPerMap();",
                "Description": "The responsibility of the run() method is to execute a job, and it is currently also handling error scenarios. We can improve separation of concerns and readability by extracting the error handling (printing an error message and returning -2) to a separate method.",
                "Start": 19,
                "End": 22
            },
            {
                "Improvement": "Extract command line argument parsing to a separate method",
                "Change_Diff": "- for (int i=0; i < args.length; ++i) {\n...\n}\n+ List<String> otherArgs = parseArguments(args);",
                "Description": "The run() method is currently also responsible for parsing command line arguments. We can extract this to a separate method to improve readability and maintainability.",
                "Start": 29,
                "End": 39
            }
        ],
        "Final code": "public int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n\n  int DEFAULT_MAPS_PER_HOST = 10;\n  long DEFAULT_BYTES_PER_MAP = 1 * 1024 * 1024 * 1024;\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\", DEFAULT_MAPS_PER_HOST);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\", DEFAULT_BYTES_PER_MAP);\n\n  if (numBytesToWritePerMap == 0) {\n    return handleInvalidBytesPerMap();\n  }\n\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\", numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\", totalBytesToWrite);\n  }\n\n  List<String> otherArgs = parseArguments(args);\n\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job, new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  System.out.println(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  System.out.println(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  System.out.println(\"Job ended: \" + endTime);\n  System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}\n\nprivate int handleInvalidBytesPerMap() {\n  System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n  return -2;\n}\n\nprivate List<String> parseArguments(String[] args) {\n...\n}"
    },
    "Old_Method": "/** \n * This is the main routine for launching a distributed random write job. It runs 10 maps/node and each node writes 1 gig of data to a DFS file. The reduce doesn't do anything.\n * @throws IOException\n */\npublic int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n  if (numBytesToWritePerMap == 0) {\n    System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n    return -2;\n  }\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n  }\n  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n  List<String> otherArgs=new ArrayList<String>();\n  for (int i=0; i < args.length; ++i) {\n    try {\n      if (\"-outFormat\".equals(args[i])) {\n        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n      }\n else {\n        otherArgs.add(args[i]);\n      }\n    }\n catch (    ArrayIndexOutOfBoundsException except) {\n      System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n      return printUsage();\n    }\n  }\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  System.out.println(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  System.out.println(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  System.out.println(\"Job ended: \" + endTime);\n  System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/RandomTextWriter.java",
    "Start": 6049,
    "Stop": 9055,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "run"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace System.out.println with a Logger",
                "Change_Diff": "- System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n+ logger.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);",
                "Description": "System.out.println is not very flexible. It's generally better to use a Logger, as this can easily be configured to redirect output to a variety of places, and can be turned off selectively based on log level or other criteria.",
                "Start": 7,
                "End": 7
            },
            {
                "Improvement": "Check for division by zero",
                "Change_Diff": "+ if (numSplits == 0) throw new IllegalArgumentException(\"numSplits must be greater than zero\");\n- long rowsPerSplit=totalRows / numSplits;",
                "Description": "Dividing a number by zero is not allowed in Java, which will throw ArithmeticException. In this method, if numSplits is zero, it will cause this problem at row calculation. So, add a check for this.",
                "Start": 6,
                "End": 6
            },
            {
                "Improvement": "Make use of Java's try-with-resources",
                "Change_Diff": "- InputSplit[] splits=new InputSplit[numSplits];\n+ try (InputSplit[] splits=new InputSplit[numSplits]) {",
                "Description": "Although it's not seen from the code snippet provided, if InputSplit or RangeInputSplit implements AutoCloseable (which it should), make use of Java's try-with-resources for better exception handling and resource management.",
                "Start": 10,
                "End": 14
            }
        ],
        "Final code": "public InputSplit[] getSplits(JobConf job,int numSplits){\n  long totalRows=getNumberOfRows(job);\n  if (numSplits == 0) throw new IllegalArgumentException(\"numSplits must be greater than zero\");\n  long rowsPerSplit=totalRows / numSplits;\n  logger.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  try (InputSplit[] splits=new InputSplit[numSplits]) {\n    long currentRow=0;\n    for (int split=0; split < numSplits - 1; ++split) {\n      splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n      currentRow+=rowsPerSplit;\n    }\n    splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n    return splits;\n  }\n}"
    },
    "Old_Method": "/** \n * Create the desired number of splits, dividing the number of rows between the mappers.\n */\npublic InputSplit[] getSplits(JobConf job,int numSplits){\n  long totalRows=getNumberOfRows(job);\n  long rowsPerSplit=totalRows / numSplits;\n  System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (int split=0; split < numSplits - 1; ++split) {\n    splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n    currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/terasort/TeraGen.java",
    "Start": 4921,
    "Stop": 5780,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getSplits"
}
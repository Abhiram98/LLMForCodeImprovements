{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java logging instead of System.out.println",
                "Change_Diff": "- System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n+ logger.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);",
                "Description": "It's a good practice to use a logging framework like SLF4J or java.util.logging instead of System.out.println for better control over log levels and output locations.",
                "Start": 4,
                "End": 4
            },
            {
                "Improvement": "Use try-with-resources for handling exceptions",
                "Change_Diff": "No changes. This improvement needs a context of method where the resources are used.",
                "Description": "In Java 7 and later, you can use a try-with-resources statement to automatically close resources of type AutoCloseable. Even if an exception is thrown, the resource will be closed.",
                "Start": 6,
                "End": 12
            },
            {
                "Improvement": "Use final for immutable variables",
                "Change_Diff": "- long totalRows=getNumberOfRows(job);\n+ final long totalRows=getNumberOfRows(job);",
                "Description": "If a variable is intended to not change after its initial assignment, it should be declared final. This makes the intention clear to other developers and prevents accidental modification.",
                "Start": 3,
                "End": 3
            }
        ],
        "Final code": "public InputSplit[] getSplits(JobConf job,int numSplits){\n  final long totalRows=getNumberOfRows(job);\n  long rowsPerSplit=totalRows / numSplits;\n  logger.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (int split=0; split < numSplits - 1; ++split) {\n    splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n    currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}"
    },
    "Old_Method": "/** \n * Create the desired number of splits, dividing the number of rows between the mappers.\n */\npublic InputSplit[] getSplits(JobConf job,int numSplits){\n  long totalRows=getNumberOfRows(job);\n  long rowsPerSplit=totalRows / numSplits;\n  System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (int split=0; split < numSplits - 1; ++split) {\n    splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n    currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/terasort/TeraGen.java",
    "Start": 4921,
    "Stop": 5780,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getSplits"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract searching for 'x' piece into separate method",
                "Change_Diff": "- for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n+ xPiece = findPieceByName('x');",
                "Description": "The process of finding the 'x' piece can be encapsulated into its own method for better readability and maintainability. This will make the getCategory method cleaner and easier to understand.",
                "Start": 8,
                "End": 13
            },
            {
                "Improvement": "Extract calculation of the mid points into separate method",
                "Change_Diff": "- for (      ColumnName col : row) {\n    if (col instanceof Point) {\n      int x=((Point)col).x;\n      int y=((Point)col).y;\n      if (x < low_x) {\n        low_x=x;\n      }\n      if (x > high_x) {\n        high_x=x;\n      }\n      if (y < low_y) {\n        low_y=y;\n      }\n      if (y > high_y) {\n        high_y=y;\n      }\n    }\n  }\n  boolean mid_x=(low_x + high_x == width - 1);\n  boolean mid_y=(low_y + high_y == height - 1);\n+ Point midPoint = calculateMidPoint(row);\n+ boolean mid_x = (midPoint.x == width - 1);\n+ boolean mid_y = (midPoint.y == height - 1);",
                "Description": "The calculation of mid points can be extracted into a separate method. This improves maintainability and testability of the code. It also increases the readability of the getCategory method.",
                "Start": 15,
                "End": 31
            }
        ],
        "Final code": "public class Solution {\n\n    private Piece findPieceByName(String name) {\n        for (Piece p : pieces) {\n            if (name.equals(p.name)) {\n                return p;\n            }\n        }\n        return null;\n    }\n\n    private Point calculateMidPoint(List<ColumnName> row) {\n        int low_x=width;\n        int high_x=0;\n        int low_y=height;\n        int high_y=0;\n        for (ColumnName col : row) {\n            if (col instanceof Point) {\n                int x=((Point)col).x;\n                int y=((Point)col).y;\n                if (x < low_x) low_x=x;\n                if (x > high_x) high_x=x;\n                if (y < low_y) low_y=y;\n                if (y > high_y) high_y=y;\n            }\n        }\n        return new Point((low_x + high_x) / 2, (low_y + high_y) / 2);\n    }\n\n    public SolutionCategory getCategory(List<List<ColumnName>> names){\n        Piece xPiece = findPieceByName(\"x\");\n        for (List<ColumnName> row : names) {\n            if (row.contains(xPiece)) {\n                Point midPoint = calculateMidPoint(row);\n                boolean mid_x=(midPoint.x == width - 1);\n                boolean mid_y=(midPoint.y == height - 1);\n                if (mid_x && mid_y) return SolutionCategory.CENTER;\n                else if (mid_x) return SolutionCategory.MID_X;\n                else if (mid_y) return SolutionCategory.MID_Y;\n                break;\n            }\n        }\n        return SolutionCategory.UPPER_LEFT;\n    }\n}"
    },
    "Old_Method": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=null;\n  for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n  for (  List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      int low_x=width;\n      int high_x=0;\n      int low_y=height;\n      int high_y=0;\n      for (      ColumnName col : row) {\n        if (col instanceof Point) {\n          int x=((Point)col).x;\n          int y=((Point)col).y;\n          if (x < low_x) {\n            low_x=x;\n          }\n          if (x > high_x) {\n            high_x=x;\n          }\n          if (y < low_y) {\n            low_y=y;\n          }\n          if (y > high_y) {\n            high_y=y;\n          }\n        }\n      }\n      boolean mid_x=(low_x + high_x == width - 1);\n      boolean mid_y=(low_y + high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n else       if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n else       if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Pentomino.java",
    "Start": 6117,
    "Stop": 8106,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getCategory"
}
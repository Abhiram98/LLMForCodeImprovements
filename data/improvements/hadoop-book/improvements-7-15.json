{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract 'x' piece finding logic into a separate method",
                "Change_Diff": "-   Piece xPiece=null;\n-  for (  Piece p : pieces) {\n-    if (\"x\".equals(p.name)) {\n-      xPiece=p;\n-      break;\n-    }\n-  }\n+  Piece xPiece = findXPiece(pieces);",
                "Description": "The logic to find the 'x' piece is a separate concern and can be extracted into a separate method. This makes the code easier to read and understand and follows the Single Responsibility Principle.",
                "Start": 6,
                "End": 11
            },
            {
                "Improvement": "Avoid deep nesting by adding continue statement",
                "Change_Diff": "-  for (  List<ColumnName> row : names) {\n-    if (row.contains(xPiece)) {\n+  for (List<ColumnName> row : names) {\n+    if (!row.contains(xPiece)) continue;\n",
                "Description": "The method has a lot of nested if and for loops which can be hard to read and understand. By adding a continue statement in the for loop when the row does not contain the xPiece, the rest of the code doesn't need to be nested inside the if statement.",
                "Start": 12,
                "End": 45
            },
            {
                "Improvement": "Use ternary operators to simplify checks for mid_x and mid_y",
                "Change_Diff": "-  boolean mid_x=(low_x + high_x == width - 1);\n-  boolean mid_y=(low_y + high_y == height - 1);\n-  if (mid_x && mid_y) {\n-    return SolutionCategory.CENTER;\n-  }\n- else       if (mid_x) {\n-    return SolutionCategory.MID_X;\n-  }\n- else       if (mid_y) {\n-    return SolutionCategory.MID_Y;\n-  }\n+  return (mid_x && mid_y) ? SolutionCategory.CENTER : mid_x ? SolutionCategory.MID_X : mid_y ? SolutionCategory.MID_Y : SolutionCategory.UPPER_LEFT;\n",
                "Description": "The checks for mid_x and mid_y can be simplified using ternary operators. This will make the code more concise and easier to read.",
                "Start": 38,
                "End": 45
            }
        ],
        "Final code": "public SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece = findXPiece(pieces);\n  for (List<ColumnName> row : names) {\n    if (!row.contains(xPiece)) continue;\n    int low_x=width;\n    int high_x=0;\n    int low_y=height;\n    int high_y=0;\n    for (ColumnName col : row) {\n      if (col instanceof Point) {\n        int x=((Point)col).x;\n        int y=((Point)col).y;\n        if (x < low_x) low_x=x;\n        if (x > high_x) high_x=x;\n        if (y < low_y) low_y=y;\n        if (y > high_y) high_y=y;\n      }\n    }\n    boolean mid_x=(low_x + high_x == width - 1);\n    boolean mid_y=(low_y + high_y == height - 1);\n    return (mid_x && mid_y) ? SolutionCategory.CENTER : mid_x ? SolutionCategory.MID_X : mid_y ? SolutionCategory.MID_Y : SolutionCategory.UPPER_LEFT;\n  }\n}\n\nprivate Piece findXPiece(List<Piece> pieces) {\n  for (Piece p : pieces) {\n    if (\"x\".equals(p.name)) return p;\n  }\n  return null;\n}"
    },
    "Old_Method": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=null;\n  for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n  for (  List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      int low_x=width;\n      int high_x=0;\n      int low_y=height;\n      int high_y=0;\n      for (      ColumnName col : row) {\n        if (col instanceof Point) {\n          int x=((Point)col).x;\n          int y=((Point)col).y;\n          if (x < low_x) {\n            low_x=x;\n          }\n          if (x > high_x) {\n            high_x=x;\n          }\n          if (y < low_y) {\n            low_y=y;\n          }\n          if (y > high_y) {\n            high_y=y;\n          }\n        }\n      }\n      boolean mid_x=(low_x + high_x == width - 1);\n      boolean mid_y=(low_y + high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n else       if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n else       if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Pentomino.java",
    "Start": 6117,
    "Stop": 8106,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getCategory"
}
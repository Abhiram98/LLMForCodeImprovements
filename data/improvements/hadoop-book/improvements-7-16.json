{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract 'x' piece finding to a separate method",
                "Change_Diff": "- for (  Piece p : pieces) {\n-    if (\"x\".equals(p.name)) {\n-      xPiece=p;\n-      break;\n-    }\n-  }\n+ xPiece = findXPiece(pieces);",
                "Description": "The step of finding the 'x' piece is a separate concern and can be extracted to its own method. This would improve readability and maintainability of the code.",
                "Start": 13,
                "End": 19
            },
            {
                "Improvement": "Extract coordinates calculation to a separate method",
                "Change_Diff": "- int low_x=width;\n- int high_x=0;\n- int low_y=height;\n- int high_y=0;\n- for (      ColumnName col : row) {\n-    if (col instanceof Point) {\n-      int x=((Point)col).x;\n-      int y=((Point)col).y;\n-      if (x < low_x) {\n-        low_x=x;\n-      }\n-      if (x > high_x) {\n-        high_x=x;\n-      }\n-      if (y < low_y) {\n-        low_y=y;\n-      }\n-      if (y > high_y) {\n-        high_y=y;\n-      }\n-    }\n-  }\n+ CoordinateBounds bounds = calculateBounds(row);",
                "Description": "The calculation of low_x, high_x, low_y, high_y can be moved to a separate method. This breaks down the getCategory method into smaller, more manageable methods.",
                "Start": 23,
                "End": 40
            }
        ],
        "Final code": "public SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=findXPiece(pieces);\n  for (List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      CoordinateBounds bounds = calculateBounds(row);\n      boolean mid_x=(bounds.low_x + bounds.high_x == width - 1);\n      boolean mid_y=(bounds.low_y + bounds.high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n      else if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n      else if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n\nprivate Piece findXPiece(List<Piece> pieces) {\n  for (Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      return p;\n    }\n  }\n  return null;\n}\n\nprivate CoordinateBounds calculateBounds(List<ColumnName> row) {\n  int low_x=width;\n  int high_x=0;\n  int low_y=height;\n  int high_y=0;\n  for (ColumnName col : row) {\n    if (col instanceof Point) {\n      int x=((Point)col).x;\n      int y=((Point)col).y;\n      if (x < low_x) {\n        low_x=x;\n      }\n      if (x > high_x) {\n        high_x=x;\n      }\n      if (y < low_y) {\n        low_y=y;\n      }\n      if (y > high_y) {\n        high_y=y;\n      }\n    }\n  }\n  return new CoordinateBounds(low_x, high_x, low_y, high_y);\n}"
    },
    "Old_Method": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=null;\n  for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n  for (  List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      int low_x=width;\n      int high_x=0;\n      int low_y=height;\n      int high_y=0;\n      for (      ColumnName col : row) {\n        if (col instanceof Point) {\n          int x=((Point)col).x;\n          int y=((Point)col).y;\n          if (x < low_x) {\n            low_x=x;\n          }\n          if (x > high_x) {\n            high_x=x;\n          }\n          if (y < low_y) {\n            low_y=y;\n          }\n          if (y > high_y) {\n            high_y=y;\n          }\n        }\n      }\n      boolean mid_x=(low_x + high_x == width - 1);\n      boolean mid_y=(low_y + high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n else       if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n else       if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Pentomino.java",
    "Start": 6117,
    "Stop": 8106,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getCategory"
}
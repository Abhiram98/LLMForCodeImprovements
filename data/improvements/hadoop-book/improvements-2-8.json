{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into separate methods",
                "Change_Diff": "- public static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n+ public static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n+ prepareJobConfiguration(numMaps, numPoints, jobConf);\n+ writeInputForMap(numMaps, numPoints, jobConf);\n+ return calculatePi(numMaps, numPoints, jobConf);\n+ }\n\n+ private static void prepareJobConfiguration(int numMaps, long numPoints, JobConf jobConf) {\n // Code for preparing job configuration\n }\n\n+ private static void writeInputForMap(int numMaps, long numPoints, JobConf jobConf) throws IOException {\n // Code for writing input for Map\n }\n\n+ private static BigDecimal calculatePi(int numMaps, long numPoints, JobConf jobConf) throws IOException {\n // Code for calculating Pi\n }",
                "Description": "The method 'estimate' is long and does many different things. It's better to split it into smaller methods based on their functionality for better readability, maintainability and possibility for reuse in the future. For example, the sections that prepare the job configuration, write input for Map, and read the result can each be extracted into a separate method.",
                "Start": 3,
                "End": 52
            },
            {
                "Improvement": "Remove System.out.println statements",
                "Change_Diff": "- System.out.println(\"Wrote input for Map #\" + i);\n+ logger.info(\"Wrote input for Map #{}\", i);\n- System.out.println(\"Starting Job\");\n+ logger.info(\"Starting Job\");\n- System.out.println(\"Job Finished in \" + duration + \" seconds\");\n+ logger.info(\"Job Finished in {} seconds\", duration);",
                "Description": "System.out.println statements should not be used in production code. These statements can slow down the application, and they may lead to security issues if they print sensitive information. It's better to use a logging framework, such as log4j or slf4j.",
                "Start": 30,
                "End": 35
            }
        ],
        "Final code": "public static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n  prepareJobConfiguration(numMaps, numPoints, jobConf);\n  writeInputForMap(numMaps, numPoints, jobConf);\n  return calculatePi(numMaps, numPoints, jobConf);\n}\n\nprivate static void prepareJobConfiguration(int numMaps, long numPoints, JobConf jobConf) {\n  // Code for preparing job configuration\n}\n\nprivate static void writeInputForMap(int numMaps, long numPoints, JobConf jobConf) throws IOException {\n  // Code for writing input for Map\n}\n\nprivate static BigDecimal calculatePi(int numMaps, long numPoints, JobConf jobConf) throws IOException {\n  // Code for calculating Pi\n}"
    },
    "Old_Method": "/** \n * Run a map/reduce job for estimating Pi.\n * @return the estimated value of Pi\n */\npublic static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n  jobConf.setJobName(PiEstimator.class.getSimpleName());\n  jobConf.setInputFormat(SequenceFileInputFormat.class);\n  jobConf.setOutputKeyClass(BooleanWritable.class);\n  jobConf.setOutputValueClass(LongWritable.class);\n  jobConf.setOutputFormat(SequenceFileOutputFormat.class);\n  jobConf.setMapperClass(PiMapper.class);\n  jobConf.setNumMapTasks(numMaps);\n  jobConf.setReducerClass(PiReducer.class);\n  jobConf.setNumReduceTasks(1);\n  jobConf.setSpeculativeExecution(false);\n  final Path inDir=new Path(TMP_DIR,\"in\");\n  final Path outDir=new Path(TMP_DIR,\"out\");\n  FileInputFormat.setInputPaths(jobConf,inDir);\n  FileOutputFormat.setOutputPath(jobConf,outDir);\n  final FileSystem fs=FileSystem.get(jobConf);\n  if (fs.exists(TMP_DIR)) {\n    throw new IOException(\"Tmp directory \" + fs.makeQualified(TMP_DIR) + \" already exists.  Please remove it first.\");\n  }\n  if (!fs.mkdirs(inDir)) {\n    throw new IOException(\"Cannot create input directory \" + inDir);\n  }\n  try {\n    for (int i=0; i < numMaps; ++i) {\n      final Path file=new Path(inDir,\"part\" + i);\n      final LongWritable offset=new LongWritable(i * numPoints);\n      final LongWritable size=new LongWritable(numPoints);\n      final SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE);\n      try {\n        writer.append(offset,size);\n      }\n  finally {\n        writer.close();\n      }\n      System.out.println(\"Wrote input for Map #\" + i);\n    }\n    System.out.println(\"Starting Job\");\n    final long startTime=System.currentTimeMillis();\n    JobClient.runJob(jobConf);\n    final double duration=(System.currentTimeMillis() - startTime) / 1000.0;\n    System.out.println(\"Job Finished in \" + duration + \" seconds\");\n    Path inFile=new Path(outDir,\"reduce-out\");\n    LongWritable numInside=new LongWritable();\n    LongWritable numOutside=new LongWritable();\n    SequenceFile.Reader reader=new SequenceFile.Reader(fs,inFile,jobConf);\n    try {\n      reader.next(numInside,numOutside);\n    }\n  finally {\n      reader.close();\n    }\n    return BigDecimal.valueOf(4).setScale(20).multiply(BigDecimal.valueOf(numInside.get())).divide(BigDecimal.valueOf(numMaps)).divide(BigDecimal.valueOf(numPoints));\n  }\n  finally {\n    fs.delete(TMP_DIR,true);\n  }\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/PiEstimator.java",
    "Start": 8217,
    "Stop": 11568,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "estimate"
}
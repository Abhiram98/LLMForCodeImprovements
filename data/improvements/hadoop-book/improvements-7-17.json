{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor nested for loop into a separate method",
                "Change_Diff": "- for (ColumnName col : row) {\n-    if (col instanceof Point) {\n-      int x=((Point)col).x;\n-      int y=((Point)col).y;\n-      if (x < low_x) { low_x=x; }\n-      if (x > high_x) { high_x=x; }\n-      if (y < low_y) { low_y=y; }\n-      if (y > high_y) { high_y=y; }\n-    }\n-  }\n+ calculateDimensions(row);",
                "Description": "Nested loops make the code harder to read and understand. By moving the nested loop into a separate method, the code becomes easier to read, test and maintain.",
                "Start": 13,
                "End": 31
            },
            {
                "Improvement": "Use Optional to avoid null",
                "Change_Diff": "- Piece xPiece=null;\n- for (Piece p : pieces) {\n-   if (\"x\".equals(p.name)) {\n-     xPiece=p;\n-     break;\n-   }\n- }\n+ Optional<Piece> xPiece = pieces.stream().filter(p -> \"x\".equals(p.name)).findFirst();",
                "Description": "The use of nulls can lead to NullPointerExceptions. Using Optional is a more modern and safer alternative.",
                "Start": 6,
                "End": 10
            }
        ],
        "Final code": "public SolutionCategory getCategory(List<List<ColumnName>> names){\n  Optional<Piece> xPiece = pieces.stream().filter(p -> \"x\".equals(p.name)).findFirst();\n  if (!xPiece.isPresent()) {\n    return SolutionCategory.UPPER_LEFT;\n  }\n  for (List<ColumnName> row : names) {\n    if (row.contains(xPiece.get())) {\n      int[] dimensions = calculateDimensions(row);\n      boolean mid_x=(dimensions[0] + dimensions[1] == width - 1);\n      boolean mid_y=(dimensions[2] + dimensions[3] == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      } else if (mid_x) {\n        return SolutionCategory.MID_X;\n      } else if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n\nprivate int[] calculateDimensions(List<ColumnName> row) {\n  int low_x=width;\n  int high_x=0;\n  int low_y=height;\n  int high_y=0;\n  for (ColumnName col : row) {\n    if (col instanceof Point) {\n      int x=((Point)col).x;\n      int y=((Point)col).y;\n      if (x < low_x) { low_x=x; }\n      if (x > high_x) { high_x=x; }\n      if (y < low_y) { low_y=y; }\n      if (y > high_y) { high_y=y; }\n    }\n  }\n  return new int[]{low_x, high_x, low_y, high_y};\n}"
    },
    "Old_Method": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=null;\n  for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n  for (  List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      int low_x=width;\n      int high_x=0;\n      int low_y=height;\n      int high_y=0;\n      for (      ColumnName col : row) {\n        if (col instanceof Point) {\n          int x=((Point)col).x;\n          int y=((Point)col).y;\n          if (x < low_x) {\n            low_x=x;\n          }\n          if (x > high_x) {\n            high_x=x;\n          }\n          if (y < low_y) {\n            low_y=y;\n          }\n          if (y > high_y) {\n            high_y=y;\n          }\n        }\n      }\n      boolean mid_x=(low_x + high_x == width - 1);\n      boolean mid_y=(low_y + high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n else       if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n else       if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Pentomino.java",
    "Start": 6117,
    "Stop": 8106,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getCategory"
}
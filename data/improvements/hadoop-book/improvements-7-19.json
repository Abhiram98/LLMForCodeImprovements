{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract finding xPiece into separate method",
                "Change_Diff": "- for (Piece p : pieces) {\n if (\"x\".equals(p.name)) {\n xPiece = p;\n break;\n }\n }\n+ xPiece = findXPiece(pieces);",
                "Description": "The piece of code which finds the xPiece could be refactored into a separate method. This simplifies the main method and makes it easier to understand.",
                "Start": 9,
                "End": 15
            },
            {
                "Improvement": "Use early return for upper left category",
                "Change_Diff": "- for (List<ColumnName> row : names) {\n if (row.contains(xPiece)) {\n ...\n }\n }\n return SolutionCategory.UPPER_LEFT;\n+ if (!containsXPiece(names, xPiece)) {\n return SolutionCategory.UPPER_LEFT;\n }\n ...",
                "Description": "If xPiece is not found in the rows, the method can return the UPPER_LEFT category immediately. This reduces unnecessary nested blocks and makes the code cleaner.",
                "Start": 16,
                "End": 34
            },
            {
                "Improvement": "Replace the for loop for finding low and high values with a separate method",
                "Change_Diff": "- for (ColumnName col : row) {\n if (col instanceof Point) {\n ...\n }\n }\n+ Bounds bounds = calculateBounds(row);",
                "Description": "The for loop to find the low and high x and y values could be moved to a separate method, making the main method shorter and easier to understand.",
                "Start": 20,
                "End": 31
            }
        ],
        "Final code": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece = findXPiece(pieces);\n\n  if (!containsXPiece(names, xPiece)) {\n    return SolutionCategory.UPPER_LEFT;\n  }\n\n  for (List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      Bounds bounds = calculateBounds(row);\n\n      boolean mid_x = (bounds.getLowX() + bounds.getHighX() == width - 1);\n      boolean mid_y = (bounds.getLowY() + bounds.getHighY() == height - 1);\n\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      } else if (mid_x) {\n        return SolutionCategory.MID_X;\n      } else if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n    }\n  }\n}\n\nprivate Piece findXPiece(List<Piece> pieces) {\n  for (Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      return p;\n    }\n  }\n  return null;\n}\n\nprivate boolean containsXPiece(List<List<ColumnName>> names, Piece xPiece) {\n  for (List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate Bounds calculateBounds(List<ColumnName> row) {\n  int low_x = width;\n  int high_x = 0;\n  int low_y = height;\n  int high_y = 0;\n  for (ColumnName col : row) {\n    if (col instanceof Point) {\n      int x = ((Point)col).x;\n      int y = ((Point)col).y;\n      if (x < low_x) { low_x = x; }\n      if (x > high_x) { high_x = x; }\n      if (y < low_y) { low_y = y; }\n      if (y > high_y) { high_y = y; }\n    }\n  }\n  return new Bounds(low_x, high_x, low_y, high_y);\n}"
    },
    "Old_Method": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=null;\n  for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n  for (  List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      int low_x=width;\n      int high_x=0;\n      int low_y=height;\n      int high_y=0;\n      for (      ColumnName col : row) {\n        if (col instanceof Point) {\n          int x=((Point)col).x;\n          int y=((Point)col).y;\n          if (x < low_x) {\n            low_x=x;\n          }\n          if (x > high_x) {\n            high_x=x;\n          }\n          if (y < low_y) {\n            low_y=y;\n          }\n          if (y > high_y) {\n            high_y=y;\n          }\n        }\n      }\n      boolean mid_x=(low_x + high_x == width - 1);\n      boolean mid_y=(low_y + high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n else       if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n else       if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Pentomino.java",
    "Start": 6117,
    "Stop": 8106,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getCategory"
}
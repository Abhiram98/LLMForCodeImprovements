{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Java Logging instead of System.out.println",
                "Change_Diff": "- System.out.println(\"Running \" + numMaps + \" maps.\");\n- System.out.println(\"Job started: \" + startTime);\n- System.out.println(\"Job ended: \" + endTime);\n- System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n+ logger.info(\"Running \" + numMaps + \" maps.\");\n+ logger.info(\"Job started: \" + startTime);\n+ logger.info(\"Job ended: \" + endTime);\n+ logger.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");",
                "Description": "Using java.util.logging (or other logging libraries like Log4j) provides more flexibility in terms of log levels and log handlers. This helps in controlling what is logged and where it is logged.",
                "Start": 35,
                "End": 41
            },
            {
                "Improvement": "Use try-with-resources for JobClient",
                "Change_Diff": "- JobClient client=new JobClient(job);\n- ClusterStatus cluster=client.getClusterStatus();\n+ try (JobClient client = new JobClient(job)) {\n+ ClusterStatus cluster=client.getClusterStatus();\n+ // rest of the code\n+ }",
                "Description": "The try-with-resources statement ensures that each resource is closed at the end of the statement. This can be used to avoid potential resource leaks.",
                "Start": 13,
                "End": 14
            }
        ],
        "Final code": "public int run(String[] args) throws Exception {\nif (args.length == 0) {\nreturn printUsage();\n}\nJobConf job=new JobConf(getConf());\njob.setJarByClass(RandomTextWriter.class);\njob.setJobName(\"random-text-writer\");\njob.setOutputKeyClass(Text.class);\njob.setOutputValueClass(Text.class);\njob.setInputFormat(RandomWriter.RandomInputFormat.class);\njob.setMapperClass(Map.class);\ntry (JobClient client = new JobClient(job)) {\nClusterStatus cluster=client.getClusterStatus();\nint numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\nlong numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\nif (numBytesToWritePerMap == 0) {\nSystem.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\nreturn -2;\n}\nlong totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\nint numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\nif (numMaps == 0 && totalBytesToWrite > 0) {\nnumMaps=1;\njob.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n}\nClass<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\nList<String> otherArgs=new ArrayList<String>();\nfor (int i=0; i < args.length; ++i) {\ntry {\nif (\"-outFormat\".equals(args[i])) {\noutputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n}\nelse {\notherArgs.add(args[i]);\n}\n}\ncatch (ArrayIndexOutOfBoundsException except) {\nSystem.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\nreturn printUsage();\n}\n}\njob.setOutputFormat(outputFormatClass);\nFileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\njob.setNumMapTasks(numMaps);\nlogger.info(\"Running \" + numMaps + \" maps.\");\njob.setNumReduceTasks(0);\nDate startTime=new Date();\nlogger.info(\"Job started: \" + startTime);\nJobClient.runJob(job);\nDate endTime=new Date();\nlogger.info(\"Job ended: \" + endTime);\nlogger.info(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\nreturn 0;\n}\n}"
    },
    "Old_Method": "/** \n * This is the main routine for launching a distributed random write job. It runs 10 maps/node and each node writes 1 gig of data to a DFS file. The reduce doesn't do anything.\n * @throws IOException\n */\npublic int run(String[] args) throws Exception {\n  if (args.length == 0) {\n    return printUsage();\n  }\n  JobConf job=new JobConf(getConf());\n  job.setJarByClass(RandomTextWriter.class);\n  job.setJobName(\"random-text-writer\");\n  job.setOutputKeyClass(Text.class);\n  job.setOutputValueClass(Text.class);\n  job.setInputFormat(RandomWriter.RandomInputFormat.class);\n  job.setMapperClass(Map.class);\n  JobClient client=new JobClient(job);\n  ClusterStatus cluster=client.getClusterStatus();\n  int numMapsPerHost=job.getInt(\"test.randomtextwrite.maps_per_host\",10);\n  long numBytesToWritePerMap=job.getLong(\"test.randomtextwrite.bytes_per_map\",1 * 1024 * 1024* 1024);\n  if (numBytesToWritePerMap == 0) {\n    System.err.println(\"Cannot have test.randomtextwrite.bytes_per_map set to 0\");\n    return -2;\n  }\n  long totalBytesToWrite=job.getLong(\"test.randomtextwrite.total_bytes\",numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());\n  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);\n  if (numMaps == 0 && totalBytesToWrite > 0) {\n    numMaps=1;\n    job.setLong(\"test.randomtextwrite.bytes_per_map\",totalBytesToWrite);\n  }\n  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;\n  List<String> otherArgs=new ArrayList<String>();\n  for (int i=0; i < args.length; ++i) {\n    try {\n      if (\"-outFormat\".equals(args[i])) {\n        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);\n      }\n else {\n        otherArgs.add(args[i]);\n      }\n    }\n catch (    ArrayIndexOutOfBoundsException except) {\n      System.out.println(\"ERROR: Required parameter missing from \" + args[i - 1]);\n      return printUsage();\n    }\n  }\n  job.setOutputFormat(outputFormatClass);\n  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));\n  job.setNumMapTasks(numMaps);\n  System.out.println(\"Running \" + numMaps + \" maps.\");\n  job.setNumReduceTasks(0);\n  Date startTime=new Date();\n  System.out.println(\"Job started: \" + startTime);\n  JobClient.runJob(job);\n  Date endTime=new Date();\n  System.out.println(\"Job ended: \" + endTime);\n  System.out.println(\"The job took \" + (endTime.getTime() - startTime.getTime()) / 1000 + \" seconds.\");\n  return 0;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/RandomTextWriter.java",
    "Start": 6049,
    "Stop": 9055,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "run"
}
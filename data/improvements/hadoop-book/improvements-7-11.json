{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract finding xPiece into a separate method",
                "Change_Diff": "- for (  Piece p : pieces) {\n-   if (\"x\".equals(p.name)) {\n-     xPiece=p;\n-     break;\n-   }\n- }\n+ xPiece = findXPiece(pieces);",
                "Description": "The code for finding the 'x' piece can be extracted into its own method. This would improve readability and maintainability of the code",
                "Start": 11,
                "End": 17
            },
            {
                "Improvement": "Use optional for xPiece",
                "Change_Diff": "- Piece xPiece=null;\n+ Optional<Piece> xPiece=Optional.empty();",
                "Description": "Since xPiece might not exist in the collection, it is better to use Optional<Piece>. This would make the code safer, preventing NullPointerExceptions if xPiece is not found.",
                "Start": 10,
                "End": 10
            },
            {
                "Improvement": "Refactor nested for-loop to a private method",
                "Change_Diff": "- for (ColumnName col : row) {\n ... (all the lines in between) ... \n- if (y > high_y) {\n-   high_y=y;\n- }\n+ SolutionCategory category = checkCoordinates(row);",
                "Description": "The nested for loop is doing a lot of things. This could be refactored into a private method to enhance readability and maintainability of the code.",
                "Start": 21,
                "End": 37
            }
        ],
        "Final code": "public SolutionCategory getCategory(List<List<ColumnName>> names) {\n  Optional<Piece> xPiece = findXPiece(pieces);\n  for (List<ColumnName> row : names) {\n    if (row.contains(xPiece.orElse(null))) {\n      return checkCoordinates(row);\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n\nprivate Optional<Piece> findXPiece(List<Piece> pieces) {\n  for (Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      return Optional.of(p);\n    }\n  }\n  return Optional.empty();\n}\n\nprivate SolutionCategory checkCoordinates(List<ColumnName> row) {\n  int low_x = width, high_x = 0, low_y = height, high_y = 0;\n  for (ColumnName col : row) {\n    if (col instanceof Point) {\n      int x = ((Point)col).x;\n      int y = ((Point)col).y;\n      low_x = Math.min(x, low_x);\n      high_x = Math.max(x, high_x);\n      low_y = Math.min(y, low_y);\n      high_y = Math.max(y, high_y);\n    }\n  }\n  boolean mid_x = (low_x + high_x == width - 1);\n  boolean mid_y = (low_y + high_y == height - 1);\n  if (mid_x && mid_y) {\n    return SolutionCategory.CENTER;\n  } else if (mid_x) {\n    return SolutionCategory.MID_X;\n  } else if (mid_y) {\n    return SolutionCategory.MID_Y;\n  }\n  return SolutionCategory.UPPER_LEFT;\n}"
    },
    "Old_Method": "/** \n * Find whether the solution has the x in the upper left quadrant, the x-midline, the y-midline or in the center.\n * @param names the solution to check\n * @return the catagory of the solution\n */\npublic SolutionCategory getCategory(List<List<ColumnName>> names){\n  Piece xPiece=null;\n  for (  Piece p : pieces) {\n    if (\"x\".equals(p.name)) {\n      xPiece=p;\n      break;\n    }\n  }\n  for (  List<ColumnName> row : names) {\n    if (row.contains(xPiece)) {\n      int low_x=width;\n      int high_x=0;\n      int low_y=height;\n      int high_y=0;\n      for (      ColumnName col : row) {\n        if (col instanceof Point) {\n          int x=((Point)col).x;\n          int y=((Point)col).y;\n          if (x < low_x) {\n            low_x=x;\n          }\n          if (x > high_x) {\n            high_x=x;\n          }\n          if (y < low_y) {\n            low_y=y;\n          }\n          if (y > high_y) {\n            high_y=y;\n          }\n        }\n      }\n      boolean mid_x=(low_x + high_x == width - 1);\n      boolean mid_y=(low_y + high_y == height - 1);\n      if (mid_x && mid_y) {\n        return SolutionCategory.CENTER;\n      }\n else       if (mid_x) {\n        return SolutionCategory.MID_X;\n      }\n else       if (mid_y) {\n        return SolutionCategory.MID_Y;\n      }\n      break;\n    }\n  }\n  return SolutionCategory.UPPER_LEFT;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Pentomino.java",
    "Start": 6117,
    "Stop": 8106,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getCategory"
}
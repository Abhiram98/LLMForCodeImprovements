{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid using print statements in production code",
                "Change_Diff": "- System.out.println(\"Wrote input for Map #\" + i);\n- System.out.println(\"Starting Job\");\n- System.out.println(\"Job Finished in \" + duration + \" seconds\");\n+ logger.info(\"Wrote input for Map #\" + i);\n+ logger.info(\"Starting Job\");\n+ logger.info(\"Job Finished in \" + duration + \" seconds\");",
                "Description": "System.out.println statements are generally not advised in production code. If you need to output the information, use a logging framework like SLF4J or Log4J. This would provide you with more flexibility to configure and manage the output logs.",
                "Start": 27,
                "End": 30
            },
            {
                "Improvement": "Define Constants for Repeated String Literals",
                "Change_Diff": "- final Path inDir=new Path(TMP_DIR,\"in\");\n- final Path outDir=new Path(TMP_DIR,\"out\");\n- final Path file=new Path(inDir,\"part\" + i);\n+ final Path inDir=new Path(TMP_DIR, IN_DIR);\n+ final Path outDir=new Path(TMP_DIR, OUT_DIR);\n+ final Path file=new Path(inDir, PART + i);",
                "Description": "String literals like \"in\", \"out\", \"part\" are repeated in your code. It would be a good idea to define them as constants, as this would make it easier to manage these values.",
                "Start": 14,
                "End": 24
            },
            {
                "Improvement": "Use try-with-resources for managing resources",
                "Change_Diff": "- final SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE);\n- try {\n-     writer.append(offset,size);\n- }\n- finally {\n-     writer.close();\n- }\n- SequenceFile.Reader reader=new SequenceFile.Reader(fs,inFile,jobConf);\n- try {\n-     reader.next(numInside,numOutside);\n- }\n- finally {\n-     reader.close();\n- }\n+ try (SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE)) {\n+     writer.append(offset,size);\n+ }\n+ try (SequenceFile.Reader reader=new SequenceFile.Reader(fs,inFile,jobConf)) {\n+     reader.next(numInside,numOutside);\n+ }",
                "Description": "The writer and reader objects are manually closed in a finally block. This can be improved by using the try-with-resources statement available in Java 7 and above, which ensures that each resource is closed at the end of the statement.",
                "Start": 25,
                "End": 33
            }
        ],
        "Final code": "private static final String IN_DIR = \"in\";\nprivate static final String OUT_DIR = \"out\";\nprivate static final String PART = \"part\";\n\nprivate static final Logger logger = LoggerFactory.getLogger(PiEstimator.class);\n\npublic static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n  jobConf.setJobName(PiEstimator.class.getSimpleName());\n  // remaining jobConf setup...\n\n  final Path inDir=new Path(TMP_DIR, IN_DIR);\n  final Path outDir=new Path(TMP_DIR, OUT_DIR);\n  // remaining file setup...\n\n  if (!fs.mkdirs(inDir)) {\n    throw new IOException(\"Cannot create input directory \" + inDir);\n  }\n\n  try {\n    for (int i=0; i < numMaps; ++i) {\n      final Path file=new Path(inDir, PART + i);\n      // remaining file setup...\n\n      try (SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE)) {\n        writer.append(offset,size);\n      }\n      logger.info(\"Wrote input for Map #\" + i);\n    }\n\n    logger.info(\"Starting Job\");\n    final long startTime=System.currentTimeMillis();\n    JobClient.runJob(jobConf);\n    final double duration=(System.currentTimeMillis() - startTime) / 1000.0;\n    logger.info(\"Job Finished in \" + duration + \" seconds\");\n\n    Path inFile=new Path(outDir,\"reduce-out\");\n    LongWritable numInside=new LongWritable();\n    LongWritable numOutside=new LongWritable();\n\n    try (SequenceFile.Reader reader=new SequenceFile.Reader(fs,inFile,jobConf)) {\n      reader.next(numInside,numOutside);\n    }\n\n    return BigDecimal.valueOf(4).setScale(20).multiply(BigDecimal.valueOf(numInside.get())).divide(BigDecimal.valueOf(numMaps)).divide(BigDecimal.valueOf(numPoints));\n  }\n  finally {\n    fs.delete(TMP_DIR,true);\n  }\n}"
    },
    "Old_Method": "/** \n * Run a map/reduce job for estimating Pi.\n * @return the estimated value of Pi\n */\npublic static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n  jobConf.setJobName(PiEstimator.class.getSimpleName());\n  jobConf.setInputFormat(SequenceFileInputFormat.class);\n  jobConf.setOutputKeyClass(BooleanWritable.class);\n  jobConf.setOutputValueClass(LongWritable.class);\n  jobConf.setOutputFormat(SequenceFileOutputFormat.class);\n  jobConf.setMapperClass(PiMapper.class);\n  jobConf.setNumMapTasks(numMaps);\n  jobConf.setReducerClass(PiReducer.class);\n  jobConf.setNumReduceTasks(1);\n  jobConf.setSpeculativeExecution(false);\n  final Path inDir=new Path(TMP_DIR,\"in\");\n  final Path outDir=new Path(TMP_DIR,\"out\");\n  FileInputFormat.setInputPaths(jobConf,inDir);\n  FileOutputFormat.setOutputPath(jobConf,outDir);\n  final FileSystem fs=FileSystem.get(jobConf);\n  if (fs.exists(TMP_DIR)) {\n    throw new IOException(\"Tmp directory \" + fs.makeQualified(TMP_DIR) + \" already exists.  Please remove it first.\");\n  }\n  if (!fs.mkdirs(inDir)) {\n    throw new IOException(\"Cannot create input directory \" + inDir);\n  }\n  try {\n    for (int i=0; i < numMaps; ++i) {\n      final Path file=new Path(inDir,\"part\" + i);\n      final LongWritable offset=new LongWritable(i * numPoints);\n      final LongWritable size=new LongWritable(numPoints);\n      final SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE);\n      try {\n        writer.append(offset,size);\n      }\n  finally {\n        writer.close();\n      }\n      System.out.println(\"Wrote input for Map #\" + i);\n    }\n    System.out.println(\"Starting Job\");\n    final long startTime=System.currentTimeMillis();\n    JobClient.runJob(jobConf);\n    final double duration=(System.currentTimeMillis() - startTime) / 1000.0;\n    System.out.println(\"Job Finished in \" + duration + \" seconds\");\n    Path inFile=new Path(outDir,\"reduce-out\");\n    LongWritable numInside=new LongWritable();\n    LongWritable numOutside=new LongWritable();\n    SequenceFile.Reader reader=new SequenceFile.Reader(fs,inFile,jobConf);\n    try {\n      reader.next(numInside,numOutside);\n    }\n  finally {\n      reader.close();\n    }\n    return BigDecimal.valueOf(4).setScale(20).multiply(BigDecimal.valueOf(numInside.get())).divide(BigDecimal.valueOf(numMaps)).divide(BigDecimal.valueOf(numPoints));\n  }\n  finally {\n    fs.delete(TMP_DIR,true);\n  }\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/PiEstimator.java",
    "Start": 8217,
    "Stop": 11568,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "estimate"
}
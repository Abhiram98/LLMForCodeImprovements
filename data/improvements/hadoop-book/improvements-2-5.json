{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract constants",
                "Change_Diff": "- final Path inDir=new Path(TMP_DIR,\"in\");\n- final Path outDir=new Path(TMP_DIR,\"out\");\n+ final Path inDir=new Path(TMP_DIR,IN_DIR);\n+ final Path outDir=new Path(TMP_DIR,OUT_DIR);\n\n... and similar changes for other repeated literals",
                "Description": "There are certain string literals and numbers that are used multiple times in the code. These could be declared as private static final constants at the beginning of the class. This makes the code easier to understand and maintain.",
                "Start": 1,
                "End": 52
            },
            {
                "Improvement": "Use try-with-resources",
                "Change_Diff": "- final SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE);\n- try {\n-     writer.append(offset,size);\n- }\n- finally {\n-     writer.close();\n- }\n+ try (final SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE)) {\n+     writer.append(offset,size);\n+ }",
                "Description": "The try-finally blocks used for closing the SequenceFile.Writer and SequenceFile.Reader can be replaced with try-with-resources, which is a more modern, cleaner, and safer way to handle resources that need to be closed.",
                "Start": 25,
                "End": 32
            },
            {
                "Improvement": "Extract method",
                "Change_Diff": "- public static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n...\n+ public static BigDecimal estimate(int numMaps, long numPoints, JobConf jobConf) throws IOException {\n+     setupJobConf(numMaps, numPoints, jobConf);\n+     checkAndCreateDirs(jobConf);\n+     writeInputForMaps(numMaps, numPoints, jobConf);\n+     runAndMonitorJob(jobConf);\n+     return calculatePi(numMaps, numPoints, jobConf);\n+ }",
                "Description": "The method is too long and does too many things. It should be broken down into smaller, more manageable methods. This makes the code easier to understand and test.",
                "Start": 1,
                "End": 52
            }
        ],
        "Final code": "public static BigDecimal estimate(int numMaps, long numPoints, JobConf jobConf) throws IOException {\n    setupJobConf(numMaps, numPoints, jobConf);\n    checkAndCreateDirs(jobConf);\n    writeInputForMaps(numMaps, numPoints, jobConf);\n    runAndMonitorJob(jobConf);\n    return calculatePi(numMaps, numPoints, jobConf);\n}\n\n... and the new methods that were extracted"
    },
    "Old_Method": "/** \n * Run a map/reduce job for estimating Pi.\n * @return the estimated value of Pi\n */\npublic static BigDecimal estimate(int numMaps,long numPoints,JobConf jobConf) throws IOException {\n  jobConf.setJobName(PiEstimator.class.getSimpleName());\n  jobConf.setInputFormat(SequenceFileInputFormat.class);\n  jobConf.setOutputKeyClass(BooleanWritable.class);\n  jobConf.setOutputValueClass(LongWritable.class);\n  jobConf.setOutputFormat(SequenceFileOutputFormat.class);\n  jobConf.setMapperClass(PiMapper.class);\n  jobConf.setNumMapTasks(numMaps);\n  jobConf.setReducerClass(PiReducer.class);\n  jobConf.setNumReduceTasks(1);\n  jobConf.setSpeculativeExecution(false);\n  final Path inDir=new Path(TMP_DIR,\"in\");\n  final Path outDir=new Path(TMP_DIR,\"out\");\n  FileInputFormat.setInputPaths(jobConf,inDir);\n  FileOutputFormat.setOutputPath(jobConf,outDir);\n  final FileSystem fs=FileSystem.get(jobConf);\n  if (fs.exists(TMP_DIR)) {\n    throw new IOException(\"Tmp directory \" + fs.makeQualified(TMP_DIR) + \" already exists.  Please remove it first.\");\n  }\n  if (!fs.mkdirs(inDir)) {\n    throw new IOException(\"Cannot create input directory \" + inDir);\n  }\n  try {\n    for (int i=0; i < numMaps; ++i) {\n      final Path file=new Path(inDir,\"part\" + i);\n      final LongWritable offset=new LongWritable(i * numPoints);\n      final LongWritable size=new LongWritable(numPoints);\n      final SequenceFile.Writer writer=SequenceFile.createWriter(fs,jobConf,file,LongWritable.class,LongWritable.class,CompressionType.NONE);\n      try {\n        writer.append(offset,size);\n      }\n  finally {\n        writer.close();\n      }\n      System.out.println(\"Wrote input for Map #\" + i);\n    }\n    System.out.println(\"Starting Job\");\n    final long startTime=System.currentTimeMillis();\n    JobClient.runJob(jobConf);\n    final double duration=(System.currentTimeMillis() - startTime) / 1000.0;\n    System.out.println(\"Job Finished in \" + duration + \" seconds\");\n    Path inFile=new Path(outDir,\"reduce-out\");\n    LongWritable numInside=new LongWritable();\n    LongWritable numOutside=new LongWritable();\n    SequenceFile.Reader reader=new SequenceFile.Reader(fs,inFile,jobConf);\n    try {\n      reader.next(numInside,numOutside);\n    }\n  finally {\n      reader.close();\n    }\n    return BigDecimal.valueOf(4).setScale(20).multiply(BigDecimal.valueOf(numInside.get())).divide(BigDecimal.valueOf(numMaps)).divide(BigDecimal.valueOf(numPoints));\n  }\n  finally {\n    fs.delete(TMP_DIR,true);\n  }\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/PiEstimator.java",
    "Start": 8217,
    "Stop": 11568,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "estimate"
}
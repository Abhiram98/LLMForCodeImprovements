{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use logging instead of System.out.println",
                "Change_Diff": "- System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n+ LOG.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);",
                "Description": "Using a logger instead of System.out.println will provide more control over the output and is better practice for a production environment.",
                "Start": 6,
                "End": 6
            },
            {
                "Improvement": "Avoid magic numbers",
                "Change_Diff": "- for (int split=0; split < numSplits - 1; ++split) {\n+ for (int split=0; split < numSplits - LAST_SPLIT; ++split) {",
                "Description": "The number '1' is a \"magic number\" and should be replaced with a constant for better readability and maintainability.",
                "Start": 10,
                "End": 10
            },
            {
                "Improvement": "Use final for unmodified variables",
                "Change_Diff": "- long totalRows=getNumberOfRows(job);\n+ final long totalRows=getNumberOfRows(job);\n- long rowsPerSplit=totalRows / numSplits;\n+ final long rowsPerSplit=totalRows / numSplits;",
                "Description": "Variables that are not modified after initial assignment should be declared final to express intent more clearly and avoid potential errors.",
                "Start": 3,
                "End": 5
            }
        ],
        "Final code": "public InputSplit[] getSplits(JobConf job,int numSplits){\n  final long totalRows=getNumberOfRows(job);\n  final long rowsPerSplit=totalRows / numSplits;\n  LOG.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (int split=0; split < numSplits - LAST_SPLIT; ++split) {\n    splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n    currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - LAST_SPLIT]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}"
    },
    "Old_Method": "/** \n * Create the desired number of splits, dividing the number of rows between the mappers.\n */\npublic InputSplit[] getSplits(JobConf job,int numSplits){\n  long totalRows=getNumberOfRows(job);\n  long rowsPerSplit=totalRows / numSplits;\n  System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (int split=0; split < numSplits - 1; ++split) {\n    splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n    currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/terasort/TeraGen.java",
    "Start": 4921,
    "Stop": 5780,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getSplits"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use Java 8 Streams for nested loops",
            "Change_Diff": "- for (int x=0; x < size; ++x) {\n-    for (int num=1; num <= size; ++num) {\n-      model.addColumn(new ColumnConstraint(num,x));\n-    }\n-  }\n-  for (int y=0; y < size; ++y) {\n-    for (int num=1; num <= size; ++num) {\n-      model.addColumn(new RowConstraint(num,y));\n-    }\n-  }\n-  for (int x=0; x < squareYSize; ++x) {\n-    for (int y=0; y < squareXSize; ++y) {\n-      for (int num=1; num <= size; ++num) {\n-        model.addColumn(new SquareConstraint(num,x,y));\n-      }\n-    }\n-  }\n-  for (int x=0; x < size; ++x) {\n-    for (int y=0; y < size; ++y) {\n-      model.addColumn(new CellConstraint(x,y));\n-    }\n-  }\n+ IntStream.range(0, size).forEach(x -> { model.addColumn(new ColumnConstraint(x+1,x)); model.addColumn(new RowConstraint(x+1,x)); model.addColumn(new CellConstraint(x,x)); });\n+ IntStream.range(0, squareYSize).forEach(x -> IntStream.range(0, squareXSize).forEach(y -> IntStream.rangeClosed(1, size).forEach(num -> model.addColumn(new SquareConstraint(num,x,y)))));",
            "Description": "You can use Java 8 Streams to replace nested loops, which will make your code more readable and maintainable. In particular, IntStream can be used to replace for loops that iterate over a range of numbers.",
            "Start": 2,
            "End": 20
        }],
        "Final code": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();\n  IntStream.range(0, size).forEach(x -> { model.addColumn(new ColumnConstraint(x+1,x)); model.addColumn(new RowConstraint(x+1,x)); model.addColumn(new CellConstraint(x,x)); });\n  IntStream.range(0, squareYSize).forEach(x -> IntStream.range(0, squareXSize).forEach(y -> IntStream.rangeClosed(1, size).forEach(num -> model.addColumn(new SquareConstraint(num,x,y)))));\n  boolean[] rowValues=new boolean[size * size * 4];\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      if (board[y][x] == -1) {\n        for (int num=1; num <= size; ++num) {\n          model.addRow(generateRow(rowValues,x,y,num));\n        }\n      } else {\n        model.addRow(generateRow(rowValues,x,y,board[y][x]));\n      }\n    }\n  }\n  return model;\n}"
    },
    "Old_Method": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();\n  for (int x=0; x < size; ++x) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new ColumnConstraint(num,x));\n    }\n  }\n  for (int y=0; y < size; ++y) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new RowConstraint(num,y));\n    }\n  }\n  for (int x=0; x < squareYSize; ++x) {\n    for (int y=0; y < squareXSize; ++y) {\n      for (int num=1; num <= size; ++num) {\n        model.addColumn(new SquareConstraint(num,x,y));\n      }\n    }\n  }\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      model.addColumn(new CellConstraint(x,y));\n    }\n  }\n  boolean[] rowValues=new boolean[size * size * 4];\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      if (board[y][x] == -1) {\n        for (int num=1; num <= size; ++num) {\n          model.addRow(generateRow(rowValues,x,y,num));\n        }\n      }\n else {\n        model.addRow(generateRow(rowValues,x,y,board[y][x]));\n      }\n    }\n  }\n  return model;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Sudoku.java",
    "Start": 8366,
    "Stop": 10077,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "makeModel"
}
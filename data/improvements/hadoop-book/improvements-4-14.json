{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use StringBuilder instead of StringBuffer",
                "Change_Diff": "- StringBuffer result=new StringBuffer();\n+ StringBuilder result=new StringBuilder();",
                "Description": "StringBuilder is faster than StringBuffer when used in a single thread. In this case, the method stringifySolution is not declared as synchronized, so it is better to use StringBuilder.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Use enhanced for loop",
                "Change_Diff": "- for (int y=0; y < size; ++y) {\n-   for (int x=0; x < size; ++x) {\n+ for (int[] row : picture) {\n+   for (int num : row) {",
                "Description": "Use enhanced for loop for iterating over arrays. It makes the code more readable.",
                "Start": 16,
                "End": 22
            },
            {
                "Improvement": "Use ternary operator",
                "Change_Diff": "- if (item instanceof ColumnConstraint) {\n-   x=((ColumnConstraint)item).column;\n-   num=((ColumnConstraint)item).num;\n- } else if (item instanceof RowConstraint) {\n-   y=((RowConstraint)item).row;\n- }\n+ x = (item instanceof ColumnConstraint) ? ((ColumnConstraint)item).column : x;\n+ num = (item instanceof ColumnConstraint) ? ((ColumnConstraint)item).num : num;\n+ y = (item instanceof RowConstraint) ? ((RowConstraint)item).row : y;",
                "Description": "Use ternary operator instead of if-else to make the code more concise and readable.",
                "Start": 11,
                "End": 15
            }
        ],
        "Final code": "static String stringifySolution(int size, List<List<ColumnName>> solution) {\n  int[][] picture = new int[size][size];\n  StringBuilder result = new StringBuilder();\n  for (List<ColumnName> row : solution) {\n    int x = -1, y = -1, num = -1;\n    for (ColumnName item : row) {\n      x = (item instanceof ColumnConstraint) ? ((ColumnConstraint)item).column : x;\n      num = (item instanceof ColumnConstraint) ? ((ColumnConstraint)item).num : num;\n      y = (item instanceof RowConstraint) ? ((RowConstraint)item).row : y;\n    }\n    picture[y][x] = num;\n  }\n  for (int[] row : picture) {\n    for (int num : row) {\n      result.append(num).append(\" \");\n    }\n    result.append(\"\\n\");\n  }\n  return result.toString();\n}"
    },
    "Old_Method": "/** \n * A string containing a representation of the solution.\n * @param size the size of the board\n * @param solution a list of list of column names\n * @return a string of the solution matrix\n */\nstatic String stringifySolution(int size,List<List<ColumnName>> solution){\n  int[][] picture=new int[size][size];\n  StringBuffer result=new StringBuffer();\n  for (  List<ColumnName> row : solution) {\n    int x=-1;\n    int y=-1;\n    int num=-1;\n    for (    ColumnName item : row) {\n      if (item instanceof ColumnConstraint) {\n        x=((ColumnConstraint)item).column;\n        num=((ColumnConstraint)item).num;\n      }\n else       if (item instanceof RowConstraint) {\n        y=((RowConstraint)item).row;\n      }\n    }\n    picture[y][x]=num;\n  }\n  for (int y=0; y < size; ++y) {\n    for (int x=0; x < size; ++x) {\n      result.append(picture[y][x]);\n      result.append(\" \");\n    }\n    result.append(\"\\n\");\n  }\n  return result.toString();\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Sudoku.java",
    "Start": 1860,
    "Stop": 3175,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "stringifySolution"
}
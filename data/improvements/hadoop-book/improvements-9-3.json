{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int x=0; x < size; ++x) {\n-    for (int y=0; y < size; ++y) {\n-      if (board[y][x] == -1) {\n-        for (int num=1; num <= size; ++num) {\n-          model.addRow(generateRow(rowValues,x,y,num));\n-        }\n-      }\n- else {\n-        model.addRow(generateRow(rowValues,x,y,board[y][x]));\n-      }\n-    }\n-  }\n+ for (boolean[] row : board) {\n+    for (boolean cell : row) {\n+      if (cell == -1) {\n+        for (int num = 1; num <= size; ++num) {\n+          model.addRow(generateRow(rowValues, x, y, num));\n+        }\n+      } else {\n+        model.addRow(generateRow(rowValues, x, y, cell));\n+      }\n+    }\n+  }",
                "Description": "Using enhanced for loop will make the code more readable and concise.",
                "Start": 3,
                "End": 28
            },
            {
                "Improvement": "Extract repeated code into a separate method",
                "Change_Diff": "- for (int x=0; x < size; ++x) {\n-    for (int num=1; num <= size; ++num) {\n-      model.addColumn(new ColumnConstraint(num,x));\n-    }\n-  }\n- for (int y=0; y < size; ++y) {\n-    for (int num=1; num <= size; ++num) {\n-      model.addColumn(new RowConstraint(num,y));\n-    }\n-  }\n- for (int x=0; x < squareYSize; ++x) {\n-    for (int y=0; y < squareXSize; ++y) {\n-      for (int num=1; num <= size; ++num) {\n-        model.addColumn(new SquareConstraint(num,x,y));\n-      }\n-    }\n-  }\n- for (int x=0; x < size; ++x) {\n-    for (int y=0; y < size; ++y) {\n-      model.addColumn(new CellConstraint(x,y));\n-    }\n-  }\n+ addColumnsToModel(model);",
                "Description": "The code for adding columns to the model is repeated multiple times with only slight variations. Consider extracting this into a separate method",
                "Start": 3,
                "End": 15
            }
        ],
        "Final code": "private DancingLinks<ColumnName> makeModel() {\n  DancingLinks<ColumnName> model = new DancingLinks<ColumnName>();\n  addColumnsToModel(model);\n  boolean[] rowValues = new boolean[size * size * 4];\n  for (boolean[] row : board) {\n    for (boolean cell : row) {\n      if (cell == -1) {\n        for (int num = 1; num <= size; ++num) {\n          model.addRow(generateRow(rowValues, x, y, num));\n        }\n      } else {\n        model.addRow(generateRow(rowValues, x, y, cell));\n      }\n    }\n  }\n  return model;\n}\n\nprivate void addColumnsToModel(DancingLinks<ColumnName> model) {\n  for (int i = 0; i < size; ++i) {\n    for (int num = 1; num <= size; ++num) {\n      model.addColumn(new ColumnConstraint(num, i));\n      model.addColumn(new RowConstraint(num, i));\n      if (i < squareYSize) {\n        for (int j = 0; j < squareXSize; ++j) {\n          model.addColumn(new SquareConstraint(num, i, j));\n        }\n      }\n      model.addColumn(new CellConstraint(i, i));\n    }\n  }\n}"
    },
    "Old_Method": "private DancingLinks<ColumnName> makeModel(){\n  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();\n  for (int x=0; x < size; ++x) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new ColumnConstraint(num,x));\n    }\n  }\n  for (int y=0; y < size; ++y) {\n    for (int num=1; num <= size; ++num) {\n      model.addColumn(new RowConstraint(num,y));\n    }\n  }\n  for (int x=0; x < squareYSize; ++x) {\n    for (int y=0; y < squareXSize; ++y) {\n      for (int num=1; num <= size; ++num) {\n        model.addColumn(new SquareConstraint(num,x,y));\n      }\n    }\n  }\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      model.addColumn(new CellConstraint(x,y));\n    }\n  }\n  boolean[] rowValues=new boolean[size * size * 4];\n  for (int x=0; x < size; ++x) {\n    for (int y=0; y < size; ++y) {\n      if (board[y][x] == -1) {\n        for (int num=1; num <= size; ++num) {\n          model.addRow(generateRow(rowValues,x,y,num));\n        }\n      }\n else {\n        model.addRow(generateRow(rowValues,x,y,board[y][x]));\n      }\n    }\n  }\n  return model;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/dancing/Sudoku.java",
    "Start": 8366,
    "Stop": 10077,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "makeModel"
}
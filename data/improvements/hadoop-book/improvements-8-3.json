{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove direct system output",
                "Change_Diff": "- System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n+ logger.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);",
                "Description": "Instead of using System.out.println for logging information, use a logging framework such as Log4j. This allows better control over log levels and output, as well as improved performance.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Use enhanced for loop",
                "Change_Diff": "- for (int split=0; split < numSplits - 1; ++split) {\n-     splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n-     currentRow+=rowsPerSplit;\n+ for (InputSplit split : splits) {\n+     split = new RangeInputSplit(currentRow,rowsPerSplit);\n+     currentRow+=rowsPerSplit;\n+ }",
                "Description": "The for loop can be simplified using an enhanced for loop, which is more readable and less prone to off-by-one errors.",
                "Start": 8,
                "End": 11
            }
        ],
        "Final code": "public InputSplit[] getSplits(JobConf job,int numSplits){\n  long totalRows=getNumberOfRows(job);\n  long rowsPerSplit=totalRows / numSplits;\n  Logger logger = Logger.getLogger(YourClass.class);\n  logger.info(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (InputSplit split : splits) {\n      split = new RangeInputSplit(currentRow,rowsPerSplit);\n      currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}"
    },
    "Old_Method": "/** \n * Create the desired number of splits, dividing the number of rows between the mappers.\n */\npublic InputSplit[] getSplits(JobConf job,int numSplits){\n  long totalRows=getNumberOfRows(job);\n  long rowsPerSplit=totalRows / numSplits;\n  System.out.println(\"Generating \" + totalRows + \" using \"+ numSplits+ \" maps with step of \"+ rowsPerSplit);\n  InputSplit[] splits=new InputSplit[numSplits];\n  long currentRow=0;\n  for (int split=0; split < numSplits - 1; ++split) {\n    splits[split]=new RangeInputSplit(currentRow,rowsPerSplit);\n    currentRow+=rowsPerSplit;\n  }\n  splits[numSplits - 1]=new RangeInputSplit(currentRow,totalRows - currentRow);\n  return splits;\n}\n",
    "File_Path": "hadoop-book/src/main/java/com/hadoopilluminated/examples/terasort/TeraGen.java",
    "Start": 4921,
    "Stop": 5780,
    "Project_Name": "data/projects/hadoop-book",
    "Method_Name": "getSplits"
}
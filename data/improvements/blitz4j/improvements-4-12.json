{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce Redundant Code",
                "Change_Diff": "- if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n...\n}\nelse if (!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n...\n}\n+ if (!isBufferPutSuccessful) {\n    if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n...\n    } else {\n...\n    }\n}",
                "Description": "The if-else condition `if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful))` and `if (!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful))` can be combined into one by nesting the `shouldSummarizeOverflow` condition inside the `(!isBufferPutSuccessful)` condition.",
                "Start": 19,
                "End": 39
            },
            {
                "Improvement": "Move Variable Closer to Usage",
                "Change_Diff": "- LocationInfo locationInfo=null;\n...\n+ LocationInfo locationInfo;\n",
                "Description": "The variable `locationInfo` is only used inside the `if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName))` block. We can move its declaration down to be closer to its usage.",
                "Start": 5,
                "End": 14
            },
            {
                "Improvement": "Remove Unused Variables",
                "Change_Diff": "- boolean isBufferSpaceAvailable=(batcher.isSpaceAvailable() && (logSummaryMap.size() == 0));\n...\n+ if (batcher.isSpaceAvailable() && (logSummaryMap.size() == 0)) {\n...\n}",
                "Description": "`isBufferSpaceAvailable` is only used once, and its calculation can be directly used in the condition where it is used.",
                "Start": 3,
                "End": 13
            }
        ],
        "Final code": "public void append(final LoggingEvent event){\n  boolean isBufferPutSuccessful=false;\n  Stopwatch s=locationInfoTimer.start();\n  LocationInfo locationInfo;\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n    if (CONFIGURATION.shouldGenerateBlitz4jLocationInfo()) {\n      locationInfo=LoggingContext.getInstance().generateLocationInfo(event);\n    }\n    else if (CONFIGURATION.shouldGenerateLog4jLocationInfo()) {\n      locationInfo=event.getLocationInformation();\n    }\n  }\n  s.stop();\n  if (batcher.isSpaceAvailable() && (logSummaryMap.size() == 0)) {\n    Stopwatch sThreadLocal=saveThreadLocalTimer.start();\n    saveThreadLocalInfo(event);\n    sThreadLocal.stop();\n    isBufferPutSuccessful=putInBuffer(event);\n  }\n  if (!isBufferPutSuccessful) {\n    if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n      summarizeEventCounter.increment();\n      Stopwatch t=putDiscardMapTimeTracer.start();\n      String loggerKey=event.getLoggerName();\n      if (locationInfo != null) {\n        loggerKey=locationInfo.getClassName() + \"_\" + locationInfo.getLineNumber();\n      }\n      LogSummary summary=(LogSummary)logSummaryMap.get(loggerKey);\n      if (summary == null) {\n        saveThreadLocalInfo(event);\n        summary=new LogSummary(event);\n        logSummaryMap.put(loggerKey,summary);\n      }\n      else {\n        summary.add(event);\n      }\n      t.stop();\n    } else {\n      discardEventCounter.increment();\n    }\n  }\n}"
    },
    "Old_Method": "public void append(final LoggingEvent event){\n  boolean isBufferSpaceAvailable=(batcher.isSpaceAvailable() && (logSummaryMap.size() == 0));\n  boolean isBufferPutSuccessful=false;\n  LocationInfo locationInfo=null;\n  Stopwatch s=locationInfoTimer.start();\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n    if (CONFIGURATION.shouldGenerateBlitz4jLocationInfo()) {\n      locationInfo=LoggingContext.getInstance().generateLocationInfo(event);\n    }\n else     if (CONFIGURATION.shouldGenerateLog4jLocationInfo()) {\n      locationInfo=event.getLocationInformation();\n    }\n  }\n  s.stop();\n  if (isBufferSpaceAvailable) {\n    Stopwatch sThreadLocal=saveThreadLocalTimer.start();\n    saveThreadLocalInfo(event);\n    sThreadLocal.stop();\n    isBufferPutSuccessful=putInBuffer(event);\n  }\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n    summarizeEventCounter.increment();\n    Stopwatch t=putDiscardMapTimeTracer.start();\n    String loggerKey=event.getLoggerName();\n    if (locationInfo != null) {\n      loggerKey=locationInfo.getClassName() + \"_\" + locationInfo.getLineNumber();\n    }\n    LogSummary summary=(LogSummary)logSummaryMap.get(loggerKey);\n    if (summary == null) {\n      saveThreadLocalInfo(event);\n      summary=new LogSummary(event);\n      logSummaryMap.put(loggerKey,summary);\n    }\n else {\n      summary.add(event);\n    }\n    t.stop();\n  }\n else   if (!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n    discardEventCounter.increment();\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/AsyncAppender.java",
    "Start": 8263,
    "Stop": 10867,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "append"
}
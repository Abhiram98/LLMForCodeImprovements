{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid instantiating Stopwatch object when not required",
                "Change_Diff": "- Stopwatch s=locationInfoTimer.start();\n+ if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n+     Stopwatch s=locationInfoTimer.start();",
                "Description": "The instantiation of the Stopwatch instance `s` is unnecessary when `shouldSummarizeOverflow` is false. It should be moved inside the if condition to avoid unnecessary object creation.",
                "Start": 6,
                "End": 6
            },
            {
                "Improvement": "Avoid duplicate calls to `shouldSummarizeOverflow`",
                "Change_Diff": "- if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName))\n+ boolean shouldSummarizeOverflow = CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName);\n+ if (shouldSummarizeOverflow)",
                "Description": "The method `shouldSummarizeOverflow` is called multiple times with the same argument. Instead, its return value can be stored in a variable and reused to enhance efficiency.",
                "Start": 7,
                "End": 34
            },
            {
                "Improvement": "Use computeIfAbsent method for Map",
                "Change_Diff": "- LogSummary summary=(LogSummary)logSummaryMap.get(loggerKey);\n- if (summary == null) {\n-     saveThreadLocalInfo(event);\n-     summary=new LogSummary(event);\n-     logSummaryMap.put(loggerKey,summary);\n- }\n+ LogSummary summary = logSummaryMap.computeIfAbsent(loggerKey, key -> {\n+     saveThreadLocalInfo(event);\n+     return new LogSummary(event);\n+ });",
                "Description": "The call sequence of `get` and `put` on the map `logSummaryMap` can be replaced by a single call to `computeIfAbsent`. This not only makes the code more compact but also potentially faster because the key is only computed once.",
                "Start": 26,
                "End": 31
            }
        ],
        "Final code": "public void append(final LoggingEvent event) {\n    boolean isBufferSpaceAvailable=(batcher.isSpaceAvailable() && (logSummaryMap.size() == 0));\n    boolean isBufferPutSuccessful=false;\n    LocationInfo locationInfo=null;\n    boolean shouldSummarizeOverflow = CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName);\n    if (shouldSummarizeOverflow) {\n        Stopwatch s=locationInfoTimer.start();\n        if (CONFIGURATION.shouldGenerateBlitz4jLocationInfo()) {\n            locationInfo=LoggingContext.getInstance().generateLocationInfo(event);\n        }\n        else if (CONFIGURATION.shouldGenerateLog4jLocationInfo()) {\n            locationInfo=event.getLocationInformation();\n        }\n        s.stop();\n    }\n    if (isBufferSpaceAvailable) {\n        Stopwatch sThreadLocal=saveThreadLocalTimer.start();\n        saveThreadLocalInfo(event);\n        sThreadLocal.stop();\n        isBufferPutSuccessful=putInBuffer(event);\n    }\n    if (shouldSummarizeOverflow && (!isBufferPutSuccessful)) {\n        summarizeEventCounter.increment();\n        Stopwatch t=putDiscardMapTimeTracer.start();\n        String loggerKey=event.getLoggerName();\n        if (locationInfo != null) {\n            loggerKey=locationInfo.getClassName() + \"_\" + locationInfo.getLineNumber();\n        }\n        LogSummary summary = logSummaryMap.computeIfAbsent(loggerKey, key -> {\n            saveThreadLocalInfo(event);\n            return new LogSummary(event);\n        });\n        summary.add(event);\n        t.stop();\n    }\n    else if (!shouldSummarizeOverflow && (!isBufferPutSuccessful)) {\n        discardEventCounter.increment();\n    }\n}"
    },
    "Old_Method": "public void append(final LoggingEvent event){\n  boolean isBufferSpaceAvailable=(batcher.isSpaceAvailable() && (logSummaryMap.size() == 0));\n  boolean isBufferPutSuccessful=false;\n  LocationInfo locationInfo=null;\n  Stopwatch s=locationInfoTimer.start();\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n    if (CONFIGURATION.shouldGenerateBlitz4jLocationInfo()) {\n      locationInfo=LoggingContext.getInstance().generateLocationInfo(event);\n    }\n else     if (CONFIGURATION.shouldGenerateLog4jLocationInfo()) {\n      locationInfo=event.getLocationInformation();\n    }\n  }\n  s.stop();\n  if (isBufferSpaceAvailable) {\n    Stopwatch sThreadLocal=saveThreadLocalTimer.start();\n    saveThreadLocalInfo(event);\n    sThreadLocal.stop();\n    isBufferPutSuccessful=putInBuffer(event);\n  }\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n    summarizeEventCounter.increment();\n    Stopwatch t=putDiscardMapTimeTracer.start();\n    String loggerKey=event.getLoggerName();\n    if (locationInfo != null) {\n      loggerKey=locationInfo.getClassName() + \"_\" + locationInfo.getLineNumber();\n    }\n    LogSummary summary=(LogSummary)logSummaryMap.get(loggerKey);\n    if (summary == null) {\n      saveThreadLocalInfo(event);\n      summary=new LogSummary(event);\n      logSummaryMap.put(loggerKey,summary);\n    }\n else {\n      summary.add(event);\n    }\n    t.stop();\n  }\n else   if (!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n    discardEventCounter.increment();\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/AsyncAppender.java",
    "Start": 8263,
    "Stop": 10867,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "append"
}
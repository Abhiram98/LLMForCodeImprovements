{
    "Method_Improvements": [{
        "Improvements": [{
            "Improvement": "Change 'Iterator<Entry<String, LogSummary>>' to 'Map.Entry<String, LogSummary>'",
            "Change_Diff": "- for (Iterator<Entry<String,LogSummary>> iter=logSummaryMap.entrySet().iterator(); iter.hasNext(); ) {\n+ for (Map.Entry<String,LogSummary> entry : logSummaryMap.entrySet()) {",
            "Description": "Use the Map.Entry interface directly for iterating over the logSummaryMap",
            "Start": 32,
            "End": 32
        }],
        "Final code": "private void processLoggingEvents(List<LoggingEvent> loggingEvents) {\n  while (appenders.getAllAppenders() == null || (appenders != null && !appenders.getAllAppenders().hasMoreElements())) {\n    if ((batcher == null) || (batcher.isPaused())) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      } catch (InterruptedException ignore) {\n      }\n      continue;\n    }\n    org.apache.log4j.Logger asyncLogger = LoggerCache.getInstance().getOrCreateLogger(LOGGER_ASYNC_APPENDER);\n    Appender originalAppender = asyncLogger.getAppender(originalAppenderName);\n    if (originalAppender == null) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      } catch (InterruptedException ignore) {\n      }\n      continue;\n    }\n    appenders.addAppender(originalAppender);\n  }\n  for (Map.Entry<String, LogSummary> entry : logSummaryMap.entrySet()) {\n    if (batcher.isSpaceAvailable()) {\n      LogSummary logSummary = entry.getValue();\n      LoggingEvent event = logSummary.createEvent();\n      if (batcher.process(event)) {\n        logSummaryMap.remove(entry.getKey());\n      } else {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n  for (LoggingEvent event : loggingEvents) {\n    appenders.appendLoopOnAppenders(event);\n  }\n}"
    }],
    "Old_Method": "/** \n * Process the logging events. This is called by the batcher.\n * @param loggingEvents - The logging events to be written to the underlying appender\n */\nprivate void processLoggingEvents(List<LoggingEvent> loggingEvents){\n  while (appenders.getAllAppenders() == null || (appenders != null && !appenders.getAllAppenders().hasMoreElements())) {\n    if ((batcher == null) || (batcher.isPaused())) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    org.apache.log4j.Logger asyncLogger=LoggerCache.getInstance().getOrCreateLogger(LOGGER_ASYNC_APPENDER);\n    Appender originalAppender=asyncLogger.getAppender(originalAppenderName);\n    if (originalAppender == null) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    appenders.addAppender(originalAppender);\n  }\n  for (Iterator<Entry<String,LogSummary>> iter=logSummaryMap.entrySet().iterator(); iter.hasNext(); ) {\n    Entry<String,LogSummary> mapEntry=(Entry<String,LogSummary>)iter.next();\n    if (batcher.isSpaceAvailable()) {\n      LogSummary logSummary=mapEntry.getValue();\n      LoggingEvent event=logSummary.createEvent();\n      if (batcher.process(event)) {\n        iter.remove();\n      }\n else {\n        break;\n      }\n    }\n else {\n      break;\n    }\n  }\n  for (  LoggingEvent event : loggingEvents) {\n    appenders.appendLoopOnAppenders(event);\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/AsyncAppender.java",
    "Start": 5676,
    "Stop": 8133,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "processLoggingEvents"
}
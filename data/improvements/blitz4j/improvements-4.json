{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Extract method to improve readability and maintainability",
                "Change_Diff": "- if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n+ if (shouldSummarizeOverflow()) {",
                "Description": "Extract the condition `CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)` into a separate method to improve code readability and maintainability.",
                "Start": 16,
                "End": 16
            },
            {
                "Improvement": "Extract method to improve readability and maintainability",
                "Change_Diff": "- if (CONFIGURATION.shouldGenerateBlitz4jLocationInfo()) {\n+ if (shouldGenerateBlitz4jLocationInfo()) {",
                "Description": "Extract the condition `CONFIGURATION.shouldGenerateBlitz4jLocationInfo()` into a separate method to improve code readability and maintainability.",
                "Start": 17,
                "End": 17
            },
            {
                "Improvement": "Extract method to improve readability and maintainability",
                "Change_Diff": "- if (CONFIGURATION.shouldGenerateLog4jLocationInfo()) {\n+ if (shouldGenerateLog4jLocationInfo()) {",
                "Description": "Extract the condition `CONFIGURATION.shouldGenerateLog4jLocationInfo()` into a separate method to improve code readability and maintainability.",
                "Start": 21,
                "End": 21
            },
            {
                "Improvement": "Extract method to improve readability and maintainability",
                "Change_Diff": "- if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n+ if (shouldSummarizeOverflow() && (!isBufferPutSuccessful)) {",
                "Description": "Extract the condition `CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)` into a separate method to improve code readability and maintainability.",
                "Start": 42,
                "End": 42
            },
            {
                "Improvement": "Extract method to improve readability and maintainability",
                "Change_Diff": "- if (!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n+ if (!shouldSummarizeOverflow() && (!isBufferPutSuccessful)) {",
                "Description": "Extract the condition `!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)` into a separate method to improve code readability and maintainability.",
                "Start": 53,
                "End": 53
            }
        ],
        "Final code": "public void append(final LoggingEvent event) {\n    boolean isBufferSpaceAvailable = (batcher.isSpaceAvailable() && (logSummaryMap.size() == 0));\n    boolean isBufferPutSuccessful = false;\n    LocationInfo locationInfo = null;\n    Stopwatch s = locationInfoTimer.start();\n    if (shouldSummarizeOverflow()) {\n        if (shouldGenerateBlitz4jLocationInfo()) {\n            locationInfo = LoggingContext.getInstance().generateLocationInfo(event);\n        } else if (shouldGenerateLog4jLocationInfo()) {\n            locationInfo = event.getLocationInformation();\n        }\n    }\n    s.stop();\n    if (isBufferSpaceAvailable) {\n        Stopwatch sThreadLocal = saveThreadLocalTimer.start();\n        saveThreadLocalInfo(event);\n        sThreadLocal.stop();\n        isBufferPutSuccessful = putInBuffer(event);\n    }\n    if (shouldSummarizeOverflow() && (!isBufferPutSuccessful)) {\n        summarizeEventCounter.increment();\n        Stopwatch t = putDiscardMapTimeTracer.start();\n        String loggerKey = event.getLoggerName();\n        if (locationInfo != null) {\n            loggerKey = locationInfo.getClassName() + \"_\" + locationInfo.getLineNumber();\n        }\n        LogSummary summary = (LogSummary) logSummaryMap.get(loggerKey);\n        if (summary == null) {\n            saveThreadLocalInfo(event);\n            summary = new LogSummary(event);\n            logSummaryMap.put(loggerKey, summary);\n        } else {\n            summary.add(event);\n        }\n        t.stop();\n    } else if (!shouldSummarizeOverflow() && (!isBufferPutSuccessful)) {\n        discardEventCounter.increment();\n    }\n}"
    }],
    "Old_Method": "public void append(final LoggingEvent event){\n  boolean isBufferSpaceAvailable=(batcher.isSpaceAvailable() && (logSummaryMap.size() == 0));\n  boolean isBufferPutSuccessful=false;\n  LocationInfo locationInfo=null;\n  Stopwatch s=locationInfoTimer.start();\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName)) {\n    if (CONFIGURATION.shouldGenerateBlitz4jLocationInfo()) {\n      locationInfo=LoggingContext.getInstance().generateLocationInfo(event);\n    }\n else     if (CONFIGURATION.shouldGenerateLog4jLocationInfo()) {\n      locationInfo=event.getLocationInformation();\n    }\n  }\n  s.stop();\n  if (isBufferSpaceAvailable) {\n    Stopwatch sThreadLocal=saveThreadLocalTimer.start();\n    saveThreadLocalInfo(event);\n    sThreadLocal.stop();\n    isBufferPutSuccessful=putInBuffer(event);\n  }\n  if (CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n    summarizeEventCounter.increment();\n    Stopwatch t=putDiscardMapTimeTracer.start();\n    String loggerKey=event.getLoggerName();\n    if (locationInfo != null) {\n      loggerKey=locationInfo.getClassName() + \"_\" + locationInfo.getLineNumber();\n    }\n    LogSummary summary=(LogSummary)logSummaryMap.get(loggerKey);\n    if (summary == null) {\n      saveThreadLocalInfo(event);\n      summary=new LogSummary(event);\n      logSummaryMap.put(loggerKey,summary);\n    }\n else {\n      summary.add(event);\n    }\n    t.stop();\n  }\n else   if (!CONFIGURATION.shouldSummarizeOverflow(this.originalAppenderName) && (!isBufferPutSuccessful)) {\n    discardEventCounter.increment();\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/AsyncAppender.java",
    "Start": 8263,
    "Stop": 10867,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "append"
}
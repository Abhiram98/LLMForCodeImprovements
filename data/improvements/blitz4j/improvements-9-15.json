{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor repeated code into a method",
                "Change_Diff": "- \"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"rejectWhenFull\"\n+ getPropertyName(\"rejectWhenFull\", originalAppenderName)\n- \"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\"\n+ getPropertyName(\"maxThreads\", originalAppenderName)",
                "Description": "The string concatenation to create the property key is repeated multiple times. This code can be refactored into a getPropertyName method.",
                "Start": 7,
                "End": 14
            },
            {
                "Improvement": "Avoid complex nested logic",
                "Change_Diff": "- valueString=valueString + oneValue + \",\";\n- valueString=valueString + oneValue;\n+ valueList.add(oneValue);\n- mapEntry.setValue(valueString);\n+ mapEntry.setValue(String.join(\",\", valueList));",
                "Description": "The logic to construct valueString is complex and nested. It can be simplified by using StringBuilder and String.join method.",
                "Start": 18,
                "End": 29
            }
        ],
        "Final code": "private void convertConfiguredAppendersToAsync(Properties props) throws ConfigurationException, FileNotFoundException {\n  for (  Map.Entry<String,String> originalAsyncAppenderMapEntry : originalAsyncAppenderNameMap.entrySet()) {\n    String asyncAppenderName=originalAsyncAppenderMapEntry.getValue();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName,AsyncAppender.class.getName());\n    String originalAppenderName=originalAsyncAppenderMapEntry.getKey();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName+ LOG4J_APPENDER_DELIMITER+ PROP_LOG4J_ORIGINAL_APPENDER_NAME,originalAppenderName);\n    this.initialProps.setProperty(getPropertyName(\"rejectWhenFull\", originalAppenderName),\"true\");\n    String maxThreads=this.initialProps.getProperty(getPropertyName(\"maxThreads\", originalAppenderName));\n    if (maxThreads == null) {\n      this.initialProps.setProperty(getPropertyName(\"maxThreads\", originalAppenderName),\"1\");\n    }\n    for (    Map.Entry mapEntry : props.entrySet()) {\n      String key=mapEntry.getKey().toString();\n      if ((key.contains(LOG4J_PREFIX) || key.contains(ROOT_CATEGORY) || key.contains(ROOT_LOGGER)) && !key.contains(PROP_LOG4J_ASYNC_APPENDERS) && !key.contains(PROP_LOG4J_ORIGINAL_APPENDER_NAME)) {\n        Object value=mapEntry.getValue();\n        if (value != null) {\n          String[] values=(String.class.cast(value)).split(\",\");\n          List<String> valueList = new ArrayList<>();\n          for (String oneValue : values) {\n            if (oneValue == null) {\n              continue;\n            }\n            if (originalAppenderName.equals(oneValue.trim())) {\n              oneValue=asyncAppenderName;\n            }\n            valueList.add(oneValue);\n          }\n          mapEntry.setValue(String.join(\",\", valueList));\n        }\n      }\n    }\n  }\n}\n\nprivate String getPropertyName(String property, String appenderName) {\n  return \"batcher.\" + AsyncAppender.class.getName() + \".\" + appenderName + \".\" + property;\n}"
    },
    "Old_Method": "/** \n * Convert appenders specified by the property <code>log4j.logger.asyncAppender<\/code> to the blitz4j Asynchronous appenders.\n * @param props - The properties that need to be passed into the log4j for configuration.\n * @throws ConfigurationException\n * @throws FileNotFoundException\n */\nprivate void convertConfiguredAppendersToAsync(Properties props) throws ConfigurationException, FileNotFoundException {\n  for (  Map.Entry<String,String> originalAsyncAppenderMapEntry : originalAsyncAppenderNameMap.entrySet()) {\n    String asyncAppenderName=originalAsyncAppenderMapEntry.getValue();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName,AsyncAppender.class.getName());\n    String originalAppenderName=originalAsyncAppenderMapEntry.getKey();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName+ LOG4J_APPENDER_DELIMITER+ PROP_LOG4J_ORIGINAL_APPENDER_NAME,originalAppenderName);\n    this.initialProps.setProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"rejectWhenFull\",\"true\");\n    String maxThreads=this.initialProps.getProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\");\n    if (maxThreads == null) {\n      this.initialProps.setProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\",\"1\");\n    }\n    for (    Map.Entry mapEntry : props.entrySet()) {\n      String key=mapEntry.getKey().toString();\n      if ((key.contains(LOG4J_PREFIX) || key.contains(ROOT_CATEGORY) || key.contains(ROOT_LOGGER)) && !key.contains(PROP_LOG4J_ASYNC_APPENDERS) && !key.contains(PROP_LOG4J_ORIGINAL_APPENDER_NAME)) {\n        Object value=mapEntry.getValue();\n        if (value != null) {\n          String[] values=(String.class.cast(value)).split(\",\");\n          String valueString=\"\";\n          int ctr=0;\n          for (          String oneValue : values) {\n            if (oneValue == null) {\n              continue;\n            }\n            ++ctr;\n            if (originalAppenderName.equals(oneValue.trim())) {\n              oneValue=asyncAppenderName;\n            }\n            if (ctr != values.length) {\n              valueString=valueString + oneValue + \",\";\n            }\n else {\n              valueString=valueString + oneValue;\n            }\n          }\n          mapEntry.setValue(valueString);\n        }\n      }\n    }\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/LoggingConfiguration.java",
    "Start": 19085,
    "Stop": 22519,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "convertConfiguredAppendersToAsync"
}
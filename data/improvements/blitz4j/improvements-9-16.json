{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract string formatting to a helper method",
                "Change_Diff": "- String maxThreads=this.initialProps.getProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\");\n+ String maxThreads=getPropertyKey(\"batcher\", AsyncAppender.class.getName(), originalAppenderName, \"maxThreads\");",
                "Description": "There is a repetitive pattern of string construction in the code. This can be simplified and made more readable by extracting it into a helper method.",
                "Start": 7,
                "End": 13
            },
            {
                "Improvement": "Use StringBuilder for string concatenation in loop",
                "Change_Diff": "- String valueString=\"\";\n  int ctr=0;\n  for (          String oneValue : values) {\n    if (oneValue == null) {\n      continue;\n    }\n    ++ctr;\n    if (originalAppenderName.equals(oneValue.trim())) {\n      oneValue=asyncAppenderName;\n    }\n    if (ctr != values.length) {\n      valueString=valueString + oneValue + \",\";\n    }\n else {\n      valueString=valueString + oneValue;\n    }\n  }\n+ StringBuilder valueBuilder = new StringBuilder();\n  for (String oneValue : values) {\n    if (oneValue != null) {\n      if (originalAppenderName.equals(oneValue.trim())) {\n          oneValue = asyncAppenderName;\n      }\n      valueBuilder.append(oneValue);\n      if (!oneValue.equals(values[values.length - 1])) {\n          valueBuilder.append(\",\");\n      }\n    }\n  }\n  String valueString = valueBuilder.toString();",
                "Description": "String concatenation in a loop is inefficient as it creates a new String object on each iteration. A StringBuilder should be used instead.",
                "Start": 23,
                "End": 34
            }
        ],
        "Final code": "private void convertConfiguredAppendersToAsync(Properties props) throws ConfigurationException, FileNotFoundException {\n  for (Map.Entry<String,String> originalAsyncAppenderMapEntry : originalAsyncAppenderNameMap.entrySet()) {\n    String asyncAppenderName=originalAsyncAppenderMapEntry.getValue();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName,AsyncAppender.class.getName());\n    String originalAppenderName=originalAsyncAppenderMapEntry.getKey();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName+ LOG4J_APPENDER_DELIMITER+ PROP_LOG4J_ORIGINAL_APPENDER_NAME,originalAppenderName);\n    this.initialProps.setProperty(getPropertyKey(\"batcher\", AsyncAppender.class.getName(), originalAppenderName, \"rejectWhenFull\"),\"true\");\n    String maxThreads=this.initialProps.getProperty(getPropertyKey(\"batcher\", AsyncAppender.class.getName(), originalAppenderName, \"maxThreads\"));\n    if (maxThreads == null) {\n      this.initialProps.setProperty(getPropertyKey(\"batcher\", AsyncAppender.class.getName(), originalAppenderName, \"maxThreads\"),\"1\");\n    }\n    for (Map.Entry mapEntry : props.entrySet()) {\n      String key=mapEntry.getKey().toString();\n      if ((key.contains(LOG4J_PREFIX) || key.contains(ROOT_CATEGORY) || key.contains(ROOT_LOGGER)) && !key.contains(PROP_LOG4J_ASYNC_APPENDERS) && !key.contains(PROP_LOG4J_ORIGINAL_APPENDER_NAME)) {\n        Object value=mapEntry.getValue();\n        if (value != null) {\n          String[] values=(String.class.cast(value)).split(\",\");\n          StringBuilder valueBuilder = new StringBuilder();\n          for (String oneValue : values) {\n            if (oneValue != null) {\n              if (originalAppenderName.equals(oneValue.trim())) {\n                oneValue = asyncAppenderName;\n              }\n              valueBuilder.append(oneValue);\n              if (!oneValue.equals(values[values.length - 1])) {\n                valueBuilder.append(\",\");\n              }\n            }\n          }\n          String valueString = valueBuilder.toString();\n          mapEntry.setValue(valueString);\n        }\n      }\n    }\n  }\n}\n\nprivate String getPropertyKey(String... parts) {\n  return String.join(\".\", parts);\n}"
    },
    "Old_Method": "/** \n * Convert appenders specified by the property <code>log4j.logger.asyncAppender<\/code> to the blitz4j Asynchronous appenders.\n * @param props - The properties that need to be passed into the log4j for configuration.\n * @throws ConfigurationException\n * @throws FileNotFoundException\n */\nprivate void convertConfiguredAppendersToAsync(Properties props) throws ConfigurationException, FileNotFoundException {\n  for (  Map.Entry<String,String> originalAsyncAppenderMapEntry : originalAsyncAppenderNameMap.entrySet()) {\n    String asyncAppenderName=originalAsyncAppenderMapEntry.getValue();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName,AsyncAppender.class.getName());\n    String originalAppenderName=originalAsyncAppenderMapEntry.getKey();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName+ LOG4J_APPENDER_DELIMITER+ PROP_LOG4J_ORIGINAL_APPENDER_NAME,originalAppenderName);\n    this.initialProps.setProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"rejectWhenFull\",\"true\");\n    String maxThreads=this.initialProps.getProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\");\n    if (maxThreads == null) {\n      this.initialProps.setProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\",\"1\");\n    }\n    for (    Map.Entry mapEntry : props.entrySet()) {\n      String key=mapEntry.getKey().toString();\n      if ((key.contains(LOG4J_PREFIX) || key.contains(ROOT_CATEGORY) || key.contains(ROOT_LOGGER)) && !key.contains(PROP_LOG4J_ASYNC_APPENDERS) && !key.contains(PROP_LOG4J_ORIGINAL_APPENDER_NAME)) {\n        Object value=mapEntry.getValue();\n        if (value != null) {\n          String[] values=(String.class.cast(value)).split(\",\");\n          String valueString=\"\";\n          int ctr=0;\n          for (          String oneValue : values) {\n            if (oneValue == null) {\n              continue;\n            }\n            ++ctr;\n            if (originalAppenderName.equals(oneValue.trim())) {\n              oneValue=asyncAppenderName;\n            }\n            if (ctr != values.length) {\n              valueString=valueString + oneValue + \",\";\n            }\n else {\n              valueString=valueString + oneValue;\n            }\n          }\n          mapEntry.setValue(valueString);\n        }\n      }\n    }\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/LoggingConfiguration.java",
    "Start": 19085,
    "Stop": 22519,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "convertConfiguredAppendersToAsync"
}
{
    "Method_Improvements": [{
        "details": "Expected a ',' or '}' at 2061 [character 98 line 32]",
        "error": "An unexpected error occurred"
    }],
    "Old_Method": "@Test public void testAsyncAppendersWithWhiteSpace() throws Exception {\n  props.setProperty(\"log4j.rootCategory\",\"OFF\");\n  props.setProperty(\"log4j.logger.com.netflix.blitz4j.TestBlitz4j\",\"INFO, stdout\");\n  props.setProperty(\"log4j.logger.com.netflix.blitz4j.TestBlitz4j$1\",\"INFO,stdout\");\n  props.setProperty(\"log4j.appender.stdout\",\"org.apache.log4j.ConsoleAppender\");\n  props.setProperty(\"log4j.appender.stdout.layout\",\"com.netflix.logging.log4jAdapter.NFPatternLayout\");\n  props.setProperty(\"log4j.appender.stdout.layout.ConversionPattern\",\"%d %-5p %C:%L [%t] [%M] %m%n\");\n  props.setProperty(\"log4j.logger.asyncAppenders\",\"INFO,stdout\");\n  props.setProperty(\"batcher.com.netflix.logging.AsyncAppender.stdout.waitTimeinMillis\",\"120000\");\n  LoggingConfiguration.getInstance().configure(props);\n  int noOfThreads=100;\n  Thread[] tArray=new Thread[noOfThreads];\n  for (int i=0; i < noOfThreads; i++) {\n    Thread t1=new Thread(new Runnable(){\n      public void run(){\n        int i=0;\n        while (i < 1000) {\n          i++;\n          Logger slflogger=LoggerFactory.getLogger(TestBlitz4j.class);\n          slflogger.info(\"Testing named log with this string {}\",\"Test String\");\n          Thread.yield();\n          try {\n            Thread.sleep(10);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n);\n    tArray[i]=t1;\n  }\n  Thread t2=new Thread(new Runnable(){\n    public void run(){\n      int i=0;\n      while (i <= 1000) {\n        try {\n          ConfigurationManager.getConfigInstance().setProperty(\"log4j.junk\",(i++) + \"\");\n          Thread.sleep(10);\n          Thread.yield();\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n);\n  for (int i=0; i < noOfThreads; i++) {\n    tArray[i].start();\n  }\n  t2.start();\n  t2.join();\n  for (int i=0; i < noOfThreads; i++) {\n    tArray[i].join();\n  }\n  int numSummarizedConsole=0;\n  try {\n    numSummarizedConsole=Integer.valueOf(getMonitoringData(consoleSummarizeEvent));\n  }\n catch (  Throwable e) {\n  }\n  int numAddedConsole=Integer.valueOf(getMonitoringData(consoleEventsProcessed));\n  System.out.println(\"The number of messages added to async batcher console: \" + numAddedConsole);\n  System.out.println(\"The number of messages summarized from async batcher console : \" + numSummarizedConsole);\n  System.out.println(\"Total number of messages to asyncBatcher console: \" + (numAddedConsole + numSummarizedConsole));\n  Assert.assertTrue(((numAddedConsole + numSummarizedConsole) >= 100000));\n  LoggingConfiguration.getInstance().stop();\n}\n",
    "File_Path": "blitz4j/src/test/java/com/netflix/blitz4j/TestBlitz4j.java",
    "Start": 5898,
    "Stop": 9749,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "testAsyncAppendersWithWhiteSpace"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid catching Throwable",
                "Change_Diff": "- } catch (Throwable e) {\n+ } catch (Exception e) {",
                "Description": "Catching Throwable is generally a bad practice as it includes Errors which are not meant to be caught. It's better to catch specific exceptions instead.",
                "Start": 33,
                "End": 37
            },
            {
                "Improvement": "Extract repeated code to separate method",
                "Change_Diff": "- if (stream.queue.drainTo(batch,stream.maxMessages - batch.size()) <= 0) {\n- long maxWait=firstTime + stream.maxDelay - now;\n- if (maxWait <= 0) {\n- break;\n- }\n- Object nextMessage=null;\n- try {\n- nextMessage=stream.queue.poll(maxWait,TimeUnit.NANOSECONDS);\n- }\n- catch (InterruptedException ignore) {\n- }\n- if (nextMessage == null) {\n- break;\n- }\n- batch.add(nextMessage);\n- now=System.nanoTime();\n- }",
                "Description": "The code for waiting for and adding the next message is repeated twice. This can be extracted to a separate method to improve readability and maintainability.",
                "Start": 10,
                "End": 21
            },
            {
                "Improvement": "Encapsulate fields",
                "Change_Diff": "- while (!shouldCollectorShutdown) {\n+ while (!getShouldCollectorShutdown()) {",
                "Description": "Fields like 'shouldCollectorShutdown' and 'isCollectorPaused' can be encapsulated to improve data hiding and maintainability.",
                "Start": 1,
                "End": 1
            }
        ],
        "Final code": "public void run() {\n    int batchSize = 0;\n    while (!getShouldCollectorShutdown()) {\n        if (getIsCollectorPaused()) {\n            try {\n                Thread.sleep(SLEEP_TIME_MS);\n            } catch (InterruptedException ignore) {\n            }\n            continue;\n        }\n        try {\n            if (batch.size() < stream.maxMessages) {\n                long now = System.nanoTime();\n                final long firstTime = now;\n                do {\n                    waitForAndAddNextMessage();\n                } while (batch.size() < stream.maxMessages);\n            }\n            batchSize = batch.size();\n            if (batchSize > 0) {\n                try {\n                    queueSizeTracer.record(stream.queue.size());\n                } catch (Exception ignored) {\n                }\n                avgBatchSizeTracer.record(batchSize);\n                Stopwatch s = processTimeTracer.start();\n                boolean retryExecution = false;\n                do {\n                    try {\n                        stream.processor.execute(new ProcessMessages(stream, batch));\n                        retryExecution = false;\n                    } catch (RejectedExecutionException re) {\n                        rejectedCounter.increment();\n                        retryExecution = true;\n                        Thread.sleep(RETRY_EXECUTION_TIMEOUT_MS);\n                    }\n                } while (retryExecution);\n                processCount.increment(batchSize);\n                s.stop();\n                batch = new ArrayList(stream.maxMessages);\n            }\n        } catch (Exception e) {\n            if (CONFIGURATION.shouldPrintLoggingErrors()) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
    },
    "Old_Method": "/** \n * Process messages from the queue, after grouping them into batches. \n */\npublic void run(){\n  int batchSize=0;\n  while (!shouldCollectorShutdown) {\n    if (isCollectorPaused) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    try {\n      if (batch.size() < stream.maxMessages) {\n        long now=System.nanoTime();\n        final long firstTime=now;\n        do {\n          if (stream.queue.drainTo(batch,stream.maxMessages - batch.size()) <= 0) {\n            long maxWait=firstTime + stream.maxDelay - now;\n            if (maxWait <= 0) {\n              break;\n            }\n            Object nextMessage=null;\n            try {\n              nextMessage=stream.queue.poll(maxWait,TimeUnit.NANOSECONDS);\n            }\n catch (            InterruptedException ignore) {\n            }\n            if (nextMessage == null) {\n              break;\n            }\n            batch.add(nextMessage);\n            now=System.nanoTime();\n          }\n        }\n while (batch.size() < stream.maxMessages);\n      }\n      batchSize=batch.size();\n      if (batchSize > 0) {\n        try {\n          queueSizeTracer.record(stream.queue.size());\n        }\n catch (        Exception ignored) {\n        }\n        avgBatchSizeTracer.record(batchSize);\n        Stopwatch s=processTimeTracer.start();\n        boolean retryExecution=false;\n        do {\n          try {\n            stream.processor.execute(new ProcessMessages(stream,batch));\n            retryExecution=false;\n          }\n catch (          RejectedExecutionException re) {\n            rejectedCounter.increment();\n            retryExecution=true;\n            Thread.sleep(RETRY_EXECUTION_TIMEOUT_MS);\n          }\n        }\n while (retryExecution);\n        processCount.increment(batchSize);\n        s.stop();\n        batch=new ArrayList(stream.maxMessages);\n      }\n    }\n catch (    Throwable e) {\n      if (CONFIGURATION.shouldPrintLoggingErrors()) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/logging/messaging/MessageBatcher.java",
    "Start": 14783,
    "Stop": 18103,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "run"
}
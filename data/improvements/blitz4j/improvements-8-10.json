{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use finally block to ensure batch is always cleared",
                "Change_Diff": "- batch=new ArrayList(stream.maxMessages);\n+ finally {\n+     batch.clear();\n+ }",
                "Description": "When you use a try-catch block, the code within that block can sometimes exit before you expect it to. This can lead to unexpected behavior or bugs. By moving the batch clearing code to a finally block, we ensure that the batch will always be cleared, even if an exception is thrown.",
                "Start": 37,
                "End": 37
            },
            {
                "Improvement": "Avoid repetitive call to `System.nanoTime()`",
                "Change_Diff": "- long now=System.nanoTime();\n+ long now;\n...\n- now=System.nanoTime();\n+ now = firstTime + stream.maxDelay - maxWait;",
                "Description": "System.nanoTime() is a relatively expensive operation, calling it repeatedly can negatively impact the performance. We should store the result of this method call in a variable and reuse it within the same scope.",
                "Start": 12,
                "End": 28
            },
            {
                "Improvement": "Avoid swallowing InterruptedException",
                "Change_Diff": "- catch (InterruptedException ignore) {\n+ catch (InterruptedException e) {\n+    Thread.currentThread().interrupt();\n+ }",
                "Description": "Swallowing the InterruptedException is almost always wrong, because it means the thread has been interrupted (usually because it is about to be cancelled), and the thread may not be able to react to the cancellation request. This can cause the application to hang or behave incorrectly. We should instead propagate this exception, or at the very least, restore the interrupt status.",
                "Start": 10,
                "End": 10
            }
        ],
        "Final code": "public void run(){\n  int batchSize=0;\n  while (!shouldCollectorShutdown) {\n    if (isCollectorPaused) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n      continue;\n    }\n    try {\n      if (batch.size() < stream.maxMessages) {\n        long firstTime=System.nanoTime();\n        do {\n          if (stream.queue.drainTo(batch,stream.maxMessages - batch.size()) <= 0) {\n            long maxWait=firstTime + stream.maxDelay - firstTime;\n            if (maxWait <= 0) {\n              break;\n            }\n            Object nextMessage=null;\n            try {\n              nextMessage=stream.queue.poll(maxWait,TimeUnit.NANOSECONDS);\n            }\n catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            if (nextMessage == null) {\n              break;\n            }\n            batch.add(nextMessage);\n          }\n        }\n while (batch.size() < stream.maxMessages);\n      }\n      batchSize=batch.size();\n      if (batchSize > 0) {\n        try {\n          queueSizeTracer.record(stream.queue.size());\n        }\n catch (Exception ignored) {\n        }\n        avgBatchSizeTracer.record(batchSize);\n        Stopwatch s=processTimeTracer.start();\n        boolean retryExecution=false;\n        do {\n          try {\n            stream.processor.execute(new ProcessMessages(stream,batch));\n            retryExecution=false;\n          }\n catch (RejectedExecutionException re) {\n            rejectedCounter.increment();\n            retryExecution=true;\n            Thread.sleep(RETRY_EXECUTION_TIMEOUT_MS);\n          }\n        }\n while (retryExecution);\n        processCount.increment(batchSize);\n        s.stop();\n      }\n    }\n catch (Throwable e) {\n      if (CONFIGURATION.shouldPrintLoggingErrors()) {\n        e.printStackTrace();\n      }\n    }\nfinally {\n     batch.clear();\n}\n  }\n}"
    },
    "Old_Method": "/** \n * Process messages from the queue, after grouping them into batches. \n */\npublic void run(){\n  int batchSize=0;\n  while (!shouldCollectorShutdown) {\n    if (isCollectorPaused) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    try {\n      if (batch.size() < stream.maxMessages) {\n        long now=System.nanoTime();\n        final long firstTime=now;\n        do {\n          if (stream.queue.drainTo(batch,stream.maxMessages - batch.size()) <= 0) {\n            long maxWait=firstTime + stream.maxDelay - now;\n            if (maxWait <= 0) {\n              break;\n            }\n            Object nextMessage=null;\n            try {\n              nextMessage=stream.queue.poll(maxWait,TimeUnit.NANOSECONDS);\n            }\n catch (            InterruptedException ignore) {\n            }\n            if (nextMessage == null) {\n              break;\n            }\n            batch.add(nextMessage);\n            now=System.nanoTime();\n          }\n        }\n while (batch.size() < stream.maxMessages);\n      }\n      batchSize=batch.size();\n      if (batchSize > 0) {\n        try {\n          queueSizeTracer.record(stream.queue.size());\n        }\n catch (        Exception ignored) {\n        }\n        avgBatchSizeTracer.record(batchSize);\n        Stopwatch s=processTimeTracer.start();\n        boolean retryExecution=false;\n        do {\n          try {\n            stream.processor.execute(new ProcessMessages(stream,batch));\n            retryExecution=false;\n          }\n catch (          RejectedExecutionException re) {\n            rejectedCounter.increment();\n            retryExecution=true;\n            Thread.sleep(RETRY_EXECUTION_TIMEOUT_MS);\n          }\n        }\n while (retryExecution);\n        processCount.increment(batchSize);\n        s.stop();\n        batch=new ArrayList(stream.maxMessages);\n      }\n    }\n catch (    Throwable e) {\n      if (CONFIGURATION.shouldPrintLoggingErrors()) {\n        e.printStackTrace();\n      }\n    }\n  }\n}\n",
    "File_Path": "blitz4j/src/main/java/com/netflix/logging/messaging/MessageBatcher.java",
    "Start": 14783,
    "Stop": 18103,
    "Project_Name": "data/projects/blitz4j",
    "Method_Name": "run"
}
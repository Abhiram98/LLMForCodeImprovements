{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reuse formLogin and logout instances",
                "Change_Diff": "- http.formLogin().loginPage('/login.jsp').and().formLogin().loginProcessingUrl('/login').and().formLogin().defaultSuccessUrl('/home').and().formLogin().failureUrl('/?error=1');\n- http.logout().logoutUrl('/logout').and().logout().logoutSuccessUrl('/').and().logout().deleteCookies('JSESSIONID');\n+ FormLoginConfigurer<HttpSecurity> formLogin = http.formLogin();\n+ formLogin.loginPage('/login.jsp').loginProcessingUrl('/login').defaultSuccessUrl('/home').failureUrl('/?error=1');\n+ LogoutConfigurer<HttpSecurity> logout = http.logout();\n+ logout.logoutUrl('/logout').logoutSuccessUrl('/').deleteCookies('JSESSIONID');",
                "Description": "Instead of calling formLogin() and logout() methods multiple times, create an instance of FormLoginConfigurer and LogoutConfigurer, then reuse it.",
                "Start": 2,
                "End": 3
            },
            {
                "Improvement": "Move anonymous class to a private method",
                "Change_Diff": "- HeaderWriter headerWriter=new HeaderWriter(){\n-    public void writeHeaders(    HttpServletRequest request,    HttpServletResponse response){\n-      response.setHeader('Cache-Control','no-cache, no-store, max-age=0, must-revalidate');\n-      response.setHeader('Expires','0');\n-      response.setHeader('Pragma','no-cache');\n-      response.setHeader('X-Frame-Options','SAMEORIGIN');\n-      response.setHeader('X-XSS-Protection','1; mode=block');\n-      response.setHeader('x-content-type-options','nosniff');\n-    }\n-  }\n+ HeaderWriter headerWriter = createHeaderWriter();",
                "Description": "Move anonymous HeaderWriter class to a private method for better readability and reusability.",
                "Start": 11,
                "End": 20
            }
        ],
        "Final code": "@Override protected void configure(HttpSecurity http) throws Exception {\n  FormLoginConfigurer<HttpSecurity> formLogin = http.formLogin();\n  formLogin.loginPage('/login.jsp').loginProcessingUrl('/login').defaultSuccessUrl('/home').failureUrl('/?error=1');\n  LogoutConfigurer<HttpSecurity> logout = http.logout();\n  logout.logoutUrl('/logout').logoutSuccessUrl('/').deleteCookies('JSESSIONID');\n  http.rememberMe().tokenValiditySeconds(1209600).and().rememberMe().rememberMeParameter('remember-me');\n  CharacterEncodingFilter encodeFilter=new CharacterEncodingFilter();\n  encodeFilter.setEncoding('utf-8');\n  encodeFilter.setForceEncoding(true);\n  http.addFilterBefore(encodeFilter,CsrfFilter.class);\n  http.headers().disable();\n  HeaderWriter headerWriter = createHeaderWriter();\n  List<HeaderWriter> headerWriterFilterList=new ArrayList<>();\n  headerWriterFilterList.add(headerWriter);\n  HeaderWriterFilter headerFilter=new HeaderWriterFilter(headerWriterFilterList);\n  http.addFilter(headerFilter);\n}\n\nprivate HeaderWriter createHeaderWriter() {\n    return new HeaderWriter() {\n        public void writeHeaders(HttpServletRequest request, HttpServletResponse response) {\n            response.setHeader('Cache-Control','no-cache, no-store, max-age=0, must-revalidate');\n            response.setHeader('Expires','0');\n            response.setHeader('Pragma','no-cache');\n            response.setHeader('X-Frame-Options','SAMEORIGIN');\n            response.setHeader('X-XSS-Protection','1; mode=block');\n            response.setHeader('x-content-type-options','nosniff');\n        }\n    };\n}"
    },
    "Old_Method": "@Override protected void configure(HttpSecurity http) throws Exception {\n  http.formLogin().loginPage(\"/login.jsp\").and().formLogin().loginProcessingUrl(\"/login\").and().formLogin().defaultSuccessUrl(\"/home\").and().formLogin().failureUrl(\"/?error=1\");\n  http.logout().logoutUrl(\"/logout\").and().logout().logoutSuccessUrl(\"/\").and().logout().deleteCookies(\"JSESSIONID\");\n  http.rememberMe().tokenValiditySeconds(1209600).and().rememberMe().rememberMeParameter(\"remember-me\");\n  CharacterEncodingFilter encodeFilter=new CharacterEncodingFilter();\n  encodeFilter.setEncoding(\"utf-8\");\n  encodeFilter.setForceEncoding(true);\n  http.addFilterBefore(encodeFilter,CsrfFilter.class);\n  http.headers().disable();\n  HeaderWriter headerWriter=new HeaderWriter(){\n    public void writeHeaders(    HttpServletRequest request,    HttpServletResponse response){\n      response.setHeader(\"Cache-Control\",\"no-cache, no-store, max-age=0, must-revalidate\");\n      response.setHeader(\"Expires\",\"0\");\n      response.setHeader(\"Pragma\",\"no-cache\");\n      response.setHeader(\"X-Frame-Options\",\"SAMEORIGIN\");\n      response.setHeader(\"X-XSS-Protection\",\"1; mode=block\");\n      response.setHeader(\"x-content-type-options\",\"nosniff\");\n    }\n  }\n;\n  List<HeaderWriter> headerWriterFilterList=new ArrayList<>();\n  headerWriterFilterList.add(headerWriter);\n  HeaderWriterFilter headerFilter=new HeaderWriterFilter(headerWriterFilterList);\n  http.addFilter(headerFilter);\n}\n",
    "File_Path": "web/back/src/main/java/com/aitongyi/web/back/conf/SecurityConfig.java",
    "Start": 1726,
    "Stop": 3424,
    "Project_Name": "data/projects/web",
    "Method_Name": "configure"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Separate validation and logging",
                "Change_Diff": "- System.out.println(\"Found no or more than one parameter in messageHandler [\" + handler.getName() + \"]. A messageHandler must define exactly one parameter\");\n- System.out.println(\"Message envelope configured but no subclass of MessageEnvelope found as parameter\");\n- System.out.println(\"Message envelope configured but message types defined for handler\");\n+ throw new IllegalArgumentException(\"Found no or more than one parameter in messageHandler [\" + handler.getName() + \"]. A messageHandler must define exactly one parameter\")\n+ throw new IllegalArgumentException(\"Message envelope configured but no subclass of MessageEnvelope found as parameter\")\n+ throw new IllegalArgumentException(\"Message envelope configured but message types defined for handler\")",
                "Description": "It is better to separate the validation and logging. This allows the validation method to be reused elsewhere without the logging. The caller of the method can decide what to do when the validation fails, including logging.",
                "Start": 2,
                "End": 16
            },
            {
                "Improvement": "Use Optional to deal with null values",
                "Change_Diff": "- if (handler == null || ReflectionUtils.getAnnotation(handler,Handler.class) == null) {\n+ if (Optional.ofNullable(handler).isEmpty() || Optional.ofNullable(ReflectionUtils.getAnnotation(handler,Handler.class)).isEmpty()) {",
                "Description": "Instead of using null checks, Java 8's Optional can be used to deal with null values. This produces more readable and safer code.",
                "Start": 2,
                "End": 2
            }
        ],
        "Final code": "private boolean isValidMessageHandler(Method handler) throws IllegalArgumentException {\n  if (Optional.ofNullable(handler).isEmpty() || Optional.ofNullable(ReflectionUtils.getAnnotation(handler,Handler.class)).isEmpty()) {\n    return false;\n  }\n  if (handler.getParameterTypes().length != 1) {\n    throw new IllegalArgumentException(\"Found no or more than one parameter in messageHandler [\" + handler.getName() + \"]. A messageHandler must define exactly one parameter\");\n  }\n  Enveloped envelope=ReflectionUtils.getAnnotation(handler,Enveloped.class);\n  if (envelope != null && !MessageEnvelope.class.isAssignableFrom(handler.getParameterTypes()[0])) {\n    throw new IllegalArgumentException(\"Message envelope configured but no subclass of MessageEnvelope found as parameter\");\n  }\n  if (envelope != null && envelope.messages().length == 0) {\n    throw new IllegalArgumentException(\"Message envelope configured but message types defined for handler\");\n  }\n  return true;\n}"
    },
    "Old_Method": "private boolean isValidMessageHandler(Method handler){\n  if (handler == null || ReflectionUtils.getAnnotation(handler,Handler.class) == null) {\n    return false;\n  }\n  if (handler.getParameterTypes().length != 1) {\n    System.out.println(\"Found no or more than one parameter in messageHandler [\" + handler.getName() + \"]. A messageHandler must define exactly one parameter\");\n    return false;\n  }\n  Enveloped envelope=ReflectionUtils.getAnnotation(handler,Enveloped.class);\n  if (envelope != null && !MessageEnvelope.class.isAssignableFrom(handler.getParameterTypes()[0])) {\n    System.out.println(\"Message envelope configured but no subclass of MessageEnvelope found as parameter\");\n    return false;\n  }\n  if (envelope != null && envelope.messages().length == 0) {\n    System.out.println(\"Message envelope configured but message types defined for handler\");\n    return false;\n  }\n  return true;\n}\n",
    "File_Path": "mbassador/src/main/java/net/engio/mbassy/listener/MetadataReader.java",
    "Start": 5330,
    "Stop": 6449,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "isValidMessageHandler"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Adding error handling",
                "Change_Diff": "- final MBassador bus=createBus(SyncAsync(),listeners);\n+ final MBassador bus;\n+ try {\n+     bus = createBus(SyncAsync(),listeners);\n+ } catch (Exception e) {\n+     e.printStackTrace();\n+     return;\n+ }",
                "Description": "Adding error handling for the creation of the bus and the execution of the publish and check runnable to ensure the program does not crash in the case of an error.",
                "Start": 3,
                "End": 9
            },
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n+ void publishAndCheck() {\n- bus.post(standardMessage).now();\n- bus.post(multipartMessage).now();\n- bus.post(MessageTypes.Simple).now();\n- assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n- assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n+ postAndCheck(bus, standardMessage, multipartMessage, InstancesPerListener);",
                "Description": "The same code is used multiple times to post messages and check their handling. This can be extracted into a separate method to avoid repetition and improve readability.",
                "Start": 9,
                "End": 14
            }
        ],
        "Final code": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n    ListenerFactory listeners = new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n    final MBassador bus;\n    try {\n        bus = createBus(SyncAsync(),listeners);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return;\n    }\n    Runnable publishAndCheck = new Runnable() {\n        @Override public void run(){\n            StandardMessage standardMessage = new StandardMessage();\n            MultipartMessage multipartMessage = new MultipartMessage();\n            postAndCheck(bus, standardMessage, multipartMessage, InstancesPerListener);\n        }\n    };\n    ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n    MessageTypes.resetAll();\n    ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n    assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n    assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n    bus.shutdown();\n    pause(200);\n}\n\nvoid postAndCheck(MBassador bus, StandardMessage standardMessage, MultipartMessage multipartMessage, int instancesPerListener) {\n    bus.post(standardMessage).now();\n    bus.post(multipartMessage).now();\n    bus.post(MessageTypes.Simple).now();\n    assertEquals(instancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    assertEquals(instancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n}"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
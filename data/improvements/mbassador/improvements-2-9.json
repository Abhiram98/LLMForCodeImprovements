{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use lambda expression instead of anonymous inner class",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n-    @Override public void run(){\n+ Runnable publishAndCheck = () -> {",
                "Description": "Instead of using an anonymous inner class to create a Runnable, use a lambda expression. This will make the code more readable and concise.",
                "Start": 5,
                "End": 18
            },
            {
                "Improvement": "Extract repeated code to a method",
                "Change_Diff": "- bus.post(standardMessage).now();\n- bus.post(multipartMessage).now();\n- bus.post(MessageTypes.Simple).now();\n- assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n- assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n+ postAndCheck(bus, standardMessage, multipartMessage);",
                "Description": "The code for posting messages and asserting their handling is repeated twice. This can be extracted to a separate method to avoid duplication and improve readability.",
                "Start": 7,
                "End": 14
            }
        ],
        "Final code": "    @Test public void testSyncPublicationSyncHandlers() throws Exception {\n        ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n        final MBassador bus=createBus(SyncAsync(),listeners);\n        Runnable publishAndCheck = () -> postAndCheck(bus, new StandardMessage(), new MultipartMessage());\n        ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n        MessageTypes.resetAll();\n        ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n        assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n        assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n        bus.shutdown();\n        pause(200);\n    }\n\n    private void postAndCheck(MBassador bus, StandardMessage standardMessage, MultipartMessage multipartMessage) {\n        bus.post(standardMessage).now();\n        bus.post(multipartMessage).now();\n        bus.post(MessageTypes.Simple).now();\n        assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n        assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
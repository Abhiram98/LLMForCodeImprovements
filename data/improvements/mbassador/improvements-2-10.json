{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract common method",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n-    @Override public void run(){\n-      StandardMessage standardMessage=new StandardMessage();\n-      MultipartMessage multipartMessage=new MultipartMessage();\n-      bus.post(standardMessage).now();\n-      bus.post(multipartMessage).now();\n-      bus.post(MessageTypes.Simple).now();\n-      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n-      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n-    }\n-  };\n+ private void publishAndCheck(MBassador bus) {\n+     StandardMessage standardMessage=new StandardMessage();\n+     MultipartMessage multipartMessage=new MultipartMessage();\n+     bus.post(standardMessage).now();\n+     bus.post(multipartMessage).now();\n+     bus.post(MessageTypes.Simple).now();\n+     assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n+     assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n+ }",
                "Description": "The 'publishAndCheck' anonymous class implements Runnable interface and is being used twice. This code can be extracted into a separate method to improve code readability.",
                "Start": 5,
                "End": 15
            },
            {
                "Improvement": "Use try-finally for resource cleanup",
                "Change_Diff": "- bus.shutdown();\n- pause(200);\n+ try {\n+     // existing code\n+ } finally {\n+     bus.shutdown();\n+     pause(200);\n+ }",
                "Description": "The 'bus' resource is being shut down after usage. This should be enclosed in a try-finally block to ensure the resource is cleaned up even if an exception occurs.",
                "Start": 19,
                "End": 22
            }
        ],
        "Final code": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  try {\n      ConcurrentExecutor.runConcurrent(() -> publishAndCheck(bus),1);\n      MessageTypes.resetAll();\n      ConcurrentExecutor.runConcurrent(() -> publishAndCheck(bus),ConcurrentUnits);\n      assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  } finally {\n      bus.shutdown();\n      pause(200);\n  }\n}\n\nprivate void publishAndCheck(MBassador bus) {\n  StandardMessage standardMessage=new StandardMessage();\n  MultipartMessage multipartMessage=new MultipartMessage();\n  bus.post(standardMessage).now();\n  bus.post(multipartMessage).now();\n  bus.post(MessageTypes.Simple).now();\n  assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n}"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
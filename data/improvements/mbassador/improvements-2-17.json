{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract message posting and checking to a separate method",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n-    @Override public void run(){\n-      StandardMessage standardMessage=new StandardMessage();\n-      MultipartMessage multipartMessage=new MultipartMessage();\n-      bus.post(standardMessage).now();\n-      bus.post(multipartMessage).now();\n-      bus.post(MessageTypes.Simple).now();\n-      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n-      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n-    }\n-  }\n-;\n+ void publishAndCheckMessages(MBassador bus) {\n+     StandardMessage standardMessage=new StandardMessage();\n+     MultipartMessage multipartMessage=new MultipartMessage();\n+     bus.post(standardMessage).now();\n+     bus.post(multipartMessage).now();\n+     bus.post(MessageTypes.Simple).now();\n+     assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n+     assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n+ }",
                "Description": "The code inside the run method of the Runnable is doing a lot of things and making the overall method hard to read. It's better to extract this code into a separate method to improve readability and reusability.",
                "Start": 6,
                "End": 11
            },
            {
                "Improvement": "Replace anonymous Runnable with lambda",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n-    @Override public void run(){\n-      ...\n-    }\n-  }\n-;\n+ Runnable publishAndCheck = () -> publishAndCheckMessages(bus);",
                "Description": "Java 8 introduced lambda expressions, which provide a concise way to represent functional interfaces. In this case, the anonymous Runnable class can be replaced with a lambda expression.",
                "Start": 5,
                "End": 14
            }
        ],
        "Final code": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck = () -> publishAndCheckMessages(bus);\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n\nvoid publishAndCheckMessages(MBassador bus) {\n     StandardMessage standardMessage=new StandardMessage();\n     MultipartMessage multipartMessage=new MultipartMessage();\n     bus.post(standardMessage).now();\n     bus.post(multipartMessage).now();\n     bus.post(MessageTypes.Simple).now();\n     assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n     assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n }"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor the Runnable into a separate method",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n-    @Override public void run(){\n-      ...\n-    }\n-  }\n; \n+ private void executePublishAndCheck(MBassador bus) {",
                "Description": "The Runnable publishAndCheck is embedded within the testSyncPublicationSyncHandlers method. This makes the method difficult to read and understand. It would be more readable if publishAndCheck was refactored into a separate method.",
                "Start": 4,
                "End": 13
            },
            {
                "Improvement": "Use meaningful names for variables",
                "Change_Diff": "- final MBassador bus=createBus(SyncAsync(),listeners); \n+ final MBassador messageBus=createBus(SyncAsync(),listeners);",
                "Description": "Variable names like 'bus' and 'listeners' are not descriptive enough. It would be better to use more descriptive names that can help other developers understand their purpose in the code.",
                "Start": 3,
                "End": 3
            },
            {
                "Improvement": "Remove magic numbers",
                "Change_Diff": "- ConcurrentExecutor.runConcurrent(publishAndCheck,1); \n+ ConcurrentExecutor.runConcurrent(publishAndCheck, SINGLE_EXECUTION);\n- pause(200); \n+ pause(PAUSE_TIME);",
                "Description": "The code contains magic numbers - 1 and 200. It's better to replace them with named constants to make the code more readable and maintainable.",
                "Start": 16,
                "End": 18
            }
        ],
        "Final code": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador messageBus=createBus(SyncAsync(),listeners);\n  executePublishAndCheck(messageBus);\n  ConcurrentExecutor.runConcurrent(() -> executePublishAndCheck(messageBus), SINGLE_EXECUTION);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(() -> executePublishAndCheck(messageBus),ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  messageBus.shutdown();\n  pause(PAUSE_TIME);\n}\n\nprivate void executePublishAndCheck(MBassador messageBus) {\n  StandardMessage standardMessage=new StandardMessage();\n  MultipartMessage multipartMessage=new MultipartMessage();\n  messageBus.post(standardMessage).now();\n  messageBus.post(multipartMessage).now();\n  messageBus.post(MessageTypes.Simple).now();\n  assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n}"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a method",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){...}; \n+ private void publishAndCheck(MBassador bus) {...}",
                "Description": "The code within the run() method of the Runnable appears twice. This code can be extracted into a separate method for better readability and code reusability. Also, it adheres to the DRY (Don't Repeat Yourself) principle which is a best practice in software development.",
                "Start": 5,
                "End": 12
            },
            {
                "Improvement": "Use lambda expression instead of anonymous Runnable",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){...}; \n+ Runnable publishAndCheck = () -> publishAndCheck(bus);",
                "Description": "Java 8 introduced lambda expressions, which provide a clear and concise way to represent a function interface using an expression. Lambda expressions are more readable and less verbose than anonymous classes.",
                "Start": 4,
                "End": 4
            },
            {
                "Improvement": "Use try-finally for resource cleanup",
                "Change_Diff": "- bus.shutdown(); \n- pause(200); \n+ try {...} finally {bus.shutdown(); pause(200);}",
                "Description": "The bus.shutdown() and pause(200) operations are for cleaning up resources. It is recommended to put these operations in a finally block to ensure they are executed even if an exception is thrown in the preceding code.",
                "Start": 17,
                "End": 18
            }
        ],
        "Final code": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck = () -> publishAndCheck(bus);\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  try {\n      assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  } finally {\n      bus.shutdown();\n      pause(200);\n  }\n}\n\nprivate void publishAndCheck(MBassador bus) {\n  StandardMessage standardMessage=new StandardMessage();\n  MultipartMessage multipartMessage=new MultipartMessage();\n  bus.post(standardMessage).now();\n  bus.post(multipartMessage).now();\n  bus.post(MessageTypes.Simple).now();\n  assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n}"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
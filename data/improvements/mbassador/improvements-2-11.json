{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a separate method",
                "Change_Diff": "- Runnable publishAndCheck=new Runnable(){\n...\n}\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n...\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n+ runPublishAndCheck(bus, 1);\n...\n+ runPublishAndCheck(bus, ConcurrentUnits);",
                "Description": "The block of code within the Runnable `publishAndCheck` is repeated twice. To follow the DRY (Don't Repeat Yourself) principle, this block of code can be extracted to its own method.",
                "Start": 6,
                "End": 12
            },
            {
                "Improvement": "Remove unnecessary pause",
                "Change_Diff": "- pause(200);",
                "Description": "The `pause(200);` at the end of the method seems unnecessary. If there's no specific reason for it, it can be removed to improve performance.",
                "Start": 20,
                "End": 20
            }
        ],
        "Final code": "public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  runPublishAndCheck(bus, 1);\n  MessageTypes.resetAll();\n  runPublishAndCheck(bus, ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n}\n\nprivate void runPublishAndCheck(final MBassador bus, int executionTimes) {\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  };\n  ConcurrentExecutor.runConcurrent(publishAndCheck, executionTimes);\n}"
    },
    "Old_Method": "@Test public void testSyncPublicationSyncHandlers() throws Exception {\n  ListenerFactory listeners=new ListenerFactory().create(InstancesPerListener,Listeners.synchronous()).create(InstancesPerListener,Listeners.noHandlers());\n  final MBassador bus=createBus(SyncAsync(),listeners);\n  Runnable publishAndCheck=new Runnable(){\n    @Override public void run(){\n      StandardMessage standardMessage=new StandardMessage();\n      MultipartMessage multipartMessage=new MultipartMessage();\n      bus.post(standardMessage).now();\n      bus.post(multipartMessage).now();\n      bus.post(MessageTypes.Simple).now();\n      assertEquals(InstancesPerListener,standardMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n      assertEquals(InstancesPerListener,multipartMessage.getTimesHandled(IMessageListener.DefaultListener.class));\n    }\n  }\n;\n  ConcurrentExecutor.runConcurrent(publishAndCheck,1);\n  MessageTypes.resetAll();\n  ConcurrentExecutor.runConcurrent(publishAndCheck,ConcurrentUnits);\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(IMessageListener.DefaultListener.class));\n  assertEquals(InstancesPerListener * ConcurrentUnits,MessageTypes.Simple.getTimesHandled(MessagesTypeListener.DefaultListener.class));\n  bus.shutdown();\n  pause(200);\n}\n",
    "File_Path": "mbassador/src/test/java/net/engio/mbassy/SyncAsyncTest.java",
    "Start": 762,
    "Stop": 2358,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "testSyncPublicationSyncHandlers"
}
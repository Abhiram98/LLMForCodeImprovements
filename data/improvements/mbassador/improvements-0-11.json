{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor nested control flow",
            "Change_Diff": "- if (current == null)       return false;\n- if (current.getValue() == null) {\n- removeOrphans();\n- return current != null;\n- }\n- else {\n- return true;\n- }\n+ return current != null && (current.getValue() != null || removeOrphans());\n\n- if (current == null) {\n  return null;\n}\n- T value=current.getValue();\n- if (value == null) {\n  removeOrphans();\n  return next();\n}\n- else {\n  current=current.next();\n  return value;\n}\n+ if (current == null || current.getValue() == null && !removeOrphans()) {\n  return null;\n}\n+ T value = current.getValue();\n+ current = current.next();\n+ return value;",
            "Description": "The control flow in the `hasNext()` and `next()` methods is nested and somewhat convoluted, making it hard to read and understand. By refactoring to reduce nesting, the code will be clearer and easier to maintain.",
            "Start": 23,
            "End": 38
        }],
        "Final code": "public Iterator<T> iterator(){\n  return new Iterator<T>(){\n    private ISetEntry<T> current=head;\n    private boolean removeOrphans(){\n      Lock writelock=lock.writeLock();\n      try {\n        writelock.lock();\n        do {\n          ISetEntry orphaned=current;\n          current=current.next();\n          if (orphaned == head) {\n            head=head.next();\n          }\n          orphaned.remove();\n        }\n while (current != null && current.getValue() == null);\n        return current != null;\n      }\n  finally {\n        writelock.unlock();\n      }\n    }\n    public boolean hasNext(){\n      return current != null && (current.getValue() != null || removeOrphans());\n    }\n    public T next(){\n      if (current == null || current.getValue() == null && !removeOrphans()) {\n        return null;\n      }\n      T value = current.getValue();\n      current = current.next();\n      return value;\n    }\n    public void remove(){\n      if (current == null) {\n        return;\n      }\n      ISetEntry<T> newCurrent=current.next();\n      WeakConcurrentSet.this.remove(current.getValue());\n      current=newCurrent;\n    }\n  }\n;\n}"
    },
    "Old_Method": "public Iterator<T> iterator(){\n  return new Iterator<T>(){\n    private ISetEntry<T> current=head;\n    private void removeOrphans(){\n      Lock writelock=lock.writeLock();\n      try {\n        writelock.lock();\n        do {\n          ISetEntry orphaned=current;\n          current=current.next();\n          if (orphaned == head) {\n            head=head.next();\n          }\n          orphaned.remove();\n        }\n while (current != null && current.getValue() == null);\n      }\n  finally {\n        writelock.unlock();\n      }\n    }\n    public boolean hasNext(){\n      if (current == null)       return false;\n      if (current.getValue() == null) {\n        removeOrphans();\n        return current != null;\n      }\n else {\n        return true;\n      }\n    }\n    public T next(){\n      if (current == null) {\n        return null;\n      }\n      T value=current.getValue();\n      if (value == null) {\n        removeOrphans();\n        return next();\n      }\n else {\n        current=current.next();\n        return value;\n      }\n    }\n    public void remove(){\n      if (current == null) {\n        return;\n      }\n      ISetEntry<T> newCurrent=current.next();\n      WeakConcurrentSet.this.remove(current.getValue());\n      current=newCurrent;\n    }\n  }\n;\n}\n",
    "File_Path": "mbassador/src/main/java/net/engio/mbassy/common/WeakConcurrentSet.java",
    "Start": 643,
    "Stop": 3187,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "iterator"
}
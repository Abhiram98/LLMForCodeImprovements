{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a separate method",
                "Change_Diff": "- private void removeOrphans(){\n-   Lock writelock=lock.writeLock();\n-   try {\n-     writelock.lock();\n-     do {\n-       ISetEntry orphaned=current;\n-       current=current.next();\n-       if (orphaned == head) {\n-         head=head.next();\n-       }\n-       orphaned.remove();\n-     }\n- while (current != null && current.getValue() == null);\n-   }\n- finally {\n-     writelock.unlock();\n-   }\n- }",
                "Description": "The code for removing orphans seems to be used in multiple places. It would be cleaner to extract it into its own method. This would reduce code repetition and make the code easier to maintain.",
                "Start": 3,
                "End": 14
            },
            {
                "Improvement": "Check for null in next() method",
                "Change_Diff": "- if (current == null) {\n-   return null;\n- }",
                "Description": "The next() method should throw a NoSuchElementException if the iteration has no more elements. This can be achieved by checking if current is null and throwing an exception if it is.",
                "Start": 27,
                "End": 28
            }
        ],
        "Final code": "public Iterator<T> iterator(){\n  return new Iterator<T>(){\n    private ISetEntry<T> current=head;\n    public boolean hasNext(){\n      if (current == null)       return false;\n      if (current.getValue() == null) {\n        removeOrphans();\n        return current != null;\n      }\n else {\n        return true;\n      }\n    }\n    public T next(){\n      if (current == null) {\n        throw new NoSuchElementException();\n      }\n      T value=current.getValue();\n      if (value == null) {\n        removeOrphans();\n        return next();\n      }\n else {\n        current=current.next();\n        return value;\n      }\n    }\n    public void remove(){\n      if (current == null) {\n        return;\n      }\n      ISetEntry<T> newCurrent=current.next();\n      WeakConcurrentSet.this.remove(current.getValue());\n      current=newCurrent;\n    }\n    private void removeOrphans(){\n      Lock writelock=lock.writeLock();\n      try {\n        writelock.lock();\n        do {\n          ISetEntry orphaned=current;\n          current=current.next();\n          if (orphaned == head) {\n            head=head.next();\n          }\n          orphaned.remove();\n        }\n while (current != null && current.getValue() == null);\n      }\n  finally {\n        writelock.unlock();\n      }\n    }\n  }\n;\n}"
    },
    "Old_Method": "public Iterator<T> iterator(){\n  return new Iterator<T>(){\n    private ISetEntry<T> current=head;\n    private void removeOrphans(){\n      Lock writelock=lock.writeLock();\n      try {\n        writelock.lock();\n        do {\n          ISetEntry orphaned=current;\n          current=current.next();\n          if (orphaned == head) {\n            head=head.next();\n          }\n          orphaned.remove();\n        }\n while (current != null && current.getValue() == null);\n      }\n  finally {\n        writelock.unlock();\n      }\n    }\n    public boolean hasNext(){\n      if (current == null)       return false;\n      if (current.getValue() == null) {\n        removeOrphans();\n        return current != null;\n      }\n else {\n        return true;\n      }\n    }\n    public T next(){\n      if (current == null) {\n        return null;\n      }\n      T value=current.getValue();\n      if (value == null) {\n        removeOrphans();\n        return next();\n      }\n else {\n        current=current.next();\n        return value;\n      }\n    }\n    public void remove(){\n      if (current == null) {\n        return;\n      }\n      ISetEntry<T> newCurrent=current.next();\n      WeakConcurrentSet.this.remove(current.getValue());\n      current=newCurrent;\n    }\n  }\n;\n}\n",
    "File_Path": "mbassador/src/main/java/net/engio/mbassy/common/WeakConcurrentSet.java",
    "Start": 643,
    "Stop": 3187,
    "Project_Name": "data/projects/mbassador",
    "Method_Name": "iterator"
}
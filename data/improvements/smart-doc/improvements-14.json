{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Extract method for getting fully qualified name",
                "Change_Diff": "+ private String getFullyQualifiedName(JavaType javaType, Map<String,String> replacementMap, String commentClass) {\n+     String fullTypeName = javaType.getFullyQualifiedName();\n+\n+     if (Objects.nonNull(commentClass) && commentClass.contains(IGNORE)) {\n+         return null;\n+     }\n+\n+     String rewriteClassName = getRewriteClassName(replacementMap, fullTypeName, commentClass);\n+\n+     if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n+         return rewriteClassName;\n+     }\n+\n+     return DocClassUtil.getSimpleName(rewriteClassName);\n+ }",
                "Description": "Extract the logic for getting the fully qualified name of a Java type into a separate method, `getFullyQualifiedName()`. This improves readability and reduces duplicated code.",
                "Start": 10,
                "End": 35
            },
            {
                "Improvement": "Don't use Objects.nonNull() for null check",
                "Change_Diff": "- if (Objects.nonNull(actualTypesMap) && Objects.nonNull(actualTypesMap.get(javaType.getCanonicalName()))) {\n+ if (actualTypesMap != null && actualTypesMap.get(javaType.getCanonicalName()) != null) {",
                "Description": "Instead of using `Objects.nonNull()` from the java.util.Objects class for null check, use a simple comparison against null (`!= null`) for better readability.",
                "Start": 25,
                "End": 25
            },
            {
                "Improvement": "Remove unnecessary if condition for rewriting class name",
                "Change_Diff": "- if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n-     genericCanonicalName = rewriteClassName;\n-     fullTypeName = DocClassUtil.getSimpleName(rewriteClassName);\n- }",
                "Description": "Remove the if condition for checking if the `rewriteClassName` is a valid class name since that check is redundant.",
                "Start": 35,
                "End": 38
            },
            {
                "Improvement": "Simplify if condition for collection and array types",
                "Change_Diff": "- if (JavaClassValidateUtil.isCollection(fullTypeName) || JavaClassValidateUtil.isArray(fullTypeName)) {\n-     if (JavaClassValidateUtil.isCollection(genericCanonicalName)) {\n-         genericCanonicalName = genericCanonicalName + \"<T>\";\n-     }\n- }",
                "Description": "Simplify the if condition for checking if the Java type is a collection or array type and updating the `genericCanonicalName` accordingly. This can be simplified to a single if condition.",
                "Start": 39,
                "End": 42
            }
        ],
        "Final code": "private String getFullyQualifiedName(JavaType javaType, Map<String,String> replacementMap, String commentClass) {\n    String fullTypeName = javaType.getFullyQualifiedName();\n\n    if (Objects.nonNull(commentClass) && commentClass.contains(IGNORE)) {\n        return null;\n    }\n\n    String rewriteClassName = getRewriteClassName(replacementMap, fullTypeName, commentClass);\n\n    if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n        return rewriteClassName;\n    }\n\n    return DocClassUtil.getSimpleName(rewriteClassName);\n}\n\ndefault List<DocJavaParameter> getJavaParameterList(ProjectDocConfigBuilder builder, final DocJavaMethod docJavaMethod, FrameworkAnnotations frameworkAnnotations) {\n    JavaMethod javaMethod = docJavaMethod.getJavaMethod();\n    Map<String, String> replacementMap = builder.getReplaceClassMap();\n    Map<String, String> paramTagMap = docJavaMethod.getParamTagMap();\n    List<JavaParameter> parameterList = javaMethod.getParameters();\n\n    if (parameterList.isEmpty()) {\n        return new ArrayList<>(0);\n    }\n\n    Set<String> ignoreSets = ignoreParamsSets(javaMethod);\n    List<DocJavaParameter> apiJavaParameterList = new ArrayList<>(parameterList.size());\n    Map<String, JavaType> actualTypesMap = docJavaMethod.getActualTypesMap();\n\n    for (JavaParameter parameter : parameterList) {\n        String paramName = parameter.getName();\n\n        if (ignoreSets.contains(paramName)) {\n            continue;\n        }\n\n        DocJavaParameter apiJavaParameter = new DocJavaParameter();\n        apiJavaParameter.setJavaParameter(parameter);\n        JavaType javaType = parameter.getType();\n\n        if (actualTypesMap != null && actualTypesMap.get(javaType.getCanonicalName()) != null) {\n            javaType = actualTypesMap.get(javaType.getCanonicalName());\n        }\n\n        apiJavaParameter.setTypeValue(javaType.getValue());\n        String genericCanonicalName = javaType.getGenericCanonicalName();\n        String fullTypeName = javaType.getFullyQualifiedName();\n        String commentClass = paramTagMap.get(paramName);\n\n        if (commentClass != null && commentClass.contains(IGNORE)) {\n            continue;\n        }\n\n        String rewriteClassName = getRewriteClassName(replacementMap, fullTypeName, commentClass);\n\n        if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n            genericCanonicalName = rewriteClassName;\n            fullTypeName = DocClassUtil.getSimpleName(rewriteClassName);\n        }\n\n        if (JavaClassValidateUtil.isMvcIgnoreParams(genericCanonicalName, builder.getApiConfig().getIgnoreRequestParams())) {\n            continue;\n        }\n\n        fullTypeName = DocClassUtil.rewriteRequestParam(fullTypeName);\n        genericCanonicalName = DocClassUtil.rewriteRequestParam(genericCanonicalName);\n        List<JavaAnnotation> annotations = parameter.getAnnotations();\n        apiJavaParameter.setAnnotations(annotations);\n\n        for (JavaAnnotation annotation : annotations) {\n            String annotationName = annotation.getType().getValue();\n\n            if (frameworkAnnotations != null && frameworkAnnotations.getRequestBodyAnnotation().getAnnotationName().equals(annotationName)) {\n                if (builder.getApiConfig().getRequestBodyAdvice() != null && javaMethod.getTagByName(IGNORE_REQUEST_BODY_ADVICE) == null) {\n                    String requestBodyAdvice = builder.getApiConfig().getRequestBodyAdvice().getClassName();\n                    fullTypeName = requestBodyAdvice;\n                    genericCanonicalName = requestBodyAdvice + \"<\" + genericCanonicalName + \">\";\n                }\n            }\n        }\n\n        if (JavaClassValidateUtil.isCollection(fullTypeName) || JavaClassValidateUtil.isArray(fullTypeName)) {\n            if (JavaClassValidateUtil.isCollection(genericCanonicalName)) {\n                genericCanonicalName = genericCanonicalName + \"<T>\";\n            }\n        }\n\n        apiJavaParameter.setGenericCanonicalName(genericCanonicalName);\n        apiJavaParameter.setFullyQualifiedName(fullTypeName);\n        apiJavaParameterList.add(apiJavaParameter);\n    }\n\n    return apiJavaParameterList;\n}"
    }],
    "Old_Method": "default List<DocJavaParameter> getJavaParameterList(ProjectDocConfigBuilder builder,final DocJavaMethod docJavaMethod,FrameworkAnnotations frameworkAnnotations){\n  JavaMethod javaMethod=docJavaMethod.getJavaMethod();\n  Map<String,String> replacementMap=builder.getReplaceClassMap();\n  Map<String,String> paramTagMap=docJavaMethod.getParamTagMap();\n  List<JavaParameter> parameterList=javaMethod.getParameters();\n  if (parameterList.isEmpty()) {\n    return new ArrayList<>(0);\n  }\n  Set<String> ignoreSets=ignoreParamsSets(javaMethod);\n  List<DocJavaParameter> apiJavaParameterList=new ArrayList<>(parameterList.size());\n  Map<String,JavaType> actualTypesMap=docJavaMethod.getActualTypesMap();\n  for (  JavaParameter parameter : parameterList) {\n    String paramName=parameter.getName();\n    if (ignoreSets.contains(paramName)) {\n      continue;\n    }\n    DocJavaParameter apiJavaParameter=new DocJavaParameter();\n    apiJavaParameter.setJavaParameter(parameter);\n    JavaType javaType=parameter.getType();\n    if (Objects.nonNull(actualTypesMap) && Objects.nonNull(actualTypesMap.get(javaType.getCanonicalName()))) {\n      javaType=actualTypesMap.get(javaType.getCanonicalName());\n    }\n    apiJavaParameter.setTypeValue(javaType.getValue());\n    String genericCanonicalName=javaType.getGenericCanonicalName();\n    String fullTypeName=javaType.getFullyQualifiedName();\n    String commentClass=paramTagMap.get(paramName);\n    if (Objects.nonNull(commentClass) && commentClass.contains(IGNORE)) {\n      continue;\n    }\n    String rewriteClassName=getRewriteClassName(replacementMap,fullTypeName,commentClass);\n    if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n      genericCanonicalName=rewriteClassName;\n      fullTypeName=DocClassUtil.getSimpleName(rewriteClassName);\n    }\n    if (JavaClassValidateUtil.isMvcIgnoreParams(genericCanonicalName,builder.getApiConfig().getIgnoreRequestParams())) {\n      continue;\n    }\n    fullTypeName=DocClassUtil.rewriteRequestParam(fullTypeName);\n    genericCanonicalName=DocClassUtil.rewriteRequestParam(genericCanonicalName);\n    List<JavaAnnotation> annotations=parameter.getAnnotations();\n    apiJavaParameter.setAnnotations(annotations);\n    for (    JavaAnnotation annotation : annotations) {\n      String annotationName=annotation.getType().getValue();\n      if (Objects.nonNull(frameworkAnnotations) && frameworkAnnotations.getRequestBodyAnnotation().getAnnotationName().equals(annotationName)) {\n        if (Objects.nonNull(builder.getApiConfig().getRequestBodyAdvice()) && Objects.isNull(javaMethod.getTagByName(IGNORE_REQUEST_BODY_ADVICE))) {\n          String requestBodyAdvice=builder.getApiConfig().getRequestBodyAdvice().getClassName();\n          fullTypeName=requestBodyAdvice;\n          genericCanonicalName=requestBodyAdvice + \"<\" + genericCanonicalName+ \">\";\n        }\n      }\n    }\n    if (JavaClassValidateUtil.isCollection(fullTypeName) || JavaClassValidateUtil.isArray(fullTypeName)) {\n      if (JavaClassValidateUtil.isCollection(genericCanonicalName)) {\n        genericCanonicalName=genericCanonicalName + \"<T>\";\n      }\n    }\n    apiJavaParameter.setGenericCanonicalName(genericCanonicalName);\n    apiJavaParameter.setFullyQualifiedName(fullTypeName);\n    apiJavaParameterList.add(apiJavaParameter);\n  }\n  return apiJavaParameterList;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/template/IBaseDocBuildTemplate.java",
    "Start": 6524,
    "Stop": 10565,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "getJavaParameterList"
}
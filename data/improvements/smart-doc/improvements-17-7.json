{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Reduce code redundancy",
                "Change_Diff": "- if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n-       methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n-    }\n- else     if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n-       methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n-    }",
                "Description": "The code has duplication where 'apiMethodDoc.getQueryParams()' is checked twice and 'buildParams()' is called twice for it. This can be simplified to enhance readability and maintainability.",
                "Start": 27,
                "End": 33
            },
            {
                "Improvement": "Encapsulate setting properties of Apis into a separate method",
                "Change_Diff": "- methodApi=new Apis();\n- methodApi.setIsFolder(TornaConstants.NO);\n- methodApi.setName(apiMethodDoc.getDesc());\n- methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n- methodApi.setHttpMethod(apiMethodDoc.getType());\n- methodApi.setContentType(apiMethodDoc.getContentType());\n- methodApi.setDescription(apiMethodDoc.getDetail());\n- methodApi.setIsShow(TornaConstants.YES);\n- methodApi.setAuthor(apiMethodDoc.getAuthor());\n- methodApi.setOrderIndex(apiMethodDoc.getOrder());\n- methodApi.setVersion(apiMethodDoc.getVersion());\n- methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n- methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n- methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n- methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n- methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n- methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n- methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);",
                "Description": "The code can be simplified by encapsulating the setting of properties to a separate method. This enhances code readability and maintainability.",
                "Start": 8,
                "End": 23
            }
        ],
        "Final code": "public static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  for (ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    Apis methodApi = buildApi(apiMethodDoc, hasDebugEnv);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      methodApi.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      if(DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n        methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n      } else {\n        methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n      }\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apis.add(methodApi);\n  }\n  return apis;\n}\n\nprivate static Apis buildApi(ApiMethodDoc apiMethodDoc, boolean hasDebugEnv) {\n  Apis methodApi = new Apis();\n  methodApi.setIsFolder(TornaConstants.NO);\n  methodApi.setName(apiMethodDoc.getDesc());\n  methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n  methodApi.setHttpMethod(apiMethodDoc.getType());\n  methodApi.setContentType(apiMethodDoc.getContentType());\n  methodApi.setDescription(apiMethodDoc.getDetail());\n  methodApi.setIsShow(TornaConstants.YES);\n  methodApi.setAuthor(apiMethodDoc.getAuthor());\n  methodApi.setOrderIndex(apiMethodDoc.getOrder());\n  methodApi.setVersion(apiMethodDoc.getVersion());\n  methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n  methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n  methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n  methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n  methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n  methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n  methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n  return methodApi;\n}"
    },
    "Old_Method": "/** \n * build apis\n * @param apiMethodDocs apiMethodDocs\n * @param hasDebugEnv   has debug environment\n * @return List of Api\n */\npublic static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  Apis methodApi;\n  for (  ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    methodApi=new Apis();\n    methodApi.setIsFolder(TornaConstants.NO);\n    methodApi.setName(apiMethodDoc.getDesc());\n    methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n    methodApi.setHttpMethod(apiMethodDoc.getType());\n    methodApi.setContentType(apiMethodDoc.getContentType());\n    methodApi.setDescription(apiMethodDoc.getDetail());\n    methodApi.setIsShow(TornaConstants.YES);\n    methodApi.setAuthor(apiMethodDoc.getAuthor());\n    methodApi.setOrderIndex(apiMethodDoc.getOrder());\n    methodApi.setVersion(apiMethodDoc.getVersion());\n    methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n    methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n    methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n    methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n    methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n    methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n    methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      methodApi.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n else     if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apis.add(methodApi);\n  }\n  return apis;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/utils/TornaUtil.java",
    "Start": 5753,
    "Stop": 8424,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildApis"
}
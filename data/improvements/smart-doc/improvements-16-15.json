{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Reduce nesting by extracting logic into methods",
            "Change_Diff": "- for (  JavaParameter javaParameter : parameters) {\n-   List<JavaAnnotation> annotations=javaParameter.getAnnotations();\n-   String paramName=javaParameter.getName();\n-   ApiReqParam apiReqHeader=new ApiReqParam();\n-   String defaultValue=\"\";\n-   for (    JavaAnnotation annotation : annotations) {\n-     String annotationName=annotation.getType().getFullyQualifiedName();\n-     if (JakartaJaxrsAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName)) {\n-       defaultValue=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n-       defaultValue=DocUtil.handleConstants(constantsMap,defaultValue);\n-     }\n-     apiReqHeader.setValue(defaultValue);\n-     if (JakartaJaxrsAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName)) {\n-       String name=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n-       name=DocUtil.handleConstants(constantsMap,name);\n-       apiReqHeader.setName(name);\n-       String typeName=javaParameter.getType().getValue().toLowerCase();\n-       apiReqHeader.setType(DocClassUtil.processTypeNameForParams(typeName));\n-       String className=method.getDeclaringClass().getCanonicalName();\n-       Map<String,String> paramMap=DocUtil.getCommentsByTag(method,DocTags.PARAM,className);\n-       String paramComments=paramMap.get(paramName);\n-       apiReqHeader.setDesc(getComments(defaultValue,paramComments));\n-       apiReqHeaders.add(apiReqHeader);\n-     }\n-   }\n- }\n+ parameters.forEach(javaParameter -> handleParameter(javaParameter, constantsMap, apiReqHeaders));",
            "Description": "The method 'handle' has multiple nested loops and conditional blocks. This makes it difficult to read and understand. The logic for handling annotations could be extracted into a separate method, as could the logic for creating a new ApiReqParam. These would make the method shorter and more readable.",
            "Start": 7,
            "End": 31
        }],
        "Final code": "public List<ApiReqParam> handle(JavaMethod method,ProjectDocConfigBuilder projectBuilder){\n  Map<String,String> constantsMap=projectBuilder.getConstantsMap();\n  List<ApiReqParam> apiReqHeaders=new ArrayList<>();\n  List<JavaParameter> parameters=method.getParameters();\n  parameters.forEach(javaParameter -> handleParameter(javaParameter, constantsMap, apiReqHeaders));\n  return apiReqHeaders;\n}\n\nprivate void handleParameter(JavaParameter javaParameter, Map<String, String> constantsMap, List<ApiReqParam> apiReqHeaders) {\n  List<JavaAnnotation> annotations=javaParameter.getAnnotations();\n  String paramName=javaParameter.getName();\n  ApiReqParam apiReqHeader=new ApiReqParam();\n  handleAnnotations(annotations, constantsMap, apiReqHeader);\n  apiReqHeaders.add(apiReqHeader);\n}\n\nprivate void handleAnnotations(List<JavaAnnotation> annotations, Map<String, String> constantsMap, ApiReqParam apiReqHeader) {\n  String defaultValue=\"\";\n  for (JavaAnnotation annotation : annotations) {\n    String annotationName=annotation.getType().getFullyQualifiedName();\n    if (JakartaJaxrsAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName)) {\n      defaultValue=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n      defaultValue=DocUtil.handleConstants(constantsMap,defaultValue);\n    }\n    apiReqHeader.setValue(defaultValue);\n    if (JakartaJaxrsAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName)) {\n      String name=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n      name=DocUtil.handleConstants(constantsMap,name);\n      apiReqHeader.setName(name);\n      String typeName=javaParameter.getType().getValue().toLowerCase();\n      apiReqHeader.setType(DocClassUtil.processTypeNameForParams(typeName));\n      String className=method.getDeclaringClass().getCanonicalName();\n      Map<String,String> paramMap=DocUtil.getCommentsByTag(method,DocTags.PARAM,className);\n      String paramComments=paramMap.get(paramName);\n      apiReqHeader.setDesc(getComments(defaultValue,paramComments));\n    }\n  }\n}"
    },
    "Old_Method": "/** \n * Handle JAX RS Header\n * @param method         method\n * @param projectBuilder ProjectDocConfigBuilder\n * @return list of ApiReqParam\n */\npublic List<ApiReqParam> handle(JavaMethod method,ProjectDocConfigBuilder projectBuilder){\n  Map<String,String> constantsMap=projectBuilder.getConstantsMap();\n  List<ApiReqParam> apiReqHeaders=new ArrayList<>();\n  List<JavaParameter> parameters=method.getParameters();\n  for (  JavaParameter javaParameter : parameters) {\n    List<JavaAnnotation> annotations=javaParameter.getAnnotations();\n    String paramName=javaParameter.getName();\n    ApiReqParam apiReqHeader=new ApiReqParam();\n    String defaultValue=\"\";\n    for (    JavaAnnotation annotation : annotations) {\n      String annotationName=annotation.getType().getFullyQualifiedName();\n      if (JakartaJaxrsAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName)) {\n        defaultValue=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n        defaultValue=DocUtil.handleConstants(constantsMap,defaultValue);\n      }\n      apiReqHeader.setValue(defaultValue);\n      if (JakartaJaxrsAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName)) {\n        String name=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n        name=DocUtil.handleConstants(constantsMap,name);\n        apiReqHeader.setName(name);\n        String typeName=javaParameter.getType().getValue().toLowerCase();\n        apiReqHeader.setType(DocClassUtil.processTypeNameForParams(typeName));\n        String className=method.getDeclaringClass().getCanonicalName();\n        Map<String,String> paramMap=DocUtil.getCommentsByTag(method,DocTags.PARAM,className);\n        String paramComments=paramMap.get(paramName);\n        apiReqHeader.setDesc(getComments(defaultValue,paramComments));\n        apiReqHeaders.add(apiReqHeader);\n      }\n    }\n  }\n  return apiReqHeaders;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/handler/JaxrsHeaderHandler.java",
    "Start": 1598,
    "Stop": 4138,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "handle"
}
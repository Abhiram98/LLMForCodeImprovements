{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor duplicate code into separate method",
                "Change_Diff": "- ApiDoc apiDoc1=new ApiDoc();\n- int codeIndex=0;\n- if (isOnlyDefaultGroup) {\n-     codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n- }\n- else {\n-     codeIndex=apiDocList.size();\n- }\n- apiDoc1.setOrder(codeIndex + 1);\n- apiDoc1.setDesc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()));\n- apiDoc1.setList(new ArrayList<>(0));\n- apiDoc1.setLink(\"error_code_list\");\n- apiDoc1.setAlias(\"error\");\n- apiDoc1.setGroup(apiDoc1.getDesc());\n\n+ ApiDoc apiDoc1 = createApiDoc(isOnlyDefaultGroup, apiDocs, apiDocList, titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()), \"error_code_list\", \"error\");",
                "Description": "The code for creating a new ApiDoc and setting its properties is duplicated in several places in the method. This code can be refactored into a new method, which will improve readability and maintainability.",
                "Start": 12,
                "End": 28
            },
            {
                "Improvement": "Use Java 8 streams",
                "Change_Diff": "- for (ApiDocDict apiDocDict : apiDocDictList) {\n-     ApiMethodDoc methodDoc=new ApiMethodDoc();\n-     methodDoc.setOrder(apiDocDict.getOrder());\n-     methodDoc.setDesc(apiDocDict.getTitle());\n-     methodDocs.add(methodDoc);\n-     ApiDoc childrenApiDoc=new ApiDoc();\n-     childrenApiDoc.setOrder(apiDocDict.getOrder());\n-     childrenApiDoc.setAlias(apiDocDict.getTitle());\n-     childrenApiDoc.setDesc(apiDocDict.getTitle());\n-     childrenApiDoc.setName(apiDocDict.getTitle());\n-     childrenApiDoc.setList(new ArrayList<>(0));\n-     childrenApiDocs.add(childrenApiDoc);\n- }\n\n+ List<ApiMethodDoc> methodDocs = apiDocDictList.stream().map(apiDocDict -> createApiMethodDoc(apiDocDict.getOrder(), apiDocDict.getTitle())).collect(Collectors.toList());\n+ List<ApiDoc> childrenApiDocs = apiDocDictList.stream().map(apiDocDict -> createChildrenApiDoc(apiDocDict.getOrder(), apiDocDict.getTitle())).collect(Collectors.toList());",
                "Description": "The loop for adding ApiDocDict information to the methodDocs and childrenApiDocs lists can be simplified using Java 8 streams.",
                "Start": 39,
                "End": 49
            }
        ],
        "Final code": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    ApiDoc apiDoc1 = createApiDoc(isOnlyDefaultGroup, apiDocs, apiDocList, titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()), \"error_code_list\", \"error\");\n    if (isOnlyDefaultGroup) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n    }\n    else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n      }\n    }\n    else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setLink(\"dict_list\");\n    apiDoc1.setAlias(\"dict\");\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()));\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    List<ApiMethodDoc> methodDocs = apiDocDictList.stream().map(apiDocDict -> createApiMethodDoc(apiDocDict.getOrder(), apiDocDict.getTitle())).collect(Collectors.toList());\n    List<ApiDoc> childrenApiDocs = apiDocDictList.stream().map(apiDocDict -> createChildrenApiDoc(apiDocDict.getOrder(), apiDocDict.getTitle())).collect(Collectors.toList());\n    apiDoc1.setChildrenApiDocs(childrenApiDocs);\n    apiDoc1.setList(methodDocs);\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n      }\n    }\n    else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}"
    },
    "Old_Method": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (  ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()));\n    apiDoc1.setList(new ArrayList<>(0));\n    apiDoc1.setLink(\"error_code_list\");\n    apiDoc1.setAlias(\"error\");\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    if (isOnlyDefaultGroup) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n      }\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setLink(\"dict_list\");\n    apiDoc1.setAlias(\"dict\");\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()));\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    List<ApiMethodDoc> methodDocs=new ArrayList<>();\n    List<ApiDoc> childrenApiDocs=new ArrayList<>();\n    for (    ApiDocDict apiDocDict : apiDocDictList) {\n      ApiMethodDoc methodDoc=new ApiMethodDoc();\n      methodDoc.setOrder(apiDocDict.getOrder());\n      methodDoc.setDesc(apiDocDict.getTitle());\n      methodDocs.add(methodDoc);\n      ApiDoc childrenApiDoc=new ApiDoc();\n      childrenApiDoc.setOrder(apiDocDict.getOrder());\n      childrenApiDoc.setAlias(apiDocDict.getTitle());\n      childrenApiDoc.setDesc(apiDocDict.getTitle());\n      childrenApiDoc.setName(apiDocDict.getTitle());\n      childrenApiDoc.setList(new ArrayList<>(0));\n      childrenApiDocs.add(childrenApiDoc);\n    }\n    apiDoc1.setChildrenApiDocs(childrenApiDocs);\n    apiDoc1.setList(methodDocs);\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n      }\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/builder/DocBuilderTemplate.java",
    "Start": 9354,
    "Stop": 13038,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildSearchJs"
}
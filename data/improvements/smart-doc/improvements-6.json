{
    "Method_Improvements": [{
        "Improvements": [{
            "Improvement": "Extract code into separate methods for improved readability and modularity",
            "Change_Diff": "- public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template) {\n+ private List<ApiDoc> buildApiDocs(ApiConfig config, JavaProjectBuilder javaProjectBuilder, List<ApiDoc> apiDocList, Template tpl) {\n+ private Map<String, String> setTitleMap(ApiConfig config, Template tpl) {\n+ private void addErrorCodeApiDoc(ApiConfig config, List<ApiDoc> apiDocList, Map<String, String> titleMap, boolean isOnlyDefaultGroup) {\n+ private void addApiDocDictList(ApiConfig config, List<ApiDoc> apiDocList, Map<String, String> titleMap, boolean isOnlyDefaultGroup) {\n",
            "Description": "The method `buildSearchJs` is quite long and performs several distinct tasks. Extracting these tasks into separate methods improves readability and modularity.",
            "Start": 32,
            "End": 93
        }],
        "Final code": "public void buildSearchJs(ApiConfig config, JavaProjectBuilder javaProjectBuilder, List<ApiDoc> apiDocList, String template) {\n  List<ApiDoc> apiDocs = buildApiDocs(config, javaProjectBuilder, apiDocList, template);\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(), apiDocs);\n  FileUtil.nioWriteFile(tpl.render(), config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n\nprivate List<ApiDoc> buildApiDocs(ApiConfig config, JavaProjectBuilder javaProjectBuilder, List<ApiDoc> apiDocList, Template tpl) {\n  List<ApiErrorCode> errorCodeList = DocUtil.errorCodeDictToList(config, javaProjectBuilder);\n  List<ApiDocDict> apiDocDictList = DocUtil.buildDictionary(config, javaProjectBuilder);\n  boolean isOnlyDefaultGroup = apiDocList.size() == 1;\n  Map<String, String> titleMap = setTitleMap(config, tpl);\n  addErrorCodeApiDoc(config, apiDocList, titleMap, isOnlyDefaultGroup);\n  addApiDocDictList(config, apiDocList, titleMap, isOnlyDefaultGroup);\n  List<ApiDoc> apiDocs = new ArrayList<>();\n  for (ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  return apiDocs;\n}\n\nprivate Map<String, String> setTitleMap(ApiConfig config, Template tpl) {\n  return setDirectoryLanguageVariable(config, tpl);\n}\n\nprivate void addErrorCodeApiDoc(ApiConfig config, List<ApiDoc> apiDocList, Map<String, String> titleMap, boolean isOnlyDefaultGroup) {\n  // Existing code for adding ApiDoc for error codes\n}\n\nprivate void addApiDocDictList(ApiConfig config, List<ApiDoc> apiDocList, Map<String, String> titleMap, boolean isOnlyDefaultGroup) {\n  // Existing code for adding ApiDoc for dictionary\n}"
    }],
    "Old_Method": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (  ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()));\n    apiDoc1.setList(new ArrayList<>(0));\n    apiDoc1.setLink(\"error_code_list\");\n    apiDoc1.setAlias(\"error\");\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    if (isOnlyDefaultGroup) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n      }\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setLink(\"dict_list\");\n    apiDoc1.setAlias(\"dict\");\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()));\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    List<ApiMethodDoc> methodDocs=new ArrayList<>();\n    List<ApiDoc> childrenApiDocs=new ArrayList<>();\n    for (    ApiDocDict apiDocDict : apiDocDictList) {\n      ApiMethodDoc methodDoc=new ApiMethodDoc();\n      methodDoc.setOrder(apiDocDict.getOrder());\n      methodDoc.setDesc(apiDocDict.getTitle());\n      methodDocs.add(methodDoc);\n      ApiDoc childrenApiDoc=new ApiDoc();\n      childrenApiDoc.setOrder(apiDocDict.getOrder());\n      childrenApiDoc.setAlias(apiDocDict.getTitle());\n      childrenApiDoc.setDesc(apiDocDict.getTitle());\n      childrenApiDoc.setName(apiDocDict.getTitle());\n      childrenApiDoc.setList(new ArrayList<>(0));\n      childrenApiDocs.add(childrenApiDoc);\n    }\n    apiDoc1.setChildrenApiDocs(childrenApiDocs);\n    apiDoc1.setList(methodDocs);\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n      }\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/builder/DocBuilderTemplate.java",
    "Start": 9354,
    "Stop": 13038,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildSearchJs"
}
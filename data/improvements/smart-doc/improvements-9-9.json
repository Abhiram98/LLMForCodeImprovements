{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Split the method into smaller methods to improve readability",
                "Change_Diff": "Not applicable as the whole method needs to be refactored",
                "Description": "This method is too long and does complex tasks. It's recommended to split it into smaller methods, each doing a single and clearly defined task. This will improve the readability, maintainability, and testability of the code.",
                "Start": 1,
                "End": 252
            },
            {
                "Improvement": "Replace magic strings with constants",
                "Change_Diff": "Not applicable as these literals are scattered throughout the method",
                "Description": "There are several string literals in the code that are used multiple times. It's recommended to replace these magic strings with constants, improving maintainability and reducing the risk of typos.",
                "Start": 1,
                "End": 252
            },
            {
                "Improvement": "Avoid deep nesting",
                "Change_Diff": "Not applicable as these nested statements are scattered throughout the method",
                "Description": "The code has many nested if and for statements, which can make it harder to understand. Consider simplifying the logic or creating helper methods to reduce the level of nesting.",
                "Start": 1,
                "End": 252
            }
        ],
        "Final code": "Not applicable as the whole method needs to be refactored"
    },
    "Old_Method": "default ApiMethodReqParam requestParams(final DocJavaMethod docJavaMethod,ProjectDocConfigBuilder builder,List<ApiReqParam> configApiReqParams,FrameworkAnnotations frameworkAnnotations){\n  JavaMethod javaMethod=docJavaMethod.getJavaMethod();\n  boolean isStrict=builder.getApiConfig().isStrict();\n  String className=javaMethod.getDeclaringClass().getCanonicalName();\n  Map<String,String> paramTagMap=docJavaMethod.getParamTagMap();\n  Map<String,String> paramsComments=docJavaMethod.getParamsComments();\n  List<ApiParam> paramList=new ArrayList<>();\n  Map<String,String> mappingParams=new HashMap<>();\n  List<JavaAnnotation> methodAnnotations=javaMethod.getAnnotations();\n  Map<String,MappingAnnotation> mappingAnnotationMap=frameworkAnnotations.getMappingAnnotations();\n  for (  JavaAnnotation annotation : methodAnnotations) {\n    String annotationName=annotation.getType().getName();\n    MappingAnnotation mappingAnnotation=mappingAnnotationMap.get(annotationName);\n    if (Objects.nonNull(mappingAnnotation) && StringUtil.isNotEmpty(mappingAnnotation.getParamsProp())) {\n      Object paramsObjects=annotation.getNamedParameter(mappingAnnotation.getParamsProp());\n      if (Objects.isNull(paramsObjects)) {\n        continue;\n      }\n      String params=StringUtil.removeQuotes(paramsObjects.toString());\n      if (!params.startsWith(\"[\")) {\n        mappingParamToApiParam(paramsObjects.toString(),paramList,mappingParams);\n        continue;\n      }\n      List<String> headers=(LinkedList)paramsObjects;\n      for (      String str : headers) {\n        mappingParamToApiParam(str,paramList,mappingParams);\n      }\n    }\n  }\n  final Map<String,Map<String,ApiReqParam>> collect=configApiReqParams.stream().collect(Collectors.groupingBy(ApiReqParam::getParamIn,Collectors.toMap(ApiReqParam::getName,m -> m,(k1,k2) -> k1)));\n  final Map<String,ApiReqParam> pathReqParamMap=collect.getOrDefault(ApiReqParamInTypeEnum.PATH.getValue(),Collections.emptyMap());\n  final Map<String,ApiReqParam> queryReqParamMap=collect.getOrDefault(ApiReqParamInTypeEnum.QUERY.getValue(),Collections.emptyMap());\n  List<DocJavaParameter> parameterList=getJavaParameterList(builder,docJavaMethod,frameworkAnnotations);\n  if (parameterList.isEmpty()) {\n    AtomicInteger querySize=new AtomicInteger(paramList.size() + 1);\n    paramList.addAll(queryReqParamMap.values().stream().map(p -> ApiReqParam.convertToApiParam(p).setQueryParam(true).setId(querySize.getAndIncrement())).collect(Collectors.toList()));\n    AtomicInteger pathSize=new AtomicInteger(1);\n    return ApiMethodReqParam.builder().setPathParams(new ArrayList<>(pathReqParamMap.values().stream().map(p -> ApiReqParam.convertToApiParam(p).setPathParam(true).setId(pathSize.getAndIncrement())).collect(Collectors.toList()))).setQueryParams(paramList).setRequestParams(new ArrayList<>(0));\n  }\n  boolean requestFieldToUnderline=builder.getApiConfig().isRequestFieldToUnderline();\n  int requestBodyCounter=0;\n  out:   for (  DocJavaParameter apiParameter : parameterList) {\n    JavaParameter parameter=apiParameter.getJavaParameter();\n    String paramName=parameter.getName();\n    if (mappingParams.containsKey(paramName)) {\n      continue;\n    }\n    String typeName=apiParameter.getGenericCanonicalName();\n    String simpleTypeName=apiParameter.getTypeValue();\n    String simpleName=simpleTypeName.toLowerCase();\n    String fullTypeName=apiParameter.getFullyQualifiedName();\n    if (!paramTagMap.containsKey(paramName) && JavaClassValidateUtil.isPrimitive(fullTypeName) && isStrict) {\n      throw new RuntimeException(\"ERROR: Unable to find javadoc @param for actual param \\\"\" + paramName + \"\\\" in method \"+ javaMethod.getName()+ \" from \"+ className);\n    }\n    StringBuilder comment=new StringBuilder(this.paramCommentResolve(paramTagMap.get(paramName)));\n    JavaClass javaClass=builder.getJavaProjectBuilder().getClassByName(fullTypeName);\n    String mockValue=JavaFieldUtil.createMockValue(paramsComments,paramName,typeName,simpleTypeName);\n    List<JavaAnnotation> annotations=parameter.getAnnotations();\n    Set<String> groupClasses=JavaClassUtil.getParamGroupJavaClass(annotations,builder.getJavaProjectBuilder());\n    String strRequired=\"false\";\n    boolean isPathVariable=false;\n    boolean isRequestBody=false;\n    boolean required=false;\n    for (    JavaAnnotation annotation : annotations) {\n      String annotationName=annotation.getType().getValue();\n      if (ignoreMvcParamWithAnnotation(annotationName)) {\n        continue out;\n      }\n      if (frameworkAnnotations.getRequestParamAnnotation().getAnnotationName().equals(annotationName) || frameworkAnnotations.getPathVariableAnnotation().getAnnotationName().equals(annotationName)) {\n        String defaultValueProp=DocAnnotationConstants.DEFAULT_VALUE_PROP;\n        String requiredProp=DocAnnotationConstants.REQUIRED_PROP;\n        if (frameworkAnnotations.getRequestParamAnnotation().getAnnotationName().equals(annotationName)) {\n          defaultValueProp=frameworkAnnotations.getRequestParamAnnotation().getDefaultValueProp();\n          requiredProp=frameworkAnnotations.getRequestParamAnnotation().getRequiredProp();\n        }\n        if (frameworkAnnotations.getPathVariableAnnotation().getAnnotationName().equals(annotationName)) {\n          defaultValueProp=frameworkAnnotations.getPathVariableAnnotation().getDefaultValueProp();\n          requiredProp=frameworkAnnotations.getPathVariableAnnotation().getRequiredProp();\n          isPathVariable=true;\n        }\n        AnnotationValue annotationDefaultVal=annotation.getProperty(defaultValueProp);\n        if (Objects.nonNull(annotationDefaultVal)) {\n          mockValue=DocUtil.resolveAnnotationValue(annotationDefaultVal);\n        }\n        paramName=getParamName(paramName,annotation);\n        AnnotationValue annotationRequired=annotation.getProperty(requiredProp);\n        if (Objects.nonNull(annotationRequired)) {\n          strRequired=annotationRequired.toString();\n        }\n else {\n          strRequired=\"true\";\n        }\n      }\n      if (JavaClassValidateUtil.isJSR303Required(annotationName)) {\n        strRequired=\"true\";\n      }\n      if (frameworkAnnotations.getRequestBodyAnnotation().getAnnotationName().equals(annotationName)) {\n        mockValue=JsonBuildHelper.buildJson(fullTypeName,typeName,Boolean.FALSE,0,new HashMap<>(),groupClasses,builder);\n        requestBodyCounter++;\n        isRequestBody=true;\n      }\n      required=Boolean.parseBoolean(strRequired);\n    }\n    comment.append(JavaFieldUtil.getJsrComment(annotations));\n    if (requestFieldToUnderline && !isPathVariable) {\n      paramName=StringUtil.camelToUnderline(paramName);\n    }\n    if (JavaClassValidateUtil.isFile(typeName)) {\n      ApiParam param=ApiParam.of().setField(paramName).setType(DocGlobalConstants.PARAM_TYPE_FILE).setId(paramList.size() + 1).setQueryParam(true).setRequired(required).setVersion(DocGlobalConstants.DEFAULT_VERSION).setDesc(comment.toString());\n      if (typeName.contains(\"[]\") || typeName.endsWith(\">\")) {\n        comment.append(\"(array of file)\");\n        param.setType(DocGlobalConstants.PARAM_TYPE_FILE);\n        param.setDesc(comment.toString());\n        param.setHasItems(true);\n      }\n      paramList.add(param);\n      continue;\n    }\n    boolean queryParam=!isRequestBody && !isPathVariable;\n    if (JavaClassValidateUtil.isCollection(fullTypeName) || JavaClassValidateUtil.isArray(fullTypeName)) {\n      String[] gicNameArr=DocClassUtil.getSimpleGicName(typeName);\n      String gicName=gicNameArr[0];\n      if (JavaClassValidateUtil.isArray(gicName)) {\n        gicName=gicName.substring(0,gicName.indexOf(\"[\"));\n      }\n      mockValue=JavaFieldUtil.createMockValue(paramsComments,paramName,gicName,gicName);\n      if (StringUtil.isNotEmpty(mockValue) && !mockValue.contains(\",\")) {\n        mockValue=StringUtils.join(mockValue,\",\",JavaFieldUtil.createMockValue(paramsComments,paramName,gicName,gicName));\n      }\n      JavaClass gicJavaClass=builder.getJavaProjectBuilder().getClassByName(gicName);\n      if (gicJavaClass.isEnum()) {\n        Object value=JavaClassUtil.getEnumValue(gicJavaClass,Boolean.TRUE);\n        ApiParam param=ApiParam.of().setField(paramName).setDesc(comment + \",[array of enum]\").setRequired(required).setPathParam(isPathVariable).setQueryParam(queryParam).setId(paramList.size() + 1).setEnumValues(JavaClassUtil.getEnumValues(gicJavaClass)).setEnumInfo(JavaClassUtil.getEnumInfo(gicJavaClass,builder)).setType(\"array\").setValue(String.valueOf(value));\n        paramList.add(param);\n        if (requestBodyCounter > 0) {\n          Map<String,Object> map=OpenApiSchemaUtil.arrayTypeSchema(gicName);\n          docJavaMethod.setRequestSchema(map);\n        }\n      }\n else       if (JavaClassValidateUtil.isPrimitive(gicName)) {\n        String shortSimple=DocClassUtil.processTypeNameForParams(gicName);\n        ApiParam param=ApiParam.of().setField(paramName).setDesc(comment + \",[array of \" + shortSimple+ \"]\").setRequired(required).setPathParam(isPathVariable).setQueryParam(queryParam).setId(paramList.size() + 1).setType(\"array\").setVersion(DocGlobalConstants.DEFAULT_VERSION).setValue(mockValue);\n        paramList.add(param);\n        if (requestBodyCounter > 0) {\n          Map<String,Object> map=OpenApiSchemaUtil.arrayTypeSchema(gicName);\n          docJavaMethod.setRequestSchema(map);\n        }\n      }\n else       if (JavaClassValidateUtil.isFile(gicName)) {\n        ApiParam param=ApiParam.of().setField(paramName).setType(DocGlobalConstants.PARAM_TYPE_FILE).setId(paramList.size() + 1).setQueryParam(true).setRequired(required).setVersion(DocGlobalConstants.DEFAULT_VERSION).setHasItems(true).setDesc(comment + \"(array of file)\");\n        paramList.add(param);\n      }\n else {\n        if (requestBodyCounter > 0) {\n          paramList.addAll(ParamsBuildHelper.buildParams(gicNameArr[0],DocGlobalConstants.EMPTY,0,String.valueOf(required),Boolean.FALSE,new HashMap<>(),builder,groupClasses,0,Boolean.TRUE,null));\n        }\n      }\n    }\n else     if (JavaClassValidateUtil.isPrimitive(fullTypeName)) {\n      ApiParam param=ApiParam.of().setField(paramName).setType(DocClassUtil.processTypeNameForParams(simpleName)).setId(paramList.size() + 1).setPathParam(isPathVariable).setQueryParam(queryParam).setValue(mockValue).setDesc(comment.toString()).setRequired(required).setVersion(DocGlobalConstants.DEFAULT_VERSION);\n      paramList.add(param);\n      if (requestBodyCounter > 0) {\n        Map<String,Object> map=OpenApiSchemaUtil.primaryTypeSchema(simpleName);\n        docJavaMethod.setRequestSchema(map);\n      }\n    }\n else     if (JavaClassValidateUtil.isMap(fullTypeName)) {\n      log.warning(\"When using smart-doc, it is not recommended to use Map to receive parameters, Check it in \" + javaMethod.getDeclaringClass().getCanonicalName() + \"#\"+ javaMethod.getName());\n      if (JavaClassValidateUtil.isMap(typeName)) {\n        ApiParam apiParam=ApiParam.of().setField(paramName).setType(\"map\").setId(paramList.size() + 1).setPathParam(isPathVariable).setQueryParam(queryParam).setDesc(comment.toString()).setRequired(required).setVersion(DocGlobalConstants.DEFAULT_VERSION);\n        paramList.add(apiParam);\n        if (requestBodyCounter > 0) {\n          Map<String,Object> map=OpenApiSchemaUtil.mapTypeSchema(\"object\");\n          docJavaMethod.setRequestSchema(map);\n        }\n        continue;\n      }\n      String[] gicNameArr=DocClassUtil.getSimpleGicName(typeName);\n      if (JavaClassValidateUtil.isPrimitive(gicNameArr[1])) {\n        ApiParam apiParam=ApiParam.of().setField(paramName).setType(\"map\").setId(paramList.size() + 1).setPathParam(isPathVariable).setQueryParam(queryParam).setDesc(comment.toString()).setRequired(required).setVersion(DocGlobalConstants.DEFAULT_VERSION);\n        paramList.add(apiParam);\n        if (requestBodyCounter > 0) {\n          Map<String,Object> map=OpenApiSchemaUtil.mapTypeSchema(gicNameArr[1]);\n          docJavaMethod.setRequestSchema(map);\n        }\n      }\n else {\n        paramList.addAll(ParamsBuildHelper.buildParams(gicNameArr[1],DocGlobalConstants.EMPTY,0,String.valueOf(required),Boolean.FALSE,new HashMap<>(),builder,groupClasses,0,Boolean.FALSE,null));\n      }\n    }\n else     if (javaClass.isEnum()) {\n      String o=JavaClassUtil.getEnumParams(javaClass);\n      Object value=JavaClassUtil.getEnumValue(javaClass,isPathVariable || queryParam);\n      ApiParam param=ApiParam.of().setField(paramName).setId(paramList.size() + 1).setPathParam(isPathVariable).setQueryParam(queryParam).setValue(String.valueOf(value)).setType(\"enum\").setDesc(StringUtil.removeQuotes(o)).setRequired(required).setVersion(DocGlobalConstants.DEFAULT_VERSION).setEnumInfo(JavaClassUtil.getEnumInfo(javaClass,builder)).setEnumValues(JavaClassUtil.getEnumValues(javaClass));\n      paramList.add(param);\n    }\n else {\n      paramList.addAll(ParamsBuildHelper.buildParams(typeName,DocGlobalConstants.EMPTY,0,String.valueOf(required),Boolean.FALSE,new HashMap<>(),builder,groupClasses,0,Boolean.FALSE,null));\n    }\n  }\n  return ApiParamTreeUtil.buildMethodReqParam(paramList,queryReqParamMap,pathReqParamMap,requestBodyCounter);\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/template/IRestDocTemplate.java",
    "Start": 23413,
    "Stop": 41300,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "requestParams"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract handling of mapping types to separate method",
                "Change_Diff": "- if (SolonAnnotations.GET_MAPPING.equals(annotationName) || SolonAnnotations.GET_MAPPING_FULLY.equals(annotationName)) {\n... (repeated for each mapping type)\n\n+ methodType = getMethodType(annotationName);",
                "Description": "The check for different types of mappings is repeated multiple times with similar code. This can be extracted to a separate method to reduce duplication and improve readability.",
                "Start": 24,
                "End": 39
            },
            {
                "Improvement": "Remove redundant null check",
                "Change_Diff": "- if (Objects.nonNull(method.getTagByName(DEPRECATED))) {\n-   deprecated=true;\n- }",
                "Description": "The null check for the deprecated tag is performed twice in the method. The second occurrence is redundant and can be removed.",
                "Start": 41,
                "End": 43
            }
        ],
        "Final code": "public RequestMapping handle(ProjectDocConfigBuilder projectBuilder,String controllerBaseUrl,JavaMethod method,FrameworkAnnotations frameworkAnnotations,RequestMappingFunc requestMappingFunc){\n  if (Objects.nonNull(method.getTagByName(IGNORE))) {\n    return null;\n  }\n  List<JavaAnnotation> annotations=getAnnotations(method);\n  String methodType=\"GET\";\n  String shortUrl=null;\n  String mediaType=null;\n  boolean deprecated=false;\n  for (JavaAnnotation annotation : annotations) {\n    String annotationName=annotation.getType().getName();\n    if (DocAnnotationConstants.DEPRECATED.equals(annotationName)) {\n      deprecated=true;\n    }\n    if (SolonAnnotations.REQUEST_MAPPING.equals(annotationName) || SolonAnnotations.REQUEST_MAPPING_FULLY.equals(annotationName)) {\n      shortUrl=DocUtil.handleMappingValue(annotation);\n      Object produces=annotation.getNamedParameter(\"produces\");\n      if (Objects.nonNull(produces)) {\n        mediaType=produces.toString();\n      }\n    }\n    methodType = getMethodType(annotationName);\n  }\n  RequestMapping requestMapping=RequestMapping.builder().setMediaType(mediaType).setMethodType(methodType).setDeprecated(deprecated).setShortUrl(shortUrl);\n  requestMapping=formatMappingData(projectBuilder,controllerBaseUrl,requestMapping);\n  requestMappingFunc.process(method.getDeclaringClass(),requestMapping);\n  return requestMapping;\n}\n\nprivate String getMethodType(String annotationName) {\n  if (SolonAnnotations.GET_MAPPING.equals(annotationName) || SolonAnnotations.GET_MAPPING_FULLY.equals(annotationName)) {\n    return Methods.GET.getValue();\n  } else if (SolonAnnotations.POST_MAPPING.equals(annotationName) || SolonAnnotations.POST_MAPPING_FULLY.equals(annotationName)) {\n    return Methods.POST.getValue();\n  } else if (SolonAnnotations.PUT_MAPPING.equals(annotationName) || SolonAnnotations.PUT_MAPPING_FULLY.equals(annotationName)) {\n    return Methods.PUT.getValue();\n  } else if (SolonAnnotations.PATCH_MAPPING.equals(annotationName) || SolonAnnotations.PATCH_MAPPING_FULLY.equals(annotationName)) {\n    return Methods.PATCH.getValue();\n  } else if (SolonAnnotations.DELETE_MAPPING.equals(annotationName) || SolonAnnotations.DELETE_MAPPING_FULLY.equals(annotationName)) {\n    return Methods.DELETE.getValue();\n  }\n  return \"GET\";\n}"
    },
    "Old_Method": "/** \n * handle solon request mapping\n * @param projectBuilder    projectBuilder\n * @param controllerBaseUrl solon mvc controller base url\n * @param method            JavaMethod\n * @return RequestMapping\n */\npublic RequestMapping handle(ProjectDocConfigBuilder projectBuilder,String controllerBaseUrl,JavaMethod method,FrameworkAnnotations frameworkAnnotations,RequestMappingFunc requestMappingFunc){\n  if (Objects.nonNull(method.getTagByName(IGNORE))) {\n    return null;\n  }\n  List<JavaAnnotation> annotations=getAnnotations(method);\n  String methodType=\"GET\";\n  String shortUrl=null;\n  String mediaType=null;\n  boolean deprecated=false;\n  for (  JavaAnnotation annotation : annotations) {\n    String annotationName=annotation.getType().getName();\n    if (DocAnnotationConstants.DEPRECATED.equals(annotationName)) {\n      deprecated=true;\n    }\n    if (SolonAnnotations.REQUEST_MAPPING.equals(annotationName) || SolonAnnotations.REQUEST_MAPPING_FULLY.equals(annotationName)) {\n      shortUrl=DocUtil.handleMappingValue(annotation);\n      Object produces=annotation.getNamedParameter(\"produces\");\n      if (Objects.nonNull(produces)) {\n        mediaType=produces.toString();\n      }\n    }\n    if (SolonAnnotations.GET_MAPPING.equals(annotationName) || SolonAnnotations.GET_MAPPING_FULLY.equals(annotationName)) {\n      methodType=Methods.GET.getValue();\n    }\n else     if (SolonAnnotations.POST_MAPPING.equals(annotationName) || SolonAnnotations.POST_MAPPING_FULLY.equals(annotationName)) {\n      methodType=Methods.POST.getValue();\n    }\n else     if (SolonAnnotations.PUT_MAPPING.equals(annotationName) || SolonAnnotations.PUT_MAPPING_FULLY.equals(annotationName)) {\n      methodType=Methods.PUT.getValue();\n    }\n else     if (SolonAnnotations.PATCH_MAPPING.equals(annotationName) || SolonAnnotations.PATCH_MAPPING_FULLY.equals(annotationName)) {\n      methodType=Methods.PATCH.getValue();\n    }\n else     if (SolonAnnotations.DELETE_MAPPING.equals(annotationName) || SolonAnnotations.DELETE_MAPPING_FULLY.equals(annotationName)) {\n      methodType=Methods.DELETE.getValue();\n    }\n  }\n  if (Objects.nonNull(method.getTagByName(DEPRECATED))) {\n    deprecated=true;\n  }\n  RequestMapping requestMapping=RequestMapping.builder().setMediaType(mediaType).setMethodType(methodType).setDeprecated(deprecated).setShortUrl(shortUrl);\n  requestMapping=formatMappingData(projectBuilder,controllerBaseUrl,requestMapping);\n  requestMappingFunc.process(method.getDeclaringClass(),requestMapping);\n  return requestMapping;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/handler/SolonRequestMappingHandler.java",
    "Start": 1628,
    "Stop": 4598,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "handle"
}
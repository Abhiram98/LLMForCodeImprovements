{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Extract method to handle class annotations",
                "Change_Diff": "- List<JavaAnnotation> classAnnotations = this.getClassAnnotations(cls, frameworkAnnotations);\n+ List<JavaAnnotation> classAnnotations = this.handleClassAnnotations(cls, frameworkAnnotations);",
                "Description": "Extract the logic to handle class annotations into a separate method for better readability and maintainability.",
                "Start": 26,
                "End": 62
            },
            {
                "Improvement": "Extract method to handle building method documentation",
                "Change_Diff": "- for (DocJavaMethod docJavaMethod : docJavaMethods) {\n+ for (DocJavaMethod docJavaMethod : this.buildApiMethodDocs(docJavaMethods)) {",
                "Description": "Extract the logic to build API method documentation into a separate method for better readability and maintainability.",
                "Start": 77,
                "End": 212
            },
            {
                "Improvement": "Use a stream operation instead of multiple loops",
                "Change_Diff": "- for (ApiReqParam apiReqParam : this.headers) {\n+ List<ApiReqParam> allApiReqParams = Stream.of(this.headers, ApiReqParams)\n+     .flatMap(Collection::stream)\n+     .distinct()\n+     .collect(Collectors.toList());",
                "Description": "Replace manual loops with a stream operation to simplify the code and improve efficiency.",
                "Start": 140,
                "End": 149
            }
        ],
        "Final code": "private List<ApiMethodDoc> buildControllerMethod(final JavaClass cls, ApiConfig apiConfig, ProjectDocConfigBuilder projectBuilder, FrameworkAnnotations frameworkAnnotations) {\n    String clzName = cls.getCanonicalName();\n    boolean paramsDataToTree = projectBuilder.getApiConfig().isParamsDataToTree();\n    String group = JavaClassUtil.getClassTagsValue(cls, DocTags.GROUP, Boolean.TRUE);\n    String baseUrl = \"\";\n    String mediaType = DocGlobalConstants.URL_CONTENT_TYPE;\n\n    List<JavaAnnotation> classAnnotations = this.handleClassAnnotations(cls, frameworkAnnotations);\n\n    for (JavaAnnotation annotation : classAnnotations) {\n        ...\n    }\n\n    Set<String> filterMethods = DocUtil.findFilterMethods(clzName);\n    boolean needAllMethods = filterMethods.contains(DocGlobalConstants.DEFAULT_FILTER_METHOD);\n\n    List<JavaMethod> methods = cls.getMethods();\n    List<DocJavaMethod> docJavaMethods = new ArrayList<>(methods.size());\n\n    ...\n\n    List<ApiMethodDoc> methodDocList = this.buildApiMethodDocs(docJavaMethods);\n\n    return methodDocList;\n}\n\nprivate List<JavaAnnotation> handleClassAnnotations(final JavaClass cls, final FrameworkAnnotations frameworkAnnotations) {\n    List<JavaAnnotation> classAnnotations = this.getClassAnnotations(cls, frameworkAnnotations);\n\n    for (JavaAnnotation annotation : classAnnotations) {\n        ...\n    }\n\n    return classAnnotations;\n}\n\nprivate List<ApiMethodDoc> buildApiMethodDocs(final List<DocJavaMethod> docJavaMethods) {\n    List<ApiMethodDoc> methodDocList = new ArrayList<>(docJavaMethods.size());\n\n    for (DocJavaMethod docJavaMethod : docJavaMethods) {\n        ...\n    }\n\n    return methodDocList;\n}"
    }],
    "Old_Method": "/** \n * Analyze resource method\n * @param cls            cls\n * @param apiConfig      apiConfig\n * @param projectBuilder projectBuilder\n * @return List<ApiMethodDoc>\n */\nprivate List<ApiMethodDoc> buildControllerMethod(final JavaClass cls,ApiConfig apiConfig,ProjectDocConfigBuilder projectBuilder,FrameworkAnnotations frameworkAnnotations){\n  String clzName=cls.getCanonicalName();\n  boolean paramsDataToTree=projectBuilder.getApiConfig().isParamsDataToTree();\n  String group=JavaClassUtil.getClassTagsValue(cls,DocTags.GROUP,Boolean.TRUE);\n  String baseUrl=\"\";\n  String mediaType=DocGlobalConstants.URL_CONTENT_TYPE;\n  List<JavaAnnotation> classAnnotations=this.getClassAnnotations(cls,frameworkAnnotations);\n  for (  JavaAnnotation annotation : classAnnotations) {\n    String annotationName=annotation.getType().getFullyQualifiedName();\n    if (JakartaJaxrsAnnotations.JAX_PATH_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_PATH_FULLY.equals(annotationName)) {\n      baseUrl=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n    }\n    if (annotationName.equals(JakartaJaxrsAnnotations.JAX_CONSUMES) || annotationName.equals(JAXRSAnnotations.JAX_CONSUMES_FULLY)) {\n      Object value=annotation.getNamedParameter(\"value\");\n      if (Objects.nonNull(value)) {\n        mediaType=MediaType.valueOf(value.toString());\n      }\n    }\n  }\n  Set<String> filterMethods=DocUtil.findFilterMethods(clzName);\n  boolean needAllMethods=filterMethods.contains(DocGlobalConstants.DEFAULT_FILTER_METHOD);\n  List<JavaMethod> methods=cls.getMethods();\n  List<DocJavaMethod> docJavaMethods=new ArrayList<>(methods.size());\n  for (  JavaMethod method : methods) {\n    if (method.isPrivate()) {\n      continue;\n    }\n    if (needAllMethods || filterMethods.contains(method.getName())) {\n      docJavaMethods.add(convertToDocJavaMethod(apiConfig,projectBuilder,method,null));\n    }\n  }\n  docJavaMethods.addAll(getParentsClassMethods(apiConfig,projectBuilder,cls));\n  List<ApiMethodDoc> methodDocList=new ArrayList<>(methods.size());\n  int methodOrder=0;\n  for (  DocJavaMethod docJavaMethod : docJavaMethods) {\n    JavaMethod method=docJavaMethod.getJavaMethod();\n    if (checkCondition(method)) {\n      continue;\n    }\n    JaxrsPathMapping jaxPathMapping=new JaxrsPathHandler().handle(projectBuilder,baseUrl,method,mediaType);\n    if (Objects.isNull(jaxPathMapping)) {\n      continue;\n    }\n    ApiMethodDoc apiMethodDoc=new ApiMethodDoc();\n    apiMethodDoc.setDownload(docJavaMethod.isDownload());\n    apiMethodDoc.setPage(docJavaMethod.getPage());\n    apiMethodDoc.setGroup(group);\n    if (Objects.nonNull(docJavaMethod.getGroup())) {\n      apiMethodDoc.setGroup(docJavaMethod.getGroup());\n    }\n    methodOrder++;\n    apiMethodDoc.setName(method.getName());\n    apiMethodDoc.setOrder(methodOrder);\n    apiMethodDoc.setDesc(docJavaMethod.getDesc());\n    String methodUid=DocUtil.generateId(clzName + method.getName() + methodOrder);\n    apiMethodDoc.setMethodId(methodUid);\n    apiMethodDoc.setAuthor(docJavaMethod.getAuthor());\n    apiMethodDoc.setDetail(docJavaMethod.getDetail());\n    List<ApiReqParam> ApiReqParams=new JaxrsHeaderHandler().handle(method,projectBuilder);\n    apiMethodDoc.setType(jaxPathMapping.getMethodType());\n    apiMethodDoc.setUrl(jaxPathMapping.getUrl());\n    apiMethodDoc.setServerUrl(projectBuilder.getServerUrl());\n    apiMethodDoc.setPath(jaxPathMapping.getShortUrl());\n    apiMethodDoc.setDeprecated(jaxPathMapping.isDeprecated());\n    apiMethodDoc.setContentType(jaxPathMapping.getMediaType());\n    ApiMethodReqParam apiMethodReqParam=requestParams(docJavaMethod,projectBuilder);\n    apiMethodDoc.setPathParams(apiMethodReqParam.getPathParams());\n    apiMethodDoc.setQueryParams(apiMethodReqParam.getQueryParams());\n    apiMethodDoc.setRequestParams(apiMethodReqParam.getRequestParams());\n    if (paramsDataToTree) {\n      this.convertParamsDataToTree(apiMethodDoc);\n    }\n    List<ApiReqParam> allApiReqParams;\n    allApiReqParams=ApiReqParams;\n    if (this.headers != null) {\n      allApiReqParams=Stream.of(this.headers,ApiReqParams).flatMap(Collection::stream).distinct().collect(Collectors.toList());\n    }\n    allApiReqParams.removeIf(ApiReqParam -> {\n      if (StringUtil.isEmpty(ApiReqParam.getPathPatterns()) && StringUtil.isEmpty(ApiReqParam.getExcludePathPatterns())) {\n        return false;\n      }\n else {\n        boolean flag=DocPathUtil.matches(jaxPathMapping.getShortUrl(),ApiReqParam.getPathPatterns(),ApiReqParam.getExcludePathPatterns());\n        return !flag;\n      }\n    }\n);\n    apiMethodDoc.setHeaders(this.createDocRenderHeaders(allApiReqParams,apiConfig.isAdoc()));\n    apiMethodDoc.setRequestHeaders(allApiReqParams);\n    ApiRequestExample requestExample=buildReqJson(docJavaMethod,apiMethodDoc,jaxPathMapping.getMethodType(),projectBuilder);\n    String requestJson=requestExample.getExampleBody();\n    apiMethodDoc.setRequestExample(requestExample);\n    apiMethodDoc.setRequestUsage(requestJson == null ? requestExample.getUrl() : requestJson);\n    String responseValue=DocUtil.getNormalTagComments(method,DocTags.API_RESPONSE,cls.getName());\n    if (StringUtil.isNotEmpty(responseValue)) {\n      apiMethodDoc.setResponseUsage(responseValue);\n    }\n else {\n      apiMethodDoc.setResponseUsage(JsonBuildHelper.buildReturnJson(docJavaMethod,projectBuilder));\n    }\n    List<ApiParam> responseParams=buildReturnApiParams(docJavaMethod,projectBuilder);\n    if (paramsDataToTree) {\n      responseParams=ApiParamTreeUtil.apiParamToTree(responseParams);\n    }\n    apiMethodDoc.setReturnSchema(docJavaMethod.getReturnSchema());\n    apiMethodDoc.setRequestSchema(docJavaMethod.getRequestSchema());\n    apiMethodDoc.setResponseParams(responseParams);\n    methodDocList.add(apiMethodDoc);\n    TornaUtil.setTornaArrayTags(docJavaMethod.getJavaMethod(),apiMethodDoc,apiConfig);\n  }\n  return methodDocList;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/template/JaxrsDocBuildTemplate.java",
    "Start": 4274,
    "Stop": 11827,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildControllerMethod"
}
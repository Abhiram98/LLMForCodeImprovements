{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor code to reduce complexity",
                "Change_Diff": "- methodApi=new Apis();\n- methodApi.setIsFolder(TornaConstants.NO);\n... \n+ methodApi = createApi(apiMethodDoc, hasDebugEnv);",
                "Description": "The method buildApis is bloated with too many responsibilities. It's a best practice to have functions do one thing. Therefore, it would be better to refactor this by moving the logic that sets the properties of a Api object into a separate method. This would make the original function much shorter and easier to read and understand.",
                "Start": 8,
                "End": 38
            },
            {
                "Improvement": "Use ternary operator to simplify if-else statements",
                "Change_Diff": "- if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n... \n+ methodApi.setPathParams(CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams()) ? buildParams(apiMethodDoc.getPathParams()) : null);",
                "Description": "The if-else statements checking for the presence of different types of parameters can be replaced by using a ternary operator. This will make the code more concise and readable.",
                "Start": 39,
                "End": 47
            }
        ],
        "Final code": "public static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  for (ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    Apis methodApi = createApi(apiMethodDoc, hasDebugEnv);\n    methodApi.setPathParams(CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams()) ? buildParams(apiMethodDoc.getPathParams()) : null);\n    methodApi.setQueryParams(CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) ? buildParams(apiMethodDoc.getQueryParams()) : null);\n    methodApi.setRequestParams(CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams()) ? buildParams(apiMethodDoc.getRequestParams()) : null);\n    apis.add(methodApi);\n  }\n  return apis;\n}\n\npublic static Apis createApi(ApiMethodDoc apiMethodDoc, boolean hasDebugEnv) {\n  Apis methodApi=new Apis();\n  methodApi.setIsFolder(TornaConstants.NO);\n  methodApi.setName(apiMethodDoc.getDesc());\n  methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n  methodApi.setHttpMethod(apiMethodDoc.getType());\n  methodApi.setContentType(apiMethodDoc.getContentType());\n  methodApi.setDescription(apiMethodDoc.getDetail());\n  methodApi.setIsShow(TornaConstants.YES);\n  methodApi.setAuthor(apiMethodDoc.getAuthor());\n  methodApi.setOrderIndex(apiMethodDoc.getOrder());\n  methodApi.setVersion(apiMethodDoc.getVersion());\n  methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n  methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n  methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n  methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n  methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n  methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n  methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n  return methodApi;\n}"
    },
    "Old_Method": "/** \n * build apis\n * @param apiMethodDocs apiMethodDocs\n * @param hasDebugEnv   has debug environment\n * @return List of Api\n */\npublic static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  Apis methodApi;\n  for (  ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    methodApi=new Apis();\n    methodApi.setIsFolder(TornaConstants.NO);\n    methodApi.setName(apiMethodDoc.getDesc());\n    methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n    methodApi.setHttpMethod(apiMethodDoc.getType());\n    methodApi.setContentType(apiMethodDoc.getContentType());\n    methodApi.setDescription(apiMethodDoc.getDetail());\n    methodApi.setIsShow(TornaConstants.YES);\n    methodApi.setAuthor(apiMethodDoc.getAuthor());\n    methodApi.setOrderIndex(apiMethodDoc.getOrder());\n    methodApi.setVersion(apiMethodDoc.getVersion());\n    methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n    methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n    methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n    methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n    methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n    methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n    methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      methodApi.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n else     if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apis.add(methodApi);\n  }\n  return apis;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/utils/TornaUtil.java",
    "Start": 5753,
    "Stop": 8424,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildApis"
}
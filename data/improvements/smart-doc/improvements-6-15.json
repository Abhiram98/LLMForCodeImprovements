{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code into a new method",
                "Change_Diff": " - ApiDoc apiDoc1=new ApiDoc();\n - int codeIndex=0;\n - if (isOnlyDefaultGroup) { ... \n - apiDoc1.setOrder(codeIndex + 1);\n - apiDoc1.setDesc(titleMap.get(...));\n - apiDoc1.setList(new ArrayList<>(0));\n - apiDoc1.setLink(...);\n - apiDoc1.setAlias(...);\n - apiDoc1.setGroup(apiDoc1.getDesc());\n - if (isOnlyDefaultGroup) { ... \n\n + ApiDoc apiDoc = createApiDoc(...);",
                "Description": "The creation of ApiDoc and its setting is repeated twice in the method. This can be extracted into a new method to improve readability and avoid code duplication",
                "Start": 12,
                "End": 27
            },
            {
                "Improvement": "Extract repetitive logic into a new method",
                "Change_Diff": " - int codeIndex=0;\n - if (isOnlyDefaultGroup) { ... \n\n + int codeIndex = calculateCodeIndex(...);",
                "Description": "The logic to determine the 'codeIndex' is repeated twice in the method. This can be extracted into a new method to improve readability and avoid code duplication",
                "Start": 15,
                "End": 21
            },
            {
                "Improvement": "Remove unnecessary code",
                "Change_Diff": " - apiDoc1.setList(new ArrayList<>(0));\n\n + apiDoc1.setList(null);",
                "Description": "The ArrayList creation in the setList method is unnecessary and can be removed as the list is not being used.",
                "Start": 24,
                "End": 24
            }
        ],
        "Final code": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (  ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    ApiDoc apiDoc = createApiDoc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()), \"error_code_list\", \"error\", calculateCodeIndex(isOnlyDefaultGroup, apiDocs, apiDocList));\n    if (isOnlyDefaultGroup) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc);\n    }\n else {\n      apiDocs.add(apiDoc);\n    }\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    ApiDoc apiDoc = createApiDoc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()), \"dict_list\", \"dict\", calculateCodeIndex(isOnlyDefaultGroup, apiDocs, apiDocList));\n    List<ApiMethodDoc> methodDocs=new ArrayList<>();\n    List<ApiDoc> childrenApiDocs=new ArrayList<>();\n    for (    ApiDocDict apiDocDict : apiDocDictList) {\n      ApiMethodDoc methodDoc=new ApiMethodDoc();\n      methodDoc.setOrder(apiDocDict.getOrder());\n      methodDoc.setDesc(apiDocDict.getTitle());\n      methodDocs.add(methodDoc);\n      ApiDoc childrenApiDoc=new ApiDoc();\n      childrenApiDoc.setOrder(apiDocDict.getOrder());\n      childrenApiDoc.setAlias(apiDocDict.getTitle());\n      childrenApiDoc.setDesc(apiDocDict.getTitle());\n      childrenApiDoc.setName(apiDocDict.getTitle());\n      childrenApiDoc.setList(new ArrayList<>(0));\n      childrenApiDocs.add(childrenApiDoc);\n    }\n    apiDoc.setChildrenApiDocs(childrenApiDocs);\n    apiDoc.setList(methodDocs);\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        apiDocs.get(0).getChildrenApiDocs().add(apiDoc);\n      }\n    }\n else {\n      apiDocs.add(apiDoc);\n    }\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n\nprivate int calculateCodeIndex(boolean isOnlyDefaultGroup, List<ApiDoc> apiDocs, List<ApiDoc> apiDocList) {\n  int codeIndex = 0;\n  if (isOnlyDefaultGroup) {\n    codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n  }\n else {\n    codeIndex=apiDocList.size();\n  }\n  return codeIndex;\n}\n\nprivate ApiDoc createApiDoc(String desc, String link, String alias, int order) {\n  ApiDoc apiDoc = new ApiDoc();\n  apiDoc.setDesc(desc);\n  apiDoc.setLink(link);\n  apiDoc.setAlias(alias);\n  apiDoc.setOrder(order + 1);\n  apiDoc.setGroup(apiDoc.getDesc());\n  apiDoc.setList(null);\n  return apiDoc;\n}"
    },
    "Old_Method": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (  ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()));\n    apiDoc1.setList(new ArrayList<>(0));\n    apiDoc1.setLink(\"error_code_list\");\n    apiDoc1.setAlias(\"error\");\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    if (isOnlyDefaultGroup) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n      }\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setLink(\"dict_list\");\n    apiDoc1.setAlias(\"dict\");\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()));\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    List<ApiMethodDoc> methodDocs=new ArrayList<>();\n    List<ApiDoc> childrenApiDocs=new ArrayList<>();\n    for (    ApiDocDict apiDocDict : apiDocDictList) {\n      ApiMethodDoc methodDoc=new ApiMethodDoc();\n      methodDoc.setOrder(apiDocDict.getOrder());\n      methodDoc.setDesc(apiDocDict.getTitle());\n      methodDocs.add(methodDoc);\n      ApiDoc childrenApiDoc=new ApiDoc();\n      childrenApiDoc.setOrder(apiDocDict.getOrder());\n      childrenApiDoc.setAlias(apiDocDict.getTitle());\n      childrenApiDoc.setDesc(apiDocDict.getTitle());\n      childrenApiDoc.setName(apiDocDict.getTitle());\n      childrenApiDoc.setList(new ArrayList<>(0));\n      childrenApiDocs.add(childrenApiDoc);\n    }\n    apiDoc1.setChildrenApiDocs(childrenApiDocs);\n    apiDoc1.setList(methodDocs);\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n      }\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/builder/DocBuilderTemplate.java",
    "Start": 9354,
    "Stop": 13038,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildSearchJs"
}
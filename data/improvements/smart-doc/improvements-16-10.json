{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract complex conditions into separate method",
                "Change_Diff": "- if (JakartaJaxrsAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName)) {\n+ if (isDefaultValueAnnotation(annotationName)) {\n\n- if (JakartaJaxrsAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName)) {\n+ if (isHeaderParamAnnotation(annotationName)) {",
                "Description": "Conditions inside the inner for loop are complex and repeating. It would be more readable if we extract the condition into a separate method. This way, the method could be reused and the main code would be more readable.",
                "Start": 13,
                "End": 23
            },
            {
                "Improvement": "Reduce method complexity",
                "Change_Diff": "- apiReqHeader.setName(name);\n- apiReqHeader.setType(DocClassUtil.processTypeNameForParams(typeName));\n- apiReqHeader.setDesc(getComments(defaultValue,paramComments));\n- apiReqHeaders.add(apiReqHeader);\n\n+ addApiReqHeader(apiReqHeaders, apiReqHeader, name, typeName, defaultValue, paramComments);",
                "Description": "The method is too complex and doing multiple things. Extract setting ApiReqHeader properties into a separate method to make it more manageable and readable.",
                "Start": 8,
                "End": 23
            }
        ],
        "Final code": "public List<ApiReqParam> handle(JavaMethod method, ProjectDocConfigBuilder projectBuilder) {\n  Map<String,String> constantsMap = projectBuilder.getConstantsMap();\n  List<ApiReqParam> apiReqHeaders = new ArrayList<>();\n  List<JavaParameter> parameters = method.getParameters();\n  for (JavaParameter javaParameter : parameters) {\n    List<JavaAnnotation> annotations = javaParameter.getAnnotations();\n    String paramName = javaParameter.getName();\n    ApiReqParam apiReqHeader = new ApiReqParam();\n    String defaultValue = \"\";\n    for (JavaAnnotation annotation : annotations) {\n      String annotationName = annotation.getType().getFullyQualifiedName();\n      if (isDefaultValueAnnotation(annotationName)) {\n        defaultValue = StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n        defaultValue = DocUtil.handleConstants(constantsMap, defaultValue);\n      }\n      apiReqHeader.setValue(defaultValue);\n      if (isHeaderParamAnnotation(annotationName)) {\n        String name = StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n        name = DocUtil.handleConstants(constantsMap, name);\n        String typeName = javaParameter.getType().getValue().toLowerCase();\n        String className = method.getDeclaringClass().getCanonicalName();\n        Map<String,String> paramMap = DocUtil.getCommentsByTag(method, DocTags.PARAM, className);\n        String paramComments = paramMap.get(paramName);\n        addApiReqHeader(apiReqHeaders, apiReqHeader, name, typeName, defaultValue, paramComments);\n      }\n    }\n  }\n  return apiReqHeaders;\n}\n\nprivate boolean isDefaultValueAnnotation(String annotationName) {\n  return JakartaJaxrsAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName);\n}\n\nprivate boolean isHeaderParamAnnotation(String annotationName) {\n  return JakartaJaxrsAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName);\n}\n\nprivate void addApiReqHeader(List<ApiReqParam> apiReqHeaders, ApiReqParam apiReqHeader, String name, String typeName, String defaultValue, String paramComments) {\n  apiReqHeader.setName(name);\n  apiReqHeader.setType(DocClassUtil.processTypeNameForParams(typeName));\n  apiReqHeader.setDesc(getComments(defaultValue, paramComments));\n  apiReqHeaders.add(apiReqHeader);\n}"
    },
    "Old_Method": "/** \n * Handle JAX RS Header\n * @param method         method\n * @param projectBuilder ProjectDocConfigBuilder\n * @return list of ApiReqParam\n */\npublic List<ApiReqParam> handle(JavaMethod method,ProjectDocConfigBuilder projectBuilder){\n  Map<String,String> constantsMap=projectBuilder.getConstantsMap();\n  List<ApiReqParam> apiReqHeaders=new ArrayList<>();\n  List<JavaParameter> parameters=method.getParameters();\n  for (  JavaParameter javaParameter : parameters) {\n    List<JavaAnnotation> annotations=javaParameter.getAnnotations();\n    String paramName=javaParameter.getName();\n    ApiReqParam apiReqHeader=new ApiReqParam();\n    String defaultValue=\"\";\n    for (    JavaAnnotation annotation : annotations) {\n      String annotationName=annotation.getType().getFullyQualifiedName();\n      if (JakartaJaxrsAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_DEFAULT_VALUE_FULLY.equals(annotationName)) {\n        defaultValue=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n        defaultValue=DocUtil.handleConstants(constantsMap,defaultValue);\n      }\n      apiReqHeader.setValue(defaultValue);\n      if (JakartaJaxrsAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName) || JAXRSAnnotations.JAX_HEADER_PARAM_FULLY.equals(annotationName)) {\n        String name=StringUtil.removeQuotes(DocUtil.getRequestHeaderValue(annotation));\n        name=DocUtil.handleConstants(constantsMap,name);\n        apiReqHeader.setName(name);\n        String typeName=javaParameter.getType().getValue().toLowerCase();\n        apiReqHeader.setType(DocClassUtil.processTypeNameForParams(typeName));\n        String className=method.getDeclaringClass().getCanonicalName();\n        Map<String,String> paramMap=DocUtil.getCommentsByTag(method,DocTags.PARAM,className);\n        String paramComments=paramMap.get(paramName);\n        apiReqHeader.setDesc(getComments(defaultValue,paramComments));\n        apiReqHeaders.add(apiReqHeader);\n      }\n    }\n  }\n  return apiReqHeaders;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/handler/JaxrsHeaderHandler.java",
    "Start": 1598,
    "Stop": 4138,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "handle"
}
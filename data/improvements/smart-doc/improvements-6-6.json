{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Refactor redundant code blocks into a method",
                "Change_Diff": "- if (isOnlyDefaultGroup) {\n...<Repeated Code>...\n}\nelse {\n...<Repeated Code>...\n}",
                "Description": "The code has two nearly identical blocks that add a new ApiDoc to the apiDocs list. This could be refactored into a method to remove code duplication.",
                "Start": 16,
                "End": 31
            },
            {
                "Improvement": "Avoid creating new ArrayList with size 0",
                "Change_Diff": "- apiDoc1.setList(new ArrayList<>(0));\n+ apiDoc1.setList(new ArrayList<>());",
                "Description": "There is no need to specify the initial capacity of ArrayList if it is 0. Use the no-argument constructor instead to create an empty list.",
                "Start": 23,
                "End": 23
            },
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (ApiDocDict apiDocDict : apiDocDictList) {\n...<Repeated Code>...\n}",
                "Description": "Instead of using a traditional for loop to iterate over apiDocDictList, use an enhanced for loop.",
                "Start": 41,
                "End": 51
            }
        ],
        "Final code": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (ApiDoc apiDoc1: apiDocList) {\n    addApiDoc(apiDoc1, apiDocs, apiDocs.size() + 1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    addErrorCodeApiDoc(apiDocs, isOnlyDefaultGroup, titleMap);\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    addApiDocDict(apiDocs, isOnlyDefaultGroup, titleMap, apiDocDictList);\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n\nprivate void addApiDoc(ApiDoc apiDoc, List<ApiDoc> apiDocs, int order) {\n  apiDoc.setOrder(order);\n  apiDocs.add(apiDoc);\n}\n\nprivate void addErrorCodeApiDoc(List<ApiDoc> apiDocs, boolean isOnlyDefaultGroup, Map<String,String> titleMap) {\n  ApiDoc apiDoc1=new ApiDoc();\n  apiDoc1.setOrder(getCodeIndex(apiDocs, isOnlyDefaultGroup) + 1);\n  apiDoc1.setDesc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()));\n  apiDoc1.setList(new ArrayList<>());\n  apiDoc1.setLink(\"error_code_list\");\n  apiDoc1.setAlias(\"error\");\n  apiDoc1.setGroup(apiDoc1.getDesc());\n  if (isOnlyDefaultGroup) {\n    apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n  } else {\n    apiDocs.add(apiDoc1);\n  }\n}\n\nprivate void addApiDocDict(List<ApiDoc> apiDocs, boolean isOnlyDefaultGroup, Map<String,String> titleMap, List<ApiDocDict> apiDocDictList) {\n  ApiDoc apiDoc1=new ApiDoc();\n  apiDoc1.setOrder(getCodeIndex(apiDocs, isOnlyDefaultGroup) + 1);\n  apiDoc1.setLink(\"dict_list\");\n  apiDoc1.setAlias(\"dict\");\n  apiDoc1.setDesc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()));\n  apiDoc1.setGroup(apiDoc1.getDesc());\n  List<ApiMethodDoc> methodDocs=new ArrayList<>();\n  List<ApiDoc> childrenApiDocs=new ArrayList<>();\n  for (ApiDocDict apiDocDict: apiDocDictList) {\n    addApiMethodDoc(methodDocs, apiDocDict);\n    addChildApiDoc(childrenApiDocs, apiDocDict);\n  }\n  apiDoc1.setChildrenApiDocs(childrenApiDocs);\n  apiDoc1.setList(methodDocs);\n  if (isOnlyDefaultGroup) {\n    if (apiDocs.size() > 0) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n    }\n  } else {\n    apiDocs.add(apiDoc1);\n  }\n}\n\nprivate int getCodeIndex(List<ApiDoc> apiDocs, boolean isOnlyDefaultGroup) {\n  int codeIndex=0;\n  if (isOnlyDefaultGroup) {\n    codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n  } else {\n    codeIndex=apiDocs.size();\n  }\n  return codeIndex;\n}\n\nprivate void addApiMethodDoc(List<ApiMethodDoc> methodDocs, ApiDocDict apiDocDict) {\n  ApiMethodDoc methodDoc=new ApiMethodDoc();\n  methodDoc.setOrder(apiDocDict.getOrder());\n  methodDoc.setDesc(apiDocDict.getTitle());\n  methodDocs.add(methodDoc);\n}\n\nprivate void addChildApiDoc(List<ApiDoc> childrenApiDocs, ApiDocDict apiDocDict) {\n  ApiDoc childrenApiDoc=new ApiDoc();\n  childrenApiDoc.setOrder(apiDocDict.getOrder());\n  childrenApiDoc.setAlias(apiDocDict.getTitle());\n  childrenApiDoc.setDesc(apiDocDict.getTitle());\n  childrenApiDoc.setName(apiDocDict.getTitle());\n  childrenApiDoc.setList(new ArrayList<>());\n  childrenApiDocs.add(childrenApiDoc);\n}"
    },
    "Old_Method": "public void buildSearchJs(ApiConfig config,JavaProjectBuilder javaProjectBuilder,List<ApiDoc> apiDocList,String template){\n  List<ApiErrorCode> errorCodeList=DocUtil.errorCodeDictToList(config,javaProjectBuilder);\n  Template tpl=BeetlTemplateUtil.getByName(template);\n  List<ApiDoc> apiDocs=new ArrayList<>();\n  for (  ApiDoc apiDoc1 : apiDocList) {\n    apiDoc1.setOrder(apiDocs.size() + 1);\n    apiDocs.add(apiDoc1);\n  }\n  boolean isOnlyDefaultGroup=apiDocList.size() == 1;\n  Map<String,String> titleMap=setDirectoryLanguageVariable(config,tpl);\n  if (CollectionUtil.isNotEmpty(errorCodeList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.ERROR_LIST_TITLE.getVariable()));\n    apiDoc1.setList(new ArrayList<>(0));\n    apiDoc1.setLink(\"error_code_list\");\n    apiDoc1.setAlias(\"error\");\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    if (isOnlyDefaultGroup) {\n      apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  List<ApiDocDict> apiDocDictList=DocUtil.buildDictionary(config,javaProjectBuilder);\n  if (CollectionUtil.isNotEmpty(apiDocDictList)) {\n    ApiDoc apiDoc1=new ApiDoc();\n    int codeIndex=0;\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        codeIndex=apiDocs.get(0).getChildrenApiDocs().size();\n      }\n    }\n else {\n      codeIndex=apiDocList.size();\n    }\n    apiDoc1.setOrder(codeIndex + 1);\n    apiDoc1.setLink(\"dict_list\");\n    apiDoc1.setAlias(\"dict\");\n    apiDoc1.setDesc(titleMap.get(TemplateVariable.DICT_LIST_TITLE.getVariable()));\n    apiDoc1.setGroup(apiDoc1.getDesc());\n    List<ApiMethodDoc> methodDocs=new ArrayList<>();\n    List<ApiDoc> childrenApiDocs=new ArrayList<>();\n    for (    ApiDocDict apiDocDict : apiDocDictList) {\n      ApiMethodDoc methodDoc=new ApiMethodDoc();\n      methodDoc.setOrder(apiDocDict.getOrder());\n      methodDoc.setDesc(apiDocDict.getTitle());\n      methodDocs.add(methodDoc);\n      ApiDoc childrenApiDoc=new ApiDoc();\n      childrenApiDoc.setOrder(apiDocDict.getOrder());\n      childrenApiDoc.setAlias(apiDocDict.getTitle());\n      childrenApiDoc.setDesc(apiDocDict.getTitle());\n      childrenApiDoc.setName(apiDocDict.getTitle());\n      childrenApiDoc.setList(new ArrayList<>(0));\n      childrenApiDocs.add(childrenApiDoc);\n    }\n    apiDoc1.setChildrenApiDocs(childrenApiDocs);\n    apiDoc1.setList(methodDocs);\n    if (isOnlyDefaultGroup) {\n      if (apiDocs.size() > 0) {\n        apiDocs.get(0).getChildrenApiDocs().add(apiDoc1);\n      }\n    }\n else {\n      apiDocs.add(apiDoc1);\n    }\n  }\n  tpl.binding(TemplateVariable.API_DOC_LIST.getVariable(),apiDocs);\n  FileUtil.nioWriteFile(tpl.render(),config.getOutPath() + DocGlobalConstants.FILE_SEPARATOR + DocGlobalConstants.SEARCH_JS_OUT);\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/builder/DocBuilderTemplate.java",
    "Start": 9354,
    "Stop": 13038,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildSearchJs"
}
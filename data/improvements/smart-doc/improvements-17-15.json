{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Optimize Object Creation",
                "Change_Diff": "- methodApi=new Apis();\n- methodApi.setIsFolder(TornaConstants.NO);\n- methodApi.setName(apiMethodDoc.getDesc());\n- methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n- methodApi.setHttpMethod(apiMethodDoc.getType());\n- methodApi.setContentType(apiMethodDoc.getContentType());\n- methodApi.setDescription(apiMethodDoc.getDetail());\n- methodApi.setIsShow(TornaConstants.YES);\n- methodApi.setAuthor(apiMethodDoc.getAuthor());\n- methodApi.setOrderIndex(apiMethodDoc.getOrder());\n- methodApi.setVersion(apiMethodDoc.getVersion());\n- methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n- methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n- methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n- methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n- methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n- methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n- methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n+ methodApi=new Apis(TornaConstants.NO, apiMethodDoc.getDesc(), hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()), apiMethodDoc.getType(), apiMethodDoc.getContentType(), apiMethodDoc.getDetail(), TornaConstants.YES, apiMethodDoc.getAuthor(), apiMethodDoc.getOrder(), apiMethodDoc.getVersion(), buildHerder(apiMethodDoc.getRequestHeaders()), buildParams(apiMethodDoc.getResponseParams()), apiMethodDoc.getIsRequestArray(), apiMethodDoc.getIsResponseArray(), apiMethodDoc.getRequestArrayType(), apiMethodDoc.getResponseArrayType(), apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);",
                "Description": "Instead of creating the `Apis` object and then setting its properties one by one, it would be more concise and efficient to add a constructor to the `Apis` class that takes in all the necessary parameters, and then use that constructor when creating the `Apis` object.",
                "Start": 6,
                "End": 23
            },
            {
                "Improvement": "Simplify Conditional Statements",
                "Change_Diff": "- if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n-   methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n- }\n- else if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n-   methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n- }\n- if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n-   methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n- }\n+ if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n+   if (DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n+       methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n+   } else {\n+       methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n+   }\n+ }\n+ if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n+   methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n+ }",
                "Description": "The conditions to check if the queryParams and requestParams are not empty can be merged to simplify the code and avoid redundant checks.",
                "Start": 24,
                "End": 33
            }
        ],
        "Final code": "public static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  for (ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    Apis methodApi=new Apis(TornaConstants.NO, apiMethodDoc.getDesc(), hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()), apiMethodDoc.getType(), apiMethodDoc.getContentType(), apiMethodDoc.getDetail(), TornaConstants.YES, apiMethodDoc.getAuthor(), apiMethodDoc.getOrder(), apiMethodDoc.getVersion(), buildHerder(apiMethodDoc.getRequestHeaders()), buildParams(apiMethodDoc.getResponseParams()), apiMethodDoc.getIsRequestArray(), apiMethodDoc.getIsResponseArray(), apiMethodDoc.getRequestArrayType(), apiMethodDoc.getResponseArrayType(), apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      methodApi.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      if (DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n          methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n      } else {\n          methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n      }\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apis.add(methodApi);\n  }\n  return apis;\n}"
    },
    "Old_Method": "/** \n * build apis\n * @param apiMethodDocs apiMethodDocs\n * @param hasDebugEnv   has debug environment\n * @return List of Api\n */\npublic static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  Apis methodApi;\n  for (  ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    methodApi=new Apis();\n    methodApi.setIsFolder(TornaConstants.NO);\n    methodApi.setName(apiMethodDoc.getDesc());\n    methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n    methodApi.setHttpMethod(apiMethodDoc.getType());\n    methodApi.setContentType(apiMethodDoc.getContentType());\n    methodApi.setDescription(apiMethodDoc.getDetail());\n    methodApi.setIsShow(TornaConstants.YES);\n    methodApi.setAuthor(apiMethodDoc.getAuthor());\n    methodApi.setOrderIndex(apiMethodDoc.getOrder());\n    methodApi.setVersion(apiMethodDoc.getVersion());\n    methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n    methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n    methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n    methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n    methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n    methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n    methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      methodApi.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n else     if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apis.add(methodApi);\n  }\n  return apis;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/utils/TornaUtil.java",
    "Start": 5753,
    "Stop": 8424,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildApis"
}
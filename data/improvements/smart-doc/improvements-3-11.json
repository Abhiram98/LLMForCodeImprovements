{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use enhanced for loop instead of traditional for loop",
                "Change_Diff": "- for (int i = 0; i < methods.size(); i++) {\n+ for (JavaMethod method : methods) {",
                "Description": "Instead of using a traditional for loop to iterate over `methods`, `implClasses` and `methodDocList`, use an enhanced for loop. This is more readable and less error-prone.",
                "Start": 5,
                "End": 5
            },
            {
                "Improvement": "Use Optional to avoid NullPointerException",
                "Change_Diff": "- if (Objects.nonNull(method.getTagByName(IGNORE))) {\n+ if (Optional.ofNullable(method.getTagByName(IGNORE)).isPresent()) {",
                "Description": "Instead of using Objects.nonNull, use Optional to avoid NullPointerException. It provides a clearer and more straightforward way to handle null values.",
                "Start": 11,
                "End": 11
            },
            {
                "Improvement": "Use Constants for String Literals",
                "Change_Diff": "- if (Objects.nonNull(method.getTagByName(\"IGNORE\"))) {\n+ if (Objects.nonNull(method.getTagByName(IGNORE_TAG_NAME))) {",
                "Description": "String literals like `IGNORE` are used multiple times in the code. It's a good practice to define such literals as constants.",
                "Start": 11,
                "End": 11
            }
        ],
        "Final code": "private static final String IGNORE_TAG_NAME = \"IGNORE\";\n\nprivate List<RpcJavaMethod> buildServiceMethod(final JavaClass cls,ApiConfig apiConfig,ProjectDocConfigBuilder projectBuilder){\n  String clazName=cls.getCanonicalName();\n  List<JavaMethod> methods=cls.getMethods();\n  List<RpcJavaMethod> methodDocList=new ArrayList<>(methods.size());\n  Set<String> filterMethods=DocUtil.findFilterMethods(clazName);\n  boolean needAllMethods=filterMethods.contains(DocGlobalConstants.DEFAULT_FILTER_METHOD);\n  for (JavaMethod method : methods) {\n    if (method.isPrivate()) {\n      continue;\n    }\n    if (Optional.ofNullable(method.getTagByName(IGNORE_TAG_NAME)).isPresent()) {\n      continue;\n    }\n    if (StringUtil.isEmpty(method.getComment()) && apiConfig.isStrict()) {\n      throw new RuntimeException(\"Unable to find comment for method \" + method.getName() + \" in \"+ cls.getCanonicalName());\n    }\n    if (needAllMethods || filterMethods.contains(method.getName())) {\n      RpcJavaMethod apiMethodDoc=convertToRpcJavaMethod(apiConfig,method,null);\n      methodDocList.add(apiMethodDoc);\n    }\n  }\n  methodDocList.addAll(getParentsClassMethods(apiConfig,cls));\n  if (cls.isInterface() || cls.isAbstract()) {\n    List<JavaType> implClasses=cls.getImplements();\n    for (JavaType type : implClasses) {\n      JavaClass javaClass=(JavaClass)type;\n      Map<String,JavaType> actualTypesMap=JavaClassUtil.getActualTypesMap(javaClass);\n      for (JavaMethod method : javaClass.getMethods()) {\n        if (!method.isDefault()) {\n          methodDocList.add(convertToRpcJavaMethod(apiConfig,method,actualTypesMap));\n        }\n      }\n    }\n  }\n  int methodOrder=0;\n  List<RpcJavaMethod> rpcJavaMethods=new ArrayList<>(methodDocList.size());\n  for (RpcJavaMethod method : methodDocList) {\n    methodOrder++;\n    method.setOrder(methodOrder);\n    String methodUid=DocUtil.generateId(clazName + method.getName() + methodOrder);\n    method.setMethodId(methodUid);\n    List<ApiParam> requestParams=requestParams(method.getJavaMethod(),projectBuilder,new AtomicInteger(0),method.getActualTypesMap());\n    List<ApiParam> responseParams=buildReturnApiParams(DocJavaMethod.builder().setJavaMethod(method.getJavaMethod()).setActualTypesMap(method.getActualTypesMap()),projectBuilder);\n    if (apiConfig.isParamsDataToTree()) {\n      method.setRequestParams(ApiParamTreeUtil.apiParamToTree(requestParams));\n      method.setResponseParams(ApiParamTreeUtil.apiParamToTree(responseParams));\n    }\n else {\n      method.setRequestParams(requestParams);\n      method.setResponseParams(responseParams);\n    }\n    rpcJavaMethods.add(method);\n  }\n  return rpcJavaMethods;\n}"
    },
    "Old_Method": "private List<RpcJavaMethod> buildServiceMethod(final JavaClass cls,ApiConfig apiConfig,ProjectDocConfigBuilder projectBuilder){\n  String clazName=cls.getCanonicalName();\n  List<JavaMethod> methods=cls.getMethods();\n  List<RpcJavaMethod> methodDocList=new ArrayList<>(methods.size());\n  Set<String> filterMethods=DocUtil.findFilterMethods(clazName);\n  boolean needAllMethods=filterMethods.contains(DocGlobalConstants.DEFAULT_FILTER_METHOD);\n  for (  JavaMethod method : methods) {\n    if (method.isPrivate()) {\n      continue;\n    }\n    if (Objects.nonNull(method.getTagByName(IGNORE))) {\n      continue;\n    }\n    if (StringUtil.isEmpty(method.getComment()) && apiConfig.isStrict()) {\n      throw new RuntimeException(\"Unable to find comment for method \" + method.getName() + \" in \"+ cls.getCanonicalName());\n    }\n    if (needAllMethods || filterMethods.contains(method.getName())) {\n      RpcJavaMethod apiMethodDoc=convertToRpcJavaMethod(apiConfig,method,null);\n      methodDocList.add(apiMethodDoc);\n    }\n  }\n  methodDocList.addAll(getParentsClassMethods(apiConfig,cls));\n  if (cls.isInterface() || cls.isAbstract()) {\n    List<JavaType> implClasses=cls.getImplements();\n    for (    JavaType type : implClasses) {\n      JavaClass javaClass=(JavaClass)type;\n      Map<String,JavaType> actualTypesMap=JavaClassUtil.getActualTypesMap(javaClass);\n      for (      JavaMethod method : javaClass.getMethods()) {\n        if (!method.isDefault()) {\n          methodDocList.add(convertToRpcJavaMethod(apiConfig,method,actualTypesMap));\n        }\n      }\n    }\n  }\n  int methodOrder=0;\n  List<RpcJavaMethod> rpcJavaMethods=new ArrayList<>(methodDocList.size());\n  for (  RpcJavaMethod method : methodDocList) {\n    methodOrder++;\n    method.setOrder(methodOrder);\n    String methodUid=DocUtil.generateId(clazName + method.getName() + methodOrder);\n    method.setMethodId(methodUid);\n    List<ApiParam> requestParams=requestParams(method.getJavaMethod(),projectBuilder,new AtomicInteger(0),method.getActualTypesMap());\n    List<ApiParam> responseParams=buildReturnApiParams(DocJavaMethod.builder().setJavaMethod(method.getJavaMethod()).setActualTypesMap(method.getActualTypesMap()),projectBuilder);\n    if (apiConfig.isParamsDataToTree()) {\n      method.setRequestParams(ApiParamTreeUtil.apiParamToTree(requestParams));\n      method.setResponseParams(ApiParamTreeUtil.apiParamToTree(responseParams));\n    }\n else {\n      method.setRequestParams(requestParams);\n      method.setResponseParams(responseParams);\n    }\n    rpcJavaMethods.add(method);\n  }\n  return rpcJavaMethods;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/template/RpcDocBuildTemplate.java",
    "Start": 3775,
    "Stop": 6960,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildServiceMethod"
}
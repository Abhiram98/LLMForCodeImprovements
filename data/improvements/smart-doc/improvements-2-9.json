{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Rewrite the method to simplify the logic",
            "Change_Diff": "- default List<ApiDoc> handleTagsApiDoc(List<ApiDoc> apiDocList){\n-  if (CollectionUtil.isEmpty(apiDocList)) {\n-    return Collections.emptyList();\n-  }\n-  Map<String,ApiDoc> copyMap=new HashMap<>();\n-  apiDocList.forEach(doc -> {\n-    String[] tags=doc.getTags();\n-    if (ArrayUtils.isEmpty(tags)) {\n-      tags=new String[]{doc.getPackageName() + \".\" + doc.getName()};\n-    }\n-    for (    String tag : tags) {\n-      tag=StringUtil.trim(tag);\n-      copyMap.computeIfPresent(tag,(k,v) -> {\n-        List<ApiMethodDoc> list=CollectionUtil.isEmpty(v.getList()) ? new ArrayList<>() : v.getList();\n-        list.addAll(doc.getList());\n-        v.setList(list);\n-        return v;\n-      }\n);\n-      copyMap.putIfAbsent(tag,doc);\n-    }\n-  }\n-);\n-  Map<String,ApiDoc> allMap=new HashMap<>(copyMap);\n-  allMap.forEach((k,v) -> {\n-    List<ApiMethodDoc> methodDocList=v.getList();\n-    methodDocList.forEach(method -> {\n-      String[] tags=method.getTags();\n-      if (ArrayUtils.isEmpty(tags)) {\n-        return;\n-      }\n-      for (      String tag : tags) {\n-        tag=StringUtil.trim(tag);\n-        copyMap.computeIfPresent(tag,(k1,v2) -> {\n-          method.setOrder(v2.getList().size() + 1);\n-          v2.getList().add(method);\n-          return v2;\n-        }\n);\n-        copyMap.putIfAbsent(tag,ApiDoc.buildTagApiDoc(v,tag,method));\n-      }\n-    }\n-);\n-  }\n-);\n-  List<ApiDoc> apiDocs=new ArrayList<>(copyMap.values());\n-  int index=apiDocs.size() - 1;\n-  for (  ApiDoc apiDoc : apiDocs) {\n-    if (apiDoc.getOrder() == null) {\n-      apiDoc.setOrder(index++);\n-    }\n-  }\n-  apiDocs.sort(Comparator.comparing(ApiDoc::getOrder));\n-  return apiDocs;\n-}",
            "Description": "The logic in the method is repetitive and complex. The logic can be simplified by using Java 8 Stream API to improve readability and maintainability. This will also help to reduce the size of the method.",
            "Start": 1,
            "End": 57
        }],
        "Final code": "default List<ApiDoc> handleTagsApiDoc(List<ApiDoc> apiDocList) {\n    if (CollectionUtil.isEmpty(apiDocList)) {\n        return Collections.emptyList();\n    }\n\n    Map<String, ApiDoc> copyMap = apiDocList.stream()\n            .flatMap(doc -> Stream.of(Optional.ofNullable(doc.getTags()).orElse(new String[]{doc.getPackageName() + \".\" + doc.getName()}))\n                    .map(tag -> new AbstractMap.SimpleEntry<>(StringUtil.trim(tag), doc)))\n            .collect(Collectors.toMap(AbstractMap.SimpleEntry::getKey, AbstractMap.SimpleEntry::getValue, (v1, v2) -> {\n                List<ApiMethodDoc> list = CollectionUtil.isEmpty(v1.getList()) ? new ArrayList<>() : v1.getList();\n                list.addAll(v2.getList());\n                v1.setList(list);\n                return v1;\n            }));\n\n    List<ApiDoc> apiDocs = new ArrayList<>(copyMap.values());\n    apiDocs.forEach(doc -> doc.setOrder(Optional.ofNullable(doc.getOrder()).orElse(apiDocs.size() - 1)));\n    apiDocs.sort(Comparator.comparing(ApiDoc::getOrder));\n    return apiDocs;\n}"
    },
    "Old_Method": "default List<ApiDoc> handleTagsApiDoc(List<ApiDoc> apiDocList){\n  if (CollectionUtil.isEmpty(apiDocList)) {\n    return Collections.emptyList();\n  }\n  Map<String,ApiDoc> copyMap=new HashMap<>();\n  apiDocList.forEach(doc -> {\n    String[] tags=doc.getTags();\n    if (ArrayUtils.isEmpty(tags)) {\n      tags=new String[]{doc.getPackageName() + \".\" + doc.getName()};\n    }\n    for (    String tag : tags) {\n      tag=StringUtil.trim(tag);\n      copyMap.computeIfPresent(tag,(k,v) -> {\n        List<ApiMethodDoc> list=CollectionUtil.isEmpty(v.getList()) ? new ArrayList<>() : v.getList();\n        list.addAll(doc.getList());\n        v.setList(list);\n        return v;\n      }\n);\n      copyMap.putIfAbsent(tag,doc);\n    }\n  }\n);\n  Map<String,ApiDoc> allMap=new HashMap<>(copyMap);\n  allMap.forEach((k,v) -> {\n    List<ApiMethodDoc> methodDocList=v.getList();\n    methodDocList.forEach(method -> {\n      String[] tags=method.getTags();\n      if (ArrayUtils.isEmpty(tags)) {\n        return;\n      }\n      for (      String tag : tags) {\n        tag=StringUtil.trim(tag);\n        copyMap.computeIfPresent(tag,(k1,v2) -> {\n          method.setOrder(v2.getList().size() + 1);\n          v2.getList().add(method);\n          return v2;\n        }\n);\n        copyMap.putIfAbsent(tag,ApiDoc.buildTagApiDoc(v,tag,method));\n      }\n    }\n);\n  }\n);\n  List<ApiDoc> apiDocs=new ArrayList<>(copyMap.values());\n  int index=apiDocs.size() - 1;\n  for (  ApiDoc apiDoc : apiDocs) {\n    if (apiDoc.getOrder() == null) {\n      apiDoc.setOrder(index++);\n    }\n  }\n  apiDocs.sort(Comparator.comparing(ApiDoc::getOrder));\n  return apiDocs;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/template/IRestDocTemplate.java",
    "Start": 9408,
    "Stop": 11532,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "handleTagsApiDoc"
}
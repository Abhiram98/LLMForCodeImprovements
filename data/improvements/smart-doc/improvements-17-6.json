{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use meaningful variable names",
                "Change_Diff": "- List<Apis> apis=new ArrayList<>();\n- Apis methodApi;\n+ List<Apis> apiList = new ArrayList<>();\n+ Apis api;",
                "Description": "Changing the variable name 'apis' to 'apiList' and 'methodApi' to 'api' for better code readability and understanding.",
                "Start": 8,
                "End": 9
            },
            {
                "Improvement": "Avoid redundant code",
                "Change_Diff": "- if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n- methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n- }\n- else if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n- methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n- }\n+ if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n+   if (DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n+     api.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n+   } else {\n+     api.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n+   }\n+ }",
                "Description": "There are redundant CollectionUtil.isNotEmpty() checks for 'apiMethodDoc.getQueryParams()'. Combine them to make the code cleaner.",
                "Start": 31,
                "End": 37
            }
        ],
        "Final code": "public static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apiList = new ArrayList<>();\n  Apis api;\n  for (ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    api = new Apis();\n    api.setIsFolder(TornaConstants.NO);\n    api.setName(apiMethodDoc.getDesc());\n    api.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n    api.setHttpMethod(apiMethodDoc.getType());\n    api.setContentType(apiMethodDoc.getContentType());\n    api.setDescription(apiMethodDoc.getDetail());\n    api.setIsShow(TornaConstants.YES);\n    api.setAuthor(apiMethodDoc.getAuthor());\n    api.setOrderIndex(apiMethodDoc.getOrder());\n    api.setVersion(apiMethodDoc.getVersion());\n    api.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n    api.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n    api.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n    api.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n    api.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n    api.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n    api.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      api.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      if (DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n        api.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n      } else {\n        api.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n      }\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      api.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apiList.add(api);\n  }\n  return apiList;\n}"
    },
    "Old_Method": "/** \n * build apis\n * @param apiMethodDocs apiMethodDocs\n * @param hasDebugEnv   has debug environment\n * @return List of Api\n */\npublic static List<Apis> buildApis(List<ApiMethodDoc> apiMethodDocs,boolean hasDebugEnv){\n  List<Apis> apis=new ArrayList<>();\n  Apis methodApi;\n  for (  ApiMethodDoc apiMethodDoc : apiMethodDocs) {\n    methodApi=new Apis();\n    methodApi.setIsFolder(TornaConstants.NO);\n    methodApi.setName(apiMethodDoc.getDesc());\n    methodApi.setUrl(hasDebugEnv ? subFirstUrlOrPath(apiMethodDoc.getPath()) : subFirstUrlOrPath(apiMethodDoc.getUrl()));\n    methodApi.setHttpMethod(apiMethodDoc.getType());\n    methodApi.setContentType(apiMethodDoc.getContentType());\n    methodApi.setDescription(apiMethodDoc.getDetail());\n    methodApi.setIsShow(TornaConstants.YES);\n    methodApi.setAuthor(apiMethodDoc.getAuthor());\n    methodApi.setOrderIndex(apiMethodDoc.getOrder());\n    methodApi.setVersion(apiMethodDoc.getVersion());\n    methodApi.setHeaderParams(buildHerder(apiMethodDoc.getRequestHeaders()));\n    methodApi.setResponseParams(buildParams(apiMethodDoc.getResponseParams()));\n    methodApi.setIsRequestArray(apiMethodDoc.getIsRequestArray());\n    methodApi.setIsResponseArray(apiMethodDoc.getIsResponseArray());\n    methodApi.setRequestArrayType(apiMethodDoc.getRequestArrayType());\n    methodApi.setResponseArrayType(apiMethodDoc.getResponseArrayType());\n    methodApi.setDeprecated(apiMethodDoc.isDeprecated() ? \"Deprecated\" : null);\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getPathParams())) {\n      methodApi.setPathParams(buildParams(apiMethodDoc.getPathParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams()) && DocGlobalConstants.FILE_CONTENT_TYPE.equals(apiMethodDoc.getContentType())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n else     if (CollectionUtil.isNotEmpty(apiMethodDoc.getQueryParams())) {\n      methodApi.setQueryParams(buildParams(apiMethodDoc.getQueryParams()));\n    }\n    if (CollectionUtil.isNotEmpty(apiMethodDoc.getRequestParams())) {\n      methodApi.setRequestParams(buildParams(apiMethodDoc.getRequestParams()));\n    }\n    apis.add(methodApi);\n  }\n  return apis;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/utils/TornaUtil.java",
    "Start": 5753,
    "Stop": 8424,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "buildApis"
}
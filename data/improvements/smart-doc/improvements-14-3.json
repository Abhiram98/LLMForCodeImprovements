{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Check for non null before calling methods on objects",
                "Change_Diff": "- builder.getReplaceClassMap();\n+ if (builder != null) builder.getReplaceClassMap();",
                "Description": "You should always check if an object is not null before calling a method on it. This will prevent NullPointerException from being thrown if the object is null.",
                "Start": 3,
                "End": 47
            },
            {
                "Improvement": "Remove unnecessary conditions",
                "Change_Diff": "- if (Objects.nonNull(actualTypesMap) && Objects.nonNull(actualTypesMap.get(javaType.getCanonicalName()))) {\n+ if (actualTypesMap != null && actualTypesMap.get(javaType.getCanonicalName()) != null) {",
                "Description": "There's no need to check if `actualTypesMap` and `actualTypesMap.get(javaType.getCanonicalName())` are non-null separately. You can combine these conditions into one statement.",
                "Start": 19,
                "End": 24
            },
            {
                "Improvement": "Improve readability by avoiding deep nesting",
                "Change_Diff": "- for (JavaAnnotation annotation : annotations) {\n+ if (annotations != null) for (JavaAnnotation annotation : annotations) {",
                "Description": "It's generally a good practice to avoid deep nesting of conditions and loops. It makes the code more readable and maintainable.",
                "Start": 27,
                "End": 38
            }
        ],
        "Final code": "default List<DocJavaParameter> getJavaParameterList(ProjectDocConfigBuilder builder,final DocJavaMethod docJavaMethod,FrameworkAnnotations frameworkAnnotations){\n  if (builder != null) {\n    JavaMethod javaMethod=docJavaMethod.getJavaMethod();\n    Map<String,String> replacementMap=builder.getReplaceClassMap();\n    Map<String,String> paramTagMap=docJavaMethod.getParamTagMap();\n    List<JavaParameter> parameterList=javaMethod.getParameters();\n    if (parameterList.isEmpty()) {\n      return new ArrayList<>(0);\n    }\n    Set<String> ignoreSets=ignoreParamsSets(javaMethod);\n    List<DocJavaParameter> apiJavaParameterList=new ArrayList<>(parameterList.size());\n    Map<String,JavaType> actualTypesMap=docJavaMethod.getActualTypesMap();\n    for (JavaParameter parameter : parameterList) {\n      String paramName=parameter.getName();\n      if (ignoreSets.contains(paramName)) {\n        continue;\n      }\n      DocJavaParameter apiJavaParameter=new DocJavaParameter();\n      apiJavaParameter.setJavaParameter(parameter);\n      JavaType javaType=parameter.getType();\n      if (actualTypesMap != null && actualTypesMap.get(javaType.getCanonicalName()) != null) {\n        javaType=actualTypesMap.get(javaType.getCanonicalName());\n      }\n      apiJavaParameter.setTypeValue(javaType.getValue());\n      String genericCanonicalName=javaType.getGenericCanonicalName();\n      String fullTypeName=javaType.getFullyQualifiedName();\n      String commentClass=paramTagMap.get(paramName);\n      if (Objects.nonNull(commentClass) && commentClass.contains(IGNORE)) {\n        continue;\n      }\n      String rewriteClassName=getRewriteClassName(replacementMap,fullTypeName,commentClass);\n      if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n        genericCanonicalName=rewriteClassName;\n        fullTypeName=DocClassUtil.getSimpleName(rewriteClassName);\n      }\n      if (JavaClassValidateUtil.isMvcIgnoreParams(genericCanonicalName,builder.getApiConfig().getIgnoreRequestParams())) {\n        continue;\n      }\n      fullTypeName=DocClassUtil.rewriteRequestParam(fullTypeName);\n      genericCanonicalName=DocClassUtil.rewriteRequestParam(genericCanonicalName);\n      List<JavaAnnotation> annotations=parameter.getAnnotations();\n      apiJavaParameter.setAnnotations(annotations);\n      if (annotations != null) for (JavaAnnotation annotation : annotations) {\n        String annotationName=annotation.getType().getValue();\n        if (Objects.nonNull(frameworkAnnotations) && frameworkAnnotations.getRequestBodyAnnotation().getAnnotationName().equals(annotationName)) {\n          if (Objects.nonNull(builder.getApiConfig().getRequestBodyAdvice()) && Objects.isNull(javaMethod.getTagByName(IGNORE_REQUEST_BODY_ADVICE))) {\n            String requestBodyAdvice=builder.getApiConfig().getRequestBodyAdvice().getClassName();\n            fullTypeName=requestBodyAdvice;\n            genericCanonicalName=requestBodyAdvice + \"<\" + genericCanonicalName+ \">\";\n          }\n        }\n      }\n      if (JavaClassValidateUtil.isCollection(fullTypeName) || JavaClassValidateUtil.isArray(fullTypeName)) {\n        if (JavaClassValidateUtil.isCollection(genericCanonicalName)) {\n          genericCanonicalName=genericCanonicalName + \"<T>\";\n        }\n      }\n      apiJavaParameter.setGenericCanonicalName(genericCanonicalName);\n      apiJavaParameter.setFullyQualifiedName(fullTypeName);\n      apiJavaParameterList.add(apiJavaParameter);\n    }\n    return apiJavaParameterList;\n  }\n  return new ArrayList<>(0);\n}"
    },
    "Old_Method": "default List<DocJavaParameter> getJavaParameterList(ProjectDocConfigBuilder builder,final DocJavaMethod docJavaMethod,FrameworkAnnotations frameworkAnnotations){\n  JavaMethod javaMethod=docJavaMethod.getJavaMethod();\n  Map<String,String> replacementMap=builder.getReplaceClassMap();\n  Map<String,String> paramTagMap=docJavaMethod.getParamTagMap();\n  List<JavaParameter> parameterList=javaMethod.getParameters();\n  if (parameterList.isEmpty()) {\n    return new ArrayList<>(0);\n  }\n  Set<String> ignoreSets=ignoreParamsSets(javaMethod);\n  List<DocJavaParameter> apiJavaParameterList=new ArrayList<>(parameterList.size());\n  Map<String,JavaType> actualTypesMap=docJavaMethod.getActualTypesMap();\n  for (  JavaParameter parameter : parameterList) {\n    String paramName=parameter.getName();\n    if (ignoreSets.contains(paramName)) {\n      continue;\n    }\n    DocJavaParameter apiJavaParameter=new DocJavaParameter();\n    apiJavaParameter.setJavaParameter(parameter);\n    JavaType javaType=parameter.getType();\n    if (Objects.nonNull(actualTypesMap) && Objects.nonNull(actualTypesMap.get(javaType.getCanonicalName()))) {\n      javaType=actualTypesMap.get(javaType.getCanonicalName());\n    }\n    apiJavaParameter.setTypeValue(javaType.getValue());\n    String genericCanonicalName=javaType.getGenericCanonicalName();\n    String fullTypeName=javaType.getFullyQualifiedName();\n    String commentClass=paramTagMap.get(paramName);\n    if (Objects.nonNull(commentClass) && commentClass.contains(IGNORE)) {\n      continue;\n    }\n    String rewriteClassName=getRewriteClassName(replacementMap,fullTypeName,commentClass);\n    if (JavaClassValidateUtil.isClassName(rewriteClassName)) {\n      genericCanonicalName=rewriteClassName;\n      fullTypeName=DocClassUtil.getSimpleName(rewriteClassName);\n    }\n    if (JavaClassValidateUtil.isMvcIgnoreParams(genericCanonicalName,builder.getApiConfig().getIgnoreRequestParams())) {\n      continue;\n    }\n    fullTypeName=DocClassUtil.rewriteRequestParam(fullTypeName);\n    genericCanonicalName=DocClassUtil.rewriteRequestParam(genericCanonicalName);\n    List<JavaAnnotation> annotations=parameter.getAnnotations();\n    apiJavaParameter.setAnnotations(annotations);\n    for (    JavaAnnotation annotation : annotations) {\n      String annotationName=annotation.getType().getValue();\n      if (Objects.nonNull(frameworkAnnotations) && frameworkAnnotations.getRequestBodyAnnotation().getAnnotationName().equals(annotationName)) {\n        if (Objects.nonNull(builder.getApiConfig().getRequestBodyAdvice()) && Objects.isNull(javaMethod.getTagByName(IGNORE_REQUEST_BODY_ADVICE))) {\n          String requestBodyAdvice=builder.getApiConfig().getRequestBodyAdvice().getClassName();\n          fullTypeName=requestBodyAdvice;\n          genericCanonicalName=requestBodyAdvice + \"<\" + genericCanonicalName+ \">\";\n        }\n      }\n    }\n    if (JavaClassValidateUtil.isCollection(fullTypeName) || JavaClassValidateUtil.isArray(fullTypeName)) {\n      if (JavaClassValidateUtil.isCollection(genericCanonicalName)) {\n        genericCanonicalName=genericCanonicalName + \"<T>\";\n      }\n    }\n    apiJavaParameter.setGenericCanonicalName(genericCanonicalName);\n    apiJavaParameter.setFullyQualifiedName(fullTypeName);\n    apiJavaParameterList.add(apiJavaParameter);\n  }\n  return apiJavaParameterList;\n}\n",
    "File_Path": "smart-doc/src/main/java/com/ly/doc/template/IBaseDocBuildTemplate.java",
    "Start": 6524,
    "Stop": 10565,
    "Project_Name": "data/projects/smart-doc",
    "Method_Name": "getJavaParameterList"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into a helper method",
                "Change_Diff": "- SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n...\n}\n);\n- SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n...\n}\n);\n+ SecurityContextUser securityContextAdminUser= createSecurityContextUser(\"1\", true);\n+ SecurityContextUser securityContextNonAdminUser= createSecurityContextUser(\"2\", false);",
                "Description": "The code to create a new SecurityContextUser is repeated twice with minor variations. This code can be extracted into a helper method that takes the necessary parameters and returns a new SecurityContextUser.",
                "Start": 20,
                "End": 38
            },
            {
                "Improvement": "Remove unnecessary variable declaration",
                "Change_Diff": "- ElideResponse<String> response=null;\n...\n- response=jsonApi.get(route,ownerUser,null);\n+ ElideResponse<String> response=jsonApi.get(route,ownerUser,null);",
                "Description": "The `response` variable is declared at the start of the function but not used until much later. It can be declared just before it is first used to improve readability and maintainability.",
                "Start": 5,
                "End": 39
            }
        ],
        "Final code": "public void asyncQueryModelAdminReadPermissions() throws IOException {\nString id=\"edc4a871-dff2-4054-804e-d80075c08959\";\nString query=\"test-query\";\ncom.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\nqueryObj.setId(id);\nqueryObj.setQuery(query);\nqueryObj.setQueryType(QueryType.JSONAPI_V1_0);\nqueryObj.setPrincipalName(\"owner-user\");\ndataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\nDataStoreTransaction tx=dataStore.beginTransaction();\ntx.createObject(queryObj,null);\ntx.commit(null);\ntx.close();\nEntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\nElide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\nelide.doScans();\nJsonApi jsonApi=new JsonApi(elide);\nUser ownerUser=new User(() -> \"owner-user\");\nSecurityContextUser securityContextAdminUser= createSecurityContextUser(\"1\", true);\nSecurityContextUser securityContextNonAdminUser= createSecurityContextUser(\"2\", false);\nString baseUrl=\"/\";\nRoute route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\nElideResponse<String> response=jsonApi.get(route,ownerUser,null);\nassertEquals(HttpStatus.SC_OK,response.getStatus());\nresponse=jsonApi.get(route,securityContextAdminUser,null);\nassertEquals(HttpStatus.SC_OK,response.getStatus());\nresponse=jsonApi.get(route,securityContextNonAdminUser,null);\nassertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n\nprivate SecurityContextUser createSecurityContextUser(String userId, boolean isInRole) {\nreturn new SecurityContextUser(new SecurityContext(){\n@Override public Principal getUserPrincipal(){\nreturn () -> userId;\n}\n@Override public boolean isUserInRole(String s){\nreturn isInRole;\n}\n@Override public boolean isSecure(){\nreturn false;\n}\n@Override public String getAuthenticationScheme(){\nreturn null;\n}\n}\n);\n}"
    },
    "Old_Method": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n  ElideResponse<String> response=null;\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\n  queryObj.setId(id);\n  queryObj.setQuery(query);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(\"owner-user\");\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"1\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return true;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"2\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return false;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n",
    "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java",
    "Start": 22492,
    "Stop": 25885,
    "Project_Name": "data/projects/elide",
    "Method_Name": "asyncQueryModelAdminReadPermissions"
}
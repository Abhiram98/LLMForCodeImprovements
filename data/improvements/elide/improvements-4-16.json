{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use Optional to avoid NullPointerException",
                "Change_Diff": "- QueryPlan mergedPlan=mergedPlans.get(0);\n+ Optional<QueryPlan> mergedPlan = mergedPlans.stream().findFirst();",
                "Description": "Instead of directly getting the first element of 'mergedPlans', use Optional's 'findFirst' to avoid NullPointerException when the list is empty.",
                "Start": 9,
                "End": 9
            },
            {
                "Improvement": "Refactor lengthy ternary operation into if-else statement",
                "Change_Diff": "- Query merged=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n+ Query merged;\n+ if (!mergedPlan.isPresent()) {\n+     merged = QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build();\n+ } else {\n+     merged = queryPlanTranslator.translate(mergedPlan.get());\n+ }",
                "Description": "The ternary operation is too lengthy and makes the code hard to read. It's better to refactor it into an if-else statement for better readability.",
                "Start": 11,
                "End": 11
            },
            {
                "Improvement": "Refactor repetitive code",
                "Change_Diff": "- if (table.getHints().contains(optimizer.negateHint())) {\n+ if (!optimizer.hint().matches(table.getHints())) {",
                "Description": "The repetitive calls to 'table.getHints().contains' can be replaced with a single call to 'optimizer.hint().matches'. This reduces redundancy and improves code readability.",
                "Start": 15,
                "End": 18
            }
        ],
        "Final code": "private Query expandMetricQueryPlans(Query query){\n  List<QueryPlan> toMerge=query.getMetricProjections().stream().map(projection -> projection.resolve(query)).collect(Collectors.toList());\n  List<QueryPlan> mergedPlans=merger.merge(toMerge);\n  if (mergedPlans.size() != 1) {\n    throw new UnsupportedOperationException(\"Incompatible metrics in client query.  Cannot merge \" + \"into a single query\");\n  }\n  Optional<QueryPlan> mergedPlan=mergedPlans.stream().findFirst();\n  QueryPlanTranslator queryPlanTranslator=new QueryPlanTranslator(query,metaDataStore,merger);\n  Query merged;\n  if (!mergedPlan.isPresent()) {\n    merged = QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build();\n  } else {\n    merged = queryPlanTranslator.translate(mergedPlan.get());\n  }\n  for (Optimizer optimizer : optimizers) {\n    SQLTable table=(SQLTable)query.getSource();\n    if (!optimizer.hint().matches(table.getHints())) {\n      continue;\n    }\n    if (optimizer.canOptimize(merged)) {\n      merged=optimizer.optimize(merged);\n    }\n  }\n  return merged;\n}"
    },
    "Old_Method": "/** \n * Transforms a client query into a potentially nested/complex query by expanding each metric into its respective query plan - and then merging the plans together into a consolidated query.\n * @param query The client query.\n * @return A query that reflects each metric's individual query plan.\n */\nprivate Query expandMetricQueryPlans(Query query){\n  List<QueryPlan> toMerge=query.getMetricProjections().stream().map(projection -> projection.resolve(query)).collect(Collectors.toList());\n  List<QueryPlan> mergedPlans=merger.merge(toMerge);\n  if (mergedPlans.size() != 1) {\n    throw new UnsupportedOperationException(\"Incompatible metrics in client query.  Cannot merge \" + \"into a single query\");\n  }\n  QueryPlan mergedPlan=mergedPlans.get(0);\n  QueryPlanTranslator queryPlanTranslator=new QueryPlanTranslator(query,metaDataStore,merger);\n  Query merged=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n  for (  Optimizer optimizer : optimizers) {\n    SQLTable table=(SQLTable)query.getSource();\n    if (table.getHints().contains(optimizer.negateHint())) {\n      continue;\n    }\n    if (!table.getHints().contains(optimizer.hint())) {\n      continue;\n    }\n    if (optimizer.canOptimize(merged)) {\n      merged=optimizer.optimize(merged);\n    }\n  }\n  return merged;\n}\n",
    "File_Path": "elide/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java",
    "Start": 16011,
    "Stop": 18007,
    "Project_Name": "data/projects/elide",
    "Method_Name": "expandMetricQueryPlans"
}
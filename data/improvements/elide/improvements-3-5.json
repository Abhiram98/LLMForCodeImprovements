{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Remove unnecessary null checks",
                "Change_Diff": "- if (error.getMessage() != null) {\n+ \n- if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n+ if (!error.getAttributes().isEmpty()) {",
                "Description": "The checks for null on error.getMessage() and error.getAttributes() are unnecessary because these methods will never return null. They might return an empty collection or string, but never null.",
                "Start": 5,
                "End": 8
            },
            {
                "Improvement": "Change to use optional to avoid null checks",
                "Change_Diff": "- if (value instanceof Source) {\n+ Optional.ofNullable(value).ifPresent(val -> {\n+ if (val instanceof Source) {\n- else if (value instanceof Map) {\n+ else if (val instanceof Map) {\n+ }\n+ });",
                "Description": "The checks for null on value can be avoided by using Optional. Optional is a container object which may or may not contain a non-null value.",
                "Start": 21,
                "End": 44
            }
        ],
        "Final code": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  jsonApiError.detail(error.getMessage());\n  if (!error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n    attribute(\"status\",meta,value -> {\n      jsonApiError.status(value.toString());\n      return true;\n    }\n);\n    attribute(\"code\",meta,value -> {\n      jsonApiError.code(value.toString());\n      return true;\n    }\n);\n    attribute(\"title\",meta,value -> {\n      jsonApiError.title(value.toString());\n      return true;\n    }\n);\n    attribute(\"source\",meta,value -> {\n      Optional.ofNullable(value).ifPresent(val -> {\n        if (val instanceof Source) {\n          jsonApiError.source(source);\n        }\n        else if (val instanceof Map) {\n          jsonApiError.source(toSource(map));\n        }\n      });\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      Optional.ofNullable(value).ifPresent(val -> {\n        if (val instanceof Links) {\n          jsonApiError.links(links);\n        }\n        else if (val instanceof Map) {\n          jsonApiError.links(toLinks(map));\n        }\n      });\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}"
    },
    "Old_Method": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n    attribute(\"status\",meta,value -> {\n      jsonApiError.status(value.toString());\n      return true;\n    }\n);\n    attribute(\"code\",meta,value -> {\n      jsonApiError.code(value.toString());\n      return true;\n    }\n);\n    attribute(\"title\",meta,value -> {\n      jsonApiError.title(value.toString());\n      return true;\n    }\n);\n    attribute(\"source\",meta,value -> {\n      if (value instanceof Source) {\n        jsonApiError.source(source);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.source(toSource(map));\n      }\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n",
    "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/jsonapi/DefaultJsonApiErrorMapper.java",
    "Start": 852,
    "Stop": 2692,
    "Project_Name": "data/projects/elide",
    "Method_Name": "toJsonApiError"
}
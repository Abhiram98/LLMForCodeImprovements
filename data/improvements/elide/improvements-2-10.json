{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Introduce constants for magic strings and values",
                "Change_Diff": "- String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n- String query=\"test-query\";\n- queryObj.setPrincipalName(\"owner-user\");\n- String baseUrl=\"/\";\n+ final String TEST_ID = \"edc4a871-dff2-4054-804e-d80075c08959\";\n+ final String TEST_QUERY = \"test-query\";\n+ final String TEST_PRINCIPAL_NAME = \"owner-user\";\n+ final String BASE_URL = \"/\";\n+ queryObj.setId(TEST_ID);\n+ queryObj.setQuery(TEST_QUERY);\n+ queryObj.setPrincipalName(TEST_PRINCIPAL_NAME);\n+ Route route=Route.builder().baseUrl(BASE_URL).path(\"/asyncQuery/\" + TEST_ID).apiVersion(NO_VERSION).build();",
                "Description": "The method uses string literals and magic values such as 'edc4a871-dff2-4054-804e-d80075c08959', 'test-query', 'owner-user', and '/'. These should be replaced with meaningful constant variables to improve readability and maintainability of the code.",
                "Start": 7,
                "End": 35
            },
            {
                "Improvement": "Extract repeated code into helper methods",
                "Change_Diff": "- SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){...});\n- SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){...});\n+ private SecurityContextUser createSecurityContextUser(String userPrincipal, boolean userRole){...}\n+ SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n+ SecurityContextUser securityContextNonAdminUser=createSecurityContextUser(\"2\", false);",
                "Description": "The creation of SecurityContextUser instances for admin and non-admin users are almost identical, with only the user principal and user role differing. Extracting this code into a helper method would reduce redundancy and improve maintainability.",
                "Start": 21,
                "End": 35
            }
        ],
        "Final code": "public void asyncQueryModelAdminReadPermissions() throws IOException {\n\n  final String TEST_ID = \"edc4a871-dff2-4054-804e-d80075c08959\";\n  final String TEST_QUERY = \"test-query\";\n  final String TEST_PRINCIPAL_NAME = \"owner-user\";\n  final String BASE_URL = \"/\";\n\n  ElideResponse<String> response=null;\n\n  AsyncQuery queryObj=new AsyncQuery();\n  queryObj.setId(TEST_ID);\n  queryObj.setQuery(TEST_QUERY);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(TEST_PRINCIPAL_NAME);\n\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n\n  elide.doScans();\n\n  JsonApi jsonApi=new JsonApi(elide);\n\n  User ownerUser=new User(() -> TEST_PRINCIPAL_NAME);\n\n  SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n  SecurityContextUser securityContextNonAdminUser=createSecurityContextUser(\"2\", false);\n\n  Route route=Route.builder().baseUrl(BASE_URL).path(\"/asyncQuery/\" + TEST_ID).apiVersion(NO_VERSION).build();\n\n  response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n\n}\n\nprivate SecurityContextUser createSecurityContextUser(String userPrincipal, boolean userRole) {\n  return new SecurityContextUser(new SecurityContext() {\n    @Override public Principal getUserPrincipal(){\n      return () -> userPrincipal;\n    }\n    @Override public boolean isUserInRole(String s){\n      return userRole;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  });\n}"
    },
    "Old_Method": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n  ElideResponse<String> response=null;\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\n  queryObj.setId(id);\n  queryObj.setQuery(query);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(\"owner-user\");\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"1\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return true;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"2\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return false;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n",
    "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java",
    "Start": 22492,
    "Stop": 25885,
    "Project_Name": "data/projects/elide",
    "Method_Name": "asyncQueryModelAdminReadPermissions"
}
{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Use switch statement instead of multiple if-else statements",
            "Change_Diff": "- if (lowerCasePath.endsWith(\"db/variables.hjson\")) {\n-   return ConfigFile.ConfigFileType.VARIABLE;\n- }\n- else if (lowerCasePath.endsWith(\"models/variables.hjson\")) {\n-   return ConfigFile.ConfigFileType.VARIABLE;\n- }\n- else if (lowerCasePath.equals(\"models/security.hjson\")) {\n-   return ConfigFile.ConfigFileType.SECURITY;\n- }\n- else if (DB_FILE.matcher(lowerCasePath).matches()) {\n-   return ConfigFile.ConfigFileType.DATABASE;\n- }\n- else if (TABLE_FILE.matcher(lowerCasePath).matches()) {\n-   return ConfigFile.ConfigFileType.TABLE;\n- }\n- else if (NAME_SPACE_FILE.matcher(lowerCasePath).matches()) {\n-   return ConfigFile.ConfigFileType.NAMESPACE;\n- }\n- else {\n-   return ConfigFile.ConfigFileType.UNKNOWN;\n- }\n+ return switch (lowerCasePath) {\n+   case \"db/variables.hjson\", \"models/variables.hjson\" -> ConfigFile.ConfigFileType.VARIABLE;\n+   case \"models/security.hjson\" -> ConfigFile.ConfigFileType.SECURITY;\n+   default -> {\n+       if (DB_FILE.matcher(lowerCasePath).matches()) {\n+           return ConfigFile.ConfigFileType.DATABASE;\n+       } else if (TABLE_FILE.matcher(lowerCasePath).matches()) {\n+           return ConfigFile.ConfigFileType.TABLE;\n+       } else if (NAME_SPACE_FILE.matcher(lowerCasePath).matches()) {\n+           return ConfigFile.ConfigFileType.NAMESPACE;\n+       } else {\n+           return ConfigFile.ConfigFileType.UNKNOWN;\n+       }\n+   }\n+ };",
            "Description": "Instead of using multiple if-else statements, use a switch statement. This makes the code more readable and maintainable. You can use the new switch expressions introduced in Java 12.",
            "Start": 3,
            "End": 17
        }],
        "Final code": "public static ConfigFile.ConfigFileType toType(String path){\n  String lowerCasePath=path.toLowerCase(Locale.ROOT);\n  return switch (lowerCasePath) {\n    case \"db/variables.hjson\", \"models/variables.hjson\" -> ConfigFile.ConfigFileType.VARIABLE;\n    case \"models/security.hjson\" -> ConfigFile.ConfigFileType.SECURITY;\n    default -> {\n        if (DB_FILE.matcher(lowerCasePath).matches()) {\n            return ConfigFile.ConfigFileType.DATABASE;\n        } else if (TABLE_FILE.matcher(lowerCasePath).matches()) {\n            return ConfigFile.ConfigFileType.TABLE;\n        } else if (NAME_SPACE_FILE.matcher(lowerCasePath).matches()) {\n            return ConfigFile.ConfigFileType.NAMESPACE;\n        } else {\n            return ConfigFile.ConfigFileType.UNKNOWN;\n        }\n    }\n  };\n}"
    },
    "Old_Method": "public static ConfigFile.ConfigFileType toType(String path){\n  String lowerCasePath=path.toLowerCase(Locale.ROOT);\n  if (lowerCasePath.endsWith(\"db/variables.hjson\")) {\n    return ConfigFile.ConfigFileType.VARIABLE;\n  }\n else   if (lowerCasePath.endsWith(\"models/variables.hjson\")) {\n    return ConfigFile.ConfigFileType.VARIABLE;\n  }\n else   if (lowerCasePath.equals(\"models/security.hjson\")) {\n    return ConfigFile.ConfigFileType.SECURITY;\n  }\n else   if (DB_FILE.matcher(lowerCasePath).matches()) {\n    return ConfigFile.ConfigFileType.DATABASE;\n  }\n else   if (TABLE_FILE.matcher(lowerCasePath).matches()) {\n    return ConfigFile.ConfigFileType.TABLE;\n  }\n else   if (NAME_SPACE_FILE.matcher(lowerCasePath).matches()) {\n    return ConfigFile.ConfigFileType.NAMESPACE;\n  }\n else {\n    return ConfigFile.ConfigFileType.UNKNOWN;\n  }\n}\n",
    "File_Path": "elide/elide-model-config/src/main/java/com/yahoo/elide/modelconfig/io/FileLoader.java",
    "Start": 6753,
    "Stop": 7690,
    "Project_Name": "data/projects/elide",
    "Method_Name": "toType"
}
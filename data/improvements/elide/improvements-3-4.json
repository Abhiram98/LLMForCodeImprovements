{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Avoid null check for error.getMessage()",
                "Change_Diff": "- if (error.getMessage() != null) {\n-    jsonApiError.detail(error.getMessage());\n+ jsonApiError.detail(error.getMessage());",
                "Description": "If the error object is not null then error.getMessage() will never be null. It is unnecessary to check it for null.",
                "Start": 4,
                "End": 6
            },
            {
                "Improvement": "Avoid null check and isEmpty() for error.getAttributes()",
                "Change_Diff": "- if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n-   Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n+ Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());",
                "Description": "If the error object is not null then error.getAttributes() will never be null and it is unnecessary to check it for null and empty. Convert it to a LinkedHashMap directly.",
                "Start": 7,
                "End": 9
            },
            {
                "Improvement": "Remove redundant else if checks",
                "Change_Diff": "- else if (value instanceof Map) {\n+ if (value instanceof Map) {",
                "Description": "The else if checks for 'value instanceof Map' are redundant and can be removed since the first if conditions 'value instanceof Source' and 'value instanceof Links' will always be false when 'value instanceof Map' is true.",
                "Start": 23,
                "End": 24
            }
        ],
        "Final code": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  jsonApiError.detail(error.getMessage());\n  Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n  attribute(\"id\",meta,value -> {\n    jsonApiError.id(value.toString());\n    return true;\n  }\n);\n  attribute(\"status\",meta,value -> {\n    jsonApiError.status(value.toString());\n    return true;\n  }\n);\n  attribute(\"code\",meta,value -> {\n    jsonApiError.code(value.toString());\n    return true;\n  }\n);\n  attribute(\"title\",meta,value -> {\n    jsonApiError.title(value.toString());\n    return true;\n  }\n);\n  attribute(\"source\",meta,value -> {\n    if (value instanceof Source) {\n      jsonApiError.source(source);\n    }\n    if (value instanceof Map) {\n      jsonApiError.source(toSource(map));\n    }\n    return true;\n  }\n);\n  attribute(\"links\",meta,value -> {\n    if (value instanceof Links) {\n      jsonApiError.links(links);\n    }\n    if (value instanceof Map) {\n      jsonApiError.links(toLinks(map));\n    }\n    return true;\n  }\n);\n  if (!meta.isEmpty()) {\n    jsonApiError.meta(meta);\n  }\n  return jsonApiError.build();\n}"
    },
    "Old_Method": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n    attribute(\"status\",meta,value -> {\n      jsonApiError.status(value.toString());\n      return true;\n    }\n);\n    attribute(\"code\",meta,value -> {\n      jsonApiError.code(value.toString());\n      return true;\n    }\n);\n    attribute(\"title\",meta,value -> {\n      jsonApiError.title(value.toString());\n      return true;\n    }\n);\n    attribute(\"source\",meta,value -> {\n      if (value instanceof Source) {\n        jsonApiError.source(source);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.source(toSource(map));\n      }\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n",
    "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/jsonapi/DefaultJsonApiErrorMapper.java",
    "Start": 852,
    "Stop": 2692,
    "Project_Name": "data/projects/elide",
    "Method_Name": "toJsonApiError"
}
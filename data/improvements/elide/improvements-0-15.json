{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract common string literals to constants",
                "Change_Diff": "- String relatedEntityTag=\"relatedEntity\";\n- String noReadEntityTag=\"noReadEntity\";\n- String noCreateEntityTag=\"noCreateEntity\";\n+ private static final String RELATED_ENTITY_TAG = \"relatedEntity\";\n+ private static final String NO_READ_ENTITY_TAG = \"noReadEntity\";\n+ private static final String NO_CREATE_ENTITY_TAG = \"noCreateEntity\";",
                "Description": "In multiple places within the code, the same string literals are used. These can be extracted to constants to avoid errors due to typos and to make the code easier to understand and maintain.",
                "Start": 8,
                "End": 55
            },
            {
                "Improvement": "Extract repeated URL suffixes to constants",
                "Change_Diff": "- if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) { ... } \n+ if (url.endsWith(RELATIONSHIP_TO_MANY_NO_UPDATE)) { ... }",
                "Description": "In the if-else blocks, the URL suffixes are repeatedly hard-coded. Extracting these into constants will improve readability and maintainability.",
                "Start": 16,
                "End": 55
            },
            {
                "Improvement": "Reduce duplication by extracting repeated code to a method",
                "Change_Diff": "- assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n- assertNull(path.getPost());\n- assertNull(path.getDelete());\n- assertNull(path.getPatch());\n+ verifyPath(path, OperationType.GET, RELATED_ENTITY_TAG);",
                "Description": "The same null checks and tag verifications are repeated for different HTTP methods. This code could be extracted to a method that takes the HTTP method as a parameter.",
                "Start": 18,
                "End": 55
            }
        ],
        "Final code": "private static final String RELATED_ENTITY_TAG = \"relatedEntity\";\nprivate static final String NO_READ_ENTITY_TAG = \"noReadEntity\";\nprivate static final String NO_CREATE_ENTITY_TAG = \"noCreateEntity\";\nprivate static final String RELATIONSHIP_TO_MANY_NO_UPDATE = \"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\";\n\n...\n\nvoid verifyPath(Path path, OperationType type, String tag) {\n    assertNull(path.get(type.otherThan()));\n    assertTrue(path.get(type).getTags().contains(tag));\n}\n\n@Test void testRelationshipFilterCrud() {\n    ...\n    testOpenApi.getPaths().forEach((url,path) -> {\n        if (url.endsWith(RELATIONSHIP_TO_MANY_NO_UPDATE)) {\n            verifyPath(path, OperationType.GET, RELATED_ENTITY_TAG);\n        } \n        ...\n    });\n}"
    },
    "Old_Method": "@Test void testRelationshipFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(RelatedEntity.class);\n  entityDictionary.bindEntity(RelationshipEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String relatedEntityTag=\"relatedEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noCreateEntityTag=\"noCreateEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n    }\n  }\n);\n}\n",
    "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
    "Start": 40820,
    "Stop": 45767,
    "Project_Name": "data/projects/elide",
    "Method_Name": "testRelationshipFilterCrud"
}
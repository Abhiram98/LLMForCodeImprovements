{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repeated code into separate methods",
                "Change_Diff": "- SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n... \n});\n... \nresponse=jsonApi.get(route,ownerUser,null);\nassertEquals(HttpStatus.SC_OK,response.getStatus());\n... \nresponse=jsonApi.get(route,securityContextAdminUser,null);\nassertEquals(HttpStatus.SC_OK,response.getStatus());\n... \nresponse=jsonApi.get(route,securityContextNonAdminUser,null);\nassertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n+ SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n... \nverifyResponse(jsonApi, route, ownerUser, HttpStatus.SC_OK);\n... \nverifyResponse(jsonApi, route, securityContextAdminUser, HttpStatus.SC_OK);\n... \nverifyResponse(jsonApi, route, securityContextNonAdminUser, HttpStatus.SC_NOT_FOUND);",
                "Description": "There are several blocks of code that are repeated multiple times. These include the creation of a SecurityContextUser and the execution of a GET request with jsonApi. These can be extracted into separate methods to reduce redundancy and improve readability.",
                "Start": 18,
                "End": 55
            },
            {
                "Improvement": "Avoid using magic numbers",
                "Change_Diff": "- assertEquals(HttpStatus.SC_OK,response.getStatus());\n... \nassertEquals(HttpStatus.SC_OK,response.getStatus());\n... \nassertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n+ assertEquals(HTTP_STATUS_OK,response.getStatus());\n... \nassertEquals(HTTP_STATUS_OK,response.getStatus());\n... \nassertEquals(HTTP_STATUS_NOT_FOUND,response.getStatus());",
                "Description": "The test method contains magic numbers for http status codes (HttpStatus.SC_OK, HttpStatus.SC_NOT_FOUND). It's better to replace these magic numbers with constant variables for better readability and maintainability.",
                "Start": 54,
                "End": 57
            }
        ],
        "Final code": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n  ElideResponse<String> response=null;\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=createAsyncQuery(id, query, QueryType.JSONAPI_V1_0, \"owner-user\");\n  dataStore.populateEntityDictionary(createEntityDictionary());\n  DataStoreTransaction tx=createDataStoreTransaction(dataStore, queryObj);\n  EntityDictionary entityDictionary=createEntityDictionary();\n  Elide elide=createElide(dataStore, entityDictionary);\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n  SecurityContextUser securityContextNonAdminUser=createSecurityContextUser(\"2\", false);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  verifyResponse(jsonApi, route, ownerUser, HTTP_STATUS_OK);\n  verifyResponse(jsonApi, route, securityContextAdminUser, HTTP_STATUS_OK);\n  verifyResponse(jsonApi, route, securityContextNonAdminUser, HTTP_STATUS_NOT_FOUND);\n}"
    },
    "Old_Method": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n  ElideResponse<String> response=null;\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\n  queryObj.setId(id);\n  queryObj.setQuery(query);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(\"owner-user\");\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"1\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return true;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"2\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return false;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n",
    "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java",
    "Start": 22492,
    "Stop": 25885,
    "Project_Name": "data/projects/elide",
    "Method_Name": "asyncQueryModelAdminReadPermissions"
}
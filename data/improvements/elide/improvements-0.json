{
    "Method_Improvements": [{
        "Improvements": [
            {
                "Improvement": "Extract common code into a method",
                "Change_Diff": "- assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n+ assertContainsTag(path, relatedEntityTag, HttpMethod.GET);",
                "Description": "Extract the common code of checking if the specified tag is present in the specified HTTP method and wrap it in a method called `assertContainsTag()`.",
                "Start": 25,
                "End": 32
            },
            {
                "Improvement": "Use switch statement instead of multiple if-else statements",
                "Change_Diff": "- if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n+ switch (getUrlIdentifier(url)) {\n+   case \"tomanynoupdate\":",
                "Description": "Replace the multiple if-else statements with a switch statement for better readability and maintainability.",
                "Start": 21,
                "End": 164
            }
        ],
        "Final code": "import org.springframework.http.HttpMethod;\n\n@Test\nvoid testRelationshipFilterCrud() {\n    EntityDictionary entityDictionary = EntityDictionary.builder().build();\n    entityDictionary.bindEntity(RelatedEntity.class);\n    entityDictionary.bindEntity(RelationshipEntity.class);\n    entityDictionary.bindEntity(NoReadEntity.class);\n    entityDictionary.bindEntity(NoCreateEntity.class);\n    Info info = new Info().title(\"Test Service\").version(NO_VERSION);\n    String relatedEntityTag = \"relatedEntity\";\n    String noReadEntityTag = \"noReadEntity\";\n    String noCreateEntityTag = \"noCreateEntity\";\n    OpenApiBuilder builder = new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n    OpenAPI testOpenApi = builder.build().info(info);\n\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\", relatedEntityTag, null, null, null, HttpMethod.GET);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\", relatedEntityTag, null, null, null, HttpMethod.GET);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\", null, relatedEntityTag, relatedEntityTag, relatedEntityTag, HttpMethod.POST);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\", null, null, null, relatedEntityTag, HttpMethod.PATCH);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\", relatedEntityTag, null, null, null, HttpMethod.GET);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\", relatedEntityTag, null, null, null, HttpMethod.GET);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\", null, null, relatedEntityTag, relatedEntityTag, HttpMethod.DELETE);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\", null, null, relatedEntityTag, relatedEntityTag, HttpMethod.DELETE);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/tomanynoupdate\", relatedEntityTag, null, null, null, HttpMethod.GET);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/toonenoupdate\", relatedEntityTag, null, null, null, HttpMethod.GET);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/tomanynoread\", null, null, relatedEntityTag, null, HttpMethod.POST);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/toonenoread\", null, null, relatedEntityTag, null, HttpMethod.POST);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/collectionenoread\", null, null, null, null, HttpMethod.POST);\n    assertPathTag(testOpenApi.getPaths(), \"relationshipEntity/{relationshipEntityId}/collectionnocreate\", relatedEntityTag, null, null, null, HttpMethod.GET);\n}\n\nprivate void assertPathTag(Map<String, PathItem> paths, String url, String tag1, String tag2, String tag3, String tag4, HttpMethod httpMethod) {\n    PathItem path = paths.get(url);\n    assertNotNull(path);\n\n    switch (getUrlIdentifier(url)) {\n        case \"tomanynoupdate\":\n        case \"toonenoupdate\":\n            assertContainsTag(path, tag1, httpMethod);\n            assertNull(path.getPost());\n            assertNull(path.getDelete());\n            assertNull(path.getPatch());\n            break;\n        case \"tomanynoread\":\n        case \"toonenoread\":\n            assertNull(path.getGet());\n            assertContainsTag(path, tag1, HttpMethod.POST);\n            assertContainsTag(path, tag2, HttpMethod.DELETE);\n            assertContainsTag(path, tag3, HttpMethod.PATCH);\n            break;\n        case \"collectionenoread\":\n            assertNull(path.getGet());\n            assertContainsTag(path, tag4, HttpMethod.POST);\n            break;\n        case \"collectionnocreate\":\n            assertContainsTag(path, tag3, HttpMethod.GET);\n            assertNull(path.getPost());\n            break;\n        default:\n            fail(\"Invalid URL: \" + url);\n            break;\n    }\n}\n\nprivate void assertContainsTag(PathItem path, String tag, HttpMethod httpMethod) {\n    if (path != null) {\n        assertNotNull(path.getOperationMap().get(httpMethod.toString().toLowerCase()));\n        assertTrue(path.getOperationMap().get(httpMethod.toString().toLowerCase()).getTags().contains(tag));\n    }\n}\n\nprivate String getUrlIdentifier(String url) {\n    return url.substring(url.lastIndexOf('/') + 1);\n}\n"
    }],
    "Old_Method": "@Test void testRelationshipFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(RelatedEntity.class);\n  entityDictionary.bindEntity(RelationshipEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String relatedEntityTag=\"relatedEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noCreateEntityTag=\"noCreateEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n    }\n  }\n);\n}\n",
    "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
    "Start": 40820,
    "Stop": 45767,
    "Project_Name": "data/projects/elide",
    "Method_Name": "testRelationshipFilterCrud"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Add null check for error object",
                "Change_Diff": "+ if (error == null) {\n+   throw new IllegalArgumentException(\"Error object cannot be null\");\n+ }",
                "Description": "It's important to check if the object passed as an argument is not null to avoid NullPointerException.",
                "Start": 2,
                "End": 2
            },
            {
                "Improvement": "Refactor repetitive code into a method",
                "Change_Diff": "- attribute(\"id\",meta,value -> {\n-   jsonApiError.id(value.toString());\n-   return true;\n- }\n);\n- attribute(\"status\",meta,value -> {\n-   jsonApiError.status(value.toString());\n-   return true;\n- }\n);\n- attribute(\"code\",meta,value -> {\n-   jsonApiError.code(value.toString());\n-   return true;\n- }\n);\n- attribute(\"title\",meta,value -> {\n-   jsonApiError.title(value.toString());\n-   return true;\n- }\n);\n- attribute(\"source\",meta,value -> {\n-   if (value instanceof Source) {\n-     jsonApiError.source(source);\n-   }\n-   else if (value instanceof Map) {\n-     jsonApiError.source(toSource(map));\n-   }\n-   return true;\n- }\n);\n- attribute(\"links\",meta,value -> {\n-   if (value instanceof Links) {\n-     jsonApiError.links(links);\n-   }\n-   else if (value instanceof Map) {\n-     jsonApiError.links(toLinks(map));\n-   }\n-   return true;\n- }\n);\n+ setAttribute(\"id\", meta, jsonApiError::id);\n+ setAttribute(\"status\", meta, jsonApiError::status);\n+ setAttribute(\"code\", meta, jsonApiError::code);\n+ setAttribute(\"title\", meta, jsonApiError::title);\n+ setAttribute(\"source\", meta, this::handleSource);\n+ setAttribute(\"links\", meta, this::handleLinks);",
                "Description": "There is a lot of repetitive code that checks attributes and sets them. This can be moved into a separate method to improve readability and maintainability of the code.",
                "Start": 7,
                "End": 48
            }
        ],
        "Final code": "@Override public JsonApiError toJsonApiError(ElideError error){\n  if (error == null) {\n    throw new IllegalArgumentException(\"Error object cannot be null\");\n  }\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    setAttribute(\"id\", meta, jsonApiError::id);\n    setAttribute(\"status\", meta, jsonApiError::status);\n    setAttribute(\"code\", meta, jsonApiError::code);\n    setAttribute(\"title\", meta, jsonApiError::title);\n    setAttribute(\"source\", meta, this::handleSource);\n    setAttribute(\"links\", meta, this::handleLinks);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n\nprivate void setAttribute(String attributeName, Map<String, Object> meta, Consumer<String> setterFunction) {\n  if (meta.containsKey(attributeName)) {\n    setterFunction.accept(meta.get(attributeName).toString());\n    meta.remove(attributeName);\n  }\n}\n\nprivate void handleSource(Map<String, Object> meta, Consumer<Source> setterFunction) {\n  if (meta.containsKey(\"source\")) {\n    Object value = meta.get(\"source\");\n    if (value instanceof Source) {\n      setterFunction.accept((Source) value);\n    } else if (value instanceof Map) {\n      setterFunction.accept(toSource((Map) value));\n    }\n    meta.remove(\"source\");\n  }\n}\n\nprivate void handleLinks(Map<String, Object> meta, Consumer<Links> setterFunction) {\n  if (meta.containsKey(\"links\")) {\n    Object value = meta.get(\"links\");\n    if (value instanceof Links) {\n      setterFunction.accept((Links) value);\n    } else if (value instanceof Map) {\n      setterFunction.accept(toLinks((Map) value));\n    }\n    meta.remove(\"links\");\n  }\n}"
    },
    "Old_Method": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n    attribute(\"status\",meta,value -> {\n      jsonApiError.status(value.toString());\n      return true;\n    }\n);\n    attribute(\"code\",meta,value -> {\n      jsonApiError.code(value.toString());\n      return true;\n    }\n);\n    attribute(\"title\",meta,value -> {\n      jsonApiError.title(value.toString());\n      return true;\n    }\n);\n    attribute(\"source\",meta,value -> {\n      if (value instanceof Source) {\n        jsonApiError.source(source);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.source(toSource(map));\n      }\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n",
    "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/jsonapi/DefaultJsonApiErrorMapper.java",
    "Start": 852,
    "Stop": 2692,
    "Project_Name": "data/projects/elide",
    "Method_Name": "toJsonApiError"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use final modifier for local variables and parameters",
                "Change_Diff": "- private Query expandMetricQueryPlans(Query query){\n+ private Query expandMetricQueryPlans(final Query query){\n- Query merged=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n+ final Query mergedInitial=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);",
                "Description": "The variables and parameters that are not modified once they are initialized can be declared as final. This would make your code more robust by creating an assurance that the variable won\u2019t get changed accidentally from other parts of the code.",
                "Start": 8,
                "End": 20
            },
            {
                "Improvement": "Combine conditional statements",
                "Change_Diff": "- if (table.getHints().contains(optimizer.negateHint())) {\n      continue;\n    }\n    if (!table.getHints().contains(optimizer.hint())) {\n      continue;\n    }\n+ if (table.getHints().contains(optimizer.negateHint()) || !table.getHints().contains(optimizer.hint())) {\n      continue;\n    }",
                "Description": "The two separate if statements checking the 'hints' can be combined into a single if statement using the '||' operator to make the code more concise and easy to read.",
                "Start": 15,
                "End": 19
            }
        ],
        "Final code": "private Query expandMetricQueryPlans(final Query query) {\n  final List<QueryPlan> toMerge=query.getMetricProjections().stream().map(projection -> projection.resolve(query)).collect(Collectors.toList());\n  final List<QueryPlan> mergedPlans=merger.merge(toMerge);\n  if (mergedPlans.size() != 1) {\n    throw new UnsupportedOperationException(\"Incompatible metrics in client query.  Cannot merge \" + \"into a single query\");\n  }\n  final QueryPlan mergedPlan=mergedPlans.get(0);\n  final QueryPlanTranslator queryPlanTranslator=new QueryPlanTranslator(query,metaDataStore,merger);\n  final Query mergedInitial=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n  Query merged = mergedInitial;\n  for (final Optimizer optimizer : optimizers) {\n    final SQLTable table=(SQLTable)query.getSource();\n    if (table.getHints().contains(optimizer.negateHint()) || !table.getHints().contains(optimizer.hint())) {\n      continue;\n    }\n    if (optimizer.canOptimize(merged)) {\n      merged=optimizer.optimize(merged);\n    }\n  }\n  return merged;\n}"
    },
    "Old_Method": "/** \n * Transforms a client query into a potentially nested/complex query by expanding each metric into its respective query plan - and then merging the plans together into a consolidated query.\n * @param query The client query.\n * @return A query that reflects each metric's individual query plan.\n */\nprivate Query expandMetricQueryPlans(Query query){\n  List<QueryPlan> toMerge=query.getMetricProjections().stream().map(projection -> projection.resolve(query)).collect(Collectors.toList());\n  List<QueryPlan> mergedPlans=merger.merge(toMerge);\n  if (mergedPlans.size() != 1) {\n    throw new UnsupportedOperationException(\"Incompatible metrics in client query.  Cannot merge \" + \"into a single query\");\n  }\n  QueryPlan mergedPlan=mergedPlans.get(0);\n  QueryPlanTranslator queryPlanTranslator=new QueryPlanTranslator(query,metaDataStore,merger);\n  Query merged=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n  for (  Optimizer optimizer : optimizers) {\n    SQLTable table=(SQLTable)query.getSource();\n    if (table.getHints().contains(optimizer.negateHint())) {\n      continue;\n    }\n    if (!table.getHints().contains(optimizer.hint())) {\n      continue;\n    }\n    if (optimizer.canOptimize(merged)) {\n      merged=optimizer.optimize(merged);\n    }\n  }\n  return merged;\n}\n",
    "File_Path": "elide/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java",
    "Start": 16011,
    "Stop": 18007,
    "Project_Name": "data/projects/elide",
    "Method_Name": "expandMetricQueryPlans"
}
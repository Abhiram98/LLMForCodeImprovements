{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract repetitive code to separate method",
                "Change_Diff": "- SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n-    @Override public Principal getUserPrincipal(){\n-      return () -> \"1\";\n-    }\n-    @Override public boolean isUserInRole(    String s){\n-      return true;\n-    }\n-    @Override public boolean isSecure(){\n-      return false;\n-    }\n-    @Override public String getAuthenticationScheme(){\n-      return null;\n-    }\n-  }\n-);\n- SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n-    @Override public Principal getUserPrincipal(){\n-      return () -> \"2\";\n-    }\n-    @Override public boolean isUserInRole(    String s){\n-      return false;\n-    }\n-    @Override public boolean isSecure(){\n-      return false;\n-    }\n-    @Override public String getAuthenticationScheme(){\n-      return null;\n-    }\n-  }\n- );\n+ SecurityContextUser securityContextAdminUser = createSecurityContextUser(\"1\", true);\n+ SecurityContextUser securityContextNonAdminUser = createSecurityContextUser(\"2\", false);",
                "Description": "The creation of `SecurityContextUser` is done in a repetitive manner. This code can be extracted to a separate method to improve readability and maintainability.",
                "Start": 22,
                "End": 35
            },
            {
                "Improvement": "Declare variables close to their usage",
                "Change_Diff": "- ElideResponse<String> response=null;\n+ // Removed declaration of `response` here",
                "Description": "The variable `response` is declared at the beginning of the method but is only used towards the end. It would be better to declare it close to where it is used.",
                "Start": 6,
                "End": 6
            }
        ],
        "Final code": "public void asyncQueryModelAdminReadPermissions() throws IOException {\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\n  queryObj.setId(id);\n  queryObj.setQuery(query);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(\"owner-user\");\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n  SecurityContextUser securityContextNonAdminUser=createSecurityContextUser(\"2\", false);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  ElideResponse<String> response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n\nprivate SecurityContextUser createSecurityContextUser(String principal, boolean isInRole) {\n  return new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> principal;\n    }\n    @Override public boolean isUserInRole(    String s){\n      return isInRole;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n}"
    },
    "Old_Method": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n  ElideResponse<String> response=null;\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\n  queryObj.setId(id);\n  queryObj.setQuery(query);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(\"owner-user\");\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"1\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return true;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"2\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return false;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n",
    "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java",
    "Start": 22492,
    "Stop": 25885,
    "Project_Name": "data/projects/elide",
    "Method_Name": "asyncQueryModelAdminReadPermissions"
}
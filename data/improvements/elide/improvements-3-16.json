{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Extract repetitive logic into a method",
            "Change_Diff": "- attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n...\n- attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n...\n+ addToJsonApiError(jsonApiError, \"id\", meta, Object::toString);\n...\n+ updateJsonApiErrorWithLinks(jsonApiError, \"links\", meta);",
            "Description": "The code inside each attribute call is repetitive, only differing in the attribute name and the method called on jsonApiError. This can be extracted into a separate method to reduce code duplication.",
            "Start": 10,
            "End": 44
        }],
        "Final code": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n\n    addToJsonApiError(jsonApiError, \"id\", meta, Object::toString);\n    addToJsonApiError(jsonApiError, \"status\", meta, Object::toString);\n    addToJsonApiError(jsonApiError, \"code\", meta, Object::toString);\n    addToJsonApiError(jsonApiError, \"title\", meta, Object::toString);\n    updateJsonApiErrorWithSource(jsonApiError, \"source\", meta);\n    updateJsonApiErrorWithLinks(jsonApiError, \"links\", meta);\n\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n\nprivate void addToJsonApiError(JsonApiErrorBuilder jsonApiError, String attribute, Map<String, Object> meta, Function<Object, String> valueToString) {\n  attribute(attribute, meta, value -> {\n    jsonApiError.attribute(valueToString.apply(value));\n    return true;\n  });\n}\n\nprivate void updateJsonApiErrorWithSource(JsonApiErrorBuilder jsonApiError, String attribute, Map<String, Object> meta) {\n  attribute(attribute, meta, value -> {\n    if (value instanceof Source) {\n      jsonApiError.source((Source)value);\n    } else if (value instanceof Map) {\n      jsonApiError.source(toSource((Map)value));\n    }\n    return true;\n  });\n}\n\nprivate void updateJsonApiErrorWithLinks(JsonApiErrorBuilder jsonApiError, String attribute, Map<String, Object> meta) {\n  attribute(attribute, meta, value -> {\n    if (value instanceof Links) {\n      jsonApiError.links((Links)value);\n    } else if (value instanceof Map) {\n      jsonApiError.links(toLinks((Map)value));\n    }\n    return true;\n  });\n}"
    },
    "Old_Method": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n    attribute(\"status\",meta,value -> {\n      jsonApiError.status(value.toString());\n      return true;\n    }\n);\n    attribute(\"code\",meta,value -> {\n      jsonApiError.code(value.toString());\n      return true;\n    }\n);\n    attribute(\"title\",meta,value -> {\n      jsonApiError.title(value.toString());\n      return true;\n    }\n);\n    attribute(\"source\",meta,value -> {\n      if (value instanceof Source) {\n        jsonApiError.source(source);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.source(toSource(map));\n      }\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n",
    "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/jsonapi/DefaultJsonApiErrorMapper.java",
    "Start": 852,
    "Stop": 2692,
    "Project_Name": "data/projects/elide",
    "Method_Name": "toJsonApiError"
}
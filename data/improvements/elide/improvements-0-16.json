{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor repeated code into helper method",
            "Change_Diff": "- if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n...\n}\nelse if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n...\n}",
            "Description": "There is a repeated code pattern where you check if the path ends with a certain url and then perform operations on the path. This can be refactored into a helper method to reduce code duplication and increase readability.",
            "Start": 14,
            "End": 71
        }],
        "Final code": "public void testRelationshipFilterCrud() {\n\tEntityDictionary entityDictionary = EntityDictionary.builder().build();\n\tentityDictionary.bindEntity(RelatedEntity.class);\n\tentityDictionary.bindEntity(RelationshipEntity.class);\n\tentityDictionary.bindEntity(NoReadEntity.class);\n\tentityDictionary.bindEntity(NoCreateEntity.class);\n\tInfo info = new Info().title(\"Test Service\").version(NO_VERSION);\n\tString relatedEntityTag = \"relatedEntity\";\n\tString noReadEntityTag = \"noReadEntity\";\n\tString noCreateEntityTag = \"noCreateEntity\";\n\tOpenApiBuilder builder = new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n\tOpenAPI testOpenApi = builder.build().info(info);\n\ttestOpenApi.getPaths().forEach((url, path) -> processPath(url, path, relatedEntityTag, noReadEntityTag, noCreateEntityTag));\n}\n\nprivate void processPath(String url, PathItem path, String relatedEntityTag, String noReadEntityTag, String noCreateEntityTag) {\n\tif (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n\t\tcheckPath(path, relatedEntityTag, null);\n\t} else if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n\t\tcheckPath(path, relatedEntityTag, null);\n\t} ...\n}\n\nprivate void checkPath(PathItem path, String getTag, String postTag) {\n\tassertTrue(path.getGet().getTags().contains(getTag));\n\tnullCheck(path, postTag);\n}\n\nprivate void nullCheck(PathItem path, String postTag) {\n\tif (postTag == null) {\n\t\tnullAssert(path.getPost());\n\t\tnullAssert(path.getDelete());\n\t\tnullAssert(path.getPatch());\n\t} else {\n\t\tassertTrue(path.getPost().getTags().contains(postTag));\n\t}\n}\n\nprivate void nullAssert(Operation operation) {\n\tnullAssert(operation);\n}"
    },
    "Old_Method": "@Test void testRelationshipFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(RelatedEntity.class);\n  entityDictionary.bindEntity(RelationshipEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String relatedEntityTag=\"relatedEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noCreateEntityTag=\"noCreateEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n    }\n  }\n);\n}\n",
    "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
    "Start": 40820,
    "Stop": 45767,
    "Project_Name": "data/projects/elide",
    "Method_Name": "testRelationshipFilterCrud"
}
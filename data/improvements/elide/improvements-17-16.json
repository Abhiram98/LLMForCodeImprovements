{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Replace exception variable 'e' with 'exception'",
            "Change_Diff": "- String body=e.getMessage();\n- if (e.getCause() instanceof JsonParseException) {\n- return buildResponse(e,errorContext);\n- return buildResponse(HttpStatus.SC_OK,e,errorContext);\n- return buildResponse(e,errorContext);\n- return buildResponse(HttpStatus.SC_OK,e,errorContext);\n- if (e.getConstraintViolations() != null) {\n- for (ConstraintViolation<?> constraintViolation : e.getConstraintViolations()) {\n+ String body=exception.getMessage();\n+ if (exception.getCause() instanceof JsonParseException) {\n+ return buildResponse(exception,errorContext);\n+ return buildResponse(HttpStatus.SC_OK,exception,errorContext);\n+ return buildResponse(exception,errorContext);\n+ return buildResponse(HttpStatus.SC_OK,exception,errorContext);\n+ if (exception.getConstraintViolations() != null) {\n+ for (ConstraintViolation<?> constraintViolation : exception.getConstraintViolations()) {",
            "Description": "The variable 'e' was not declared in this method. It is likely that 'exception' was intended to be used here. Replace all instances of 'e' with 'exception' to prevent runtime errors.",
            "Start": 4,
            "End": 36
        }],
        "Final code": "@Override protected ElideResponse<?> handleRuntimeException(RuntimeException exception,GraphQLErrorContext errorContext){\n  if (exception instanceof GraphQLException) {\n    String body=exception.getMessage();\n    return ElideResponse.status(HttpStatus.SC_OK).body(body);\n  }\n  if (exception instanceof InvalidEntityBodyException) {\n    if (exception.getCause() instanceof JsonParseException) {\n      return buildResponse(exception,errorContext);\n    }\n    return buildResponse(HttpStatus.SC_OK,exception,errorContext);\n  }\n  if (exception instanceof InvalidApiVersionException) {\n    return buildResponse(exception,errorContext);\n  }\n  if (exception instanceof HttpStatusException) {\n    return buildResponse(HttpStatus.SC_OK,exception,errorContext);\n  }\n  if (exception instanceof ConstraintViolationException) {\n    final GraphQLErrors.GraphQLErrorsBuilder errors=GraphQLErrors.builder();\n    if (exception.getConstraintViolations() != null) {\n      for (      ConstraintViolation<?> constraintViolation : exception.getConstraintViolations()) {\n        errors.error(error -> {\n          error.message(constraintViolation.getMessage());\n          error.extension(\"code\",constraintViolation.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName());\n          error.extension(\"type\",\"ConstraintViolation\");\n          final String propertyPathString=constraintViolation.getPropertyPath().toString();\n          if (!propertyPathString.isEmpty()) {\n            error.extension(\"property\",propertyPathString);\n          }\n        }\n);\n      }\n    }\n    return buildResponse(HttpStatus.SC_OK,errors.build());\n  }\n  log.error(\"Error or exception uncaught by Elide\",exception);\n  throw exception;\n}"
    },
    "Old_Method": "@Override protected ElideResponse<?> handleRuntimeException(RuntimeException exception,GraphQLErrorContext errorContext){\n  if (exception instanceof GraphQLException) {\n    String body=e.getMessage();\n    return ElideResponse.status(HttpStatus.SC_OK).body(body);\n  }\n  if (exception instanceof InvalidEntityBodyException) {\n    if (e.getCause() instanceof JsonParseException) {\n      return buildResponse(e,errorContext);\n    }\n    return buildResponse(HttpStatus.SC_OK,e,errorContext);\n  }\n  if (exception instanceof InvalidApiVersionException) {\n    return buildResponse(e,errorContext);\n  }\n  if (exception instanceof HttpStatusException) {\n    return buildResponse(HttpStatus.SC_OK,e,errorContext);\n  }\n  if (exception instanceof ConstraintViolationException) {\n    final GraphQLErrors.GraphQLErrorsBuilder errors=GraphQLErrors.builder();\n    if (e.getConstraintViolations() != null) {\n      for (      ConstraintViolation<?> constraintViolation : e.getConstraintViolations()) {\n        errors.error(error -> {\n          error.message(constraintViolation.getMessage());\n          error.extension(\"code\",constraintViolation.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName());\n          error.extension(\"type\",\"ConstraintViolation\");\n          final String propertyPathString=constraintViolation.getPropertyPath().toString();\n          if (!propertyPathString.isEmpty()) {\n            error.extension(\"property\",propertyPathString);\n          }\n        }\n);\n      }\n    }\n    return buildResponse(HttpStatus.SC_OK,errors.build());\n  }\n  log.error(\"Error or exception uncaught by Elide\",exception);\n  throw exception;\n}\n",
    "File_Path": "elide/elide-graphql/src/main/java/com/yahoo/elide/graphql/DefaultGraphQLExceptionHandler.java",
    "Start": 1763,
    "Stop": 3792,
    "Project_Name": "data/projects/elide",
    "Method_Name": "handleRuntimeException"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract redundant code into a separate method",
                "Change_Diff": "- if (table.getHints().contains(optimizer.negateHint())) {\n      continue;\n    }\n    if (!table.getHints().contains(optimizer.hint())) {\n      continue;\n    }\n+ if (!shouldRunOptimizer(table, optimizer)) {\n      continue;\n    }",
                "Description": "The code that checks whether an optimizer should be run is repeated twice. This code could be extracted into a separate method to improve readability and maintainability.",
                "Start": 18,
                "End": 22
            },
            {
                "Improvement": "Simplify ternary operation",
                "Change_Diff": "- Query merged=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n+ Query merged;\n+ if (mergedPlan == null) {\n+     merged = QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build();\n+ } else {\n+     merged = queryPlanTranslator.translate(mergedPlan);\n+ }",
                "Description": "The ternary operation used to set the value of 'merged' is a bit complex and reduces readability. This could be simplified by using an if-else statement instead.",
                "Start": 13,
                "End": 13
            }
        ],
        "Final code": "private Query expandMetricQueryPlans(Query query) {\n  List<QueryPlan> toMerge=query.getMetricProjections().stream().map(projection -> projection.resolve(query)).collect(Collectors.toList());\n  List<QueryPlan> mergedPlans=merger.merge(toMerge);\n  if (mergedPlans.size() != 1) {\n    throw new UnsupportedOperationException(\"Incompatible metrics in client query.  Cannot merge \" + \"into a single query\");\n  }\n  QueryPlan mergedPlan=mergedPlans.get(0);\n  QueryPlanTranslator queryPlanTranslator=new QueryPlanTranslator(query,metaDataStore,merger);\n  Query merged;\n  if (mergedPlan == null) {\n     merged = QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build();\n  } else {\n     merged = queryPlanTranslator.translate(mergedPlan);\n  }\n  for (Optimizer optimizer : optimizers) {\n    SQLTable table=(SQLTable)query.getSource();\n    if (!shouldRunOptimizer(table, optimizer)) {\n      continue;\n    }\n    if (optimizer.canOptimize(merged)) {\n      merged=optimizer.optimize(merged);\n    }\n  }\n  return merged;\n}\n\nprivate boolean shouldRunOptimizer(SQLTable table, Optimizer optimizer) {\n  return !table.getHints().contains(optimizer.negateHint()) && table.getHints().contains(optimizer.hint());\n}"
    },
    "Old_Method": "/** \n * Transforms a client query into a potentially nested/complex query by expanding each metric into its respective query plan - and then merging the plans together into a consolidated query.\n * @param query The client query.\n * @return A query that reflects each metric's individual query plan.\n */\nprivate Query expandMetricQueryPlans(Query query){\n  List<QueryPlan> toMerge=query.getMetricProjections().stream().map(projection -> projection.resolve(query)).collect(Collectors.toList());\n  List<QueryPlan> mergedPlans=merger.merge(toMerge);\n  if (mergedPlans.size() != 1) {\n    throw new UnsupportedOperationException(\"Incompatible metrics in client query.  Cannot merge \" + \"into a single query\");\n  }\n  QueryPlan mergedPlan=mergedPlans.get(0);\n  QueryPlanTranslator queryPlanTranslator=new QueryPlanTranslator(query,metaDataStore,merger);\n  Query merged=(mergedPlan == null) ? QueryPlanTranslator.addHiddenProjections(metaDataStore,query).build() : queryPlanTranslator.translate(mergedPlan);\n  for (  Optimizer optimizer : optimizers) {\n    SQLTable table=(SQLTable)query.getSource();\n    if (table.getHints().contains(optimizer.negateHint())) {\n      continue;\n    }\n    if (!table.getHints().contains(optimizer.hint())) {\n      continue;\n    }\n    if (optimizer.canOptimize(merged)) {\n      merged=optimizer.optimize(merged);\n    }\n  }\n  return merged;\n}\n",
    "File_Path": "elide/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java",
    "Start": 16011,
    "Stop": 18007,
    "Project_Name": "data/projects/elide",
    "Method_Name": "expandMetricQueryPlans"
}
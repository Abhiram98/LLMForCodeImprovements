{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract method",
                "Change_Diff": "- if (getAnalyticProperties().enableDynamicModelConfigAPI()) {\n-        checks.put(ConfigChecks.CAN_CREATE_CONFIG,ConfigChecks.CanCreate.class);\n-        checks.put(ConfigChecks.CAN_READ_CONFIG,ConfigChecks.CanRead.class);\n-        checks.put(ConfigChecks.CAN_DELETE_CONFIG,ConfigChecks.CanDelete.class);\n-        checks.put(ConfigChecks.CAN_UPDATE_CONFIG,ConfigChecks.CanNotUpdate.class);\n-      }\n+ addChecks(checks);",
                "Description": "The code to add checks to the EntityDictionary is repeated twice. This code could be extracted into a private method to avoid repetition.",
                "Start": 8,
                "End": 15
            },
            {
                "Improvement": "Replace anonymous classes with lambda",
                "Change_Diff": "- new Injector(){\n-        @Override public void inject(        Object entity){\n-          injector.inject(entity);\n-        }\n-        @Override public <T>T instantiate(        Class<T> cls){\n-          return injector.create(cls);\n-        }\n-      }\n+ (Object entity) -> injector.inject(entity),\n+ (Class<T> cls) -> injector.create(cls)",
                "Description": "The anonymous classes used to override methods in the EntityDictionary could be replaced with lambda expressions to make the code more readable.",
                "Start": 18,
                "End": 28
            },
            {
                "Improvement": "Use try-with-resources",
                "Change_Diff": "- configRoot=Paths.get(Files.createTempDirectory(\"test\").toFile().getAbsolutePath(),\"1\",\"2\",\"3\",\"4\",\"5\");\n+ try (Files.createTempDirectory(\"test\")) {\n+    configRoot = Paths.get(.toFile().getAbsolutePath(), \"1\", \"2\", \"3\", \"4\", \"5\");\n+ } catch (IOException e) {\n+    e.printStackTrace();\n+ }",
                "Description": "The Files.createTempDirectory() method could throw an IOException which is not currently being handled. It would be better to use a try-with-resources statement to ensure that the resource is closed at the end of the statement.",
                "Start": 2,
                "End": 2
            }
        ],
        "Final code": "@BeforeAll public void init() throws Exception {\n try (Files.createTempDirectory(\"test\")) {\n    configRoot = Paths.get(.toFile().getAbsolutePath(), \"1\", \"2\", \"3\", \"4\", \"5\");\n } catch (IOException e) {\n    e.printStackTrace();\n }\n Files.createDirectories(configRoot);\n settings=new ElideStandaloneTestSettings(){\n    @Override public EntityDictionary getEntityDictionary(    ServiceLocator injector,    ClassScanner scanner,    Optional<DynamicConfiguration> dynamicConfiguration,    Set<Type<?>> entitiesToExclude){\n      Map<String,Class<? extends Check>> checks=new HashMap<>();\n      addChecks(checks);\n      EntityDictionary dictionary=new EntityDictionary(checks,new HashMap<>(),\n      (Object entity) -> injector.inject(entity),\n      (Class<T> cls) -> injector.create(cls),\n      CoerceUtil::lookup,entitiesToExclude,scanner);\n      dynamicConfiguration.map(DynamicConfiguration::getRoles).orElseGet(Collections::emptySet).forEach(role -> dictionary.addRoleCheck(role,new Role.RoleMemberCheck(role)));\n      return dictionary;\n    }\n    @Override public ElideStandaloneAnalyticSettings getAnalyticProperties(){\n      return new ElideStandaloneAnalyticSettings(){\n        @Override public boolean enableDynamicModelConfig(){\n          return true;\n        }\n        @Override public boolean enableDynamicModelConfigAPI(){\n          return true;\n        }\n        @Override public String getDynamicConfigPath(){\n          return configRoot.toFile().getAbsolutePath();\n        }\n        @Override public boolean enableAggregationDataStore(){\n          return true;\n        }\n        @Override public boolean enableMetaDataStore(){\n          return true;\n        }\n      };\n    }\n  }\n  elide=new ElideStandalone(settings);\n  elide.start(false);\n}\n\nprivate void addChecks(Map<String, Class<? extends Check>> checks) {\n  if (getAnalyticProperties().enableDynamicModelConfigAPI()) {\n    checks.put(ConfigChecks.CAN_CREATE_CONFIG,ConfigChecks.CanCreate.class);\n    checks.put(ConfigChecks.CAN_READ_CONFIG,ConfigChecks.CanRead.class);\n    checks.put(ConfigChecks.CAN_DELETE_CONFIG,ConfigChecks.CanDelete.class);\n    checks.put(ConfigChecks.CAN_UPDATE_CONFIG,ConfigChecks.CanNotUpdate.class);\n  }\n}"
    },
    "Old_Method": "@BeforeAll public void init() throws Exception {\n  configRoot=Paths.get(Files.createTempDirectory(\"test\").toFile().getAbsolutePath(),\"1\",\"2\",\"3\",\"4\",\"5\");\n  Files.createDirectories(configRoot);\n  settings=new ElideStandaloneTestSettings(){\n    @Override public EntityDictionary getEntityDictionary(    ServiceLocator injector,    ClassScanner scanner,    Optional<DynamicConfiguration> dynamicConfiguration,    Set<Type<?>> entitiesToExclude){\n      Map<String,Class<? extends Check>> checks=new HashMap<>();\n      if (getAnalyticProperties().enableDynamicModelConfigAPI()) {\n        checks.put(ConfigChecks.CAN_CREATE_CONFIG,ConfigChecks.CanCreate.class);\n        checks.put(ConfigChecks.CAN_READ_CONFIG,ConfigChecks.CanRead.class);\n        checks.put(ConfigChecks.CAN_DELETE_CONFIG,ConfigChecks.CanDelete.class);\n        checks.put(ConfigChecks.CAN_UPDATE_CONFIG,ConfigChecks.CanNotUpdate.class);\n      }\n      EntityDictionary dictionary=new EntityDictionary(checks,new HashMap<>(),new Injector(){\n        @Override public void inject(        Object entity){\n          injector.inject(entity);\n        }\n        @Override public <T>T instantiate(        Class<T> cls){\n          return injector.create(cls);\n        }\n      }\n,CoerceUtil::lookup,entitiesToExclude,scanner);\n      dynamicConfiguration.map(DynamicConfiguration::getRoles).orElseGet(Collections::emptySet).forEach(role -> dictionary.addRoleCheck(role,new Role.RoleMemberCheck(role)));\n      return dictionary;\n    }\n    @Override public ElideStandaloneAnalyticSettings getAnalyticProperties(){\n      return new ElideStandaloneAnalyticSettings(){\n        @Override public boolean enableDynamicModelConfig(){\n          return true;\n        }\n        @Override public boolean enableDynamicModelConfigAPI(){\n          return true;\n        }\n        @Override public String getDynamicConfigPath(){\n          return configRoot.toFile().getAbsolutePath();\n        }\n        @Override public boolean enableAggregationDataStore(){\n          return true;\n        }\n        @Override public boolean enableMetaDataStore(){\n          return true;\n        }\n      }\n;\n    }\n  }\n;\n  elide=new ElideStandalone(settings);\n  elide.start(false);\n}\n",
    "File_Path": "elide/elide-standalone/src/test/java/example/ElideStandaloneConfigStoreTest.java",
    "Start": 2770,
    "Stop": 6011,
    "Project_Name": "data/projects/elide",
    "Method_Name": "init"
}
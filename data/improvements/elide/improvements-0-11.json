{
    "Method_Improvements": {
        "Improvements": [{
            "Improvement": "Refactor repetitive code into a function",
            "Change_Diff": "- if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n...<and so on for each if clause>... \n+ validatePath(url, path, \"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\", relatedEntityTag, Collections.singletonList(\"get\"));\n...<and so on for each if clause>...",
            "Description": "There is a lot of repetitive code in the if-else block that checks the url and then validates the tags and methods of the path. This code can be refactored into a function that takes the url suffix, expected tag, and expected methods as parameters.",
            "Start": 20,
            "End": 61
        }],
        "Final code": "    @Test void testRelationshipFilterCrud(){\n        EntityDictionary entityDictionary=EntityDictionary.builder().build();\n        entityDictionary.bindEntity(RelatedEntity.class);\n        entityDictionary.bindEntity(RelationshipEntity.class);\n        entityDictionary.bindEntity(NoReadEntity.class);\n        entityDictionary.bindEntity(NoCreateEntity.class);\n\n        Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n\n        String relatedEntityTag=\"relatedEntity\";\n        String noReadEntityTag=\"noReadEntity\";\n        String noCreateEntityTag=\"noCreateEntity\";\n\n        OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n        OpenAPI testOpenApi=builder.build().info(info);\n\n        testOpenApi.getPaths().forEach((url,path) -> {\n            validatePath(url, path, \"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\", relatedEntityTag, Collections.singletonList(\"get\"));\n            ...<and so on for each if clause>...\n        });\n    }\n\n    private void validatePath(String url, Path path, String urlSuffix, String tag, List<String> expectedMethods) {\n        if (url.endsWith(urlSuffix)) {\n            expectedMethods.forEach(method -> {\n                assertTrue(path.getMethod(method).getTags().contains(tag));\n            });\n\n            Arrays.asList(\"get\", \"post\", \"delete\", \"patch\").stream()\n                    .filter(method -> !expectedMethods.contains(method))\n                    .forEach(method -> {\n                        assertNull(path.getMethod(method));\n                    });\n        }\n    }"
    },
    "Old_Method": "@Test void testRelationshipFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(RelatedEntity.class);\n  entityDictionary.bindEntity(RelationshipEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String relatedEntityTag=\"relatedEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noCreateEntityTag=\"noCreateEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n    }\n  }\n);\n}\n",
    "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
    "Start": 40820,
    "Stop": 45767,
    "Project_Name": "data/projects/elide",
    "Method_Name": "testRelationshipFilterCrud"
}
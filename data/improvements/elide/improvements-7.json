{
    "Method_Improvements": [{
        "Improvements": [{
            "Improvement": "Refactor conditional statements in the testEntityFilterCrud() method",
            "Change_Diff": "- testOpenApi.getPaths().forEach((url,path) -> {\n-     if (url.endsWith(\"noCreateEntity\")) {\n-         assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n-         assertNull(path.getPost());\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noCreateEntity/{noCreateEntityId}\")) {\n-         assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n-         assertNull(path.getPost());\n-         assertTrue(path.getDelete().getTags().contains(noCreateEntityTag));\n-         assertTrue(path.getPatch().getTags().contains(noCreateEntityTag));\n-     }\n- else     if (url.endsWith(\"noReadEntity\")) {\n-         assertNull(path.getGet());\n-         assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noReadEntity/{noReadEntityId}\")) {\n-         assertNull(path.getGet());\n-         assertNull(path.getPost());\n-         assertTrue(path.getDelete().getTags().contains(noReadEntityTag));\n-         assertTrue(path.getPatch().getTags().contains(noReadEntityTag));\n-     }\n- else     if (url.endsWith(\"noUpdateEntity\")) {\n-         assertTrue(path.getGet().getTags().contains(noUpdateEntityTag));\n-         assertTrue(path.getPost().getTags().contains(noUpdateEntityTag));\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noUpdateEntity/{noUpdateEntityId}\")) {\n-         assertTrue(path.getGet().getTags().contains(noUpdateEntityTag));\n-         assertNull(path.getPost());\n-         assertTrue(path.getDelete().getTags().contains(noUpdateEntityTag));\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noDeleteEntity\")) {\n-         assertTrue(path.getGet().getTags().contains(noDeleteEntityTag));\n-         assertTrue(path.getPost().getTags().contains(noDeleteEntityTag));\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noDeleteEntity/{noDeleteEntityId}\")) {\n-         assertTrue(path.getGet().getTags().contains(noDeleteEntityTag));\n-         assertNull(path.getPost());\n-         assertNull(path.getDelete());\n-         assertTrue(path.getPatch().getTags().contains(noDeleteEntityTag));\n-     }\n- else     if (url.endsWith(\"/noReadIdEntity\")) {\n-         assertTrue(path.getGet().getTags().contains(noReadIdEntityTag));\n-         assertTrue(path.getPost().getTags().contains(noReadIdEntityTag));\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noReadIdEntity/{noReadIdEntityId}\")) {\n-         assertNull(path.getGet());\n-         assertNull(path.getPost());\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"/noUpdateIdEntity\")) {\n-         assertTrue(path.getGet().getTags().contains(noUpdateIdEntityTag));\n-         assertTrue(path.getPost().getTags().contains(noUpdateIdEntityTag));\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noUpdateIdEntity/{noUpdateIdEntityId}\")) {\n-         assertNull(path.getGet());\n-         assertNull(path.getPost());\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"/noDeleteIdEntity\")) {\n-         assertTrue(path.getGet().getTags().contains(noDeleteIdEntityTag));\n-         assertTrue(path.getPost().getTags().contains(noDeleteIdEntityTag));\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- else     if (url.endsWith(\"noDeleteIdEntity/{noDeleteIdEntityId}\")) {\n-         assertNull(path.getGet());\n-         assertNull(path.getPost());\n-         assertNull(path.getDelete());\n-         assertNull(path.getPatch());\n-     }\n- }\n-);\n",
            "Description": "The testEntityFilterCrud() method contains a series of nested if-else statements that can be refactored to improve readability.",
            "Start": 56,
            "End": 133
        }],
        "Final code": "@Test\nvoid testEntityFilterCrud() {\n  EntityDictionary entityDictionary = EntityDictionary.builder().build();\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoUpdateEntity.class);\n  entityDictionary.bindEntity(NoDeleteEntity.class);\n  entityDictionary.bindEntity(NoReadIdEntity.class);\n  entityDictionary.bindEntity(NoUpdateIdEntity.class);\n  entityDictionary.bindEntity(NoDeleteIdEntity.class);\n  Info info = new Info().title(\"Test Service\").version(NO_VERSION);\n  String noCreateEntityTag = \"noCreateEntity\";\n  String noReadEntityTag = \"noReadEntity\";\n  String noUpdateEntityTag = \"noUpdateEntity\";\n  String noDeleteEntityTag = \"noDeleteEntity\";\n  String noReadIdEntityTag = \"noReadIdEntity\";\n  String noUpdateIdEntityTag = \"noUpdateIdEntity\";\n  String noDeleteIdEntityTag = \"noDeleteIdEntity\";\n  OpenApiBuilder builder = new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi = builder.build().info(info);\n\n  testOpenApi.getPaths().forEach((url, path) -> {\n    if (url.endsWith(\"noCreateEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noCreateEntity/{noCreateEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(noCreateEntityTag));\n      assertTrue(path.getPatch().getTags().contains(noCreateEntityTag));\n    } else if (url.endsWith(\"noReadEntity\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noReadEntity/{noReadEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(noReadEntityTag));\n      assertTrue(path.getPatch().getTags().contains(noReadEntityTag));\n    } else if (url.endsWith(\"noUpdateEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noUpdateEntityTag));\n      assertTrue(path.getPost().getTags().contains(noUpdateEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noUpdateEntity/{noUpdateEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(noUpdateEntityTag));\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(noUpdateEntityTag));\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noDeleteEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noDeleteEntityTag));\n      assertTrue(path.getPost().getTags().contains(noDeleteEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noDeleteEntity/{noDeleteEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(noDeleteEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(noDeleteEntityTag));\n    } else if (url.endsWith(\"/noReadIdEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noReadIdEntityTag));\n      assertTrue(path.getPost().getTags().contains(noReadIdEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noReadIdEntity/{noReadIdEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"/noUpdateIdEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noUpdateIdEntityTag));\n      assertTrue(path.getPost().getTags().contains(noUpdateIdEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noUpdateIdEntity/{noUpdateIdEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"/noDeleteIdEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noDeleteIdEntityTag));\n      assertTrue(path.getPost().getTags().contains(noDeleteIdEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    } else if (url.endsWith(\"noDeleteIdEntity/{noDeleteIdEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n  });\n}"
    }],
    "Old_Method": "@Test void testEntityFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoUpdateEntity.class);\n  entityDictionary.bindEntity(NoDeleteEntity.class);\n  entityDictionary.bindEntity(NoReadIdEntity.class);\n  entityDictionary.bindEntity(NoUpdateIdEntity.class);\n  entityDictionary.bindEntity(NoDeleteIdEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String noCreateEntityTag=\"noCreateEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noUpdateEntityTag=\"noUpdateEntity\";\n  String noDeleteEntityTag=\"noDeleteEntity\";\n  String noReadIdEntityTag=\"noReadIdEntity\";\n  String noUpdateIdEntityTag=\"noUpdateIdEntity\";\n  String noDeleteIdEntityTag=\"noDeleteIdEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"noCreateEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noCreateEntity/{noCreateEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(noCreateEntityTag));\n      assertTrue(path.getPatch().getTags().contains(noCreateEntityTag));\n    }\n else     if (url.endsWith(\"noReadEntity\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noReadEntity/{noReadEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(noReadEntityTag));\n      assertTrue(path.getPatch().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"noUpdateEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noUpdateEntityTag));\n      assertTrue(path.getPost().getTags().contains(noUpdateEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noUpdateEntity/{noUpdateEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(noUpdateEntityTag));\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(noUpdateEntityTag));\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noDeleteEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noDeleteEntityTag));\n      assertTrue(path.getPost().getTags().contains(noDeleteEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noDeleteEntity/{noDeleteEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(noDeleteEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(noDeleteEntityTag));\n    }\n else     if (url.endsWith(\"/noReadIdEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noReadIdEntityTag));\n      assertTrue(path.getPost().getTags().contains(noReadIdEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noReadIdEntity/{noReadIdEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"/noUpdateIdEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noUpdateIdEntityTag));\n      assertTrue(path.getPost().getTags().contains(noUpdateIdEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noUpdateIdEntity/{noUpdateIdEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"/noDeleteIdEntity\")) {\n      assertTrue(path.getGet().getTags().contains(noDeleteIdEntityTag));\n      assertTrue(path.getPost().getTags().contains(noDeleteIdEntityTag));\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"noDeleteIdEntity/{noDeleteIdEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n  }\n);\n}\n",
    "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
    "Start": 34843,
    "Stop": 40814,
    "Project_Name": "data/projects/elide",
    "Method_Name": "testEntityFilterCrud"
}
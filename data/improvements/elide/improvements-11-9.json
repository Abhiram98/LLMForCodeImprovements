{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract common code to helper method",
                "Change_Diff": "- EntityDictionary dictionary = new EntityDictionary(checks, new HashMap<>(), new Injector() {...};\n+ EntityDictionary dictionary = createEntityDictionary(checks, injector, entitiesToExclude, scanner);",
                "Description": "The code for creating a new EntityDictionary instance is relatively complex and could be extracted to a helper method for better readability and reusability.",
                "Start": 5,
                "End": 26
            },
            {
                "Improvement": "Remove redundant call to `toFile().getAbsolutePath()`",
                "Change_Diff": "- Paths.get(Files.createTempDirectory(\"test\").toFile().getAbsolutePath(), \"1\", \"2\", \"3\", \"4\", \"5\");\n+ Paths.get(Files.createTempDirectory(\"test\").getAbsolutePath(), \"1\", \"2\", \"3\", \"4\", \"5\");",
                "Description": "Calling `toFile()` before `getAbsolutePath()` is unnecessary. The `getAbsolutePath()` method can be called directly on the `Path` object.",
                "Start": 1,
                "End": 1
            },
            {
                "Improvement": "Replace anonymous classes with lambda expressions",
                "Change_Diff": "- new Injector() {...}\n+ (Object entity) -> injector.inject(entity),\n- new ElideStandaloneAnalyticSettings() {...}\n+ () -> new Settings(configRoot.toFile().getAbsolutePath())",
                "Description": "The anonymous classes used for the `Injector` and `ElideStandaloneAnalyticSettings` could be replaced with lambda expressions for better readability.",
                "Start": 16,
                "End": 47
            }
        ],
        "Final code": "@BeforeAll\npublic void init() throws Exception {\n  configRoot = Paths.get(Files.createTempDirectory(\"test\").getAbsolutePath(),\"1\",\"2\",\"3\",\"4\",\"5\");\n  Files.createDirectories(configRoot);\n\n  settings = new ElideStandaloneTestSettings() {\n\n    @Override\n    public EntityDictionary getEntityDictionary(ServiceLocator injector, ClassScanner scanner, Optional<DynamicConfiguration> dynamicConfiguration, Set<Type<?>> entitiesToExclude) {\n      Map<String, Class<? extends Check>> checks = new HashMap<>();\n      if (getAnalyticProperties().enableDynamicModelConfigAPI()) {\n        addConfigChecks(checks);\n      }\n      EntityDictionary dictionary = createEntityDictionary(checks, injector, entitiesToExclude, scanner);\n      dynamicConfiguration.map(DynamicConfiguration::getRoles).orElseGet(Collections::emptySet).forEach(role -> dictionary.addRoleCheck(role, new Role.RoleMemberCheck(role)));\n      return dictionary;\n    }\n\n    @Override\n    public ElideStandaloneAnalyticSettings getAnalyticProperties() {\n      return () -> new Settings(configRoot.toFile().getAbsolutePath());\n    }\n  };\n\n  elide = new ElideStandalone(settings);\n  elide.start(false);\n}\n\nprivate void addConfigChecks(Map<String, Class<? extends Check>> checks) {\n  checks.put(ConfigChecks.CAN_CREATE_CONFIG, ConfigChecks.CanCreate.class);\n  checks.put(ConfigChecks.CAN_READ_CONFIG, ConfigChecks.CanRead.class);\n  checks.put(ConfigChecks.CAN_DELETE_CONFIG, ConfigChecks.CanDelete.class);\n  checks.put(ConfigChecks.CAN_UPDATE_CONFIG, ConfigChecks.CanNotUpdate.class);\n}\n\nprivate EntityDictionary createEntityDictionary(Map<String, Class<? extends Check>> checks, ServiceLocator injector, Set<Type<?>> entitiesToExclude, ClassScanner scanner) {\n  return new EntityDictionary(checks, new HashMap<>(), (Object entity) -> injector.inject(entity), (Class<T> cls) -> injector.create(cls), CoerceUtil::lookup, entitiesToExclude, scanner);\n}\n\nprivate class Settings implements ElideStandaloneAnalyticSettings {\n  private final String configPath;\n  public Settings(String configPath) {\n    this.configPath = configPath;\n  }\n\n  public boolean enableDynamicModelConfig() {\n    return true;\n  }\n\n  public boolean enableDynamicModelConfigAPI() {\n    return true;\n  }\n\n  public String getDynamicConfigPath() {\n    return configPath;\n  }\n\n  public boolean enableAggregationDataStore() {\n    return true;\n  }\n\n  public boolean enableMetaDataStore() {\n    return true;\n  }\n}\n"
    },
    "Old_Method": "@BeforeAll public void init() throws Exception {\n  configRoot=Paths.get(Files.createTempDirectory(\"test\").toFile().getAbsolutePath(),\"1\",\"2\",\"3\",\"4\",\"5\");\n  Files.createDirectories(configRoot);\n  settings=new ElideStandaloneTestSettings(){\n    @Override public EntityDictionary getEntityDictionary(    ServiceLocator injector,    ClassScanner scanner,    Optional<DynamicConfiguration> dynamicConfiguration,    Set<Type<?>> entitiesToExclude){\n      Map<String,Class<? extends Check>> checks=new HashMap<>();\n      if (getAnalyticProperties().enableDynamicModelConfigAPI()) {\n        checks.put(ConfigChecks.CAN_CREATE_CONFIG,ConfigChecks.CanCreate.class);\n        checks.put(ConfigChecks.CAN_READ_CONFIG,ConfigChecks.CanRead.class);\n        checks.put(ConfigChecks.CAN_DELETE_CONFIG,ConfigChecks.CanDelete.class);\n        checks.put(ConfigChecks.CAN_UPDATE_CONFIG,ConfigChecks.CanNotUpdate.class);\n      }\n      EntityDictionary dictionary=new EntityDictionary(checks,new HashMap<>(),new Injector(){\n        @Override public void inject(        Object entity){\n          injector.inject(entity);\n        }\n        @Override public <T>T instantiate(        Class<T> cls){\n          return injector.create(cls);\n        }\n      }\n,CoerceUtil::lookup,entitiesToExclude,scanner);\n      dynamicConfiguration.map(DynamicConfiguration::getRoles).orElseGet(Collections::emptySet).forEach(role -> dictionary.addRoleCheck(role,new Role.RoleMemberCheck(role)));\n      return dictionary;\n    }\n    @Override public ElideStandaloneAnalyticSettings getAnalyticProperties(){\n      return new ElideStandaloneAnalyticSettings(){\n        @Override public boolean enableDynamicModelConfig(){\n          return true;\n        }\n        @Override public boolean enableDynamicModelConfigAPI(){\n          return true;\n        }\n        @Override public String getDynamicConfigPath(){\n          return configRoot.toFile().getAbsolutePath();\n        }\n        @Override public boolean enableAggregationDataStore(){\n          return true;\n        }\n        @Override public boolean enableMetaDataStore(){\n          return true;\n        }\n      }\n;\n    }\n  }\n;\n  elide=new ElideStandalone(settings);\n  elide.start(false);\n}\n",
    "File_Path": "elide/elide-standalone/src/test/java/example/ElideStandaloneConfigStoreTest.java",
    "Start": 2770,
    "Stop": 6011,
    "Project_Name": "data/projects/elide",
    "Method_Name": "init"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Extract duplicate code to a method",
                "Change_Diff": "- SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){...}\n- SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){...}\n+ SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n+ SecurityContextUser securityContextNonAdminUser=createSecurityContextUser(\"2\", false);",
                "Description": "The creation of SecurityContextUser objects is repeated twice with different parameters. This could be extracted to a method to reduce redundancy and improve readability.",
                "Start": 32,
                "End": 65
            },
            {
                "Improvement": "Extract common code to setup",
                "Change_Diff": "- EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n- Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n- elide.doScans();",
                "Description": "The code to setup Elide and EntityDictionary is repeated. This could be moved to a @Before setup method to run before each test, reducing redundancy and improving readability.",
                "Start": 12,
                "End": 25
            }
        ],
        "Final code": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n    ElideResponse<String> response=null;\n    String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n    String query=\"test-query\";\n    com.yahoo.elide.async.models.AsyncQuery queryObj=createQueryObject(id, query);\n    populateDataStoreWithQueryObject(queryObj);\n    JsonApi jsonApi=createJsonApi();\n    User ownerUser=new User(() -> \"owner-user\");\n    SecurityContextUser securityContextAdminUser=createSecurityContextUser(\"1\", true);\n    SecurityContextUser securityContextNonAdminUser=createSecurityContextUser(\"2\", false);\n    String baseUrl=\"/\";\n    Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n    response=jsonApi.get(route,ownerUser,null);\n    assertEquals(HttpStatus.SC_OK,response.getStatus());\n    response=jsonApi.get(route,securityContextAdminUser,null);\n    assertEquals(HttpStatus.SC_OK,response.getStatus());\n    response=jsonApi.get(route,securityContextNonAdminUser,null);\n    assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}"
    },
    "Old_Method": "/** \n * Tests Read Permissions on AsyncQuery Model for Admin Role.\n * @throws IOException IOException\n */\n@Test public void asyncQueryModelAdminReadPermissions() throws IOException {\n  ElideResponse<String> response=null;\n  String id=\"edc4a871-dff2-4054-804e-d80075c08959\";\n  String query=\"test-query\";\n  com.yahoo.elide.async.models.AsyncQuery queryObj=new com.yahoo.elide.async.models.AsyncQuery();\n  queryObj.setId(id);\n  queryObj.setQuery(query);\n  queryObj.setQueryType(QueryType.JSONAPI_V1_0);\n  queryObj.setPrincipalName(\"owner-user\");\n  dataStore.populateEntityDictionary(EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build());\n  DataStoreTransaction tx=dataStore.beginTransaction();\n  tx.createObject(queryObj,null);\n  tx.commit(null);\n  tx.close();\n  EntityDictionary entityDictionary=EntityDictionary.builder().checks(AsyncIntegrationTestApplicationResourceConfig.MAPPINGS).build();\n  Elide elide=new Elide(ElideSettings.builder().dataStore(dataStore).entityDictionary(entityDictionary).auditLogger(new TestAuditLogger()).settings(JsonApiSettingsBuilder.withDefaults(entityDictionary)).build());\n  elide.doScans();\n  JsonApi jsonApi=new JsonApi(elide);\n  User ownerUser=new User(() -> \"owner-user\");\n  SecurityContextUser securityContextAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"1\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return true;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  SecurityContextUser securityContextNonAdminUser=new SecurityContextUser(new SecurityContext(){\n    @Override public Principal getUserPrincipal(){\n      return () -> \"2\";\n    }\n    @Override public boolean isUserInRole(    String s){\n      return false;\n    }\n    @Override public boolean isSecure(){\n      return false;\n    }\n    @Override public String getAuthenticationScheme(){\n      return null;\n    }\n  }\n);\n  String baseUrl=\"/\";\n  Route route=Route.builder().baseUrl(baseUrl).path(\"/asyncQuery/\" + id).apiVersion(NO_VERSION).build();\n  response=jsonApi.get(route,ownerUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextAdminUser,null);\n  assertEquals(HttpStatus.SC_OK,response.getStatus());\n  response=jsonApi.get(route,securityContextNonAdminUser,null);\n  assertEquals(HttpStatus.SC_NOT_FOUND,response.getStatus());\n}\n",
    "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/async/integration/tests/AsyncIT.java",
    "Start": 22492,
    "Stop": 25885,
    "Project_Name": "data/projects/elide",
    "Method_Name": "asyncQueryModelAdminReadPermissions"
}
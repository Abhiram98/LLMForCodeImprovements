{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use of Optional",
                "Change_Diff": "- if (error.getMessage() != null) {\n+ Optional.ofNullable(error.getMessage()).ifPresent(jsonApiError::detail);",
                "Description": "To avoid NullPointerExceptions, use Optional to check if the error message is present before using it.",
                "Start": 3,
                "End": 5
            },
            {
                "Improvement": "Simplify if condition",
                "Change_Diff": "- if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n+ if (Optional.ofNullable(error.getAttributes()).isPresent()) {",
                "Description": "To improve readability and reduce the complexity of the code, the condition can be simplified.",
                "Start": 6,
                "End": 39
            },
            {
                "Improvement": "Use method reference",
                "Change_Diff": "- attribute(\"id\",meta,value -> {\n+ attribute(\"id\",meta,jsonApiError::id);",
                "Description": "Use method reference for cleaner and more readable code.",
                "Start": 8,
                "End": 38
            }
        ],
        "Final code": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  Optional.ofNullable(error.getMessage()).ifPresent(jsonApiError::detail);\n  if (Optional.ofNullable(error.getAttributes()).isPresent()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,jsonApiError::id);\n    attribute(\"status\",meta,jsonApiError::status);\n    attribute(\"code\",meta,jsonApiError::code);\n    attribute(\"title\",meta,jsonApiError::title);\n    attribute(\"source\",meta,value -> {\n      if (value instanceof Source) {\n        jsonApiError.source(source);\n      }\n else if (value instanceof Map) {\n        jsonApiError.source(toSource(map));\n      }\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}"
    },
    "Old_Method": "@Override public JsonApiError toJsonApiError(ElideError error){\n  JsonApiErrorBuilder jsonApiError=JsonApiError.builder();\n  if (error.getMessage() != null) {\n    jsonApiError.detail(error.getMessage());\n  }\n  if (error.getAttributes() != null && !error.getAttributes().isEmpty()) {\n    Map<String,Object> meta=new LinkedHashMap<>(error.getAttributes());\n    attribute(\"id\",meta,value -> {\n      jsonApiError.id(value.toString());\n      return true;\n    }\n);\n    attribute(\"status\",meta,value -> {\n      jsonApiError.status(value.toString());\n      return true;\n    }\n);\n    attribute(\"code\",meta,value -> {\n      jsonApiError.code(value.toString());\n      return true;\n    }\n);\n    attribute(\"title\",meta,value -> {\n      jsonApiError.title(value.toString());\n      return true;\n    }\n);\n    attribute(\"source\",meta,value -> {\n      if (value instanceof Source) {\n        jsonApiError.source(source);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.source(toSource(map));\n      }\n      return true;\n    }\n);\n    attribute(\"links\",meta,value -> {\n      if (value instanceof Links) {\n        jsonApiError.links(links);\n      }\n else       if (value instanceof Map) {\n        jsonApiError.links(toLinks(map));\n      }\n      return true;\n    }\n);\n    if (!meta.isEmpty()) {\n      jsonApiError.meta(meta);\n    }\n  }\n  return jsonApiError.build();\n}\n",
    "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/jsonapi/DefaultJsonApiErrorMapper.java",
    "Start": 852,
    "Stop": 2692,
    "Project_Name": "data/projects/elide",
    "Method_Name": "toJsonApiError"
}
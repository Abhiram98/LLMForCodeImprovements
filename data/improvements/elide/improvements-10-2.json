{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Replace lambda with method reference",
                "Change_Diff": "- lineage.stream().forEach(item -> path.addParametersItem(item.getPathParameter()));\n+ lineage.stream().forEach(path::addParametersItem);",
                "Description": "Using method reference instead of lambda can make the code cleaner and easier to read.",
                "Start": 10,
                "End": 10
            },
            {
                "Improvement": "Extract repetitive code to separate method",
                "Change_Diff": "- ApiResponse okSingularResponse=new ApiResponse()...\n- ApiResponse okPluralResponse=new ApiResponse()...\n- ApiResponse okEmptyResponse=new ApiResponse()...\n+ ApiResponse okSingularResponse= createApiResponse(schemaName, false);\n+ ApiResponse okPluralResponse= createApiResponse(schemaName, true);\n+ ApiResponse okEmptyResponse= createEmptyApiResponse();",
                "Description": "The code block for creating ApiResponse objects is repeated multiple times. It's a good practice to extract this repetitive code into a separate method.",
                "Start": 12,
                "End": 31
            },
            {
                "Improvement": "Extract repetitive code to separate method",
                "Change_Diff": "- path.get(new Operation()...);\n- path.post(new Operation()...);\n- path.patch(new Operation()...);\n- path.delete(new Operation()...);\n+ path.get(createOperation(name, schemaName, \"Returns the relationship identifiers for \", \"200\", okPluralResponse));\n+ path.post(createOperation(name, schemaName, \"Adds items to the relationship \", \"201\", okPluralResponse));\n+ path.patch(createOperation(name, schemaName, \"Replaces the relationship \", \"204\", okEmptyResponse));\n+ path.delete(createOperation(name, schemaName, \"Deletes items from the relationship \", \"204\", okEmptyResponse));",
                "Description": "The code block for creating Operation objects is repeated several times. It's a good practice to extract this repetitive code into a separate method.",
                "Start": 24,
                "End": 31
            }
        ],
        "Final code": "public PathItem getRelationshipPath(){\n  if (lineage.isEmpty()) {\n    throw new IllegalStateException(\"Root collections don't have relationships\");\n  }\n  PathItem path=new PathItem();\n  lineage.stream().forEach(path::addParametersItem);\n  String schemaName=getSchemaName(type);\n  ApiResponse okSingularResponse= createApiResponse(schemaName, false);\n  ApiResponse okPluralResponse= createApiResponse(schemaName, true);\n  ApiResponse okEmptyResponse= createEmptyApiResponse();\n  Type<?> parentClass=lineage.peek().getType();\n  RelationshipType relationshipType=dictionary.getRelationshipType(parentClass,name);\n  if (relationshipType.isToMany()) {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(createOperation(name, schemaName, \"Returns the relationship identifiers for \", \"200\", okPluralResponse));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.post(createOperation(name, schemaName, \"Adds items to the relationship \", \"201\", okPluralResponse));\n      path.patch(createOperation(name, schemaName, \"Replaces the relationship \", \"204\", okEmptyResponse));\n      path.delete(createOperation(name, schemaName, \"Deletes items from the relationship \", \"204\", okEmptyResponse));\n    }\n  }\n else {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(createOperation(name, schemaName, \"Returns the relationship identifiers for \", \"200\", okSingularResponse));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.patch(createOperation(name, schemaName, \"Replaces the relationship \", \"204\", okEmptyResponse));\n    }\n  }\n  if (path.getGet() != null) {\n    for (    Parameter param : getFilterParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n    for (    Parameter param : getPageParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n  }\n  decorateGlobalResponses(path);\n  decorateGlobalParameters(path);\n  return path;\n}"
    },
    "Old_Method": "/** \n * Returns the OpenAPI path for a relationship URL.\n * @return the OpenAPI 'Path' for a relationship URL(/books/{bookId}/relationships/author).\n * @throws IllegalStateException for errors.\n */\npublic PathItem getRelationshipPath(){\n  if (lineage.isEmpty()) {\n    throw new IllegalStateException(\"Root collections don't have relationships\");\n  }\n  PathItem path=new PathItem();\n  lineage.stream().forEach(item -> path.addParametersItem(item.getPathParameter()));\n  String schemaName=getSchemaName(type);\n  ApiResponse okSingularResponse=new ApiResponse().description(\"Successful response\").content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Datum(new Relationship(schemaName)))));\n  ApiResponse okPluralResponse=new ApiResponse().description(\"Successful response\").content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))));\n  ApiResponse okEmptyResponse=new ApiResponse().description(\"Successful response\");\n  Type<?> parentClass=lineage.peek().getType();\n  RelationshipType relationshipType=dictionary.getRelationshipType(parentClass,name);\n  if (relationshipType.isToMany()) {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(new Operation().tags(getTags()).description(\"Returns the relationship identifiers for \" + name).responses(new ApiResponses().addApiResponse(\"200\",okPluralResponse)));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.post(new Operation().tags(getTags()).description(\"Adds items to the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"201\",okPluralResponse)));\n      path.patch(new Operation().tags(getTags()).description(\"Replaces the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n      path.delete(new Operation().tags(getTags()).description(\"Deletes items from the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n    }\n  }\n else {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(new Operation().tags(getTags()).description(\"Returns the relationship identifiers for \" + name).responses(new ApiResponses().addApiResponse(\"200\",okSingularResponse)));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.patch(new Operation().tags(getTags()).description(\"Replaces the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Datum(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n    }\n  }\n  if (path.getGet() != null) {\n    for (    Parameter param : getFilterParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n    for (    Parameter param : getPageParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n  }\n  decorateGlobalResponses(path);\n  decorateGlobalParameters(path);\n  return path;\n}\n",
    "File_Path": "elide/elide-swagger/src/main/java/com/yahoo/elide/swagger/OpenApiBuilder.java",
    "Start": 8065,
    "Stop": 12641,
    "Project_Name": "data/projects/elide",
    "Method_Name": "getRelationshipPath"
}
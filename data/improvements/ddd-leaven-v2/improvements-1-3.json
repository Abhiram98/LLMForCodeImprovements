{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Split long method into multiple shorter methods",
                "Change_Diff": "- @Test public void canNotPurchaseIfOfferChanged(){...}",
                "Description": "The current method is doing multiple operations which can be broken down into smaller methods. This would make the code more readable and maintainable.",
                "Start": 1,
                "End": 14
            },
            {
                "Improvement": "Assert that an exception is thrown",
                "Change_Diff": "- try {...} catch (OfferChangedExcpetion e) {...} \n+ assertThrows(OfferChangedExcpetion.class, () -> orderingService.confirm(orderId, new OrderDetailsCommand(), offer));",
                "Description": "Instead of using try-catch to check if an exception is thrown, use JUnit's assertThrows to make the code cleaner and more readable.",
                "Start": 11,
                "End": 14
            }
        ],
        "Final code": "@Test\npublic void canNotPurchaseIfOfferChanged(){\n    AggregateId orderId = createOrder();\n    addProductToOrder(orderId, \"p1\", 1);\n    addProductToOrder(orderId, \"p2\", 20);\n    Offer offer = calculateOffer(orderId);\n    addProductToOrder(orderId, \"p2\", 30);\n    assertThrows(OfferChangedExcpetion.class, () -> confirmOrder(orderId, offer));\n}\n\nprivate AggregateId createOrder() {\n    return orderingService.createOrder();\n}\n\nprivate void addProductToOrder(AggregateId orderId, String productId, int quantity) {\n    orderingService.addProduct(orderId, new AggregateId(productId), quantity);\n}\n\nprivate Offer calculateOffer(AggregateId orderId) {\n    return orderingService.calculateOffer(orderId);\n}\n\nprivate void confirmOrder(AggregateId orderId, Offer offer) {\n    orderingService.confirm(orderId, new OrderDetailsCommand(), offer);\n}"
    },
    "Old_Method": "@Test public void canNotPurchaseIfOfferChanged(){\n  AggregateId orderId=orderingService.createOrder();\n  orderingService.addProduct(orderId,new AggregateId(\"p1\"),1);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),30);\n  try {\n    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n    Assert.fail();\n  }\n catch (  OfferChangedExcpetion e) {\n  }\n}\n",
    "File_Path": "ddd-leaven-v2/src/test/java/pl/com/bottega/ecommerce/sales/acceptancetests/OrderingTest.java",
    "Start": 2542,
    "Stop": 3087,
    "Project_Name": "data/projects/ddd-leaven-v2",
    "Method_Name": "canNotPurchaseIfOfferChanged"
}
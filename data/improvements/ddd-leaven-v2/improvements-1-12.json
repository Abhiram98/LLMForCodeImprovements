{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use assertThrows instead of try/catch",
                "Change_Diff": "- try {\n-   orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n-   Assert.fail();\n- }\n- catch (  OfferChangedExcpetion e) {\n- }\n+ assertThrows(OfferChangedExcpetion.class, () -> {\n+   orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n+ });",
                "Description": "Instead of using try/catch to expect an exception, you can use JUnit's assertThrows. It makes the test more concise and clear about the expected exception.",
                "Start": 10,
                "End": 15
            },
            {
                "Improvement": "Add a message to the fail assertion",
                "Change_Diff": "- Assert.fail();\n+ Assert.fail(\"Expected an OfferChangedExcpetion to be thrown\");",
                "Description": "If you want to keep the fail assertion, it's better to add a message to it. This will give more information in case the test fails.",
                "Start": 12,
                "End": 12
            }
        ],
        "Final code": "@Test public void canNotPurchaseIfOfferChanged(){\n  AggregateId orderId=orderingService.createOrder();\n  orderingService.addProduct(orderId,new AggregateId(\"p1\"),1);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),30);\n  assertThrows(OfferChangedExcpetion.class, () -> {\n    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n  });\n}"
    },
    "Old_Method": "@Test public void canNotPurchaseIfOfferChanged(){\n  AggregateId orderId=orderingService.createOrder();\n  orderingService.addProduct(orderId,new AggregateId(\"p1\"),1);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),30);\n  try {\n    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n    Assert.fail();\n  }\n catch (  OfferChangedExcpetion e) {\n  }\n}\n",
    "File_Path": "ddd-leaven-v2/src/test/java/pl/com/bottega/ecommerce/sales/acceptancetests/OrderingTest.java",
    "Start": 2542,
    "Stop": 3087,
    "Project_Name": "data/projects/ddd-leaven-v2",
    "Method_Name": "canNotPurchaseIfOfferChanged"
}
{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use final for constants",
                "Change_Diff": "- AggregateId orderId=orderingService.createOrder();\n+ final AggregateId orderId=orderingService.createOrder();\n- AggregateId p1Id = new AggregateId(\"p1\");\n+ final AggregateId p1Id = new AggregateId(\"p1\");\n- AggregateId p2Id = new AggregateId(\"p2\");\n+ final AggregateId p2Id = new AggregateId(\"p2\");",
                "Description": "Using final for constant values improves readability and avoids unnecessary reassignments.",
                "Start": 3,
                "End": 5
            },
            {
                "Improvement": "Use assertThrows instead of try-catch",
                "Change_Diff": "- try {\n-    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n-    Assert.fail();\n-  }\n- catch (  OfferChangedExcpetion e) {\n-  }\n+ assertThrows(OfferChangedExcpetion.class, () -> orderingService.confirm(orderId, new OrderDetailsCommand(), offer));",
                "Description": "Using assertThrows for expected exceptions makes tests more readable and concise.",
                "Start": 8,
                "End": 14
            }
        ],
        "Final code": "@Test public void canNotPurchaseIfOfferChanged(){\n  final AggregateId orderId=orderingService.createOrder();\n  final AggregateId p1Id = new AggregateId(\"p1\");\n  orderingService.addProduct(orderId, p1Id, 1);\n  final AggregateId p2Id = new AggregateId(\"p2\");\n  orderingService.addProduct(orderId, p2Id, 20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId, p2Id, 30);\n  assertThrows(OfferChangedExcpetion.class, () -> orderingService.confirm(orderId, new OrderDetailsCommand(), offer));\n}"
    },
    "Old_Method": "@Test public void canNotPurchaseIfOfferChanged(){\n  AggregateId orderId=orderingService.createOrder();\n  orderingService.addProduct(orderId,new AggregateId(\"p1\"),1);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),30);\n  try {\n    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n    Assert.fail();\n  }\n catch (  OfferChangedExcpetion e) {\n  }\n}\n",
    "File_Path": "ddd-leaven-v2/src/test/java/pl/com/bottega/ecommerce/sales/acceptancetests/OrderingTest.java",
    "Start": 2542,
    "Stop": 3087,
    "Project_Name": "data/projects/ddd-leaven-v2",
    "Method_Name": "canNotPurchaseIfOfferChanged"
}
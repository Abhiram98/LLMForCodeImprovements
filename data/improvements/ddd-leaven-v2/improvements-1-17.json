{
    "Method_Improvements": {
        "Improvements": [
            {
                "Improvement": "Use descriptive variable names",
                "Change_Diff": "- new AggregateId(\"p1\"),1);\n- new AggregateId(\"p2\"),20);\n- new AggregateId(\"p2\"),30);\n+ new AggregateId(\"productOne\"),1);\n+ new AggregateId(\"productTwo\"),20);\n+ new AggregateId(\"productTwo\"),30);",
                "Description": "Names like 'p1' and 'p2' are not descriptive and do not give information about the variable's purpose. Use descriptive names to improve code readability.",
                "Start": 3,
                "End": 4
            },
            {
                "Improvement": "Use specific exception classes",
                "Change_Diff": "- OfferChangedExcpetion e) {\n+ OfferChangedException e) {",
                "Description": "Rather than catching the general 'Exception' class, catch the specific exceptions that you are expecting. This will make your error handling more robust.",
                "Start": 11,
                "End": 11
            },
            {
                "Improvement": "Add failure message to Assert.fail()",
                "Change_Diff": "- Assert.fail();\n+ Assert.fail(\"Order confirmation should have failed due to offer change.\");",
                "Description": "Adding a failure message to the Assert.fail() method will make it easier to understand why a test failed when looking at the test results.",
                "Start": 9,
                "End": 9
            }
        ],
        "Final code": "@Test public void canNotPurchaseIfOfferChanged(){\n  AggregateId orderId=orderingService.createOrder();\n  orderingService.addProduct(orderId,new AggregateId(\"productOne\"),1);\n  orderingService.addProduct(orderId,new AggregateId(\"productTwo\"),20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId,new AggregateId(\"productTwo\"),30);\n  try {\n    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n    Assert.fail(\"Order confirmation should have failed due to offer change.\");\n  }\n catch (OfferChangedException e) {\n  }\n}"
    },
    "Old_Method": "@Test public void canNotPurchaseIfOfferChanged(){\n  AggregateId orderId=orderingService.createOrder();\n  orderingService.addProduct(orderId,new AggregateId(\"p1\"),1);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),20);\n  Offer offer=orderingService.calculateOffer(orderId);\n  orderingService.addProduct(orderId,new AggregateId(\"p2\"),30);\n  try {\n    orderingService.confirm(orderId,new OrderDetailsCommand(),offer);\n    Assert.fail();\n  }\n catch (  OfferChangedExcpetion e) {\n  }\n}\n",
    "File_Path": "ddd-leaven-v2/src/test/java/pl/com/bottega/ecommerce/sales/acceptancetests/OrderingTest.java",
    "Start": 2542,
    "Stop": 3087,
    "Project_Name": "data/projects/ddd-leaven-v2",
    "Method_Name": "canNotPurchaseIfOfferChanged"
}
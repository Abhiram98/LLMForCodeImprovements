[
    {
        "Old_Method": "static @NotNull Set<Material> getFuels(){\n  Set<Material> fuels=Tag.LOGS.getValues();\n  fuels.addAll(Tag.PLANKS.getValues());\n  fuels.addAll(Tag.WOODEN_TRAPDOORS.getValues());\n  fuels.addAll(Tag.WOODEN_DOORS.getValues());\n  fuels.addAll(Tag.WOODEN_PRESSURE_PLATES.getValues());\n  fuels.addAll(Tag.WOODEN_BUTTONS.getValues());\n  fuels.addAll(Tag.WOODEN_SLABS.getValues());\n  fuels.addAll(Tag.WOODEN_STAIRS.getValues());\n  fuels.addAll(Tag.BANNERS.getValues());\n  fuels.addAll(Tag.SIGNS.getValues());\n  fuels.addAll(Tag.ITEMS_BOATS.getValues());\n  fuels.addAll(Tag.WOOL.getValues());\n  fuels.addAll(Tag.WOOL_CARPETS.getValues());\n  fuels.addAll(Tag.SAPLINGS.getValues());\n  fuels.addAll(MaterialTags.WOODEN_FENCES.getValues());\n  fuels.addAll(MaterialTags.FENCE_GATES.getValues());\n  fuels.addAll(MaterialTags.COALS.getValues());\n  fuels.add(Material.LAVA_BUCKET);\n  fuels.add(Material.COAL_BLOCK);\n  fuels.add(Material.BLAZE_ROD);\n  fuels.add(Material.LECTERN);\n  fuels.add(Material.NOTE_BLOCK);\n  fuels.add(Material.BOOKSHELF);\n  fuels.add(Material.JUKEBOX);\n  fuels.add(Material.CHEST);\n  fuels.add(Material.TRAPPED_CHEST);\n  fuels.add(Material.CRAFTING_TABLE);\n  fuels.add(Material.DAYLIGHT_DETECTOR);\n  fuels.add(Material.BOW);\n  fuels.add(Material.FISHING_ROD);\n  fuels.add(Material.LADDER);\n  fuels.add(Material.WOODEN_AXE);\n  fuels.add(Material.WOODEN_HOE);\n  fuels.add(Material.WOODEN_PICKAXE);\n  fuels.add(Material.WOODEN_SHOVEL);\n  fuels.add(Material.WOODEN_SWORD);\n  fuels.add(Material.STICK);\n  fuels.add(Material.BOWL);\n  fuels.add(Material.DRIED_KELP_BLOCK);\n  fuels.add(Material.CROSSBOW);\n  fuels.add(Material.BAMBOO);\n  fuels.add(Material.DEAD_BUSH);\n  fuels.add(Material.SCAFFOLDING);\n  fuels.add(Material.LOOM);\n  fuels.add(Material.BARREL);\n  fuels.add(Material.CARTOGRAPHY_TABLE);\n  fuels.add(Material.FLETCHING_TABLE);\n  fuels.add(Material.SMITHING_TABLE);\n  fuels.add(Material.COMPOSTER);\n  fuels.add(Material.AZALEA);\n  fuels.add(Material.FLOWERING_AZALEA);\n  fuels.add(Material.MANGROVE_ROOTS);\n  return fuels;\n}\n",
        "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/inventory/FurnaceInventoryMock.java",
        "Start": 2101,
        "Stop": 4198,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "getFuels"
    },
    {
        "Old_Method": "private void callRegisteredListener(@NotNull RegisteredListener registration,@NotNull Event event){\n  Preconditions.checkNotNull(registration,\"Listener cannot be null\");\n  Preconditions.checkNotNull(event,\"Event cannot be null\");\n  if (!registration.getPlugin().isEnabled()) {\n    return;\n  }\n  try {\n    registration.callEvent(event);\n  }\n catch (  EventException eventException) {\n    Throwable ex=eventException.getCause();\n    if (!(event instanceof ServerExceptionEvent)) {\n      String msg=\"Could not pass event \" + event.getEventName() + \" to \"+ registration.getPlugin().getDescription().getFullName();\n      callEvent(new ServerExceptionEvent(new ServerEventException(msg,ex,registration.getPlugin(),registration.getListener(),event)));\n    }\n    if (ex instanceof RuntimeException) {\n      throw r;\n    }\n else {\n      throw new EventHandlerException(ex);\n    }\n  }\n}\n",
        "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
        "Start": 18429,
        "Stop": 19391,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "callRegisteredListener"
    },
    {
        "Old_Method": "private void callRegisteredListener(@NotNull RegisteredListener registration,@NotNull Event event){\n  Preconditions.checkNotNull(registration,\"Listener cannot be null\");\n  Preconditions.checkNotNull(event,\"Event cannot be null\");\n  if (!registration.getPlugin().isEnabled()) {\n    return;\n  }\n  try {\n    registration.callEvent(event);\n  }\n catch (  EventException eventException) {\n    Throwable ex=eventException.getCause();\n    if (!(event instanceof ServerExceptionEvent)) {\n      String msg=\"Could not pass event \" + event.getEventName() + \" to \"+ registration.getPlugin().getDescription().getFullName();\n      callEvent(new ServerExceptionEvent(new ServerEventException(msg,ex,registration.getPlugin(),registration.getListener(),event)));\n    }\n    if (ex instanceof RuntimeException) {\n      throw r;\n    }\n else {\n      throw new EventHandlerException(ex);\n    }\n  }\n}\n",
        "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/plugin/PluginManagerMock.java",
        "Start": 18429,
        "Stop": 19391,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "callRegisteredListener"
    },
    {
        "Old_Method": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
        "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
        "Start": 17739,
        "Stop": 19060,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "registerMultipleTimerTasksAsynchronously"
    },
    {
        "Old_Method": "@Test void registerMultipleTimerTasksAsynchronously(){\n  final int toExecute=100;\n  final Thread mainThread=Thread.currentThread();\n  AtomicInteger executed=new AtomicInteger();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      for (int i=0; i < toExecute && !Thread.interrupted(); i++) {\n        scheduler.runTaskTimer(null,new Consumer<>(){\n          int executions=0;\n          @Override public void accept(          BukkitTask bukkitTask){\n            if (mainThread != Thread.currentThread()) {\n              notPrimaryThread.set(true);\n            }\n            executions++;\n            if (executions == toExecute) {\n              executed.incrementAndGet();\n              bukkitTask.cancel();\n            }\n          }\n        }\n,0,1);\n      }\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (executed.get() < toExecute) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertEquals(toExecute,executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
        "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
        "Start": 17739,
        "Stop": 19060,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "registerMultipleTimerTasksAsynchronously"
    },
    {
        "Old_Method": "@Override public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  if (!(obj instanceof LeatherArmorMeta)) {\n    return false;\n  }\n  return Objects.equals(color,other.getColor());\n}\n",
        "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/LeatherArmorMetaMock.java",
        "Start": 1196,
        "Stop": 1464,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "equals"
    },
    {
        "Old_Method": "@Override public boolean equals(Object obj){\n  if (this == obj) {\n    return true;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  if (!(obj instanceof LeatherArmorMeta)) {\n    return false;\n  }\n  return Objects.equals(color,other.getColor());\n}\n",
        "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/inventory/meta/LeatherArmorMetaMock.java",
        "Start": 1196,
        "Stop": 1464,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "equals"
    },
    {
        "Old_Method": "private <T extends Entity>@NotNull EntityMock mockEntity(@NotNull Location location,@NotNull Class<T> clazz,boolean randomizeData){\n  AsyncCatcher.catchOp(\"entity add\");\n  if (clazz == ArmorStand.class) {\n    return new ArmorStandMock(server,UUID.randomUUID());\n  }\n else   if (clazz == ExperienceOrb.class) {\n    return new ExperienceOrbMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Firework.class) {\n    return new FireworkMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Hanging.class) {\n    if (LeashHitch.class.isAssignableFrom(clazz)) {\n      throw new UnimplementedOperationException();\n    }\n    BlockFace spawnFace=BlockFace.SELF;\n    BlockFace[] faces=(ItemFrame.class.isAssignableFrom(clazz)) ? new BlockFace[]{BlockFace.NORTH,BlockFace.EAST,BlockFace.SOUTH,BlockFace.WEST,BlockFace.UP,BlockFace.DOWN} : new BlockFace[]{BlockFace.NORTH,BlockFace.EAST,BlockFace.SOUTH,BlockFace.WEST};\n    for (    BlockFace face : faces) {\n      Block block=this.getBlockAt(location.add(face.getModX(),face.getModY(),face.getModZ()));\n      if (!block.getType().isSolid() && (block.getType() != Material.REPEATER && block.getType() != Material.COMPARATOR))       continue;\n      boolean taken=false;\n      if (taken)       continue;\n      spawnFace=face;\n      break;\n    }\n    if (spawnFace == BlockFace.SELF) {\n      spawnFace=BlockFace.SOUTH;\n    }\n    spawnFace=spawnFace.getOppositeFace();\n    throw new UnimplementedOperationException();\n  }\n else   if (clazz == Item.class) {\n    throw new IllegalArgumentException(\"Items must be spawned using World#dropItem(...)\");\n  }\n else   if (clazz == FishHook.class) {\n    return new FishHookMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Player.class) {\n    throw new IllegalArgumentException(\"Player Entities cannot be spawned, use ServerMock#addPlayer(...)\");\n  }\n else   if (clazz == Zombie.class) {\n    return new ZombieMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Enderman.class) {\n    return new EndermanMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Horse.class) {\n    return new HorseMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Sheep.class) {\n    return new SheepMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Allay.class) {\n    return new AllayMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Warden.class) {\n    return new WardenMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Donkey.class) {\n    return new DonkeyMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Llama.class) {\n    return new LlamaMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Mule.class) {\n    return new MuleMock(server,UUID.randomUUID());\n  }\n else   if (clazz == SkeletonHorse.class) {\n    return new SkeletonHorseMock(server,UUID.randomUUID());\n  }\n else   if (clazz == ZombieHorse.class) {\n    return new ZombieHorseMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Cow.class) {\n    return new CowMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Chicken.class) {\n    return new ChickenMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Skeleton.class) {\n    return new SkeletonMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Stray.class) {\n    return new StrayMock(server,UUID.randomUUID());\n  }\n else   if (clazz == WitherSkeleton.class) {\n    return new WitherSkeletonMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Spider.class) {\n    return new SpiderMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Blaze.class) {\n    return new BlazeMock(server,UUID.randomUUID());\n  }\n else   if (clazz == CaveSpider.class) {\n    return new CaveSpiderMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Giant.class) {\n    return new GiantMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Axolotl.class) {\n    return new AxolotlMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Bat.class) {\n    return new BatMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Cat.class) {\n    return new CatMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Frog.class) {\n    return new FrogMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Fox.class) {\n    return new FoxMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Ghast.class) {\n    return new GhastMock(server,UUID.randomUUID());\n  }\n else   if (clazz == MushroomCow.class) {\n    return new MushroomCowMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Tadpole.class) {\n    return new TadpoleMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Cod.class) {\n    return new CodMock(server,UUID.randomUUID());\n  }\n else   if (clazz == TropicalFish.class) {\n    return new TropicalFishMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Salmon.class) {\n    return new SalmonMock(server,UUID.randomUUID());\n  }\n else   if (clazz == PufferFish.class) {\n    return new PufferFishMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Bee.class) {\n    return new BeeMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Creeper.class) {\n    return new CreeperMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Wolf.class) {\n    return new WolfMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Goat.class) {\n    return new GoatMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Egg.class) {\n    return new EggMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Pig.class) {\n    return new PigMock(server,UUID.randomUUID());\n  }\n else   if (clazz == ElderGuardian.class) {\n    return new ElderGuardianMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Guardian.class) {\n    return new GuardianMock(server,UUID.randomUUID());\n  }\n else   if (clazz == PolarBear.class) {\n    return new PolarBearMock(server,UUID.randomUUID());\n  }\n else   if (clazz == SmallFireball.class) {\n    return new SmallFireballMock(server,UUID.randomUUID());\n  }\n else   if (clazz == LargeFireball.class) {\n    return new LargeFireballMock(server,UUID.randomUUID());\n  }\n else   if (clazz == DragonFireball.class) {\n    return new DragonFireballMock(server,UUID.randomUUID());\n  }\n else   if (clazz == WitherSkull.class) {\n    return new WitherSkullMock(server,UUID.randomUUID());\n  }\n else   if (clazz == PoweredMinecart.class) {\n    return new PoweredMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Camel.class) {\n    return new CamelMock(server,UUID.randomUUID());\n  }\n else   if (clazz == CommandMinecart.class) {\n    return new CommandMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == ExplosiveMinecart.class) {\n    return new ExplosiveMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == HopperMinecart.class) {\n    return new HopperMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == SpawnerMinecart.class) {\n    return new SpawnerMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == RideableMinecart.class) {\n    return new RideableMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == StorageMinecart.class) {\n    return new StorageMinecartMock(server,UUID.randomUUID());\n  }\n else   if (clazz == AreaEffectCloud.class) {\n    return new AreaEffectCloudMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Boat.class) {\n    return new BoatMock(server,UUID.randomUUID());\n  }\n else   if (clazz == ChestBoat.class) {\n    return new ChestBoatMock(server,UUID.randomUUID());\n  }\n else   if (clazz == EnderPearl.class) {\n    return new EnderPearlMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Panda.class) {\n    return new PandaMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Rabbit.class) {\n    return new RabbitMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Slime.class) {\n    return new SlimeMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Ocelot.class) {\n    return new OcelotMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Parrot.class) {\n    return new ParrotMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Squid.class) {\n    return new SquidMock(server,UUID.randomUUID());\n  }\n else   if (clazz == GlowSquid.class) {\n    return new GlowSquidMock(server,UUID.randomUUID());\n  }\n else   if (clazz == LlamaSpit.class) {\n    return new LlamaSpitMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Dolphin.class) {\n    return new DolphinMock(server,UUID.randomUUID());\n  }\n else   if (clazz == MagmaCube.class) {\n    return new MagmaCubeMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Endermite.class) {\n    return new EndermiteMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Silverfish.class) {\n    return new SilverfishMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Turtle.class) {\n    return new TurtleMock(server,UUID.randomUUID());\n  }\n else   if (clazz == ThrownExpBottle.class) {\n    return new ThrownExpBottleMock(server,UUID.randomUUID());\n  }\n else   if (clazz == Snowball.class) {\n    return new SnowballMock(server,UUID.randomUUID());\n  }\n else   if (clazz == LeashHitch.class) {\n    return new LeashHitchMock(server,UUID.randomUUID());\n  }\n  throw new UnimplementedOperationException();\n}\n",
        "File_Path": "MockBukkit/src/main/java/be/seeseemelk/mockbukkit/WorldMock.java",
        "Start": 32182,
        "Stop": 41520,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "mockEntity"
    },
    {
        "Old_Method": "@Test void registerOneTasksAsynchronously(){\n  final Thread mainThread=Thread.currentThread();\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      scheduler.runTaskLater(null,bukkitTask -> {\n        if (mainThread != Thread.currentThread()) {\n          notPrimaryThread.set(true);\n        }\n        executed.set(true);\n      }\n,1);\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (!executed.get()) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertTrue(executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
        "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
        "Start": 14506,
        "Stop": 15448,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "registerOneTasksAsynchronously"
    },
    {
        "Old_Method": "@Test void registerOneTasksAsynchronously(){\n  final Thread mainThread=Thread.currentThread();\n  AtomicBoolean executed=new AtomicBoolean();\n  AtomicBoolean completed=new AtomicBoolean();\n  AtomicBoolean notPrimaryThread=new AtomicBoolean();\n  Thread thread=new Thread(() -> {\n    try {\n      scheduler.runTaskLater(null,bukkitTask -> {\n        if (mainThread != Thread.currentThread()) {\n          notPrimaryThread.set(true);\n        }\n        executed.set(true);\n      }\n,1);\n    }\n  finally {\n      completed.set(true);\n    }\n  }\n);\n  thread.start();\n  long startTime=System.currentTimeMillis();\n  while (!completed.get()) {\n    checkTimeout(startTime,thread);\n    scheduler.performOneTick();\n    Thread.yield();\n  }\n  while (!executed.get()) {\n    checkTimeout(startTime);\n    scheduler.performOneTick();\n  }\n  assertTrue(executed.get());\n  assertFalse(notPrimaryThread.get());\n}\n",
        "File_Path": "MockBukkit/src/test/java/be/seeseemelk/mockbukkit/scheduler/BukkitSchedulerMockTest.java",
        "Start": 14506,
        "Stop": 15448,
        "Project_Name": "data/projects/MockBukkit",
        "Method_Name": "registerOneTasksAsynchronously"
    }
]
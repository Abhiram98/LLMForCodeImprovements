[
    {
        "Old_Method": "@Override public void onLeaderboardScoresDownloaded(SteamLeaderboardHandle leaderboard,SteamLeaderboardEntriesHandle entries,int numEntries){\n  System.out.println(\"Leaderboard scores downloaded: handle=\" + leaderboard.toString() + \", entries=\"+ entries.toString()+ \", count=\"+ numEntries);\n  int[] details=new int[16];\n  for (int i=0; i < numEntries; i++) {\n    SteamLeaderboardEntry entry=new SteamLeaderboardEntry();\n    if (userStats.getDownloadedLeaderboardEntry(entries,i,entry,details)) {\n      int numDetails=entry.getNumDetails();\n      System.out.println(\"Leaderboard entry #\" + i + \": accountID=\"+ entry.getSteamIDUser().getAccountID()+ \", globalRank=\"+ entry.getGlobalRank()+ \", score=\"+ entry.getScore()+ \", numDetails=\"+ numDetails);\n      for (int detail=0; detail < numDetails; detail++) {\n        System.out.println(\"  ... detail #\" + detail + \"=\"+ details[detail]);\n      }\n      if (friends.requestUserInformation(entry.getSteamIDUser(),false)) {\n        System.out.println(\"  ... requested user information for entry\");\n      }\n else {\n        System.out.println(\"  ... user name is '\" + friends.getFriendPersonaName(entry.getSteamIDUser()) + \"'\");\n        int smallAvatar=friends.getSmallFriendAvatar(entry.getSteamIDUser());\n        if (smallAvatar != 0) {\n          int w=utils.getImageWidth(smallAvatar);\n          int h=utils.getImageHeight(smallAvatar);\n          System.out.println(\"  ... small avatar size: \" + w + \"x\"+ h+ \" pixels\");\n          ByteBuffer image=ByteBuffer.allocateDirect(w * h * 4);\n          try {\n            if (utils.getImageRGBA(smallAvatar,image)) {\n              System.out.println(\"  ... small avatar retrieve avatar image successful\");\n              int nonZeroes=w * h;\n              for (int y=0; y < h; y++) {\n                for (int x=0; x < w; x++) {\n                  if (image.getInt(y * w + x) == 0) {\n                    nonZeroes--;\n                  }\n                }\n              }\n              if (nonZeroes == 0) {\n                System.err.println(\"Something's wrong! Avatar image is empty!\");\n              }\n            }\n else {\n              System.out.println(\"  ... small avatar retrieve avatar image failed!\");\n            }\n          }\n catch (          SteamException e) {\n            e.printStackTrace();\n          }\n        }\n else {\n          System.out.println(\"  ... small avatar image not available!\");\n        }\n      }\n    }\n  }\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamClientAPITest.java",
        "Start": 3066,
        "Stop": 5589,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "onLeaderboardScoresDownloaded"
    },
    {
        "Old_Method": "@Override protected void registerInterfaces(){\n  System.out.println(\"Register user ...\");\n  user=new SteamUser(userCallback);\n  System.out.println(\"Register user stats callback ...\");\n  userStats=new SteamUserStats(userStatsCallback);\n  System.out.println(\"Register remote storage ...\");\n  remoteStorage=new SteamRemoteStorage(remoteStorageCallback);\n  System.out.println(\"Register UGC ...\");\n  ugc=new SteamUGC(ugcCallback);\n  System.out.println(\"Register Utils ...\");\n  utils=new SteamUtils(utilsCallback);\n  System.out.println(\"Register Apps ...\");\n  apps=new SteamApps();\n  System.out.println(\"Register Friends ...\");\n  friends=new SteamFriends(friendsCallback);\n  System.out.println(\"Local user account ID: \" + user.getSteamID().getAccountID());\n  System.out.println(\"Local user steam ID: \" + SteamID.getNativeHandle(user.getSteamID()));\n  System.out.println(\"Local user friends name: \" + friends.getPersonaName());\n  System.out.println(\"App ID: \" + utils.getAppID());\n  System.out.println(\"App build ID: \" + apps.getAppBuildId());\n  System.out.println(\"App owner: \" + apps.getAppOwner().getAccountID());\n  System.out.println(\"Current game language: \" + apps.getCurrentGameLanguage());\n  System.out.println(\"Available game languages: \" + apps.getAvailableGameLanguages());\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamClientAPITest.java",
        "Start": 13419,
        "Stop": 14725,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "registerInterfaces"
    },
    {
        "Old_Method": "@Override protected void processUpdate() throws SteamException {\n  if (setHandle == null || getNativeHandle(setHandle) == 0) {\n    return;\n  }\n  for (int i=0; i < numControllers; i++) {\n    SteamControllerHandle handle=controllerHandles[i];\n    controller.activateActionSet(handle,setHandle);\n    if (digitalActionHandle != null) {\n      controller.getDigitalActionData(handle,digitalActionHandle,digitalActionData);\n      if (digitalActionData.getActive() && digitalActionData.getState()) {\n        System.out.println(\"  digital action: \" + getNativeHandle(digitalActionHandle));\n      }\n    }\n    if (analogActionHandle != null) {\n      controller.getAnalogActionData(handle,analogActionHandle,analogActionData);\n      if (analogActionData.getActive()) {\n        float x=analogActionData.getX();\n        float y=analogActionData.getY();\n        SteamController.SourceMode mode=analogActionData.getMode();\n        if (Math.abs(x) > 0.0001f && Math.abs(y) > 0.001f) {\n          System.out.println(\"  analog action: \" + analogActionData.getX() + \", \"+ analogActionData.getY()+ \", \"+ mode.name());\n        }\n      }\n    }\n  }\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamControllerTest.java",
        "Start": 1216,
        "Stop": 3060,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "processUpdate"
    },
    {
        "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.equals(\"lobby list\")) {\n    listLobbies();\n  }\n else   if (input.startsWith(\"lobby request \")) {\n    String[] parameters=input.substring(\"lobby request \".length()).split(\" \");\n    int limit=Integer.parseInt(parameters[0]);\n    System.out.println(\"  - requesting up to \" + limit + \" lobbies\");\n    matchmaking.addRequestLobbyListResultCountFilter(limit);\n    matchmaking.addRequestLobbyListStringFilter(LobbyDataKey,LobbyDataValue,SteamMatchmaking.LobbyComparison.Equal);\n    matchmaking.requestLobbyList();\n  }\n else   if (input.startsWith(\"lobby create \")) {\n    int maxMembers=Integer.parseInt(input.substring(\"lobby create \".length()));\n    System.out.println(\"  creating lobby for \" + maxMembers + \" players.\");\n    matchmaking.createLobby(SteamMatchmaking.LobbyType.Public,maxMembers);\n  }\n else   if (input.startsWith(\"lobby join \")) {\n    long id=Long.parseLong(input.substring(\"lobby join \".length()),16);\n    if (lobbies.containsKey(id)) {\n      System.out.println(\"  joining lobby \" + Long.toHexString(id));\n      matchmaking.joinLobby(lobbies.get(id));\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby leave \")) {\n    long id=Long.parseLong(input.substring(\"lobby leave \".length()),16);\n    if (lobbies.containsKey(id)) {\n      System.out.println(\"  leaving lobby \" + Long.toHexString(id));\n      matchmaking.leaveLobby(lobbies.get(id));\n      lobbies.remove(id);\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby invite \")) {\n    String[] ids=input.substring(\"lobby invite \".length()).split(\" \");\n    if (ids.length == 2) {\n      long lobbyID=Long.parseLong(ids[0],16);\n      int playerAccountID=Integer.parseInt(ids[1]);\n      if (lobbies.containsKey(lobbyID)) {\n        System.out.println(\"  inviting player \" + playerAccountID + \" to lobby \"+ Long.toHexString(lobbyID));\n        if (friends.isFriendAccountID(playerAccountID)) {\n          matchmaking.inviteUserToLobby(lobbies.get(lobbyID),friends.getFriendSteamID(playerAccountID));\n        }\n else {\n          System.err.println(\"No player (friend) found: \" + playerAccountID);\n        }\n      }\n else {\n        System.err.println(\"No lobby found: \" + Long.toHexString(lobbyID));\n      }\n    }\n else {\n      System.err.println(\"Expecting: 'lobby invite <lobbyID> <userID>'\");\n    }\n  }\n else   if (input.startsWith(\"lobby data \")) {\n    long id=Long.parseLong(input.substring(\"lobby data \".length()),16);\n    if (lobbies.containsKey(id)) {\n      SteamID steamIDLobby=lobbies.get(id);\n      int count=matchmaking.getLobbyDataCount(steamIDLobby);\n      System.out.println(\"  \" + count + \" lobby data for \"+ Long.toHexString(id));\n      SteamMatchmakingKeyValuePair pair=new SteamMatchmakingKeyValuePair();\n      for (int i=0; i < count; i++) {\n        if (matchmaking.getLobbyDataByIndex(steamIDLobby,i,pair)) {\n          System.out.println(\"  - \" + pair.getKey() + \" : \"+ pair.getValue());\n        }\n else {\n          System.err.println(\"Error retrieving lobby data #\" + i);\n        }\n      }\n    }\n else {\n      System.err.println(\"No lobby found: \" + Long.toHexString(id));\n    }\n  }\n else   if (input.startsWith(\"lobby chat \")) {\n    String[] content=input.substring(\"lobby chat \".length()).split(\" \");\n    if (content.length == 2) {\n      long lobbyID=Long.parseLong(content[0],16);\n      String message=content[1];\n      if (lobbies.containsKey(lobbyID)) {\n        System.out.println(\"  sending message \\\"\" + message + \"\\\"\");\n        matchmaking.sendLobbyChatMsg(lobbies.get(lobbyID),message);\n      }\n else {\n        System.err.println(\"No lobby found: \" + Long.toHexString(lobbyID));\n      }\n    }\n else {\n      System.err.println(\"Expecting: 'lobby chat <lobbyID> <message>'\");\n    }\n  }\n else   if (input.startsWith(\"get lobby member data \")) {\n    String[] content=input.substring(\"get lobby member data \".length()).split(\" \");\n    if (content.length == 3) {\n      SteamID lobbyId=SteamID.createFromNativeHandle(Long.parseLong(content[0],16));\n      SteamID userId=SteamID.createFromNativeHandle(Long.parseLong(content[1]));\n      String key=content[2];\n      String value=matchmaking.getLobbyMemberData(lobbyId,userId,key);\n      System.out.println(String.format(\"Member data for userId:%s in lobbyId:%s for key:%s has value:%s\",userId.toString(),lobbyId.toString(),key,value));\n    }\n else {\n      System.out.println(\"Expecting: 'get lobby member data <lobbyId> <userId> <key>'\");\n    }\n  }\n else   if (input.startsWith(\"set lobby member data \")) {\n    String[] content=input.substring(\"set lobby member data \".length()).split(\" \");\n    if (content.length == 3) {\n      SteamID lobbyId=SteamID.createFromNativeHandle(Long.parseLong(content[0],16));\n      String key=content[1];\n      String value=content[2];\n      matchmaking.setLobbyMemberData(lobbyId,key,value);\n    }\n else {\n      System.out.println(\"Expecting: 'set lobby member data <lobbyId> <key> <value>'\");\n    }\n  }\n  friends.processInput(input);\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamMatchmakingTest.java",
        "Start": 6065,
        "Stop": 11085,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "processInput"
    },
    {
        "Old_Method": "void onRequestUGCDetails(long publishedFileID,int result,String title,String description,long fileHandle,long previewFileHandle,String fileName,boolean cachedData,int votesUp,int votesDown,long ownerID,int timeCreated,int timeUpdated){\n  SteamUGCDetails details=new SteamUGCDetails();\n  details.publishedFileID=publishedFileID;\n  details.result=result;\n  details.title=title;\n  details.description=description;\n  details.fileHandle=fileHandle;\n  details.previewFileHandle=previewFileHandle;\n  details.fileName=fileName;\n  details.votesUp=votesUp;\n  details.votesDown=votesDown;\n  details.ownerID=ownerID;\n  details.timeCreated=timeCreated;\n  details.timeUpdated=timeUpdated;\n  callback.onRequestUGCDetails(details,SteamResult.byValue(result));\n}\n",
        "File_Path": "steamworks4j/java-wrapper/src/main/java/com/codedisaster/steamworks/SteamUGCCallbackAdapter.java",
        "Start": 840,
        "Stop": 1654,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "onRequestUGCDetails"
    },
    {
        "Old_Method": "@Override public void onHTTPRequestDataReceived(SteamHTTPRequestHandle request,long contextValue,int offset,int bytesReceived){\n  System.out.println(\"HTTP request data received: offset=\" + offset + \", bytes=\"+ bytesReceived);\n  ByteBuffer bodyData=ByteBuffer.allocateDirect(bytesReceived);\n  try {\n    if (http.getHTTPStreamingResponseBodyData(request,offset,bodyData)) {\n      byte[] dest=new byte[bodyData.limit()];\n      bodyData.get(dest);\n      String result=new String(dest,Charset.defaultCharset());\n      System.out.println(\"=== begin result:\\n\" + result + \"\\n=== end result\");\n    }\n else {\n      System.out.println(\"- failed reading request data!\");\n    }\n  }\n catch (  SteamException e) {\n    e.printStackTrace();\n  }\n  System.out.println(\"- releasing request\");\n  http.releaseHTTPRequest(request);\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamHTTPTest.java",
        "Start": 1411,
        "Stop": 2260,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "onHTTPRequestDataReceived"
    },
    {
        "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"p2p send \")) {\n    String[] params=input.substring(\"p2p send \".length()).split(\" \");\n    int receiverID=Integer.parseInt(params[0]);\n    SteamID steamIDReceiver=null;\n    if (remoteUserIDs.containsKey(receiverID)) {\n      steamIDReceiver=remoteUserIDs.get(receiverID);\n    }\n else     if (friends.isFriendAccountID(receiverID)) {\n      steamIDReceiver=friends.getFriendSteamID(receiverID);\n    }\n else {\n      System.out.println(\"Error: unknown userID \" + receiverID + \" (no friend, not connected)\");\n    }\n    if (steamIDReceiver != null) {\n      packetSendBuffer.clear();\n      for (int i=1; i < params.length; i++) {\n        byte[] bytes=params[i].getBytes(messageCharset);\n        if (i > 1) {\n          packetSendBuffer.put((byte)0x20);\n        }\n        packetSendBuffer.put(bytes);\n      }\n      packetSendBuffer.flip();\n      networking.sendP2PPacket(steamIDReceiver,packetSendBuffer,SteamNetworking.P2PSend.Unreliable,defaultChannel);\n    }\n  }\n else   if (input.startsWith(\"p2p close \")) {\n    int remoteID=Integer.parseInt(input.substring(\"p2p close \".length()));\n    SteamID steamIDRemote=null;\n    if (remoteUserIDs.containsKey(remoteID)) {\n      steamIDRemote=remoteUserIDs.get(remoteID);\n    }\n else {\n      System.out.println(\"Error: unknown remote ID \" + remoteID + \" (not connected)\");\n    }\n    if (steamIDRemote != null) {\n      networking.closeP2PSessionWithUser(steamIDRemote);\n      unregisterRemoteSteamID(steamIDRemote);\n    }\n  }\n else   if (input.equals(\"p2p list\")) {\n    System.out.println(\"P2P connected users:\");\n    if (remoteUserIDs.size() == 0) {\n      System.out.println(\"  none\");\n    }\n    for (    SteamID steamIDUser : remoteUserIDs.values()) {\n      System.out.println(\"  \" + steamIDUser.getAccountID());\n    }\n  }\n else   if (input.startsWith(\"auth ticket \")) {\n    String authCmd=input.substring(\"auth ticket \".length());\n    if (authCmd.equals(\"get\")) {\n      getAuthTicket();\n    }\n else     if (authCmd.equals(\"cancel\")) {\n      cancelAuthTicket();\n    }\n else     if (authCmd.equals(\"send\")) {\n      broadcastAuthTicket();\n    }\n else     if (authCmd.equals(\"end\")) {\n      endAuthSession();\n    }\n  }\n  friends.processInput(input);\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamNetworkingTest.java",
        "Start": 5088,
        "Stop": 7338,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "processInput"
    },
    {
        "Old_Method": "@Override protected void processInput(String input) throws SteamException {\n  if (input.startsWith(\"stats global \")) {\n    String[] cmd=input.substring(\"stats global \".length()).split(\" \");\n    if (cmd.length > 0) {\n      if (cmd[0].equals(\"request\")) {\n        int days=0;\n        if (cmd.length > 1) {\n          days=Integer.parseInt(cmd[1]);\n        }\n        userStats.requestGlobalStats(days);\n      }\n else       if (cmd[0].equals(\"players\")) {\n        userStats.getNumberOfCurrentPlayers();\n      }\n else       if (cmd[0].equals(\"lget\") && cmd.length > 1) {\n        int days=0;\n        if (cmd.length > 2) {\n          days=Integer.parseInt(cmd[2]);\n        }\n        if (days == 0) {\n          long value=userStats.getGlobalStat(cmd[1],-1);\n          System.out.println(\"global stat (L) '\" + cmd[1] + \"' = \"+ value);\n        }\n else {\n          long[] data=new long[days];\n          int count=userStats.getGlobalStatHistory(cmd[1],data);\n          System.out.print(\"global stat history (L) for \" + count + \" of \"+ days+ \" days:\");\n          for (int i=0; i < count; i++) {\n            System.out.print(\" \" + Long.toString(data[i]));\n          }\n          System.out.println();\n        }\n      }\n else       if (cmd[0].equals(\"dget\") && cmd.length > 1) {\n        int days=0;\n        if (cmd.length > 2) {\n          days=Integer.parseInt(cmd[2]);\n        }\n        if (days == 0) {\n          double value=userStats.getGlobalStat(cmd[1],-1.0);\n          System.out.println(\"global stat (D) '\" + cmd[1] + \"' = \"+ value);\n        }\n else {\n          double[] data=new double[days];\n          int count=userStats.getGlobalStatHistory(cmd[1],data);\n          System.out.print(\"global stat history (D) for \" + count + \" of \"+ days+ \" days:\");\n          for (int i=0; i < count; i++) {\n            System.out.print(\" \" + Double.toString(data[i]));\n          }\n          System.out.println();\n        }\n      }\n    }\n  }\n else   if (input.equals(\"stats request\")) {\n    userStats.requestCurrentStats();\n  }\n else   if (input.equals(\"stats store\")) {\n    userStats.storeStats();\n  }\n else   if (input.startsWith(\"achievement set \")) {\n    String achievementName=input.substring(\"achievement set \".length());\n    System.out.println(\"- setting \" + achievementName + \" to 'achieved'\");\n    userStats.setAchievement(achievementName);\n  }\n else   if (input.startsWith(\"achievement clear \")) {\n    String achievementName=input.substring(\"achievement clear \".length());\n    System.out.println(\"- clearing \" + achievementName);\n    userStats.clearAchievement(achievementName);\n  }\n else   if (input.equals(\"file list\")) {\n    int numFiles=remoteStorage.getFileCount();\n    System.out.println(\"Num of files: \" + numFiles);\n    for (int i=0; i < numFiles; i++) {\n      int[] sizes=new int[1];\n      String file=remoteStorage.getFileNameAndSize(i,sizes);\n      boolean exists=remoteStorage.fileExists(file);\n      System.out.println(\"# \" + i + \" : name=\"+ file+ \", size=\"+ sizes[0]+ \", exists=\"+ (exists ? \"yes\" : \"no\"));\n    }\n  }\n else   if (input.startsWith(\"file write \")) {\n    String path=input.substring(\"file write \".length());\n    File file=new File(path);\n    try (FileInputStream in=new FileInputStream(file)){\n      SteamUGCFileWriteStreamHandle remoteFile=remoteStorage.fileWriteStreamOpen(path);\n      if (remoteFile != null) {\n        byte[] bytes=new byte[1024];\n        int bytesRead;\n        while ((bytesRead=in.read(bytes,0,bytes.length)) > 0) {\n          ByteBuffer buffer=ByteBuffer.allocateDirect(bytesRead);\n          buffer.put(bytes,0,bytesRead);\n          buffer.flip();\n          remoteStorage.fileWriteStreamWriteChunk(remoteFile,buffer);\n        }\n        remoteStorage.fileWriteStreamClose(remoteFile);\n      }\n    }\n catch (    IOException e) {\n      e.printStackTrace();\n    }\n  }\n else   if (input.startsWith(\"file delete \")) {\n    String path=input.substring(\"file delete \".length());\n    if (remoteStorage.fileDelete(path)) {\n      System.out.println(\"deleted file '\" + path + \"'\");\n    }\n  }\n else   if (input.startsWith(\"file share \")) {\n    remoteStorage.fileShare(input.substring(\"file share \".length()));\n  }\n else   if (input.startsWith(\"file publish \")) {\n    String[] paths=input.substring(\"file publish \".length()).split(\" \");\n    if (paths.length >= 2) {\n      System.out.println(\"publishing file: \" + paths[0] + \", preview file: \"+ paths[1]);\n      remoteStorage.publishWorkshopFile(paths[0],paths[1],utils.getAppID(),\"Test UGC!\",\"Dummy UGC file published by test application.\",SteamRemoteStorage.PublishedFileVisibility.Private,null,SteamRemoteStorage.WorkshopFileType.Community);\n    }\n  }\n else   if (input.startsWith(\"file republish \")) {\n    String[] paths=input.substring(\"file republish \".length()).split(\" \");\n    if (paths.length >= 3) {\n      System.out.println(\"republishing id: \" + paths[0] + \", file: \"+ paths[1]+ \", preview file: \"+ paths[2]);\n      SteamPublishedFileID fileID=new SteamPublishedFileID(Long.parseLong(paths[0]));\n      SteamPublishedFileUpdateHandle updateHandle=remoteStorage.createPublishedFileUpdateRequest(fileID);\n      if (updateHandle != null) {\n        remoteStorage.updatePublishedFileFile(updateHandle,paths[1]);\n        remoteStorage.updatePublishedFilePreviewFile(updateHandle,paths[2]);\n        remoteStorage.updatePublishedFileTitle(updateHandle,\"Updated Test UGC!\");\n        remoteStorage.updatePublishedFileDescription(updateHandle,\"Dummy UGC file *updated* by test application.\");\n        remoteStorage.commitPublishedFileUpdate(updateHandle);\n      }\n    }\n  }\n else   if (input.equals(\"ugc query\")) {\n    SteamUGCQuery query=ugc.createQueryUserUGCRequest(user.getSteamID().getAccountID(),SteamUGC.UserUGCList.Subscribed,SteamUGC.MatchingUGCType.UsableInGame,SteamUGC.UserUGCListSortOrder.TitleAsc,utils.getAppID(),utils.getAppID(),1);\n    if (query.isValid()) {\n      System.out.println(\"sending UGC query: \" + query.toString());\n      ugc.sendQueryUGCRequest(query);\n    }\n  }\n else   if (input.startsWith(\"ugc download \")) {\n    String name=input.substring(\"ugc download \".length());\n    SteamUGCHandle handle=new SteamUGCHandle(Long.parseLong(name,16));\n    remoteStorage.ugcDownload(handle,0);\n  }\n else   if (input.startsWith(\"ugc subscribe \")) {\n    Long id=Long.parseLong(input.substring(\"ugc subscribe \".length()),16);\n    ugc.subscribeItem(new SteamPublishedFileID(id));\n  }\n else   if (input.startsWith(\"ugc unsubscribe \")) {\n    Long id=Long.parseLong(input.substring(\"ugc unsubscribe \".length()),16);\n    ugc.unsubscribeItem(new SteamPublishedFileID(id));\n  }\n else   if (input.startsWith(\"ugc state \")) {\n    Long id=Long.parseLong(input.substring(\"ugc state \".length()),16);\n    Collection<SteamUGC.ItemState> itemStates=ugc.getItemState(new SteamPublishedFileID(id));\n    System.out.println(\"UGC item states: \" + itemStates.size());\n    for (    SteamUGC.ItemState itemState : itemStates) {\n      System.out.println(\"  \" + itemState.name());\n    }\n  }\n else   if (input.startsWith(\"ugc details \")) {\n    System.out.println(\"requesting UGC details (deprecated API call)\");\n    Long id=Long.parseLong(input.substring(\"ugc details \".length()),16);\n    ugc.requestUGCDetails(new SteamPublishedFileID(id),0);\n    SteamUGCQuery query=ugc.createQueryUGCDetailsRequest(new SteamPublishedFileID(id));\n    if (query.isValid()) {\n      System.out.println(\"sending UGC details query: \" + query.toString());\n      ugc.sendQueryUGCRequest(query);\n    }\n  }\n else   if (input.startsWith(\"ugc info \")) {\n    Long id=Long.parseLong(input.substring(\"ugc info \".length()),16);\n    SteamUGC.ItemInstallInfo installInfo=new SteamUGC.ItemInstallInfo();\n    if (ugc.getItemInstallInfo(new SteamPublishedFileID(id),installInfo)) {\n      System.out.println(\"  folder: \" + installInfo.getFolder());\n      System.out.println(\"  size on disk: \" + installInfo.getSizeOnDisk());\n    }\n    SteamUGC.ItemDownloadInfo downloadInfo=new SteamUGC.ItemDownloadInfo();\n    if (ugc.getItemDownloadInfo(new SteamPublishedFileID(id),downloadInfo)) {\n      System.out.println(\"  bytes downloaded: \" + downloadInfo.getBytesDownloaded());\n      System.out.println(\"  bytes total: \" + downloadInfo.getBytesTotal());\n    }\n  }\n else   if (input.startsWith(\"leaderboard find \")) {\n    String name=input.substring(\"leaderboard find \".length());\n    userStats.findLeaderboard(name);\n  }\n else   if (input.startsWith(\"leaderboard list \")) {\n    String[] params=input.substring(\"leaderboard list \".length()).split(\" \");\n    if (currentLeaderboard != null && params.length >= 2) {\n      userStats.downloadLeaderboardEntries(currentLeaderboard,SteamUserStats.LeaderboardDataRequest.Global,Integer.parseInt(params[0]),Integer.parseInt(params[1]));\n    }\n  }\n else   if (input.startsWith(\"leaderboard users \")) {\n    String[] params=input.substring(\"leaderboard users \".length()).split(\" \");\n    if (currentLeaderboard != null && params.length > 0) {\n      SteamID[] users=new SteamID[params.length];\n      for (int i=0; i < params.length; i++) {\n        users[i]=SteamID.createFromNativeHandle(Long.parseLong(params[i]));\n      }\n      userStats.downloadLeaderboardEntriesForUsers(currentLeaderboard,users);\n    }\n  }\n else   if (input.startsWith(\"leaderboard score \")) {\n    String score=input.substring(\"leaderboard score \".length());\n    if (currentLeaderboard != null) {\n      System.out.println(\"uploading score \" + score + \" to leaderboard \"+ currentLeaderboard.toString());\n      userStats.uploadLeaderboardScore(currentLeaderboard,SteamUserStats.LeaderboardUploadScoreMethod.KeepBest,Integer.parseInt(score),new int[]{});\n    }\n  }\n else   if (input.startsWith(\"apps subscribed \")) {\n    String appId=input.substring(\"apps subscribed \".length());\n    boolean subscribed=apps.isSubscribedApp(Integer.parseInt(appId));\n    System.out.println(\"user described to app #\" + appId + \": \"+ (subscribed ? \"yes\" : \"no\"));\n  }\n else   if (input.startsWith(\"deck \")) {\n    String cmd=input.substring(\"deck \".length());\n    if (cmd.equals(\"status\")) {\n      boolean isDeck=utils.isSteamRunningOnSteamDeck();\n      System.out.println(\"Steam is running on SteamDeck: \" + (isDeck ? \"yes\" : \"no\"));\n    }\n else     if (cmd.equals(\"input\")) {\n      boolean success=utils.showFloatingGamepadTextInput(SteamUtils.FloatingGamepadTextInputMode.ModeSingleLine,0,0,1280,200);\n      System.out.println(\"Show floating gamepad text input: \" + (success ? \"success\" : \"failed\"));\n    }\n  }\n else   if (input.equals(\"auth web\")) {\n    user.getAuthTicketForWebApi();\n  }\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamClientAPITest.java",
        "Start": 14999,
        "Stop": 25402,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "processInput"
    },
    {
        "Old_Method": "@Override protected void processUpdate() throws SteamException {\n  int[] packetSize=new int[1];\n  if (networking.isP2PPacketAvailable(defaultChannel,packetSize)) {\n    SteamID steamIDSender=new SteamID();\n    if (packetSize[0] > packetReadBuffer.capacity()) {\n      throw new SteamException(\"incoming packet larger than read buffer can handle\");\n    }\n    packetReadBuffer.clear();\n    packetReadBuffer.limit(packetSize[0]);\n    int packetReadSize=networking.readP2PPacket(steamIDSender,packetReadBuffer,defaultChannel);\n    if (packetReadSize == 0) {\n      System.err.println(\"Rcv packet: expected \" + packetSize[0] + \" bytes, but got none\");\n    }\n else     if (packetReadSize < packetSize[0]) {\n      System.err.println(\"Rcv packet: expected \" + packetSize[0] + \" bytes, but only got \"+ packetReadSize);\n    }\n    packetReadBuffer.limit(packetReadSize);\n    if (packetReadSize > 0) {\n      registerRemoteSteamID(steamIDSender);\n      int bytesReceived=packetReadBuffer.limit();\n      System.out.println(\"Rcv packet: userID=\" + steamIDSender.getAccountID() + \", \"+ bytesReceived+ \" bytes\");\n      byte[] bytes=new byte[bytesReceived];\n      packetReadBuffer.get(bytes);\n      int magicBytes=checkMagicBytes(packetReadBuffer,AUTH);\n      if (magicBytes > 0) {\n        remoteAuthTicketData.clear();\n        remoteAuthTicketData.put(bytes,magicBytes,bytesReceived - magicBytes);\n        remoteAuthTicketData.flip();\n        System.out.println(\"Auth ticket received: \" + remoteAuthTicketData.toString() + \" [hash: \"+ remoteAuthTicketData.hashCode()+ \"]\");\n        beginAuthSession(steamIDSender);\n      }\n else {\n        String message=new String(bytes,messageCharset);\n        System.out.println(\"Rcv message: \\\"\" + message + \"\\\"\");\n      }\n    }\n  }\n}\n",
        "File_Path": "steamworks4j/tests/src/main/java/com/codedisaster/steamworks/test/SteamNetworkingTest.java",
        "Start": 3102,
        "Stop": 5085,
        "Project_Name": "data/projects/steamworks4j",
        "Method_Name": "processUpdate"
    }
]
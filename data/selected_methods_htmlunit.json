[
    {
        "Old_Method": "/** \n * Check if 2 nodes are equals. For detail specifications\n * @see <a href=\"https://dom.spec.whatwg.org/#concept-node-equals\">concept-node-equals<\/a>\n * @param other the node to compare with\n * @return true or false\n */\n@JsxFunction public boolean isEqualNode(final Node other){\n  if (isSameNode(other)) {\n    return true;\n  }\n  if (!getClassName().equals(other.getClassName())) {\n    return false;\n  }\n  if (this instanceof DocumentType) {\n    final DocumentType docType=(DocumentType)this;\n    final DocumentType otherDocType=(DocumentType)other;\n    if (!Objects.equals(docType.getName(),otherDocType.getName()) || !Objects.equals(docType.getPublicId(),otherDocType.getPublicId()) || !Objects.equals(docType.getSystemId(),otherDocType.getSystemId())) {\n      return false;\n    }\n  }\n else   if (this instanceof Element) {\n    final Element element=(Element)this;\n    final Element otherElement=(Element)other;\n    if (!Objects.equals(element.getNodeName(),otherElement.getNodeName()) || !Objects.equals(element.getPrefix(),otherElement.getPrefix()) || !Objects.equals(element.getLocalName(),otherElement.getLocalName())) {\n      return false;\n    }\n    final NamedNodeMap attributesMap=element.getAttributes();\n    final NamedNodeMap otherAttributesMap=otherElement.getAttributes();\n    if (attributesMap != null || otherAttributesMap != null) {\n      if (attributesMap == null || otherAttributesMap == null) {\n        return false;\n      }\n      final int length=attributesMap.getLength();\n      if (length != otherAttributesMap.getLength()) {\n        return false;\n      }\n      final Map<String,Attr> name2Attributes=new HashMap<>();\n      for (int i=0; i < length; i++) {\n        final Attr attribute=(Attr)attributesMap.item(i);\n        name2Attributes.put(attribute.getName(),attribute);\n      }\n      for (int i=0; i < length; i++) {\n        final Attr otherAttribute=(Attr)otherAttributesMap.item(i);\n        final Attr attribute=name2Attributes.get(otherAttribute.getName());\n        if (attribute == null) {\n          return false;\n        }\n        if (!attribute.isEqualNode(otherAttribute)) {\n          return false;\n        }\n      }\n    }\n  }\n else   if (this instanceof Attr) {\n    final Attr attr=(Attr)this;\n    final Attr otherAttr=(Attr)other;\n    if (!Objects.equals(attr.getName(),otherAttr.getName()) || !Objects.equals(attr.getLocalName(),otherAttr.getLocalName()) || !Objects.equals(attr.getValue(),otherAttr.getValue())) {\n      return false;\n    }\n  }\n else   if (this instanceof ProcessingInstruction) {\n    final ProcessingInstruction instruction=(ProcessingInstruction)this;\n    final ProcessingInstruction otherInstruction=(ProcessingInstruction)other;\n    if (!Objects.equals(instruction.getTarget(),otherInstruction.getTarget()) || !Objects.equals(instruction.getData(),otherInstruction.getData())) {\n      return false;\n    }\n  }\n else   if (this instanceof Text || this instanceof Comment) {\n    final CharacterData data=(CharacterData)this;\n    final CharacterData otherData=(CharacterData)other;\n    if (!Objects.equals(data.getData(),otherData.getData())) {\n      return false;\n    }\n  }\n  final NodeList childNodes=getChildNodes();\n  final NodeList otherChildNodes=other.getChildNodes();\n  if (childNodes != null || otherChildNodes != null) {\n    if (childNodes == null || otherChildNodes == null) {\n      return false;\n    }\n    final int length=childNodes.getLength();\n    final int otherLength=childNodes.getLength();\n    if (length != otherLength) {\n      return false;\n    }\n    for (int i=0; i < length; i++) {\n      final Node childNode=(Node)childNodes.item(i);\n      final Node otherChildNode=(Node)otherChildNodes.item(i);\n      if (!childNode.isEqualNode(otherChildNode)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/dom/Node.java",
        "Start": 18276,
        "Stop": 23088,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "isEqualNode"
    },
    {
        "Old_Method": "/** \n * Check if 2 nodes are equals. For detail specifications\n * @see <a href=\"https://dom.spec.whatwg.org/#concept-node-equals\">concept-node-equals<\/a>\n * @param other the node to compare with\n * @return true or false\n */\n@JsxFunction public boolean isEqualNode(final Node other){\n  if (isSameNode(other)) {\n    return true;\n  }\n  if (!getClassName().equals(other.getClassName())) {\n    return false;\n  }\n  if (this instanceof DocumentType) {\n    final DocumentType docType=(DocumentType)this;\n    final DocumentType otherDocType=(DocumentType)other;\n    if (!Objects.equals(docType.getName(),otherDocType.getName()) || !Objects.equals(docType.getPublicId(),otherDocType.getPublicId()) || !Objects.equals(docType.getSystemId(),otherDocType.getSystemId())) {\n      return false;\n    }\n  }\n else   if (this instanceof Element) {\n    final Element element=(Element)this;\n    final Element otherElement=(Element)other;\n    if (!Objects.equals(element.getNodeName(),otherElement.getNodeName()) || !Objects.equals(element.getPrefix(),otherElement.getPrefix()) || !Objects.equals(element.getLocalName(),otherElement.getLocalName())) {\n      return false;\n    }\n    final NamedNodeMap attributesMap=element.getAttributes();\n    final NamedNodeMap otherAttributesMap=otherElement.getAttributes();\n    if (attributesMap != null || otherAttributesMap != null) {\n      if (attributesMap == null || otherAttributesMap == null) {\n        return false;\n      }\n      final int length=attributesMap.getLength();\n      if (length != otherAttributesMap.getLength()) {\n        return false;\n      }\n      final Map<String,Attr> name2Attributes=new HashMap<>();\n      for (int i=0; i < length; i++) {\n        final Attr attribute=(Attr)attributesMap.item(i);\n        name2Attributes.put(attribute.getName(),attribute);\n      }\n      for (int i=0; i < length; i++) {\n        final Attr otherAttribute=(Attr)otherAttributesMap.item(i);\n        final Attr attribute=name2Attributes.get(otherAttribute.getName());\n        if (attribute == null) {\n          return false;\n        }\n        if (!attribute.isEqualNode(otherAttribute)) {\n          return false;\n        }\n      }\n    }\n  }\n else   if (this instanceof Attr) {\n    final Attr attr=(Attr)this;\n    final Attr otherAttr=(Attr)other;\n    if (!Objects.equals(attr.getName(),otherAttr.getName()) || !Objects.equals(attr.getLocalName(),otherAttr.getLocalName()) || !Objects.equals(attr.getValue(),otherAttr.getValue())) {\n      return false;\n    }\n  }\n else   if (this instanceof ProcessingInstruction) {\n    final ProcessingInstruction instruction=(ProcessingInstruction)this;\n    final ProcessingInstruction otherInstruction=(ProcessingInstruction)other;\n    if (!Objects.equals(instruction.getTarget(),otherInstruction.getTarget()) || !Objects.equals(instruction.getData(),otherInstruction.getData())) {\n      return false;\n    }\n  }\n else   if (this instanceof Text || this instanceof Comment) {\n    final CharacterData data=(CharacterData)this;\n    final CharacterData otherData=(CharacterData)other;\n    if (!Objects.equals(data.getData(),otherData.getData())) {\n      return false;\n    }\n  }\n  final NodeList childNodes=getChildNodes();\n  final NodeList otherChildNodes=other.getChildNodes();\n  if (childNodes != null || otherChildNodes != null) {\n    if (childNodes == null || otherChildNodes == null) {\n      return false;\n    }\n    final int length=childNodes.getLength();\n    final int otherLength=childNodes.getLength();\n    if (length != otherLength) {\n      return false;\n    }\n    for (int i=0; i < length; i++) {\n      final Node childNode=(Node)childNodes.item(i);\n      final Node otherChildNode=(Node)otherChildNodes.item(i);\n      if (!childNode.isEqualNode(otherChildNode)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/dom/Node.java",
        "Start": 18276,
        "Stop": 23088,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "isEqualNode"
    },
    {
        "Old_Method": "public void run(){\n  log(\"Document root: ~\" + applet().getLocationOnScreen().toString());\n  while (true) {\n    try {\n      window=(JSObject)JSObject.getWindow(applet());\n      break;\n    }\n catch (    Exception e) {\n    }\n  }\n  AccessController.doPrivileged(new PrivilegedAction(){\n    public Object run(){\n      log(\"> init Robot\");\n      try {\n        SecurityManager oldsecurity=System.getSecurityManager();\n        boolean needsSecurityManager=applet().getParameter(\"needsSecurityManager\").equals(\"true\");\n        log(\"Socket connections managed? \" + needsSecurityManager);\n        try {\n          securitymanager=oldsecurity;\n          securitymanager.checkTopLevelWindow(null);\n          if (charMap == null) {\n            if (!confirm(\"DOH has detected that the current Web page is attempting to access DOH,\\n\" + \"but belongs to a different domain than the one you agreed to let DOH automate.\\n\" + \"If you did not intend to start a new DOH test by visiting this Web page,\\n\"+ \"press Cancel now and leave the Web page.\\n\"+ \"Otherwise, press OK to trust this domain to automate DOH tests.\")) {\n              stop();\n              return null;\n            }\n          }\n          log(\"Found old security manager\");\n        }\n catch (        Exception e) {\n          log(\"Making new security manager\");\n          securitymanager=new RobotSecurityManager(needsSecurityManager,oldsecurity);\n          securitymanager.checkTopLevelWindow(null);\n          System.setSecurityManager(securitymanager);\n        }\n      }\n catch (      SecurityException e) {\n      }\ncatch (      Exception e) {\n        log(\"Error calling _init_: \" + e.getMessage());\n        key=-2;\n        e.printStackTrace();\n      }\n      log(\"< init Robot\");\n      return null;\n    }\n  }\n);\n  if (key == -2) {\n    window.eval(\"doh.robot._appletDead=true;doh.run();\");\n  }\n else {\n    log(\"_initRobot\");\n    try {\n      dohrobot=(JSObject)window.eval(\"doh.robot\");\n      dohrobot.call(\"_initRobot\",new Object[]{applet()});\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n",
        "File_Path": "htmlunit/src/test/resources/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
        "Start": 4222,
        "Stop": 6564,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "run"
    },
    {
        "Old_Method": "public void run(){\n  log(\"Document root: ~\" + applet().getLocationOnScreen().toString());\n  while (true) {\n    try {\n      window=(JSObject)JSObject.getWindow(applet());\n      break;\n    }\n catch (    Exception e) {\n    }\n  }\n  AccessController.doPrivileged(new PrivilegedAction(){\n    public Object run(){\n      log(\"> init Robot\");\n      try {\n        SecurityManager oldsecurity=System.getSecurityManager();\n        boolean needsSecurityManager=applet().getParameter(\"needsSecurityManager\").equals(\"true\");\n        log(\"Socket connections managed? \" + needsSecurityManager);\n        try {\n          securitymanager=oldsecurity;\n          securitymanager.checkTopLevelWindow(null);\n          if (charMap == null) {\n            if (!confirm(\"DOH has detected that the current Web page is attempting to access DOH,\\n\" + \"but belongs to a different domain than the one you agreed to let DOH automate.\\n\" + \"If you did not intend to start a new DOH test by visiting this Web page,\\n\"+ \"press Cancel now and leave the Web page.\\n\"+ \"Otherwise, press OK to trust this domain to automate DOH tests.\")) {\n              stop();\n              return null;\n            }\n          }\n          log(\"Found old security manager\");\n        }\n catch (        Exception e) {\n          log(\"Making new security manager\");\n          securitymanager=new RobotSecurityManager(needsSecurityManager,oldsecurity);\n          securitymanager.checkTopLevelWindow(null);\n          System.setSecurityManager(securitymanager);\n        }\n      }\n catch (      SecurityException e) {\n      }\ncatch (      Exception e) {\n        log(\"Error calling _init_: \" + e.getMessage());\n        key=-2;\n        e.printStackTrace();\n      }\n      log(\"< init Robot\");\n      return null;\n    }\n  }\n);\n  if (key == -2) {\n    window.eval(\"doh.robot._appletDead=true;doh.run();\");\n  }\n else {\n    log(\"_initRobot\");\n    try {\n      dohrobot=(JSObject)window.eval(\"doh.robot\");\n      dohrobot.call(\"_initRobot\",new Object[]{applet()});\n    }\n catch (    Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n",
        "File_Path": "htmlunit/src/test/resources/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
        "Start": 4222,
        "Stop": 6564,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "run"
    },
    {
        "Old_Method": "/** \n * Parses a given specification using the algorithm depicted in <a href=\"http://www.faqs.org/rfcs/rfc1808.html\">RFC1808<\/a>: <p> Section 2.4: Parsing a URL <p> An accepted method for parsing URLs is useful to clarify the generic-RL syntax of Section 2.2 and to describe the algorithm for resolving relative URLs presented in Section 4. This section describes the parsing rules for breaking down a URL (relative or absolute) into the component parts described in Section 2.1.  The rules assume that the URL has already been separated from any surrounding text and copied to a \"parse string\". The rules are listed in the order in which they would be applied by the parser.\n * @param spec The specification to parse.\n * @return the parsed specification.\n */\n@SuppressWarnings(\"PMD.UselessParentheses\") private static Url parseUrl(String spec){\n  final Url url=new Url();\n  int startIndex=0;\n  int endIndex=spec.length();\n  if (endIndex > startIndex) {\n    StringBuilder sb=null;\n    boolean before=true;\n    int trailing=0;\n    for (int i=0; i < endIndex; i++) {\n      final char c=spec.charAt(i);\n      boolean remove=false;\n      if (c == '\\t' | c == '\\r' | c == '\\n') {\n        remove=true;\n      }\n else       if ('\\u0000' <= c && c <= '\\u0020') {\n        if (before) {\n          remove=true;\n        }\n else {\n          trailing++;\n        }\n      }\n else {\n        before=false;\n        trailing=0;\n      }\n      if (remove) {\n        if (sb == null) {\n          sb=new StringBuilder(spec.substring(0,i));\n        }\n      }\n else       if (sb != null) {\n        sb.append(c);\n      }\n    }\n    if (sb == null) {\n      if (trailing > 0) {\n        endIndex=spec.length() - trailing;\n        spec=spec.substring(0,endIndex);\n      }\n    }\n else {\n      if (trailing > 0) {\n        spec=sb.substring(0,sb.length() - trailing);\n      }\n else {\n        spec=sb.toString();\n      }\n      endIndex=spec.length();\n    }\n  }\n  final int crosshatchIndex=StringUtils.indexOf(spec,'#',startIndex,endIndex);\n  if (crosshatchIndex >= 0) {\n    url.fragment_=spec.substring(crosshatchIndex + 1,endIndex);\n    endIndex=crosshatchIndex;\n  }\n  final int colonIndex=StringUtils.indexOf(spec,':',startIndex,endIndex);\n  if (colonIndex > 0) {\n    final String scheme=spec.substring(startIndex,colonIndex);\n    if (isValidScheme(scheme)) {\n      url.scheme_=scheme;\n      startIndex=colonIndex + 1;\n    }\n  }\n  final int locationStartIndex;\n  int locationEndIndex;\n  if (spec.startsWith(\"//\",startIndex)) {\n    locationStartIndex=startIndex + 2;\n    locationEndIndex=StringUtils.indexOf(spec,'/',locationStartIndex,endIndex);\n    if (locationEndIndex >= 0) {\n      startIndex=locationEndIndex;\n    }\n  }\n else {\n    locationStartIndex=-1;\n    locationEndIndex=-1;\n  }\n  final int questionMarkIndex=StringUtils.indexOf(spec,'?',startIndex,endIndex);\n  if (questionMarkIndex >= 0) {\n    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n      locationEndIndex=questionMarkIndex;\n      startIndex=questionMarkIndex;\n    }\n    url.query_=spec.substring(questionMarkIndex + 1,endIndex);\n    endIndex=questionMarkIndex;\n  }\n  final int semicolonIndex=StringUtils.indexOf(spec,';',startIndex,endIndex);\n  if (semicolonIndex >= 0) {\n    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n      locationEndIndex=semicolonIndex;\n      startIndex=semicolonIndex;\n    }\n    url.parameters_=spec.substring(semicolonIndex + 1,endIndex);\n    endIndex=semicolonIndex;\n  }\n  if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n    locationEndIndex=endIndex;\n  }\n else   if (startIndex < endIndex) {\n    url.path_=spec.substring(startIndex,endIndex);\n  }\n  if ((locationStartIndex >= 0) && (locationEndIndex >= 0)) {\n    url.location_=spec.substring(locationStartIndex,locationEndIndex);\n  }\n  return url;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/util/UrlUtils.java",
        "Start": 28013,
        "Stop": 37731,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "parseUrl"
    },
    {
        "Old_Method": "/** \n * Parses a given specification using the algorithm depicted in <a href=\"http://www.faqs.org/rfcs/rfc1808.html\">RFC1808<\/a>: <p> Section 2.4: Parsing a URL <p> An accepted method for parsing URLs is useful to clarify the generic-RL syntax of Section 2.2 and to describe the algorithm for resolving relative URLs presented in Section 4. This section describes the parsing rules for breaking down a URL (relative or absolute) into the component parts described in Section 2.1.  The rules assume that the URL has already been separated from any surrounding text and copied to a \"parse string\". The rules are listed in the order in which they would be applied by the parser.\n * @param spec The specification to parse.\n * @return the parsed specification.\n */\n@SuppressWarnings(\"PMD.UselessParentheses\") private static Url parseUrl(String spec){\n  final Url url=new Url();\n  int startIndex=0;\n  int endIndex=spec.length();\n  if (endIndex > startIndex) {\n    StringBuilder sb=null;\n    boolean before=true;\n    int trailing=0;\n    for (int i=0; i < endIndex; i++) {\n      final char c=spec.charAt(i);\n      boolean remove=false;\n      if (c == '\\t' | c == '\\r' | c == '\\n') {\n        remove=true;\n      }\n else       if ('\\u0000' <= c && c <= '\\u0020') {\n        if (before) {\n          remove=true;\n        }\n else {\n          trailing++;\n        }\n      }\n else {\n        before=false;\n        trailing=0;\n      }\n      if (remove) {\n        if (sb == null) {\n          sb=new StringBuilder(spec.substring(0,i));\n        }\n      }\n else       if (sb != null) {\n        sb.append(c);\n      }\n    }\n    if (sb == null) {\n      if (trailing > 0) {\n        endIndex=spec.length() - trailing;\n        spec=spec.substring(0,endIndex);\n      }\n    }\n else {\n      if (trailing > 0) {\n        spec=sb.substring(0,sb.length() - trailing);\n      }\n else {\n        spec=sb.toString();\n      }\n      endIndex=spec.length();\n    }\n  }\n  final int crosshatchIndex=StringUtils.indexOf(spec,'#',startIndex,endIndex);\n  if (crosshatchIndex >= 0) {\n    url.fragment_=spec.substring(crosshatchIndex + 1,endIndex);\n    endIndex=crosshatchIndex;\n  }\n  final int colonIndex=StringUtils.indexOf(spec,':',startIndex,endIndex);\n  if (colonIndex > 0) {\n    final String scheme=spec.substring(startIndex,colonIndex);\n    if (isValidScheme(scheme)) {\n      url.scheme_=scheme;\n      startIndex=colonIndex + 1;\n    }\n  }\n  final int locationStartIndex;\n  int locationEndIndex;\n  if (spec.startsWith(\"//\",startIndex)) {\n    locationStartIndex=startIndex + 2;\n    locationEndIndex=StringUtils.indexOf(spec,'/',locationStartIndex,endIndex);\n    if (locationEndIndex >= 0) {\n      startIndex=locationEndIndex;\n    }\n  }\n else {\n    locationStartIndex=-1;\n    locationEndIndex=-1;\n  }\n  final int questionMarkIndex=StringUtils.indexOf(spec,'?',startIndex,endIndex);\n  if (questionMarkIndex >= 0) {\n    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n      locationEndIndex=questionMarkIndex;\n      startIndex=questionMarkIndex;\n    }\n    url.query_=spec.substring(questionMarkIndex + 1,endIndex);\n    endIndex=questionMarkIndex;\n  }\n  final int semicolonIndex=StringUtils.indexOf(spec,';',startIndex,endIndex);\n  if (semicolonIndex >= 0) {\n    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n      locationEndIndex=semicolonIndex;\n      startIndex=semicolonIndex;\n    }\n    url.parameters_=spec.substring(semicolonIndex + 1,endIndex);\n    endIndex=semicolonIndex;\n  }\n  if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {\n    locationEndIndex=endIndex;\n  }\n else   if (startIndex < endIndex) {\n    url.path_=spec.substring(startIndex,endIndex);\n  }\n  if ((locationStartIndex >= 0) && (locationEndIndex >= 0)) {\n    url.location_=spec.substring(locationStartIndex,locationEndIndex);\n  }\n  return url;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/util/UrlUtils.java",
        "Start": 28013,
        "Stop": 37731,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "parseUrl"
    },
    {
        "Old_Method": "/** \n * @return the referenced style sheet\n */\npublic CssStyleSheet getSheet(){\n  if (sheet_ != null) {\n    return sheet_;\n  }\n  final Cache cache=getPage().getWebClient().getCache();\n  final CSSStyleSheetImpl cached=cache.getCachedStyleSheet(getTextContent());\n  final String uri=getPage().getWebResponse().getWebRequest().getUrl().toExternalForm();\n  if (cached != null) {\n    sheet_=new CssStyleSheet(this,cached,uri);\n  }\n else {\n    final String css=getTextContent();\n    try (InputSource source=new InputSource(new StringReader(css))){\n      sheet_=new CssStyleSheet(this,source,uri);\n      cache.cache(css,sheet_.getWrappedSheet());\n    }\n catch (    final IOException e) {\n      LOG.error(e.getMessage(),e);\n    }\n  }\n  return sheet_;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlStyle.java",
        "Start": 3916,
        "Stop": 4846,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "getSheet"
    },
    {
        "Old_Method": "/** \n * @return the referenced style sheet\n */\npublic CssStyleSheet getSheet(){\n  if (sheet_ != null) {\n    return sheet_;\n  }\n  final Cache cache=getPage().getWebClient().getCache();\n  final CSSStyleSheetImpl cached=cache.getCachedStyleSheet(getTextContent());\n  final String uri=getPage().getWebResponse().getWebRequest().getUrl().toExternalForm();\n  if (cached != null) {\n    sheet_=new CssStyleSheet(this,cached,uri);\n  }\n else {\n    final String css=getTextContent();\n    try (InputSource source=new InputSource(new StringReader(css))){\n      sheet_=new CssStyleSheet(this,source,uri);\n      cache.cache(css,sheet_.getWrappedSheet());\n    }\n catch (    final IOException e) {\n      LOG.error(e.getMessage(),e);\n    }\n  }\n  return sheet_;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlStyle.java",
        "Start": 3916,
        "Stop": 4846,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "getSheet"
    },
    {
        "Old_Method": "/** \n * Same as  {@link #doClickStateUpdate(boolean,boolean)}, except that it accepts an  {@code href} suffix,needed when a click is performed on an image map to pass information on the click position.\n * @param shiftKey {@code true} if SHIFT is pressed\n * @param ctrlKey {@code true} if CTRL is pressed\n * @param hrefSuffix the suffix to add to the anchor's {@code href} attribute(for instance coordinates from an image map)\n * @throws IOException if an IO error occurs\n */\nprotected void doClickStateUpdate(final boolean shiftKey,final boolean ctrlKey,final String hrefSuffix) throws IOException {\n  final String href=(getHrefAttribute() + hrefSuffix).trim();\n  if (LOG.isDebugEnabled()) {\n    final String w=getPage().getEnclosingWindow().getName();\n    LOG.debug(\"do click action in window '\" + w + \"', using href '\"+ href+ \"'\");\n  }\n  if (ATTRIBUTE_NOT_DEFINED == getHrefAttribute()) {\n    return;\n  }\n  HtmlPage page=(HtmlPage)getPage();\n  if (StringUtils.startsWithIgnoreCase(href,JavaScriptURLConnection.JAVASCRIPT_PREFIX)) {\n    final StringBuilder builder=new StringBuilder(href.length());\n    builder.append(JavaScriptURLConnection.JAVASCRIPT_PREFIX);\n    for (int i=JavaScriptURLConnection.JAVASCRIPT_PREFIX.length(); i < href.length(); i++) {\n      final char ch=href.charAt(i);\n      if (ch == '%' && i + 2 < href.length()) {\n        final char ch1=Character.toUpperCase(href.charAt(i + 1));\n        final char ch2=Character.toUpperCase(href.charAt(i + 2));\n        if ((Character.isDigit(ch1) || ch1 >= 'A' && ch1 <= 'F') && (Character.isDigit(ch2) || ch2 >= 'A' && ch2 <= 'F')) {\n          builder.append((char)Integer.parseInt(href.substring(i + 1,i + 3),16));\n          i+=2;\n          continue;\n        }\n      }\n      builder.append(ch);\n    }\n    final String target;\n    if (shiftKey || ctrlKey || ATTRIBUTE_NOT_DEFINED != getDownloadAttribute()) {\n      target=WebClient.TARGET_BLANK;\n    }\n else {\n      target=page.getResolvedTarget(getTargetAttribute());\n    }\n    final WebWindow win=page.getWebClient().openTargetWindow(page.getEnclosingWindow(),target,WebClient.TARGET_SELF);\n    Page enclosedPage=win.getEnclosedPage();\n    if (enclosedPage == null) {\n      win.getWebClient().getPage(win,WebRequest.newAboutBlankRequest());\n      enclosedPage=win.getEnclosedPage();\n    }\n    if (enclosedPage != null && enclosedPage.isHtmlPage()) {\n      page=(HtmlPage)enclosedPage;\n      page.executeJavaScript(builder.toString(),\"javascript url\",getStartLineNumber());\n    }\n    return;\n  }\n  final URL url=getTargetUrl(href,page);\n  final WebClient webClient=page.getWebClient();\n  final BrowserVersion browser=webClient.getBrowserVersion();\n  if (ATTRIBUTE_NOT_DEFINED != getPingAttribute() && browser.hasFeature(ANCHOR_SEND_PING_REQUEST)) {\n    final URL pingUrl=getTargetUrl(getPingAttribute(),page);\n    final WebRequest pingRequest=new WebRequest(pingUrl,HttpMethod.POST);\n    pingRequest.setAdditionalHeader(HttpHeader.PING_FROM,page.getUrl().toExternalForm());\n    pingRequest.setAdditionalHeader(HttpHeader.PING_TO,url.toExternalForm());\n    pingRequest.setRequestBody(\"PING\");\n    webClient.loadWebResponse(pingRequest);\n  }\n  final WebRequest webRequest=new WebRequest(url,browser.getHtmlAcceptHeader(),browser.getAcceptEncodingHeader());\n  webRequest.setCharset(page.getCharset());\n  if (!relContainsNoreferrer()) {\n    webRequest.setRefererlHeader(page.getUrl());\n  }\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Getting page for \" + url.toExternalForm() + \", derived from href '\"+ href+ \"', using the originating URL \"+ page.getUrl());\n  }\n  final String target;\n  if (shiftKey || ctrlKey || (webClient.getAttachmentHandler() == null && ATTRIBUTE_NOT_DEFINED != getDownloadAttribute())) {\n    target=WebClient.TARGET_BLANK;\n  }\n else {\n    target=page.getResolvedTarget(getTargetAttribute());\n  }\n  page.getWebClient().download(page.getEnclosingWindow(),target,webRequest,true,false,ATTRIBUTE_NOT_DEFINED != getDownloadAttribute(),\"Link click\");\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlAnchor.java",
        "Start": 3297,
        "Stop": 8317,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "doClickStateUpdate"
    },
    {
        "Old_Method": "/** \n * Same as  {@link #doClickStateUpdate(boolean,boolean)}, except that it accepts an  {@code href} suffix,needed when a click is performed on an image map to pass information on the click position.\n * @param shiftKey {@code true} if SHIFT is pressed\n * @param ctrlKey {@code true} if CTRL is pressed\n * @param hrefSuffix the suffix to add to the anchor's {@code href} attribute(for instance coordinates from an image map)\n * @throws IOException if an IO error occurs\n */\nprotected void doClickStateUpdate(final boolean shiftKey,final boolean ctrlKey,final String hrefSuffix) throws IOException {\n  final String href=(getHrefAttribute() + hrefSuffix).trim();\n  if (LOG.isDebugEnabled()) {\n    final String w=getPage().getEnclosingWindow().getName();\n    LOG.debug(\"do click action in window '\" + w + \"', using href '\"+ href+ \"'\");\n  }\n  if (ATTRIBUTE_NOT_DEFINED == getHrefAttribute()) {\n    return;\n  }\n  HtmlPage page=(HtmlPage)getPage();\n  if (StringUtils.startsWithIgnoreCase(href,JavaScriptURLConnection.JAVASCRIPT_PREFIX)) {\n    final StringBuilder builder=new StringBuilder(href.length());\n    builder.append(JavaScriptURLConnection.JAVASCRIPT_PREFIX);\n    for (int i=JavaScriptURLConnection.JAVASCRIPT_PREFIX.length(); i < href.length(); i++) {\n      final char ch=href.charAt(i);\n      if (ch == '%' && i + 2 < href.length()) {\n        final char ch1=Character.toUpperCase(href.charAt(i + 1));\n        final char ch2=Character.toUpperCase(href.charAt(i + 2));\n        if ((Character.isDigit(ch1) || ch1 >= 'A' && ch1 <= 'F') && (Character.isDigit(ch2) || ch2 >= 'A' && ch2 <= 'F')) {\n          builder.append((char)Integer.parseInt(href.substring(i + 1,i + 3),16));\n          i+=2;\n          continue;\n        }\n      }\n      builder.append(ch);\n    }\n    final String target;\n    if (shiftKey || ctrlKey || ATTRIBUTE_NOT_DEFINED != getDownloadAttribute()) {\n      target=WebClient.TARGET_BLANK;\n    }\n else {\n      target=page.getResolvedTarget(getTargetAttribute());\n    }\n    final WebWindow win=page.getWebClient().openTargetWindow(page.getEnclosingWindow(),target,WebClient.TARGET_SELF);\n    Page enclosedPage=win.getEnclosedPage();\n    if (enclosedPage == null) {\n      win.getWebClient().getPage(win,WebRequest.newAboutBlankRequest());\n      enclosedPage=win.getEnclosedPage();\n    }\n    if (enclosedPage != null && enclosedPage.isHtmlPage()) {\n      page=(HtmlPage)enclosedPage;\n      page.executeJavaScript(builder.toString(),\"javascript url\",getStartLineNumber());\n    }\n    return;\n  }\n  final URL url=getTargetUrl(href,page);\n  final WebClient webClient=page.getWebClient();\n  final BrowserVersion browser=webClient.getBrowserVersion();\n  if (ATTRIBUTE_NOT_DEFINED != getPingAttribute() && browser.hasFeature(ANCHOR_SEND_PING_REQUEST)) {\n    final URL pingUrl=getTargetUrl(getPingAttribute(),page);\n    final WebRequest pingRequest=new WebRequest(pingUrl,HttpMethod.POST);\n    pingRequest.setAdditionalHeader(HttpHeader.PING_FROM,page.getUrl().toExternalForm());\n    pingRequest.setAdditionalHeader(HttpHeader.PING_TO,url.toExternalForm());\n    pingRequest.setRequestBody(\"PING\");\n    webClient.loadWebResponse(pingRequest);\n  }\n  final WebRequest webRequest=new WebRequest(url,browser.getHtmlAcceptHeader(),browser.getAcceptEncodingHeader());\n  webRequest.setCharset(page.getCharset());\n  if (!relContainsNoreferrer()) {\n    webRequest.setRefererlHeader(page.getUrl());\n  }\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Getting page for \" + url.toExternalForm() + \", derived from href '\"+ href+ \"', using the originating URL \"+ page.getUrl());\n  }\n  final String target;\n  if (shiftKey || ctrlKey || (webClient.getAttachmentHandler() == null && ATTRIBUTE_NOT_DEFINED != getDownloadAttribute())) {\n    target=WebClient.TARGET_BLANK;\n  }\n else {\n    target=page.getResolvedTarget(getTargetAttribute());\n  }\n  page.getWebClient().download(page.getEnclosingWindow(),target,webRequest,true,false,ATTRIBUTE_NOT_DEFINED != getDownloadAttribute(),\"Link click\");\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlAnchor.java",
        "Start": 3297,
        "Stop": 8317,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "doClickStateUpdate"
    },
    {
        "Old_Method": "/** \n * The real send job.\n */\nvoid doSend(){\n  final BrowserVersion browserVersion=getBrowserVersion();\n  if (async_ && browserVersion.hasFeature(XHR_LOAD_START_ASYNC)) {\n    fireJavascriptEvent(Event.TYPE_LOAD_START);\n  }\n  final WebClient wc=getWindow().getWebWindow().getWebClient();\n  boolean preflighted=false;\n  try {\n    if (!isSameOrigin_ && isPreflight()) {\n      preflighted=true;\n      final WebRequest preflightRequest=new WebRequest(webRequest_.getUrl(),HttpMethod.OPTIONS);\n      preflightRequest.addHint(HttpHint.BlockCookies);\n      final String originHeaderValue=webRequest_.getAdditionalHeaders().get(HttpHeader.ORIGIN);\n      preflightRequest.setAdditionalHeader(HttpHeader.ORIGIN,originHeaderValue);\n      preflightRequest.setAdditionalHeader(HttpHeader.ACCESS_CONTROL_REQUEST_METHOD,webRequest_.getHttpMethod().name());\n      final StringBuilder builder=new StringBuilder();\n      for (      final Entry<String,String> header : new TreeMap<>(webRequest_.getAdditionalHeaders()).entrySet()) {\n        final String name=org.htmlunit.util.StringUtils.toRootLowerCase(header.getKey());\n        if (isPreflightHeader(name,header.getValue())) {\n          if (builder.length() != 0) {\n            builder.append(',');\n          }\n          builder.append(name);\n        }\n      }\n      preflightRequest.setAdditionalHeader(HttpHeader.ACCESS_CONTROL_REQUEST_HEADERS,builder.toString());\n      if (timeout_ > 0) {\n        preflightRequest.setTimeout(timeout_);\n      }\n      final WebResponse preflightResponse=wc.loadWebResponse(preflightRequest);\n      if (!preflightResponse.isSuccessOrUseProxyOrNotModified() || !isPreflightAuthorized(preflightResponse)) {\n        setState(DONE);\n        if (async_ || browserVersion.hasFeature(XHR_HANDLE_SYNC_NETWORK_ERRORS)) {\n          fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n          fireJavascriptEvent(Event.TYPE_ERROR);\n          fireJavascriptEvent(Event.TYPE_LOAD_END);\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"No permitted request for URL \" + webRequest_.getUrl());\n        }\n        throw JavaScriptEngine.throwAsScriptRuntimeEx(new RuntimeException(\"No permitted \\\"Access-Control-Allow-Origin\\\" header.\"));\n      }\n    }\n    if (!isSameOrigin_) {\n      if (!isWithCredentials()) {\n        webRequest_.addHint(HttpHint.BlockCookies);\n      }\n    }\n    webResponse_=wc.loadWebResponse(webRequest_);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Web response loaded successfully.\");\n    }\n    webResponse_.defaultCharsetUtf8();\n    boolean allowOriginResponse=true;\n    if (!isSameOrigin_) {\n      String value=webResponse_.getResponseHeaderValue(HttpHeader.ACCESS_CONTROL_ALLOW_ORIGIN);\n      allowOriginResponse=webRequest_.getAdditionalHeaders().get(HttpHeader.ORIGIN).equals(value);\n      if (isWithCredentials()) {\n        value=webResponse_.getResponseHeaderValue(HttpHeader.ACCESS_CONTROL_ALLOW_CREDENTIALS);\n        allowOriginResponse=allowOriginResponse && Boolean.parseBoolean(value);\n      }\n else {\n        allowOriginResponse=allowOriginResponse || ALLOW_ORIGIN_ALL.equals(value);\n      }\n    }\n    if (allowOriginResponse) {\n      if (overriddenMimeType_ != null) {\n        final int index=overriddenMimeType_.toLowerCase(Locale.ROOT).indexOf(\"charset=\");\n        String charsetName=\"\";\n        if (index != -1) {\n          charsetName=overriddenMimeType_.substring(index + \"charset=\".length());\n        }\n        final Charset charset=EncodingSniffer.toCharset(charsetName);\n        final String charsetNameFinal=charsetName;\n        webResponse_=new WebResponseWrapper(webResponse_){\n          @Override public String getContentType(){\n            return overriddenMimeType_;\n          }\n          @Override public Charset getContentCharset(){\n            if (charsetNameFinal.isEmpty() || (charset == null && browserVersion.hasFeature(XHR_USE_CONTENT_CHARSET))) {\n              return super.getContentCharset();\n            }\n            return charset;\n          }\n        }\n;\n      }\n    }\n    if (!allowOriginResponse) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"No permitted \\\"Access-Control-Allow-Origin\\\" header for URL \" + webRequest_.getUrl());\n      }\n      throw new NoPermittedHeaderException(\"No permitted \\\"Access-Control-Allow-Origin\\\" header.\");\n    }\n    setState(HEADERS_RECEIVED);\n    if (async_) {\n      fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      setState(LOADING);\n      fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      fireJavascriptEvent(Event.TYPE_PROGRESS);\n    }\n    setState(DONE);\n    fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n    if (!async_ && aborted_ && browserVersion.hasFeature(XHR_SEND_NETWORK_ERROR_IF_ABORTED)) {\n      throw JavaScriptEngine.constructError(\"Error\",\"Failed to execute 'send' on 'XMLHttpRequest': Failed to load '\" + webRequest_.getUrl() + \"'\");\n    }\n    if (browserVersion.hasFeature(XHR_LOAD_ALWAYS_AFTER_DONE)) {\n      fireJavascriptEventIgnoreAbort(Event.TYPE_LOAD);\n      fireJavascriptEventIgnoreAbort(Event.TYPE_LOAD_END);\n    }\n else {\n      fireJavascriptEvent(Event.TYPE_LOAD);\n      fireJavascriptEvent(Event.TYPE_LOAD_END);\n    }\n  }\n catch (  final IOException e) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"IOException: returning a network error response.\",e);\n    }\n    if (async_) {\n      if (e instanceof SocketTimeoutException && browserVersion.hasFeature(XHR_LOAD_START_ASYNC)) {\n        try {\n          webResponse_=wc.loadWebResponse(WebRequest.newAboutBlankRequest());\n        }\n catch (        final IOException eIgnored) {\n        }\n        setState(HEADERS_RECEIVED);\n        fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      }\n      if (!preflighted && HttpClientConverter.isNoHttpResponseException(e) && browserVersion.hasFeature(XHR_PROGRESS_ON_NETWORK_ERROR_ASYNC)) {\n        fireJavascriptEvent(Event.TYPE_PROGRESS);\n      }\n    }\n    webResponse_=new NetworkErrorWebResponse(webRequest_,e);\n    if (async_) {\n      setState(DONE);\n      fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n      if (e instanceof SocketTimeoutException) {\n        fireJavascriptEvent(Event.TYPE_TIMEOUT);\n      }\n else {\n        fireJavascriptEvent(Event.TYPE_ERROR);\n      }\n      fireJavascriptEvent(Event.TYPE_LOAD_END);\n    }\n else {\n      setState(DONE);\n      if (browserVersion.hasFeature(XHR_HANDLE_SYNC_NETWORK_ERRORS)) {\n        fireJavascriptEvent(Event.TYPE_READY_STATE_CHANGE);\n        if (e instanceof SocketTimeoutException) {\n          fireJavascriptEvent(Event.TYPE_TIMEOUT);\n        }\n else {\n          fireJavascriptEvent(Event.TYPE_ERROR);\n        }\n        fireJavascriptEvent(Event.TYPE_LOAD_END);\n      }\n      throw JavaScriptEngine.throwAsScriptRuntimeEx(e);\n    }\n  }\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/xml/XMLHttpRequest.java",
        "Start": 38665,
        "Stop": 48091,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "doSend"
    },
    {
        "Old_Method": "/** \n * <p>Returns  {@code true} if this node is displayed and can be visible to the user(ignoring screen size, scrolling limitations, color, font-size, or overlapping nodes).<\/p> <p><b>NOTE:<\/b> If CSS is {@link org.htmlunit.WebClientOptions#setCssEnabled(boolean) disabled}, this method does <b>not<\/b> take this element's style into consideration!<\/p>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visufx.html#visibility\">CSS2 Visibility<\/a>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visuren.html#propdef-display\">CSS2 Display<\/a>\n * @see <a href=\"http://msdn.microsoft.com/en-us/library/ms531180.aspx\">MSDN Documentation<\/a>\n * @return {@code true} if the node is visible to the user, {@code false} otherwise\n * @see #mayBeDisplayed()\n */\npublic boolean isDisplayed(){\n  if (!mayBeDisplayed()) {\n    return false;\n  }\n  final Page page=getPage();\n  final WebWindow window=page.getEnclosingWindow();\n  final WebClient webClient=window.getWebClient();\n  if (webClient.getOptions().isCssEnabled()) {\n    final List<Node> ancestors=getAncestors();\n    final ArrayList<ComputedCssStyleDeclaration> styles=new ArrayList<>(ancestors.size());\n    for (    final Node node : ancestors) {\n      if (node instanceof HtmlElement) {\n        final HtmlElement elem=(HtmlElement)node;\n        if (elem.isHidden()) {\n          return false;\n        }\n        if (elem instanceof HtmlDialog) {\n          if (!((HtmlDialog)elem).isOpen()) {\n            return false;\n          }\n        }\n else {\n          final ComputedCssStyleDeclaration style=window.getComputedStyle(elem,null);\n          if (DisplayStyle.NONE.value().equals(style.getDisplay())) {\n            return false;\n          }\n          styles.add(style);\n        }\n      }\n    }\n    for (int i=styles.size() - 1; i >= 0; i--) {\n      final ComputedCssStyleDeclaration style=styles.get(i);\n      final String visibility=style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY,true);\n      if (visibility.length() > 5) {\n        if (\"visible\".equals(visibility)) {\n          return true;\n        }\n        if (\"hidden\".equals(visibility) || \"collapse\".equals(visibility)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/DomNode.java",
        "Start": 20200,
        "Stop": 23239,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "isDisplayed"
    },
    {
        "Old_Method": "/** \n * <p>Returns  {@code true} if this node is displayed and can be visible to the user(ignoring screen size, scrolling limitations, color, font-size, or overlapping nodes).<\/p> <p><b>NOTE:<\/b> If CSS is {@link org.htmlunit.WebClientOptions#setCssEnabled(boolean) disabled}, this method does <b>not<\/b> take this element's style into consideration!<\/p>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visufx.html#visibility\">CSS2 Visibility<\/a>\n * @see <a href=\"http://www.w3.org/TR/CSS2/visuren.html#propdef-display\">CSS2 Display<\/a>\n * @see <a href=\"http://msdn.microsoft.com/en-us/library/ms531180.aspx\">MSDN Documentation<\/a>\n * @return {@code true} if the node is visible to the user, {@code false} otherwise\n * @see #mayBeDisplayed()\n */\npublic boolean isDisplayed(){\n  if (!mayBeDisplayed()) {\n    return false;\n  }\n  final Page page=getPage();\n  final WebWindow window=page.getEnclosingWindow();\n  final WebClient webClient=window.getWebClient();\n  if (webClient.getOptions().isCssEnabled()) {\n    final List<Node> ancestors=getAncestors();\n    final ArrayList<ComputedCssStyleDeclaration> styles=new ArrayList<>(ancestors.size());\n    for (    final Node node : ancestors) {\n      if (node instanceof HtmlElement) {\n        final HtmlElement elem=(HtmlElement)node;\n        if (elem.isHidden()) {\n          return false;\n        }\n        if (elem instanceof HtmlDialog) {\n          if (!((HtmlDialog)elem).isOpen()) {\n            return false;\n          }\n        }\n else {\n          final ComputedCssStyleDeclaration style=window.getComputedStyle(elem,null);\n          if (DisplayStyle.NONE.value().equals(style.getDisplay())) {\n            return false;\n          }\n          styles.add(style);\n        }\n      }\n    }\n    for (int i=styles.size() - 1; i >= 0; i--) {\n      final ComputedCssStyleDeclaration style=styles.get(i);\n      final String visibility=style.getStyleAttribute(StyleAttributes.Definition.VISIBILITY,true);\n      if (visibility.length() > 5) {\n        if (\"visible\".equals(visibility)) {\n          return true;\n        }\n        if (\"hidden\".equals(visibility) || \"collapse\".equals(visibility)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/DomNode.java",
        "Start": 20200,
        "Stop": 23239,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "isDisplayed"
    },
    {
        "Old_Method": "/** \n * Returns the value of the property  {@code action}.\n * @return the value of this property\n */\n@JsxGetter public String getAction(){\n  final String action=getHtmlForm().getActionAttribute();\n  if (ATTRIBUTE_NOT_DEFINED == action && !getBrowserVersion().hasFeature(JS_FORM_ACTION_EXPANDURL_NOT_DEFINED)) {\n    return action;\n  }\n  try {\n    return ((HtmlPage)getHtmlForm().getPage()).getFullyQualifiedUrl(action).toExternalForm();\n  }\n catch (  final MalformedURLException e) {\n  }\n  return action;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/html/HTMLFormElement.java",
        "Start": 6297,
        "Stop": 6957,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "getAction"
    },
    {
        "Old_Method": "/** \n * Returns the value of the property  {@code action}.\n * @return the value of this property\n */\n@JsxGetter public String getAction(){\n  final String action=getHtmlForm().getActionAttribute();\n  if (ATTRIBUTE_NOT_DEFINED == action && !getBrowserVersion().hasFeature(JS_FORM_ACTION_EXPANDURL_NOT_DEFINED)) {\n    return action;\n  }\n  try {\n    return ((HtmlPage)getHtmlForm().getPage()).getFullyQualifiedUrl(action).toExternalForm();\n  }\n catch (  final MalformedURLException e) {\n  }\n  return action;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/javascript/host/html/HTMLFormElement.java",
        "Start": 6297,
        "Stop": 6957,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "getAction"
    },
    {
        "Old_Method": "public void run(){\n  if (!isSecure(sec)) {\n    return;\n  }\n  AccessController.doPrivileged(new PrivilegedAction(){\n    public Object run(){\n      Point p=getLocationOnScreen();\n      if (os.indexOf(\"MAC\") != -1) {\n        p=new Point();\n        int screen=0;\n        dohscreen=-1;\n        int mindifference=Integer.MAX_VALUE;\n        GraphicsDevice[] screens=GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n        try {\n          for (screen=0; screen < screens.length; screen++) {\n            Rectangle bounds=screens[screen].getDefaultConfiguration().getBounds();\n            DisplayMode mode=screens[screen].getDisplayMode();\n            int width=mode.getWidth();\n            int height=mode.getHeight();\n            int twidth=trackingImage.getWidth();\n            int theight=trackingImage.getHeight();\n            Robot screenshooter=new Robot(screens[screen]);\n            log(\"screen dimensions: \" + width + \" \"+ height);\n            BufferedImage screenshot=screenshooter.createScreenCapture(new Rectangle(0,0,width,height));\n            int x=0, y=0;\n            for (x=0; x <= width - twidth; x++) {\n              for (y=0; y <= height - theight; y++) {\n                int count=0;\n                int difference=0;\n                scanImage:                 for (int x2=0; x2 < twidth; x2++) {\n                  for (int y2=0; y2 < theight; y2++) {\n                    int rgbdiff=Math.abs(screenshot.getRGB(x + x2,y + y2) - trackingImage.getRGB(x2,y2));\n                    difference=difference + rgbdiff;\n                    if (difference >= mindifference) {\n                      break scanImage;\n                    }\n                  }\n                }\n                if (difference < mindifference) {\n                  p.x=x + (int)bounds.getX();\n                  p.y=y + (int)bounds.getY();\n                  mindifference=difference;\n                  dohscreen=screen;\n                }\n              }\n            }\n          }\n          robot=new Robot(screens[dohscreen]);\n          robot.setAutoWaitForIdle(true);\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n        }\n        if (p.x == 0 && p.y == 0) {\n          throw new RuntimeException(\"Robot not found on screen\");\n        }\n        locationOnScreen=p;\n      }\n else {\n        try {\n          robot=new Robot();\n          robot.setAutoWaitForIdle(true);\n        }\n catch (        Exception e) {\n        }\n      }\n      log(\"Document root: ~\" + p.toString());\n      int x=p.x + 16;\n      int y=p.y + 8;\n      try {\n        Thread.sleep(100);\n      }\n catch (      Exception e) {\n      }\n      ;\n      try {\n        robot=new Robot();\n        robot.setAutoWaitForIdle(true);\n        robot.mouseMove(x,y);\n        Thread.sleep(100);\n        int i=0;\n        for (i=0; i < 50 && !inited; i++) {\n          robot.mousePress(InputEvent.BUTTON1_MASK);\n          Thread.sleep(100);\n          robot.mouseRelease(InputEvent.BUTTON1_MASK);\n          Thread.sleep(100);\n          log(\"mouse clicked\");\n        }\n        if (i == 50) {\n          applet().stop();\n        }\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n      log(\"< _callLoaded Robot\");\n      return null;\n    }\n  }\n);\n}\n",
        "File_Path": "htmlunit/src/test/resources/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
        "Start": 9522,
        "Stop": 13535,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "run"
    },
    {
        "Old_Method": "public void run(){\n  if (!isSecure(sec)) {\n    return;\n  }\n  AccessController.doPrivileged(new PrivilegedAction(){\n    public Object run(){\n      Point p=getLocationOnScreen();\n      if (os.indexOf(\"MAC\") != -1) {\n        p=new Point();\n        int screen=0;\n        dohscreen=-1;\n        int mindifference=Integer.MAX_VALUE;\n        GraphicsDevice[] screens=GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n        try {\n          for (screen=0; screen < screens.length; screen++) {\n            Rectangle bounds=screens[screen].getDefaultConfiguration().getBounds();\n            DisplayMode mode=screens[screen].getDisplayMode();\n            int width=mode.getWidth();\n            int height=mode.getHeight();\n            int twidth=trackingImage.getWidth();\n            int theight=trackingImage.getHeight();\n            Robot screenshooter=new Robot(screens[screen]);\n            log(\"screen dimensions: \" + width + \" \"+ height);\n            BufferedImage screenshot=screenshooter.createScreenCapture(new Rectangle(0,0,width,height));\n            int x=0, y=0;\n            for (x=0; x <= width - twidth; x++) {\n              for (y=0; y <= height - theight; y++) {\n                int count=0;\n                int difference=0;\n                scanImage:                 for (int x2=0; x2 < twidth; x2++) {\n                  for (int y2=0; y2 < theight; y2++) {\n                    int rgbdiff=Math.abs(screenshot.getRGB(x + x2,y + y2) - trackingImage.getRGB(x2,y2));\n                    difference=difference + rgbdiff;\n                    if (difference >= mindifference) {\n                      break scanImage;\n                    }\n                  }\n                }\n                if (difference < mindifference) {\n                  p.x=x + (int)bounds.getX();\n                  p.y=y + (int)bounds.getY();\n                  mindifference=difference;\n                  dohscreen=screen;\n                }\n              }\n            }\n          }\n          robot=new Robot(screens[dohscreen]);\n          robot.setAutoWaitForIdle(true);\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n        }\n        if (p.x == 0 && p.y == 0) {\n          throw new RuntimeException(\"Robot not found on screen\");\n        }\n        locationOnScreen=p;\n      }\n else {\n        try {\n          robot=new Robot();\n          robot.setAutoWaitForIdle(true);\n        }\n catch (        Exception e) {\n        }\n      }\n      log(\"Document root: ~\" + p.toString());\n      int x=p.x + 16;\n      int y=p.y + 8;\n      try {\n        Thread.sleep(100);\n      }\n catch (      Exception e) {\n      }\n      ;\n      try {\n        robot=new Robot();\n        robot.setAutoWaitForIdle(true);\n        robot.mouseMove(x,y);\n        Thread.sleep(100);\n        int i=0;\n        for (i=0; i < 50 && !inited; i++) {\n          robot.mousePress(InputEvent.BUTTON1_MASK);\n          Thread.sleep(100);\n          robot.mouseRelease(InputEvent.BUTTON1_MASK);\n          Thread.sleep(100);\n          log(\"mouse clicked\");\n        }\n        if (i == 50) {\n          applet().stop();\n        }\n      }\n catch (      Exception e) {\n        e.printStackTrace();\n      }\n      log(\"< _callLoaded Robot\");\n      return null;\n    }\n  }\n);\n}\n",
        "File_Path": "htmlunit/src/test/resources/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
        "Start": 9522,
        "Stop": 13535,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "run"
    },
    {
        "Old_Method": "/** \n * Simulates typing the specified character while this element has focus, returning the page contained by this element's window after typing. Note that it may or may not be the same as the original page, depending on the JavaScript event handlers, etc. Note also that for some elements, typing <code>'\\n'<\/code> submits the enclosed form.\n * @param c the character you wish to simulate typing\n * @param lastType is this the last character to type\n * @return the page contained in the current window as returned by {@link WebClient#getCurrentWindow()}\n * @exception IOException if an IO error occurs\n */\nprivate Page type(final char c,final boolean lastType) throws IOException {\n  if (isDisabledElementAndDisabled()) {\n    return getPage();\n  }\n  getPage().getWebClient().setCurrentWindow(getPage().getEnclosingWindow());\n  final HtmlPage page=(HtmlPage)getPage();\n  if (page.getFocusedElement() != this) {\n    focus();\n  }\n  final boolean isShiftNeeded=KeyboardEvent.isShiftNeeded(c,shiftPressed_);\n  final Event shiftDown;\n  final ScriptResult shiftDownResult;\n  if (isShiftNeeded) {\n    shiftDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,KeyboardEvent.DOM_VK_SHIFT,true,ctrlPressed_,altPressed_);\n    shiftDownResult=fireEvent(shiftDown);\n  }\n else {\n    shiftDown=null;\n    shiftDownResult=null;\n  }\n  final Event keyDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n  final ScriptResult keyDownResult=fireEvent(keyDown);\n  if (!keyDown.isAborted(keyDownResult)) {\n    final Event keyPress=new KeyboardEvent(this,Event.TYPE_KEY_PRESS,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n    final ScriptResult keyPressResult=fireEvent(keyPress);\n    if ((shiftDown == null || !shiftDown.isAborted(shiftDownResult)) && !keyPress.isAborted(keyPressResult)) {\n      doType(c,lastType);\n    }\n  }\n  final WebClient webClient=page.getWebClient();\n  if (this instanceof HtmlTextInput || this instanceof HtmlTextArea || this instanceof HtmlTelInput|| this instanceof HtmlNumberInput|| this instanceof HtmlSearchInput|| this instanceof HtmlPasswordInput) {\n    fireEvent(new KeyboardEvent(this,Event.TYPE_INPUT,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_));\n  }\n  HtmlElement eventSource=this;\n  if (!isAttachedToPage()) {\n    final BrowserVersion browserVersion=page.getWebClient().getBrowserVersion();\n    if (browserVersion.hasFeature(HTMLELEMENT_DETACH_ACTIVE_TRIGGERS_NO_KEYUP_EVENT)) {\n      eventSource=null;\n    }\n else {\n      eventSource=page.getBody();\n    }\n  }\n  if (eventSource != null) {\n    final Event keyUp=new KeyboardEvent(this,Event.TYPE_KEY_UP,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n    eventSource.fireEvent(keyUp);\n    if (isShiftNeeded) {\n      final Event shiftUp=new KeyboardEvent(this,Event.TYPE_KEY_UP,KeyboardEvent.DOM_VK_SHIFT,false,ctrlPressed_,altPressed_);\n      eventSource.fireEvent(shiftUp);\n    }\n  }\n  final HtmlForm form=getEnclosingForm();\n  if (form != null && c == '\\n' && isSubmittableByEnter()) {\n    final HtmlSubmitInput submit=form.getFirstByXPath(\".//input[@type='submit']\");\n    if (submit != null) {\n      return submit.click();\n    }\n    form.submit((SubmittableElement)this);\n    webClient.getJavaScriptEngine().processPostponedActions();\n  }\n  return webClient.getCurrentWindow().getEnclosedPage();\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlElement.java",
        "Start": 20113,
        "Stop": 24471,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "type"
    },
    {
        "Old_Method": "/** \n * Simulates typing the specified character while this element has focus, returning the page contained by this element's window after typing. Note that it may or may not be the same as the original page, depending on the JavaScript event handlers, etc. Note also that for some elements, typing <code>'\\n'<\/code> submits the enclosed form.\n * @param c the character you wish to simulate typing\n * @param lastType is this the last character to type\n * @return the page contained in the current window as returned by {@link WebClient#getCurrentWindow()}\n * @exception IOException if an IO error occurs\n */\nprivate Page type(final char c,final boolean lastType) throws IOException {\n  if (isDisabledElementAndDisabled()) {\n    return getPage();\n  }\n  getPage().getWebClient().setCurrentWindow(getPage().getEnclosingWindow());\n  final HtmlPage page=(HtmlPage)getPage();\n  if (page.getFocusedElement() != this) {\n    focus();\n  }\n  final boolean isShiftNeeded=KeyboardEvent.isShiftNeeded(c,shiftPressed_);\n  final Event shiftDown;\n  final ScriptResult shiftDownResult;\n  if (isShiftNeeded) {\n    shiftDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,KeyboardEvent.DOM_VK_SHIFT,true,ctrlPressed_,altPressed_);\n    shiftDownResult=fireEvent(shiftDown);\n  }\n else {\n    shiftDown=null;\n    shiftDownResult=null;\n  }\n  final Event keyDown=new KeyboardEvent(this,Event.TYPE_KEY_DOWN,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n  final ScriptResult keyDownResult=fireEvent(keyDown);\n  if (!keyDown.isAborted(keyDownResult)) {\n    final Event keyPress=new KeyboardEvent(this,Event.TYPE_KEY_PRESS,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n    final ScriptResult keyPressResult=fireEvent(keyPress);\n    if ((shiftDown == null || !shiftDown.isAborted(shiftDownResult)) && !keyPress.isAborted(keyPressResult)) {\n      doType(c,lastType);\n    }\n  }\n  final WebClient webClient=page.getWebClient();\n  if (this instanceof HtmlTextInput || this instanceof HtmlTextArea || this instanceof HtmlTelInput|| this instanceof HtmlNumberInput|| this instanceof HtmlSearchInput|| this instanceof HtmlPasswordInput) {\n    fireEvent(new KeyboardEvent(this,Event.TYPE_INPUT,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_));\n  }\n  HtmlElement eventSource=this;\n  if (!isAttachedToPage()) {\n    final BrowserVersion browserVersion=page.getWebClient().getBrowserVersion();\n    if (browserVersion.hasFeature(HTMLELEMENT_DETACH_ACTIVE_TRIGGERS_NO_KEYUP_EVENT)) {\n      eventSource=null;\n    }\n else {\n      eventSource=page.getBody();\n    }\n  }\n  if (eventSource != null) {\n    final Event keyUp=new KeyboardEvent(this,Event.TYPE_KEY_UP,c,shiftPressed_ || isShiftNeeded,ctrlPressed_,altPressed_);\n    eventSource.fireEvent(keyUp);\n    if (isShiftNeeded) {\n      final Event shiftUp=new KeyboardEvent(this,Event.TYPE_KEY_UP,KeyboardEvent.DOM_VK_SHIFT,false,ctrlPressed_,altPressed_);\n      eventSource.fireEvent(shiftUp);\n    }\n  }\n  final HtmlForm form=getEnclosingForm();\n  if (form != null && c == '\\n' && isSubmittableByEnter()) {\n    final HtmlSubmitInput submit=form.getFirstByXPath(\".//input[@type='submit']\");\n    if (submit != null) {\n      return submit.click();\n    }\n    form.submit((SubmittableElement)this);\n    webClient.getJavaScriptEngine().processPostponedActions();\n  }\n  return webClient.getCurrentWindow().getEnclosedPage();\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/html/HtmlElement.java",
        "Start": 20113,
        "Stop": 24471,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "type"
    },
    {
        "Old_Method": "/** \n * @throws Exception if an error occurs\n */\n@Test public void go() throws Exception {\n  final WebClient client=getWebClient();\n  final TopLevelWindow window=(TopLevelWindow)client.getCurrentWindow();\n  final History history=window.getHistory();\n  final String urlA=URL_FIRST + \"HistoryTest_a.html\";\n  final String urlB=URL_FIRST + \"HistoryTest_b.html\";\n  final String urlBX=URL_FIRST + \"HistoryTest_b.html#x\";\n  final String urlC=URL_FIRST + \"HistoryTest_c.html\";\n  HtmlPage page=client.getPage(urlA);\n  assertEquals(1,history.getLength());\n  assertEquals(0,history.getIndex());\n  assertEquals(urlA,page.getUrl());\n  page=page.getAnchorByName(\"b\").click();\n  assertEquals(2,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n  page=page.getAnchorByName(\"x\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(2,history.getIndex());\n  assertEquals(urlBX,page.getUrl());\n  page=page.getAnchorByName(\"minusTwo\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(0,history.getIndex());\n  assertEquals(urlA,page.getUrl());\n  page=page.getAnchorByName(\"plusOne\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n  page=page.getAnchorByName(\"c\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(2,history.getIndex());\n  assertEquals(urlC,page.getUrl());\n  page=page.getAnchorByName(\"minusOne\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n  page=page.getAnchorByName(\"plusTwo\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n}\n",
        "File_Path": "htmlunit/src/test/java/org/htmlunit/javascript/host/HistoryTest.java",
        "Start": 3595,
        "Stop": 5645,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "go"
    },
    {
        "Old_Method": "/** \n * @throws Exception if an error occurs\n */\n@Test public void go() throws Exception {\n  final WebClient client=getWebClient();\n  final TopLevelWindow window=(TopLevelWindow)client.getCurrentWindow();\n  final History history=window.getHistory();\n  final String urlA=URL_FIRST + \"HistoryTest_a.html\";\n  final String urlB=URL_FIRST + \"HistoryTest_b.html\";\n  final String urlBX=URL_FIRST + \"HistoryTest_b.html#x\";\n  final String urlC=URL_FIRST + \"HistoryTest_c.html\";\n  HtmlPage page=client.getPage(urlA);\n  assertEquals(1,history.getLength());\n  assertEquals(0,history.getIndex());\n  assertEquals(urlA,page.getUrl());\n  page=page.getAnchorByName(\"b\").click();\n  assertEquals(2,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n  page=page.getAnchorByName(\"x\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(2,history.getIndex());\n  assertEquals(urlBX,page.getUrl());\n  page=page.getAnchorByName(\"minusTwo\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(0,history.getIndex());\n  assertEquals(urlA,page.getUrl());\n  page=page.getAnchorByName(\"plusOne\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n  page=page.getAnchorByName(\"c\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(2,history.getIndex());\n  assertEquals(urlC,page.getUrl());\n  page=page.getAnchorByName(\"minusOne\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n  page=page.getAnchorByName(\"plusTwo\").click();\n  assertEquals(3,history.getLength());\n  assertEquals(1,history.getIndex());\n  assertEquals(urlB,page.getUrl());\n}\n",
        "File_Path": "htmlunit/src/test/java/org/htmlunit/javascript/host/HistoryTest.java",
        "Start": 3595,
        "Stop": 5645,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "go"
    },
    {
        "Old_Method": "/** \n * Loads a  {@link WebResponse} from the server through the WebConnection.\n * @param webRequest the request\n * @param allowedRedirects the number of allowed redirects remaining\n * @throws IOException if an IO problem occurs\n * @return the resultant {@link WebResponse}\n */\nprivate WebResponse loadWebResponseFromWebConnection(final WebRequest webRequest,final int allowedRedirects) throws IOException {\n  URL url=webRequest.getUrl();\n  final HttpMethod method=webRequest.getHttpMethod();\n  final List<NameValuePair> parameters=webRequest.getRequestParameters();\n  WebAssert.notNull(\"url\",url);\n  WebAssert.notNull(\"method\",method);\n  WebAssert.notNull(\"parameters\",parameters);\n  url=UrlUtils.encodeUrl(url,getBrowserVersion().hasFeature(URL_MINIMAL_QUERY_ENCODING),webRequest.getCharset());\n  webRequest.setUrl(url);\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Load response for \" + method + \" \"+ url.toExternalForm());\n  }\n  if (webRequest.getProxyHost() == null) {\n    final ProxyConfig proxyConfig=getOptions().getProxyConfig();\n    if (proxyConfig.getProxyAutoConfigUrl() != null) {\n      if (!UrlUtils.sameFile(new URL(proxyConfig.getProxyAutoConfigUrl()),url)) {\n        String content=proxyConfig.getProxyAutoConfigContent();\n        if (content == null) {\n          content=getPage(proxyConfig.getProxyAutoConfigUrl()).getWebResponse().getContentAsString();\n          proxyConfig.setProxyAutoConfigContent(content);\n        }\n        final String allValue=ProxyAutoConfig.evaluate(content,url);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Proxy Auto-Config: value '\" + allValue + \"' for URL \"+ url);\n        }\n        String value=allValue.split(\";\")[0].trim();\n        if (value.startsWith(\"PROXY\")) {\n          value=value.substring(6);\n          final int colonIndex=value.indexOf(':');\n          webRequest.setSocksProxy(false);\n          webRequest.setProxyHost(value.substring(0,colonIndex));\n          webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n        }\n else         if (value.startsWith(\"SOCKS\")) {\n          value=value.substring(6);\n          final int colonIndex=value.indexOf(':');\n          webRequest.setSocksProxy(true);\n          webRequest.setProxyHost(value.substring(0,colonIndex));\n          webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n        }\n      }\n    }\n else     if (!proxyConfig.shouldBypassProxy(webRequest.getUrl().getHost())) {\n      webRequest.setProxyHost(proxyConfig.getProxyHost());\n      webRequest.setProxyPort(proxyConfig.getProxyPort());\n      webRequest.setProxyScheme(proxyConfig.getProxyScheme());\n      webRequest.setSocksProxy(proxyConfig.isSocksProxy());\n    }\n  }\n  addDefaultHeaders(webRequest);\n  final WebResponse fromCache=getCache().getCachedResponse(webRequest);\n  final WebResponse webResponse=getWebResponseOrUseCached(webRequest,fromCache);\n  final int status=webResponse.getStatusCode();\n  if (status == HttpClientConverter.USE_PROXY) {\n    getIncorrectnessListener().notify(\"Ignoring HTTP status code [305] 'Use Proxy'\",this);\n  }\n else   if (status >= HttpClientConverter.MOVED_PERMANENTLY && status <= 308 && status != HttpClientConverter.NOT_MODIFIED && getOptions().isRedirectEnabled()) {\n    URL newUrl;\n    String locationString=null;\n    try {\n      locationString=webResponse.getResponseHeaderValue(\"Location\");\n      if (locationString == null) {\n        return webResponse;\n      }\n      if (!getBrowserVersion().hasFeature(URL_MINIMAL_QUERY_ENCODING)) {\n        locationString=new String(locationString.getBytes(ISO_8859_1),UTF_8);\n      }\n      newUrl=expandUrl(url,locationString);\n      if (getBrowserVersion().hasFeature(HTTP_REDIRECT_WITHOUT_HASH)) {\n        newUrl=UrlUtils.getUrlWithNewRef(newUrl,null);\n      }\n    }\n catch (    final MalformedURLException e) {\n      getIncorrectnessListener().notify(\"Got a redirect status code [\" + status + \" \"+ webResponse.getStatusMessage()+ \"] but the location is not a valid URL [\"+ locationString+ \"]. Skipping redirection processing.\",this);\n      return webResponse;\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got a redirect status code [\" + status + \"] new location = [\"+ locationString+ \"]\");\n    }\n    if (allowedRedirects == 0) {\n      throw new FailingHttpStatusCodeException(\"Too much redirect for \" + webResponse.getWebRequest().getUrl(),webResponse);\n    }\n    if (status == HttpClientConverter.MOVED_PERMANENTLY || status == HttpClientConverter.MOVED_TEMPORARILY || status == HttpClientConverter.SEE_OTHER) {\n      final WebRequest wrs=new WebRequest(newUrl,HttpMethod.GET);\n      wrs.setCharset(webRequest.getCharset());\n      if (HttpMethod.HEAD == webRequest.getHttpMethod()) {\n        wrs.setHttpMethod(HttpMethod.HEAD);\n      }\n      for (      final Map.Entry<String,String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n        wrs.setAdditionalHeader(entry.getKey(),entry.getValue());\n      }\n      return loadWebResponseFromWebConnection(wrs,allowedRedirects - 1);\n    }\n else     if (status == HttpClientConverter.TEMPORARY_REDIRECT || status == HttpClientConverter.PERMANENT_REDIRECT) {\n      final WebRequest wrs=new WebRequest(newUrl,webRequest.getHttpMethod());\n      wrs.setCharset(webRequest.getCharset());\n      if (webRequest.getRequestBody() != null) {\n        if (HttpMethod.POST == webRequest.getHttpMethod() || HttpMethod.PUT == webRequest.getHttpMethod() || HttpMethod.PATCH == webRequest.getHttpMethod()) {\n          wrs.setRequestBody(webRequest.getRequestBody());\n          wrs.setEncodingType(webRequest.getEncodingType());\n        }\n      }\n else {\n        wrs.setRequestParameters(parameters);\n      }\n      for (      final Map.Entry<String,String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n        wrs.setAdditionalHeader(entry.getKey(),entry.getValue());\n      }\n      return loadWebResponseFromWebConnection(wrs,allowedRedirects - 1);\n    }\n  }\n  if (fromCache == null) {\n    getCache().cacheIfPossible(webRequest,webResponse,null);\n  }\n  return webResponse;\n}\n",
        "File_Path": "htmlunit/src/main/java/org/htmlunit/WebClient.java",
        "Start": 64498,
        "Stop": 72653,
        "Project_Name": "data/projects/htmlunit",
        "Method_Name": "loadWebResponseFromWebConnection"
    }
]
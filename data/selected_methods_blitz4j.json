[
    {
        "Old_Method": "public MessageBatcher(String name,MessageProcessor target){\n  this.name=BATCHER_PREFIX + name;\n  this.target=target;\n  queue=new ArrayBlockingQueue<T>(CONFIGURATION.getBatcherQueueMaxMessages(this.name));\n  setBatchMaxMessages(CONFIGURATION.getBatchSize(this.name));\n  batch=new ArrayList<Object>(maxMessages);\n  setBatchMaxDelay(CONFIGURATION.getBatcherMaxDelay(this.name));\n  collector=new Collector(this,this.name + COLLECTOR_SUFFIX);\n  createProcessor(this.name);\n  queueSizeTracer=Monitors.newTimer(\"queue_size\");\n  batchSyncPutTracer=Monitors.newTimer(\"waitTimeforBuffer\");\n  avgBatchSizeTracer=Monitors.newTimer(\"batch_size\");\n  processCount=Monitors.newCounter(\"messages_processed\");\n  threadSubmitTracer=Monitors.newTimer(\"thread_invocation_time\");\n  processTimeTracer=Monitors.newTimer(\"message_processTime\");\n  queueOverflowCounter=Monitors.newCounter(\"queue_overflow\");\n  blockingProperty=CONFIGURATION.shouldWaitWhenBatcherQueueNotEmpty(this.name);\n  collector.setDaemon(true);\n  collector.start();\n  try {\n    Monitors.registerObject(this.name,this);\n  }\n catch (  Throwable e) {\n    if (CONFIGURATION.shouldPrintLoggingErrors()) {\n      e.printStackTrace();\n    }\n  }\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/logging/messaging/MessageBatcher.java",
        "Start": 4433,
        "Stop": 5937,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "MessageBatcher"
    },
    {
        "Old_Method": "public MessageBatcher(String name,MessageProcessor target){\n  this.name=BATCHER_PREFIX + name;\n  this.target=target;\n  queue=new ArrayBlockingQueue<T>(CONFIGURATION.getBatcherQueueMaxMessages(this.name));\n  setBatchMaxMessages(CONFIGURATION.getBatchSize(this.name));\n  batch=new ArrayList<Object>(maxMessages);\n  setBatchMaxDelay(CONFIGURATION.getBatcherMaxDelay(this.name));\n  collector=new Collector(this,this.name + COLLECTOR_SUFFIX);\n  createProcessor(this.name);\n  queueSizeTracer=Monitors.newTimer(\"queue_size\");\n  batchSyncPutTracer=Monitors.newTimer(\"waitTimeforBuffer\");\n  avgBatchSizeTracer=Monitors.newTimer(\"batch_size\");\n  processCount=Monitors.newCounter(\"messages_processed\");\n  threadSubmitTracer=Monitors.newTimer(\"thread_invocation_time\");\n  processTimeTracer=Monitors.newTimer(\"message_processTime\");\n  queueOverflowCounter=Monitors.newCounter(\"queue_overflow\");\n  blockingProperty=CONFIGURATION.shouldWaitWhenBatcherQueueNotEmpty(this.name);\n  collector.setDaemon(true);\n  collector.start();\n  try {\n    Monitors.registerObject(this.name,this);\n  }\n catch (  Throwable e) {\n    if (CONFIGURATION.shouldPrintLoggingErrors()) {\n      e.printStackTrace();\n    }\n  }\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/logging/messaging/MessageBatcher.java",
        "Start": 4433,
        "Stop": 5937,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "MessageBatcher"
    },
    {
        "Old_Method": "/** \n * Kick start the blitz4j implementation.\n * @param props - The overriding <em>log4j<\/em> properties if any.\n */\npublic void configure(Properties props){\n  this.refreshCount.set(0);\n  this.overrideProps.clear();\n  this.originalAsyncAppenderNameMap.clear();\n  String log4jConfigurationFile=System.getProperty(PROP_LOG4J_CONFIGURATION);\n  NFHierarchy nfHierarchy=null;\n  if ((!NFHierarchy.class.equals(LogManager.getLoggerRepository().getClass()))) {\n    nfHierarchy=new NFHierarchy(new NFRootLogger(org.apache.log4j.Level.INFO));\n    org.apache.log4j.LogManager.setRepositorySelector(new NFRepositorySelector(nfHierarchy),guard);\n  }\n  String log4jLoggerFactory=System.getProperty(PROP_LOG4J_LOGGER_FACTORY);\n  if (log4jLoggerFactory != null) {\n    this.initialProps.setProperty(PROP_LOG4J_LOGGER_FACTORY,log4jLoggerFactory);\n    if (nfHierarchy != null) {\n      try {\n        LoggerFactory loggerFactory=(LoggerFactory)Class.forName(log4jLoggerFactory).newInstance();\n        nfHierarchy.setLoggerFactory(loggerFactory);\n      }\n catch (      Exception e) {\n        System.err.println(\"Cannot set the logger factory. Hence reverting to default.\");\n        e.printStackTrace();\n      }\n    }\n  }\n else {\n    this.initialProps.setProperty(PROP_LOG4J_LOGGER_FACTORY,BLITZ_LOGGER_FACTORY);\n  }\n  if (log4jConfigurationFile != null) {\n    loadLog4jConfigurationFile(log4jConfigurationFile);\n    clearAsyncAppenderList();\n    PropertyConfigurator.configure(this.initialProps);\n  }\n  this.blitz4jConfig=new DefaultBlitz4jConfig(props);\n  if ((log4jConfigurationFile == null) && (blitz4jConfig.shouldLoadLog4jPropertiesFromClassPath())) {\n    try {\n      URL url=Loader.getResource(LOG4J_PROPERTIES);\n      if (url != null) {\n        try (InputStream in=url.openStream()){\n          this.initialProps.load(in);\n        }\n       }\n    }\n catch (    Exception t) {\n      System.err.println(\"Error loading properties from \" + LOG4J_PROPERTIES);\n    }\n  }\n  Enumeration enumeration=props.propertyNames();\n  while (enumeration.hasMoreElements()) {\n    String key=(String)enumeration.nextElement();\n    String propertyValue=props.getProperty(key);\n    this.initialProps.setProperty(key,propertyValue);\n  }\n  this.blitz4jConfig=new DefaultBlitz4jConfig(this.initialProps);\n  String[] asyncAppenderArray=blitz4jConfig.getAsyncAppenders();\n  if (asyncAppenderArray == null) {\n    return;\n  }\n  for (int i=0; i < asyncAppenderArray.length; i++) {\n    String oneAppenderName=asyncAppenderArray[i];\n    if ((i == 0) || (oneAppenderName == null)) {\n      continue;\n    }\n    oneAppenderName=oneAppenderName.trim();\n    String oneAsyncAppenderName=oneAppenderName + ASYNC_APPENDERNAME_SUFFIX;\n    originalAsyncAppenderNameMap.put(oneAppenderName,oneAsyncAppenderName);\n  }\n  try {\n    convertConfiguredAppendersToAsync(this.initialProps);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(\"Could not configure async appenders \",e);\n  }\n  this.blitz4jConfig=new DefaultBlitz4jConfig(this.initialProps);\n  clearAsyncAppenderList();\n  PropertyConfigurator.configure(this.initialProps);\n  closeNonexistingAsyncAppenders();\n  this.logger=org.slf4j.LoggerFactory.getLogger(LoggingConfiguration.class);\n  ConfigurationManager.getConfigInstance().addConfigurationListener(new ExpandedConfigurationListenerAdapter(this));\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/LoggingConfiguration.java",
        "Start": 4787,
        "Stop": 9182,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "configure"
    },
    {
        "Old_Method": "/** \n * Process the logging events. This is called by the batcher.\n * @param loggingEvents - The logging events to be written to the underlying appender\n */\nprivate void processLoggingEvents(List<LoggingEvent> loggingEvents){\n  while (appenders.getAllAppenders() == null || (appenders != null && !appenders.getAllAppenders().hasMoreElements())) {\n    if ((batcher == null) || (batcher.isPaused())) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    org.apache.log4j.Logger asyncLogger=LoggerCache.getInstance().getOrCreateLogger(LOGGER_ASYNC_APPENDER);\n    Appender originalAppender=asyncLogger.getAppender(originalAppenderName);\n    if (originalAppender == null) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    appenders.addAppender(originalAppender);\n  }\n  for (Iterator<Entry<String,LogSummary>> iter=logSummaryMap.entrySet().iterator(); iter.hasNext(); ) {\n    Entry<String,LogSummary> mapEntry=(Entry<String,LogSummary>)iter.next();\n    if (batcher.isSpaceAvailable()) {\n      LogSummary logSummary=mapEntry.getValue();\n      LoggingEvent event=logSummary.createEvent();\n      if (batcher.process(event)) {\n        iter.remove();\n      }\n else {\n        break;\n      }\n    }\n else {\n      break;\n    }\n  }\n  for (  LoggingEvent event : loggingEvents) {\n    appenders.appendLoopOnAppenders(event);\n  }\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/AsyncAppender.java",
        "Start": 5676,
        "Stop": 8133,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "processLoggingEvents"
    },
    {
        "Old_Method": "/** \n * Process the logging events. This is called by the batcher.\n * @param loggingEvents - The logging events to be written to the underlying appender\n */\nprivate void processLoggingEvents(List<LoggingEvent> loggingEvents){\n  while (appenders.getAllAppenders() == null || (appenders != null && !appenders.getAllAppenders().hasMoreElements())) {\n    if ((batcher == null) || (batcher.isPaused())) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    org.apache.log4j.Logger asyncLogger=LoggerCache.getInstance().getOrCreateLogger(LOGGER_ASYNC_APPENDER);\n    Appender originalAppender=asyncLogger.getAppender(originalAppenderName);\n    if (originalAppender == null) {\n      try {\n        Thread.sleep(SLEEP_TIME_MS);\n      }\n catch (      InterruptedException ignore) {\n      }\n      continue;\n    }\n    appenders.addAppender(originalAppender);\n  }\n  for (Iterator<Entry<String,LogSummary>> iter=logSummaryMap.entrySet().iterator(); iter.hasNext(); ) {\n    Entry<String,LogSummary> mapEntry=(Entry<String,LogSummary>)iter.next();\n    if (batcher.isSpaceAvailable()) {\n      LogSummary logSummary=mapEntry.getValue();\n      LoggingEvent event=logSummary.createEvent();\n      if (batcher.process(event)) {\n        iter.remove();\n      }\n else {\n        break;\n      }\n    }\n else {\n      break;\n    }\n  }\n  for (  LoggingEvent event : loggingEvents) {\n    appenders.appendLoopOnAppenders(event);\n  }\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/AsyncAppender.java",
        "Start": 5676,
        "Stop": 8133,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "processLoggingEvents"
    },
    {
        "Old_Method": "@Override public boolean isAttached(Appender appender){\n  if (appenderList == null || appender == null)   return false;\n  Appender a;\n  Iterator<Appender> it=appenderList.iterator();\n  while (it.hasNext()) {\n    a=(Appender)it.next();\n    if (a == appender) {\n      return true;\n    }\n  }\n  return false;\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/NFAppenderAttachableImpl.java",
        "Start": 4455,
        "Stop": 4855,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "isAttached"
    },
    {
        "Old_Method": "@Override public boolean isAttached(Appender appender){\n  if (appenderList == null || appender == null)   return false;\n  Appender a;\n  Iterator<Appender> it=appenderList.iterator();\n  while (it.hasNext()) {\n    a=(Appender)it.next();\n    if (a == appender) {\n      return true;\n    }\n  }\n  return false;\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/NFAppenderAttachableImpl.java",
        "Start": 4455,
        "Stop": 4855,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "isAttached"
    },
    {
        "Old_Method": "@Test public void testAsyncAppendersWithWhiteSpace() throws Exception {\n  props.setProperty(\"log4j.rootCategory\",\"OFF\");\n  props.setProperty(\"log4j.logger.com.netflix.blitz4j.TestBlitz4j\",\"INFO, stdout\");\n  props.setProperty(\"log4j.logger.com.netflix.blitz4j.TestBlitz4j$1\",\"INFO,stdout\");\n  props.setProperty(\"log4j.appender.stdout\",\"org.apache.log4j.ConsoleAppender\");\n  props.setProperty(\"log4j.appender.stdout.layout\",\"com.netflix.logging.log4jAdapter.NFPatternLayout\");\n  props.setProperty(\"log4j.appender.stdout.layout.ConversionPattern\",\"%d %-5p %C:%L [%t] [%M] %m%n\");\n  props.setProperty(\"log4j.logger.asyncAppenders\",\"INFO,stdout\");\n  props.setProperty(\"batcher.com.netflix.logging.AsyncAppender.stdout.waitTimeinMillis\",\"120000\");\n  LoggingConfiguration.getInstance().configure(props);\n  int noOfThreads=100;\n  Thread[] tArray=new Thread[noOfThreads];\n  for (int i=0; i < noOfThreads; i++) {\n    Thread t1=new Thread(new Runnable(){\n      public void run(){\n        int i=0;\n        while (i < 1000) {\n          i++;\n          Logger slflogger=LoggerFactory.getLogger(TestBlitz4j.class);\n          slflogger.info(\"Testing named log with this string {}\",\"Test String\");\n          Thread.yield();\n          try {\n            Thread.sleep(10);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n);\n    tArray[i]=t1;\n  }\n  Thread t2=new Thread(new Runnable(){\n    public void run(){\n      int i=0;\n      while (i <= 1000) {\n        try {\n          ConfigurationManager.getConfigInstance().setProperty(\"log4j.junk\",(i++) + \"\");\n          Thread.sleep(10);\n          Thread.yield();\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n);\n  for (int i=0; i < noOfThreads; i++) {\n    tArray[i].start();\n  }\n  t2.start();\n  t2.join();\n  for (int i=0; i < noOfThreads; i++) {\n    tArray[i].join();\n  }\n  int numSummarizedConsole=0;\n  try {\n    numSummarizedConsole=Integer.valueOf(getMonitoringData(consoleSummarizeEvent));\n  }\n catch (  Throwable e) {\n  }\n  int numAddedConsole=Integer.valueOf(getMonitoringData(consoleEventsProcessed));\n  System.out.println(\"The number of messages added to async batcher console: \" + numAddedConsole);\n  System.out.println(\"The number of messages summarized from async batcher console : \" + numSummarizedConsole);\n  System.out.println(\"Total number of messages to asyncBatcher console: \" + (numAddedConsole + numSummarizedConsole));\n  Assert.assertTrue(((numAddedConsole + numSummarizedConsole) >= 100000));\n  LoggingConfiguration.getInstance().stop();\n}\n",
        "File_Path": "blitz4j/src/test/java/com/netflix/blitz4j/TestBlitz4j.java",
        "Start": 5898,
        "Stop": 9749,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "testAsyncAppendersWithWhiteSpace"
    },
    {
        "Old_Method": "@Test public void testAsyncAppendersWithWhiteSpace() throws Exception {\n  props.setProperty(\"log4j.rootCategory\",\"OFF\");\n  props.setProperty(\"log4j.logger.com.netflix.blitz4j.TestBlitz4j\",\"INFO, stdout\");\n  props.setProperty(\"log4j.logger.com.netflix.blitz4j.TestBlitz4j$1\",\"INFO,stdout\");\n  props.setProperty(\"log4j.appender.stdout\",\"org.apache.log4j.ConsoleAppender\");\n  props.setProperty(\"log4j.appender.stdout.layout\",\"com.netflix.logging.log4jAdapter.NFPatternLayout\");\n  props.setProperty(\"log4j.appender.stdout.layout.ConversionPattern\",\"%d %-5p %C:%L [%t] [%M] %m%n\");\n  props.setProperty(\"log4j.logger.asyncAppenders\",\"INFO,stdout\");\n  props.setProperty(\"batcher.com.netflix.logging.AsyncAppender.stdout.waitTimeinMillis\",\"120000\");\n  LoggingConfiguration.getInstance().configure(props);\n  int noOfThreads=100;\n  Thread[] tArray=new Thread[noOfThreads];\n  for (int i=0; i < noOfThreads; i++) {\n    Thread t1=new Thread(new Runnable(){\n      public void run(){\n        int i=0;\n        while (i < 1000) {\n          i++;\n          Logger slflogger=LoggerFactory.getLogger(TestBlitz4j.class);\n          slflogger.info(\"Testing named log with this string {}\",\"Test String\");\n          Thread.yield();\n          try {\n            Thread.sleep(10);\n          }\n catch (          InterruptedException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n);\n    tArray[i]=t1;\n  }\n  Thread t2=new Thread(new Runnable(){\n    public void run(){\n      int i=0;\n      while (i <= 1000) {\n        try {\n          ConfigurationManager.getConfigInstance().setProperty(\"log4j.junk\",(i++) + \"\");\n          Thread.sleep(10);\n          Thread.yield();\n        }\n catch (        Exception e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n);\n  for (int i=0; i < noOfThreads; i++) {\n    tArray[i].start();\n  }\n  t2.start();\n  t2.join();\n  for (int i=0; i < noOfThreads; i++) {\n    tArray[i].join();\n  }\n  int numSummarizedConsole=0;\n  try {\n    numSummarizedConsole=Integer.valueOf(getMonitoringData(consoleSummarizeEvent));\n  }\n catch (  Throwable e) {\n  }\n  int numAddedConsole=Integer.valueOf(getMonitoringData(consoleEventsProcessed));\n  System.out.println(\"The number of messages added to async batcher console: \" + numAddedConsole);\n  System.out.println(\"The number of messages summarized from async batcher console : \" + numSummarizedConsole);\n  System.out.println(\"Total number of messages to asyncBatcher console: \" + (numAddedConsole + numSummarizedConsole));\n  Assert.assertTrue(((numAddedConsole + numSummarizedConsole) >= 100000));\n  LoggingConfiguration.getInstance().stop();\n}\n",
        "File_Path": "blitz4j/src/test/java/com/netflix/blitz4j/TestBlitz4j.java",
        "Start": 5898,
        "Stop": 9749,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "testAsyncAppendersWithWhiteSpace"
    },
    {
        "Old_Method": "/** \n * Convert appenders specified by the property <code>log4j.logger.asyncAppender<\/code> to the blitz4j Asynchronous appenders.\n * @param props - The properties that need to be passed into the log4j for configuration.\n * @throws ConfigurationException\n * @throws FileNotFoundException\n */\nprivate void convertConfiguredAppendersToAsync(Properties props) throws ConfigurationException, FileNotFoundException {\n  for (  Map.Entry<String,String> originalAsyncAppenderMapEntry : originalAsyncAppenderNameMap.entrySet()) {\n    String asyncAppenderName=originalAsyncAppenderMapEntry.getValue();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName,AsyncAppender.class.getName());\n    String originalAppenderName=originalAsyncAppenderMapEntry.getKey();\n    props.setProperty(LOG4J_APPENDER_PREFIX + LOG4J_APPENDER_DELIMITER + asyncAppenderName+ LOG4J_APPENDER_DELIMITER+ PROP_LOG4J_ORIGINAL_APPENDER_NAME,originalAppenderName);\n    this.initialProps.setProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"rejectWhenFull\",\"true\");\n    String maxThreads=this.initialProps.getProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\");\n    if (maxThreads == null) {\n      this.initialProps.setProperty(\"batcher.\" + AsyncAppender.class.getName() + \".\"+ originalAppenderName+ \".\"+ \"maxThreads\",\"1\");\n    }\n    for (    Map.Entry mapEntry : props.entrySet()) {\n      String key=mapEntry.getKey().toString();\n      if ((key.contains(LOG4J_PREFIX) || key.contains(ROOT_CATEGORY) || key.contains(ROOT_LOGGER)) && !key.contains(PROP_LOG4J_ASYNC_APPENDERS) && !key.contains(PROP_LOG4J_ORIGINAL_APPENDER_NAME)) {\n        Object value=mapEntry.getValue();\n        if (value != null) {\n          String[] values=(String.class.cast(value)).split(\",\");\n          String valueString=\"\";\n          int ctr=0;\n          for (          String oneValue : values) {\n            if (oneValue == null) {\n              continue;\n            }\n            ++ctr;\n            if (originalAppenderName.equals(oneValue.trim())) {\n              oneValue=asyncAppenderName;\n            }\n            if (ctr != values.length) {\n              valueString=valueString + oneValue + \",\";\n            }\n else {\n              valueString=valueString + oneValue;\n            }\n          }\n          mapEntry.setValue(valueString);\n        }\n      }\n    }\n  }\n}\n",
        "File_Path": "blitz4j/src/main/java/com/netflix/blitz4j/LoggingConfiguration.java",
        "Start": 19085,
        "Stop": 22519,
        "Project_Name": "data/projects/blitz4j",
        "Method_Name": "convertConfiguredAppendersToAsync"
    }
]
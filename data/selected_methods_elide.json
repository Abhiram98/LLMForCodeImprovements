[
    {
        "Old_Method": "@Test void testRelationshipFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(RelatedEntity.class);\n  entityDictionary.bindEntity(RelationshipEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String relatedEntityTag=\"relatedEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noCreateEntityTag=\"noCreateEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n    }\n  }\n);\n}\n",
        "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
        "Start": 40820,
        "Stop": 45767,
        "Project_Name": "data/projects/elide",
        "Method_Name": "testRelationshipFilterCrud"
    },
    {
        "Old_Method": "@Test void testRelationshipFilterCrud(){\n  EntityDictionary entityDictionary=EntityDictionary.builder().build();\n  entityDictionary.bindEntity(RelatedEntity.class);\n  entityDictionary.bindEntity(RelationshipEntity.class);\n  entityDictionary.bindEntity(NoReadEntity.class);\n  entityDictionary.bindEntity(NoCreateEntity.class);\n  Info info=new Info().title(\"Test Service\").version(NO_VERSION);\n  String relatedEntityTag=\"relatedEntity\";\n  String noReadEntityTag=\"noReadEntity\";\n  String noCreateEntityTag=\"noCreateEntity\";\n  OpenApiBuilder builder=new OpenApiBuilder(entityDictionary).apiVersion(info.getVersion());\n  OpenAPI testOpenApi=builder.build().info(info);\n  testOpenApi.getPaths().forEach((url,path) -> {\n    if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/relationships/toonenoread\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate/{relatedEntityId}\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n      assertNull(path.getDelete());\n      assertNull(path.getPatch());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread/{relatedEntityId}\")) {\n      assertNull(path.getGet());\n      assertNull(path.getPost());\n      assertTrue(path.getDelete().getTags().contains(relatedEntityTag));\n      assertTrue(path.getPatch().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoupdate\")) {\n      assertTrue(path.getGet().getTags().contains(relatedEntityTag));\n      assertNull(path.getPost());\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/tomanynoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/toonenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(relatedEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionenoread\")) {\n      assertNull(path.getGet());\n      assertTrue(path.getPost().getTags().contains(noReadEntityTag));\n    }\n else     if (url.endsWith(\"relationshipEntity/{relationshipEntityId}/collectionnocreate\")) {\n      assertTrue(path.getGet().getTags().contains(noCreateEntityTag));\n      assertNull(path.getPost());\n    }\n  }\n);\n}\n",
        "File_Path": "elide/elide-swagger/src/test/java/com/yahoo/elide/swagger/OpenApiBuilderTest.java",
        "Start": 40820,
        "Stop": 45767,
        "Project_Name": "data/projects/elide",
        "Method_Name": "testRelationshipFilterCrud"
    },
    {
        "Old_Method": "@Test void multipleDataStoreJpaTransaction(){\n  contextRunner.withPropertyValues(\"spring.cloud.refresh.enabled=false\").withUserConfiguration(MultipleDataSourceJpaConfiguration.class,MultipleEntityManagerFactoryJpaConfiguration.class).run(context -> {\n    RefreshableElide refreshableElide=context.getBean(RefreshableElide.class);\n    Route route=Route.builder().apiVersion(NO_VERSION).build();\n    RequestScope scope=RequestScope.builder().route(route).requestId(UUID.randomUUID()).elideSettings(refreshableElide.getElide().getElideSettings()).build();\n    EntityManagerFactory entityManagerFactoryV2=context.getBean(\"entityManagerFactoryV2\",EntityManagerFactory.class);\n    EntityManagerFactory entityManagerFactoryV3=context.getBean(\"entityManagerFactoryV3\",EntityManagerFactory.class);\n    JpaTransactionManager transactionManagerV2=context.getBean(\"transactionManagerV2\",JpaTransactionManager.class);\n    JpaTransactionManager transactionManagerV3=context.getBean(\"transactionManagerV3\",JpaTransactionManager.class);\n    ElideConfigProperties settings=new ElideConfigProperties();\n    settings.getJpaStore().setDelegateToInMemoryStore(true);\n    JpaDataStoreRegistration registrationV2=JpaDataStoreRegistrations.buildJpaDataStoreRegistration(\"entityManagerFactoryV2\",entityManagerFactoryV2,\"transactionManagerV2\",transactionManagerV2,settings,Optional.empty(),null);\n    JpaDataStoreRegistration registrationV3=JpaDataStoreRegistrations.buildJpaDataStoreRegistration(\"entityManagerFactoryV3\",entityManagerFactoryV3,\"transactionManagerV3\",transactionManagerV3,settings,Optional.empty(),null);\n    EntityDictionary entityDictionary=EntityDictionary.builder().build();\n    JpaDataStore jpaDataStoreV2=new JpaDataStore(registrationV2.getEntityManagerSupplier(),registrationV2.getReadTransactionSupplier(),registrationV2.getWriteTransactionSupplier(),registrationV2.getQueryLogger(),registrationV2.getMetamodelSupplier());\n    JpaDataStore jpaDataStoreV3=new JpaDataStore(registrationV3.getEntityManagerSupplier(),registrationV3.getReadTransactionSupplier(),registrationV3.getWriteTransactionSupplier(),registrationV3.getQueryLogger(),registrationV3.getMetamodelSupplier());\n    jpaDataStoreV2.populateEntityDictionary(entityDictionary);\n    jpaDataStoreV3.populateEntityDictionary(entityDictionary);\n    try (DataStoreTransaction transaction1=jpaDataStoreV2.beginTransaction()){\n      ArtifactGroupV2 artifactGroupV2=new ArtifactGroupV2();\n      artifactGroupV2.setName(\"JPA V2\");\n      transaction1.save(artifactGroupV2,null);\n      try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n        ArtifactGroupV3 artifactGroupV3=new ArtifactGroupV3();\n        artifactGroupV3.setName(\"JPA V3\");\n        transaction2.save(artifactGroupV3,null);\n        transaction2.commit(null);\n      }\n     }\n     try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n      ArtifactGroupV3 artifactGroupV3=transaction2.loadObject(EntityProjection.builder().type(ArtifactGroupV3.class).build(),\"JPA V3\",scope);\n      assertThat(artifactGroupV3).isNotNull();\n      transaction2.delete(artifactGroupV3,null);\n    }\n     try (DataStoreTransaction transaction1=jpaDataStoreV2.beginTransaction()){\n      ArtifactGroupV2 artifactGroupV2=new ArtifactGroupV2();\n      artifactGroupV2.setName(\"JPA V2\");\n      transaction1.save(artifactGroupV2,null);\n      try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n        ArtifactGroupV3 artifactGroupV3=new ArtifactGroupV3();\n        artifactGroupV3.setName(\"JPA V3\");\n        transaction2.save(artifactGroupV3,null);\n        transaction2.commit(null);\n      }\n       transaction1.commit(null);\n    }\n     try (DataStoreTransaction transaction1=jpaDataStoreV2.beginTransaction()){\n      ArtifactGroupV2 artifactGroupV2=transaction1.loadObject(EntityProjection.builder().type(ArtifactGroupV2.class).build(),\"JPA V2\",scope);\n      assertThat(artifactGroupV2).isNotNull();\n      try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n        ArtifactGroupV3 artifactGroupV3=transaction2.loadObject(EntityProjection.builder().type(ArtifactGroupV3.class).build(),\"JPA V3\",scope);\n        assertThat(artifactGroupV3).isNotNull();\n      }\n     }\n   }\n);\n}\n",
        "File_Path": "elide/elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/config/ElideAutoConfigurationTransactionTest.java",
        "Start": 15142,
        "Stop": 21394,
        "Project_Name": "data/projects/elide",
        "Method_Name": "multipleDataStoreJpaTransaction"
    },
    {
        "Old_Method": "@Test void multipleDataStoreJpaTransaction(){\n  contextRunner.withPropertyValues(\"spring.cloud.refresh.enabled=false\").withUserConfiguration(MultipleDataSourceJpaConfiguration.class,MultipleEntityManagerFactoryJpaConfiguration.class).run(context -> {\n    RefreshableElide refreshableElide=context.getBean(RefreshableElide.class);\n    Route route=Route.builder().apiVersion(NO_VERSION).build();\n    RequestScope scope=RequestScope.builder().route(route).requestId(UUID.randomUUID()).elideSettings(refreshableElide.getElide().getElideSettings()).build();\n    EntityManagerFactory entityManagerFactoryV2=context.getBean(\"entityManagerFactoryV2\",EntityManagerFactory.class);\n    EntityManagerFactory entityManagerFactoryV3=context.getBean(\"entityManagerFactoryV3\",EntityManagerFactory.class);\n    JpaTransactionManager transactionManagerV2=context.getBean(\"transactionManagerV2\",JpaTransactionManager.class);\n    JpaTransactionManager transactionManagerV3=context.getBean(\"transactionManagerV3\",JpaTransactionManager.class);\n    ElideConfigProperties settings=new ElideConfigProperties();\n    settings.getJpaStore().setDelegateToInMemoryStore(true);\n    JpaDataStoreRegistration registrationV2=JpaDataStoreRegistrations.buildJpaDataStoreRegistration(\"entityManagerFactoryV2\",entityManagerFactoryV2,\"transactionManagerV2\",transactionManagerV2,settings,Optional.empty(),null);\n    JpaDataStoreRegistration registrationV3=JpaDataStoreRegistrations.buildJpaDataStoreRegistration(\"entityManagerFactoryV3\",entityManagerFactoryV3,\"transactionManagerV3\",transactionManagerV3,settings,Optional.empty(),null);\n    EntityDictionary entityDictionary=EntityDictionary.builder().build();\n    JpaDataStore jpaDataStoreV2=new JpaDataStore(registrationV2.getEntityManagerSupplier(),registrationV2.getReadTransactionSupplier(),registrationV2.getWriteTransactionSupplier(),registrationV2.getQueryLogger(),registrationV2.getMetamodelSupplier());\n    JpaDataStore jpaDataStoreV3=new JpaDataStore(registrationV3.getEntityManagerSupplier(),registrationV3.getReadTransactionSupplier(),registrationV3.getWriteTransactionSupplier(),registrationV3.getQueryLogger(),registrationV3.getMetamodelSupplier());\n    jpaDataStoreV2.populateEntityDictionary(entityDictionary);\n    jpaDataStoreV3.populateEntityDictionary(entityDictionary);\n    try (DataStoreTransaction transaction1=jpaDataStoreV2.beginTransaction()){\n      ArtifactGroupV2 artifactGroupV2=new ArtifactGroupV2();\n      artifactGroupV2.setName(\"JPA V2\");\n      transaction1.save(artifactGroupV2,null);\n      try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n        ArtifactGroupV3 artifactGroupV3=new ArtifactGroupV3();\n        artifactGroupV3.setName(\"JPA V3\");\n        transaction2.save(artifactGroupV3,null);\n        transaction2.commit(null);\n      }\n     }\n     try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n      ArtifactGroupV3 artifactGroupV3=transaction2.loadObject(EntityProjection.builder().type(ArtifactGroupV3.class).build(),\"JPA V3\",scope);\n      assertThat(artifactGroupV3).isNotNull();\n      transaction2.delete(artifactGroupV3,null);\n    }\n     try (DataStoreTransaction transaction1=jpaDataStoreV2.beginTransaction()){\n      ArtifactGroupV2 artifactGroupV2=new ArtifactGroupV2();\n      artifactGroupV2.setName(\"JPA V2\");\n      transaction1.save(artifactGroupV2,null);\n      try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n        ArtifactGroupV3 artifactGroupV3=new ArtifactGroupV3();\n        artifactGroupV3.setName(\"JPA V3\");\n        transaction2.save(artifactGroupV3,null);\n        transaction2.commit(null);\n      }\n       transaction1.commit(null);\n    }\n     try (DataStoreTransaction transaction1=jpaDataStoreV2.beginTransaction()){\n      ArtifactGroupV2 artifactGroupV2=transaction1.loadObject(EntityProjection.builder().type(ArtifactGroupV2.class).build(),\"JPA V2\",scope);\n      assertThat(artifactGroupV2).isNotNull();\n      try (DataStoreTransaction transaction2=jpaDataStoreV3.beginTransaction()){\n        ArtifactGroupV3 artifactGroupV3=transaction2.loadObject(EntityProjection.builder().type(ArtifactGroupV3.class).build(),\"JPA V3\",scope);\n        assertThat(artifactGroupV3).isNotNull();\n      }\n     }\n   }\n);\n}\n",
        "File_Path": "elide/elide-spring/elide-spring-boot-autoconfigure/src/test/java/com/yahoo/elide/spring/config/ElideAutoConfigurationTransactionTest.java",
        "Start": 15142,
        "Stop": 21394,
        "Project_Name": "data/projects/elide",
        "Method_Name": "multipleDataStoreJpaTransaction"
    },
    {
        "Old_Method": "@Test public void testSparseNoFilters() throws Exception {\n  JsonNode responseBody=mapper.readTree(given().contentType(JsonApi.MEDIA_TYPE).accept(JsonApi.MEDIA_TYPE).param(\"include\",\"authors\").get(\"/book\").then().statusCode(HttpStatus.SC_OK).extract().body().asString());\n  assertTrue(responseBody.has(\"data\"));\n  for (  JsonNode bookNode : responseBody.get(\"data\")) {\n    assertTrue(bookNode.has(ATTRIBUTES));\n    JsonNode attributes=bookNode.get(ATTRIBUTES);\n    assertTrue(attributes.has(\"title\"));\n    assertTrue(attributes.has(\"language\"));\n    assertTrue(attributes.has(\"genre\"));\n    assertTrue(bookNode.has(RELATIONSHIPS));\n    JsonNode relationships=bookNode.get(RELATIONSHIPS);\n    assertTrue(relationships.has(\"authors\"));\n  }\n  assertTrue(responseBody.has(INCLUDED));\n  for (  JsonNode include : responseBody.get(INCLUDED)) {\n    assertTrue(include.has(ATTRIBUTES));\n    JsonNode attributes=include.get(ATTRIBUTES);\n    assertTrue(attributes.has(\"name\"));\n    assertTrue(include.has(RELATIONSHIPS));\n    JsonNode relationships=include.get(RELATIONSHIPS);\n    assertTrue(relationships.has(\"books\"));\n  }\n}\n",
        "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/tests/BookAuthorIT.java",
        "Start": 8248,
        "Stop": 9731,
        "Project_Name": "data/projects/elide",
        "Method_Name": "testSparseNoFilters"
    },
    {
        "Old_Method": "@Test public void testSparseNoFilters() throws Exception {\n  JsonNode responseBody=mapper.readTree(given().contentType(JsonApi.MEDIA_TYPE).accept(JsonApi.MEDIA_TYPE).param(\"include\",\"authors\").get(\"/book\").then().statusCode(HttpStatus.SC_OK).extract().body().asString());\n  assertTrue(responseBody.has(\"data\"));\n  for (  JsonNode bookNode : responseBody.get(\"data\")) {\n    assertTrue(bookNode.has(ATTRIBUTES));\n    JsonNode attributes=bookNode.get(ATTRIBUTES);\n    assertTrue(attributes.has(\"title\"));\n    assertTrue(attributes.has(\"language\"));\n    assertTrue(attributes.has(\"genre\"));\n    assertTrue(bookNode.has(RELATIONSHIPS));\n    JsonNode relationships=bookNode.get(RELATIONSHIPS);\n    assertTrue(relationships.has(\"authors\"));\n  }\n  assertTrue(responseBody.has(INCLUDED));\n  for (  JsonNode include : responseBody.get(INCLUDED)) {\n    assertTrue(include.has(ATTRIBUTES));\n    JsonNode attributes=include.get(ATTRIBUTES);\n    assertTrue(attributes.has(\"name\"));\n    assertTrue(include.has(RELATIONSHIPS));\n    JsonNode relationships=include.get(RELATIONSHIPS);\n    assertTrue(relationships.has(\"books\"));\n  }\n}\n",
        "File_Path": "elide/elide-integration-tests/src/test/java/com/yahoo/elide/tests/BookAuthorIT.java",
        "Start": 8248,
        "Stop": 9731,
        "Project_Name": "data/projects/elide",
        "Method_Name": "testSparseNoFilters"
    },
    {
        "Old_Method": "private static Map<Class<? extends Annotation>,Annotation> buildAnnotations(Dimension dimension){\n  Map<Class<? extends Annotation>,Annotation> annotations=new HashMap<>();\n  annotations.put(ColumnMeta.class,new ColumnMeta(){\n    @Override public Class<? extends Annotation> annotationType(){\n      return ColumnMeta.class;\n    }\n    @Override public String friendlyName(){\n      return dimension.getFriendlyName();\n    }\n    @Override public String description(){\n      return dimension.getDescription();\n    }\n    @Override public String category(){\n      return dimension.getCategory();\n    }\n    @Override public TableSource tableSource(){\n      return buildTableSource(dimension.getTableSource());\n    }\n    @Override public String[] tags(){\n      return dimension.getTags().toArray(new String[0]);\n    }\n    @Override public String[] values(){\n      return dimension.getValues().toArray(new String[0]);\n    }\n    @Override public boolean isHidden(){\n      return dimension.getHidden() != null && dimension.getHidden();\n    }\n    @Override public String filterTemplate(){\n      return dimension.getFilterTemplate();\n    }\n    @Override public CardinalitySize size(){\n      if (StringUtils.isEmpty(dimension.getCardinality())) {\n        return CardinalitySize.UNKNOWN;\n      }\n      return CardinalitySize.valueOf(dimension.getCardinality().toUpperCase(Locale.ENGLISH));\n    }\n  }\n);\n  annotations.put(DimensionFormula.class,new DimensionFormula(){\n    @Override public ArgumentDefinition[] arguments(){\n      return getArgumentDefinitions(dimension.getArguments());\n    }\n    @Override public Class<? extends Annotation> annotationType(){\n      return DimensionFormula.class;\n    }\n    @Override public String value(){\n      return trimColumnReferences(dimension.getDefinition());\n    }\n  }\n);\n  String readPermission=dimension.getReadAccess();\n  if (StringUtils.isNotEmpty(readPermission)) {\n    annotations.put(ReadPermission.class,new ReadPermission(){\n      @Override public Class<? extends Annotation> annotationType(){\n        return ReadPermission.class;\n      }\n      @Override public String expression(){\n        return readPermission;\n      }\n    }\n);\n  }\n  if (dimension.getType().toUpperCase(Locale.ROOT).equals(ENUM_ORDINAL)) {\n    annotations.put(Enumerated.class,getEnumeratedAnnotation(EnumType.ORDINAL));\n  }\n  if (dimension.getType().toUpperCase(Locale.ROOT).equals(TIME)) {\n    annotations.put(Temporal.class,new Temporal(){\n      @Override public Class<? extends Annotation> annotationType(){\n        return Temporal.class;\n      }\n      @Override public TimeGrainDefinition[] grains(){\n        int numGrains=dimension.getGrains() == null ? 0 : dimension.getGrains().size();\n        TimeGrainDefinition[] definitions=new TimeGrainDefinition[numGrains];\n        for (int idx=0; idx < numGrains; idx++) {\n          Grain grain=dimension.getGrains().get(idx);\n          definitions[idx]=new TimeGrainDefinition(){\n            @Override public Class<? extends Annotation> annotationType(){\n              return TimeGrainDefinition.class;\n            }\n            @Override public TimeGrain grain(){\n              if (grain.getType() == null) {\n                return TimeGrain.DAY;\n              }\n              return TimeGrain.valueOf(grain.getType().name());\n            }\n            @Override public String expression(){\n              String sql=grain.getSql();\n              if (StringUtils.isEmpty(sql)) {\n                return \"{{$$column.expr}}\";\n              }\n              return grain.getSql();\n            }\n          }\n;\n        }\n        return definitions;\n      }\n      @Override public String timeZone(){\n        return \"UTC\";\n      }\n    }\n);\n  }\n  return annotations;\n}\n",
        "File_Path": "elide/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/dynamic/TableType.java",
        "Start": 21178,
        "Stop": 26304,
        "Project_Name": "data/projects/elide",
        "Method_Name": "buildAnnotations"
    },
    {
        "Old_Method": "private static Map<Class<? extends Annotation>,Annotation> buildAnnotations(Dimension dimension){\n  Map<Class<? extends Annotation>,Annotation> annotations=new HashMap<>();\n  annotations.put(ColumnMeta.class,new ColumnMeta(){\n    @Override public Class<? extends Annotation> annotationType(){\n      return ColumnMeta.class;\n    }\n    @Override public String friendlyName(){\n      return dimension.getFriendlyName();\n    }\n    @Override public String description(){\n      return dimension.getDescription();\n    }\n    @Override public String category(){\n      return dimension.getCategory();\n    }\n    @Override public TableSource tableSource(){\n      return buildTableSource(dimension.getTableSource());\n    }\n    @Override public String[] tags(){\n      return dimension.getTags().toArray(new String[0]);\n    }\n    @Override public String[] values(){\n      return dimension.getValues().toArray(new String[0]);\n    }\n    @Override public boolean isHidden(){\n      return dimension.getHidden() != null && dimension.getHidden();\n    }\n    @Override public String filterTemplate(){\n      return dimension.getFilterTemplate();\n    }\n    @Override public CardinalitySize size(){\n      if (StringUtils.isEmpty(dimension.getCardinality())) {\n        return CardinalitySize.UNKNOWN;\n      }\n      return CardinalitySize.valueOf(dimension.getCardinality().toUpperCase(Locale.ENGLISH));\n    }\n  }\n);\n  annotations.put(DimensionFormula.class,new DimensionFormula(){\n    @Override public ArgumentDefinition[] arguments(){\n      return getArgumentDefinitions(dimension.getArguments());\n    }\n    @Override public Class<? extends Annotation> annotationType(){\n      return DimensionFormula.class;\n    }\n    @Override public String value(){\n      return trimColumnReferences(dimension.getDefinition());\n    }\n  }\n);\n  String readPermission=dimension.getReadAccess();\n  if (StringUtils.isNotEmpty(readPermission)) {\n    annotations.put(ReadPermission.class,new ReadPermission(){\n      @Override public Class<? extends Annotation> annotationType(){\n        return ReadPermission.class;\n      }\n      @Override public String expression(){\n        return readPermission;\n      }\n    }\n);\n  }\n  if (dimension.getType().toUpperCase(Locale.ROOT).equals(ENUM_ORDINAL)) {\n    annotations.put(Enumerated.class,getEnumeratedAnnotation(EnumType.ORDINAL));\n  }\n  if (dimension.getType().toUpperCase(Locale.ROOT).equals(TIME)) {\n    annotations.put(Temporal.class,new Temporal(){\n      @Override public Class<? extends Annotation> annotationType(){\n        return Temporal.class;\n      }\n      @Override public TimeGrainDefinition[] grains(){\n        int numGrains=dimension.getGrains() == null ? 0 : dimension.getGrains().size();\n        TimeGrainDefinition[] definitions=new TimeGrainDefinition[numGrains];\n        for (int idx=0; idx < numGrains; idx++) {\n          Grain grain=dimension.getGrains().get(idx);\n          definitions[idx]=new TimeGrainDefinition(){\n            @Override public Class<? extends Annotation> annotationType(){\n              return TimeGrainDefinition.class;\n            }\n            @Override public TimeGrain grain(){\n              if (grain.getType() == null) {\n                return TimeGrain.DAY;\n              }\n              return TimeGrain.valueOf(grain.getType().name());\n            }\n            @Override public String expression(){\n              String sql=grain.getSql();\n              if (StringUtils.isEmpty(sql)) {\n                return \"{{$$column.expr}}\";\n              }\n              return grain.getSql();\n            }\n          }\n;\n        }\n        return definitions;\n      }\n      @Override public String timeZone(){\n        return \"UTC\";\n      }\n    }\n);\n  }\n  return annotations;\n}\n",
        "File_Path": "elide/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/dynamic/TableType.java",
        "Start": 21178,
        "Stop": 26304,
        "Project_Name": "data/projects/elide",
        "Method_Name": "buildAnnotations"
    },
    {
        "Old_Method": "/** \n * Start the Elide service.\n * @param block - Whether or not to wait for the server to shutdown.\n * @throws Exception Exception thrown\n */\npublic void start(boolean block) throws Exception {\n  ServletContextHandler context=new ServletContextHandler();\n  context.setContextPath(\"/\");\n  log.info(\"Starting jetty server on port: {}\",elideStandaloneSettings.getPort());\n  jettyServer=new Server(elideStandaloneSettings.getPort());\n  jettyServer.setHandler(context);\n  context.setAttribute(ELIDE_STANDALONE_SETTINGS_ATTR,elideStandaloneSettings);\n  if (elideStandaloneSettings.getAsyncProperties().enabled()) {\n    Integer threadPoolSize=elideStandaloneSettings.getAsyncProperties().getThreadSize() == null ? AsyncExecutorService.DEFAULT_THREAD_POOL_SIZE : elideStandaloneSettings.getAsyncProperties().getThreadSize();\n    context.setAttribute(ASYNC_EXECUTOR_ATTR,Executors.newFixedThreadPool(threadPoolSize));\n    context.setAttribute(ASYNC_UPDATER_ATTR,Executors.newFixedThreadPool(threadPoolSize));\n  }\n  if (elideStandaloneSettings.enableJsonApi()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getJsonApiPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.jsonapi.resources\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  if (elideStandaloneSettings.enableGraphQL()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getGraphQLApiPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.graphql\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  ElideStandaloneSubscriptionSettings subscriptionSettings=elideStandaloneSettings.getSubscriptionProperties();\n  if (elideStandaloneSettings.enableGraphQL() && subscriptionSettings.enabled()) {\n    JakartaWebSocketServletContainerInitializer.configure(context,(servletContext,serverContainer) -> {\n      serverContainer.addEndpoint(subscriptionSettings.serverEndpointConfig(elideStandaloneSettings,false));\n    }\n);\n    JakartaWebSocketServletContainerInitializer.configure(context,(servletContext,serverContainer) -> {\n      serverContainer.addEndpoint(subscriptionSettings.serverEndpointConfig(elideStandaloneSettings,true));\n    }\n);\n  }\n  if (elideStandaloneSettings.getAsyncProperties().enableExport()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getAsyncProperties().getExportApiPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.async.resources\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  if (elideStandaloneSettings.enableServiceMonitoring()) {\n    FilterHolder instrumentedFilterHolder=new FilterHolder(InstrumentedFilter.class);\n    instrumentedFilterHolder.setName(\"instrumentedFilter\");\n    instrumentedFilterHolder.setAsyncSupported(true);\n    context.addFilter(instrumentedFilterHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST));\n    context.setAttribute(HealthCheckServlet.HEALTH_CHECK_REGISTRY,ElideResourceConfig.getHealthCheckRegistry());\n    context.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,ElideResourceConfig.getMetricRegistry());\n    context.setAttribute(MetricsServlet.METRICS_REGISTRY,ElideResourceConfig.getMetricRegistry());\n    context.addServlet(AdminServlet.class,\"/stats/*\");\n  }\n  if (elideStandaloneSettings.enableApiDocs()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getApiDocsPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.swagger.resources\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  elideStandaloneSettings.updateServletContextHandler(context);\n  try {\n    jettyServer.start();\n    log.info(\"Jetty started!\");\n    if (block) {\n      jettyServer.join();\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Unexpected exception caught: {}\",e.getMessage(),e);\n    throw e;\n  }\n finally {\n    if (block) {\n      jettyServer.destroy();\n    }\n  }\n}\n",
        "File_Path": "elide/elide-standalone/src/main/java/com/yahoo/elide/standalone/ElideStandalone.java",
        "Start": 2575,
        "Stop": 7965,
        "Project_Name": "data/projects/elide",
        "Method_Name": "start"
    },
    {
        "Old_Method": "/** \n * Start the Elide service.\n * @param block - Whether or not to wait for the server to shutdown.\n * @throws Exception Exception thrown\n */\npublic void start(boolean block) throws Exception {\n  ServletContextHandler context=new ServletContextHandler();\n  context.setContextPath(\"/\");\n  log.info(\"Starting jetty server on port: {}\",elideStandaloneSettings.getPort());\n  jettyServer=new Server(elideStandaloneSettings.getPort());\n  jettyServer.setHandler(context);\n  context.setAttribute(ELIDE_STANDALONE_SETTINGS_ATTR,elideStandaloneSettings);\n  if (elideStandaloneSettings.getAsyncProperties().enabled()) {\n    Integer threadPoolSize=elideStandaloneSettings.getAsyncProperties().getThreadSize() == null ? AsyncExecutorService.DEFAULT_THREAD_POOL_SIZE : elideStandaloneSettings.getAsyncProperties().getThreadSize();\n    context.setAttribute(ASYNC_EXECUTOR_ATTR,Executors.newFixedThreadPool(threadPoolSize));\n    context.setAttribute(ASYNC_UPDATER_ATTR,Executors.newFixedThreadPool(threadPoolSize));\n  }\n  if (elideStandaloneSettings.enableJsonApi()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getJsonApiPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.jsonapi.resources\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  if (elideStandaloneSettings.enableGraphQL()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getGraphQLApiPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.graphql\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  ElideStandaloneSubscriptionSettings subscriptionSettings=elideStandaloneSettings.getSubscriptionProperties();\n  if (elideStandaloneSettings.enableGraphQL() && subscriptionSettings.enabled()) {\n    JakartaWebSocketServletContainerInitializer.configure(context,(servletContext,serverContainer) -> {\n      serverContainer.addEndpoint(subscriptionSettings.serverEndpointConfig(elideStandaloneSettings,false));\n    }\n);\n    JakartaWebSocketServletContainerInitializer.configure(context,(servletContext,serverContainer) -> {\n      serverContainer.addEndpoint(subscriptionSettings.serverEndpointConfig(elideStandaloneSettings,true));\n    }\n);\n  }\n  if (elideStandaloneSettings.getAsyncProperties().enableExport()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getAsyncProperties().getExportApiPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.async.resources\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  if (elideStandaloneSettings.enableServiceMonitoring()) {\n    FilterHolder instrumentedFilterHolder=new FilterHolder(InstrumentedFilter.class);\n    instrumentedFilterHolder.setName(\"instrumentedFilter\");\n    instrumentedFilterHolder.setAsyncSupported(true);\n    context.addFilter(instrumentedFilterHolder,\"/*\",EnumSet.of(DispatcherType.REQUEST));\n    context.setAttribute(HealthCheckServlet.HEALTH_CHECK_REGISTRY,ElideResourceConfig.getHealthCheckRegistry());\n    context.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,ElideResourceConfig.getMetricRegistry());\n    context.setAttribute(MetricsServlet.METRICS_REGISTRY,ElideResourceConfig.getMetricRegistry());\n    context.addServlet(AdminServlet.class,\"/stats/*\");\n  }\n  if (elideStandaloneSettings.enableApiDocs()) {\n    ServletHolder jerseyServlet=context.addServlet(ServletContainer.class,elideStandaloneSettings.getApiDocsPathSpec());\n    jerseyServlet.setInitOrder(0);\n    jerseyServlet.setInitParameter(\"jersey.config.server.provider.packages\",\"com.yahoo.elide.swagger.resources\");\n    jerseyServlet.setInitParameter(\"jakarta.ws.rs.Application\",ElideResourceConfig.class.getCanonicalName());\n  }\n  elideStandaloneSettings.updateServletContextHandler(context);\n  try {\n    jettyServer.start();\n    log.info(\"Jetty started!\");\n    if (block) {\n      jettyServer.join();\n    }\n  }\n catch (  Exception e) {\n    log.error(\"Unexpected exception caught: {}\",e.getMessage(),e);\n    throw e;\n  }\n finally {\n    if (block) {\n      jettyServer.destroy();\n    }\n  }\n}\n",
        "File_Path": "elide/elide-standalone/src/main/java/com/yahoo/elide/standalone/ElideStandalone.java",
        "Start": 2575,
        "Stop": 7965,
        "Project_Name": "data/projects/elide",
        "Method_Name": "start"
    },
    {
        "Old_Method": "/** \n * Returns the OpenAPI path for a relationship URL.\n * @return the OpenAPI 'Path' for a relationship URL(/books/{bookId}/relationships/author).\n * @throws IllegalStateException for errors.\n */\npublic PathItem getRelationshipPath(){\n  if (lineage.isEmpty()) {\n    throw new IllegalStateException(\"Root collections don't have relationships\");\n  }\n  PathItem path=new PathItem();\n  lineage.stream().forEach(item -> path.addParametersItem(item.getPathParameter()));\n  String schemaName=getSchemaName(type);\n  ApiResponse okSingularResponse=new ApiResponse().description(\"Successful response\").content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Datum(new Relationship(schemaName)))));\n  ApiResponse okPluralResponse=new ApiResponse().description(\"Successful response\").content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))));\n  ApiResponse okEmptyResponse=new ApiResponse().description(\"Successful response\");\n  Type<?> parentClass=lineage.peek().getType();\n  RelationshipType relationshipType=dictionary.getRelationshipType(parentClass,name);\n  if (relationshipType.isToMany()) {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(new Operation().tags(getTags()).description(\"Returns the relationship identifiers for \" + name).responses(new ApiResponses().addApiResponse(\"200\",okPluralResponse)));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.post(new Operation().tags(getTags()).description(\"Adds items to the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"201\",okPluralResponse)));\n      path.patch(new Operation().tags(getTags()).description(\"Replaces the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n      path.delete(new Operation().tags(getTags()).description(\"Deletes items from the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n    }\n  }\n else {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(new Operation().tags(getTags()).description(\"Returns the relationship identifiers for \" + name).responses(new ApiResponses().addApiResponse(\"200\",okSingularResponse)));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.patch(new Operation().tags(getTags()).description(\"Replaces the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Datum(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n    }\n  }\n  if (path.getGet() != null) {\n    for (    Parameter param : getFilterParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n    for (    Parameter param : getPageParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n  }\n  decorateGlobalResponses(path);\n  decorateGlobalParameters(path);\n  return path;\n}\n",
        "File_Path": "elide/elide-swagger/src/main/java/com/yahoo/elide/swagger/OpenApiBuilder.java",
        "Start": 8065,
        "Stop": 12641,
        "Project_Name": "data/projects/elide",
        "Method_Name": "getRelationshipPath"
    },
    {
        "Old_Method": "/** \n * Returns the OpenAPI path for a relationship URL.\n * @return the OpenAPI 'Path' for a relationship URL(/books/{bookId}/relationships/author).\n * @throws IllegalStateException for errors.\n */\npublic PathItem getRelationshipPath(){\n  if (lineage.isEmpty()) {\n    throw new IllegalStateException(\"Root collections don't have relationships\");\n  }\n  PathItem path=new PathItem();\n  lineage.stream().forEach(item -> path.addParametersItem(item.getPathParameter()));\n  String schemaName=getSchemaName(type);\n  ApiResponse okSingularResponse=new ApiResponse().description(\"Successful response\").content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Datum(new Relationship(schemaName)))));\n  ApiResponse okPluralResponse=new ApiResponse().description(\"Successful response\").content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))));\n  ApiResponse okEmptyResponse=new ApiResponse().description(\"Successful response\");\n  Type<?> parentClass=lineage.peek().getType();\n  RelationshipType relationshipType=dictionary.getRelationshipType(parentClass,name);\n  if (relationshipType.isToMany()) {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(new Operation().tags(getTags()).description(\"Returns the relationship identifiers for \" + name).responses(new ApiResponses().addApiResponse(\"200\",okPluralResponse)));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.post(new Operation().tags(getTags()).description(\"Adds items to the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"201\",okPluralResponse)));\n      path.patch(new Operation().tags(getTags()).description(\"Replaces the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n      path.delete(new Operation().tags(getTags()).description(\"Deletes items from the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Data(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n    }\n  }\n else {\n    if (canRead(parentClass,name) && canRead(type)) {\n      path.get(new Operation().tags(getTags()).description(\"Returns the relationship identifiers for \" + name).responses(new ApiResponses().addApiResponse(\"200\",okSingularResponse)));\n    }\n    if (canUpdate(parentClass,name)) {\n      path.patch(new Operation().tags(getTags()).description(\"Replaces the relationship \" + name).requestBody(new RequestBody().content(new Content().addMediaType(JsonApi.MEDIA_TYPE,new MediaType().schema(new Datum(new Relationship(schemaName)))))).responses(new ApiResponses().addApiResponse(\"204\",okEmptyResponse)));\n    }\n  }\n  if (path.getGet() != null) {\n    for (    Parameter param : getFilterParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n    for (    Parameter param : getPageParameters()) {\n      path.getGet().addParametersItem(param);\n    }\n  }\n  decorateGlobalResponses(path);\n  decorateGlobalParameters(path);\n  return path;\n}\n",
        "File_Path": "elide/elide-swagger/src/main/java/com/yahoo/elide/swagger/OpenApiBuilder.java",
        "Start": 8065,
        "Stop": 12641,
        "Project_Name": "data/projects/elide",
        "Method_Name": "getRelationshipPath"
    },
    {
        "Old_Method": "@Test void testConnectionSetupAndTeardown() throws IOException {\n  SubscriptionWebSocket endpoint=SubscriptionWebSocket.builder().executorService(executorService).elide(elide).build();\n  ConnectionInit init=new ConnectionInit();\n  endpoint.onOpen(session,endpointConfig);\n  endpoint.onMessage(session,mapper.writeValueAsString(init));\n  ArgumentCaptor<String> message=ArgumentCaptor.forClass(String.class);\n  endpoint.onClose(session,null);\n  verify(remote,times(1)).sendText(message.capture());\n  assertEquals(\"{\\\"type\\\":\\\"connection_ack\\\"}\",message.getAllValues().get(0));\n  ArgumentCaptor<CloseReason> closeReason=ArgumentCaptor.forClass(CloseReason.class);\n  verify(session,times(1)).close(closeReason.capture());\n  assertEquals(NORMAL_CLOSE,closeReason.getValue());\n}\n",
        "File_Path": "elide/elide-graphql/src/test/java/com/yahoo/elide/graphql/subscriptions/SubscriptionWebSocketTest.java",
        "Start": 6117,
        "Stop": 7017,
        "Project_Name": "data/projects/elide",
        "Method_Name": "testConnectionSetupAndTeardown"
    },
    {
        "Old_Method": "@Test void testConnectionSetupAndTeardown() throws IOException {\n  SubscriptionWebSocket endpoint=SubscriptionWebSocket.builder().executorService(executorService).elide(elide).build();\n  ConnectionInit init=new ConnectionInit();\n  endpoint.onOpen(session,endpointConfig);\n  endpoint.onMessage(session,mapper.writeValueAsString(init));\n  ArgumentCaptor<String> message=ArgumentCaptor.forClass(String.class);\n  endpoint.onClose(session,null);\n  verify(remote,times(1)).sendText(message.capture());\n  assertEquals(\"{\\\"type\\\":\\\"connection_ack\\\"}\",message.getAllValues().get(0));\n  ArgumentCaptor<CloseReason> closeReason=ArgumentCaptor.forClass(CloseReason.class);\n  verify(session,times(1)).close(closeReason.capture());\n  assertEquals(NORMAL_CLOSE,closeReason.getValue());\n}\n",
        "File_Path": "elide/elide-graphql/src/test/java/com/yahoo/elide/graphql/subscriptions/SubscriptionWebSocketTest.java",
        "Start": 6117,
        "Stop": 7017,
        "Project_Name": "data/projects/elide",
        "Method_Name": "testConnectionSetupAndTeardown"
    },
    {
        "Old_Method": "@Override public Route resolve(String mediaType,String baseUrl,String path,Map<String,List<String>> headers,Map<String,List<String>> parameters){\n  String baseRoute=baseUrl == null ? \"\" : baseUrl;\n  String route=path;\n  String apiVersion=NO_VERSION;\n  String apiVersionString=\"\";\n  int versionStart=-1;\n  int versionEnd=-1;\n  int pathStart=-1;\n  int pathEnd=-1;\n  int find=path.indexOf('/',0);\n  if (find != -1) {\n    if (find == 0) {\n      versionStart=1;\n      int findEnd=path.indexOf('/',1);\n      if (findEnd != -1) {\n        versionEnd=findEnd;\n        pathStart=findEnd;\n        pathEnd=path.length();\n      }\n else {\n        versionEnd=path.length();\n      }\n    }\n else {\n      versionStart=0;\n      versionEnd=find;\n      pathStart=find;\n      pathEnd=path.length();\n    }\n  }\n else {\n    versionStart=0;\n    versionEnd=path.length();\n  }\n  if (versionStart != -1 && versionEnd != -1) {\n    apiVersion=path.substring(versionStart,versionEnd);\n    apiVersionString=apiVersion;\n  }\n  if (!apiVersion.isEmpty() && !this.versionPrefix.isEmpty()) {\n    if (apiVersion.startsWith(this.versionPrefix)) {\n      apiVersion=apiVersion.substring(this.versionPrefix.length());\n    }\n  }\n  if (!apiVersion.isEmpty()) {\n    if (!apiVersionValidator.isValidApiVersion(apiVersion)) {\n      apiVersion=NO_VERSION;\n      pathStart=0;\n      pathEnd=path.length();\n      apiVersionString=\"\";\n    }\n  }\n  if (pathStart != -1 && pathEnd != -1) {\n    route=path.substring(pathStart,pathEnd);\n  }\n else {\n    route=\"\";\n  }\n  if (route.length() > 0 && route.charAt(0) == '/') {\n    route=route.substring(1);\n  }\n  if (baseRoute.length() > 0 && baseRoute.charAt(baseRoute.length() - 1) == '/') {\n    baseRoute=baseRoute + apiVersionString;\n  }\n else {\n    baseRoute=baseRoute + \"/\" + apiVersionString;\n  }\n  return Route.builder().apiVersion(apiVersion).baseUrl(baseRoute).path(route).headers(headers).parameters(parameters).build();\n}\n",
        "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/core/request/route/PathRouteResolver.java",
        "Start": 730,
        "Stop": 3402,
        "Project_Name": "data/projects/elide",
        "Method_Name": "resolve"
    },
    {
        "Old_Method": "@Override public Route resolve(String mediaType,String baseUrl,String path,Map<String,List<String>> headers,Map<String,List<String>> parameters){\n  String baseRoute=baseUrl == null ? \"\" : baseUrl;\n  String route=path;\n  String apiVersion=NO_VERSION;\n  String apiVersionString=\"\";\n  int versionStart=-1;\n  int versionEnd=-1;\n  int pathStart=-1;\n  int pathEnd=-1;\n  int find=path.indexOf('/',0);\n  if (find != -1) {\n    if (find == 0) {\n      versionStart=1;\n      int findEnd=path.indexOf('/',1);\n      if (findEnd != -1) {\n        versionEnd=findEnd;\n        pathStart=findEnd;\n        pathEnd=path.length();\n      }\n else {\n        versionEnd=path.length();\n      }\n    }\n else {\n      versionStart=0;\n      versionEnd=find;\n      pathStart=find;\n      pathEnd=path.length();\n    }\n  }\n else {\n    versionStart=0;\n    versionEnd=path.length();\n  }\n  if (versionStart != -1 && versionEnd != -1) {\n    apiVersion=path.substring(versionStart,versionEnd);\n    apiVersionString=apiVersion;\n  }\n  if (!apiVersion.isEmpty() && !this.versionPrefix.isEmpty()) {\n    if (apiVersion.startsWith(this.versionPrefix)) {\n      apiVersion=apiVersion.substring(this.versionPrefix.length());\n    }\n  }\n  if (!apiVersion.isEmpty()) {\n    if (!apiVersionValidator.isValidApiVersion(apiVersion)) {\n      apiVersion=NO_VERSION;\n      pathStart=0;\n      pathEnd=path.length();\n      apiVersionString=\"\";\n    }\n  }\n  if (pathStart != -1 && pathEnd != -1) {\n    route=path.substring(pathStart,pathEnd);\n  }\n else {\n    route=\"\";\n  }\n  if (route.length() > 0 && route.charAt(0) == '/') {\n    route=route.substring(1);\n  }\n  if (baseRoute.length() > 0 && baseRoute.charAt(baseRoute.length() - 1) == '/') {\n    baseRoute=baseRoute + apiVersionString;\n  }\n else {\n    baseRoute=baseRoute + \"/\" + apiVersionString;\n  }\n  return Route.builder().apiVersion(apiVersion).baseUrl(baseRoute).path(route).headers(headers).parameters(parameters).build();\n}\n",
        "File_Path": "elide/elide-core/src/main/java/com/yahoo/elide/core/request/route/PathRouteResolver.java",
        "Start": 730,
        "Stop": 3402,
        "Project_Name": "data/projects/elide",
        "Method_Name": "resolve"
    },
    {
        "Old_Method": "@Test public void isemptyAndNotemptyPredicateTest() throws Exception {\n  author=new Author();\n  author.setId(1L);\n  author.setBooks(new HashSet<>());\n  author.setAwards(new HashSet<>());\n  expression=new IsEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n  expression=new IsEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n  expression=new NotEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  expression=new NotEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  author.setAwards(Arrays.asList(\"Bookery prize\"));\n  author.getBooks().add(new Book());\n  expression=new IsEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  expression=new IsEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  expression=new NotEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n  expression=new NotEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n}\n",
        "File_Path": "elide/elide-core/src/test/java/com/yahoo/elide/core/filter/expression/InMemoryFilterExecutorTest.java",
        "Start": 8377,
        "Stop": 9941,
        "Project_Name": "data/projects/elide",
        "Method_Name": "isemptyAndNotemptyPredicateTest"
    },
    {
        "Old_Method": "@Test public void isemptyAndNotemptyPredicateTest() throws Exception {\n  author=new Author();\n  author.setId(1L);\n  author.setBooks(new HashSet<>());\n  author.setAwards(new HashSet<>());\n  expression=new IsEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n  expression=new IsEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n  expression=new NotEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  expression=new NotEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  author.setAwards(Arrays.asList(\"Bookery prize\"));\n  author.getBooks().add(new Book());\n  expression=new IsEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  expression=new IsEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertFalse(fn.test(author));\n  expression=new NotEmptyPredicate(authorAwardsElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n  expression=new NotEmptyPredicate(authorBooksElement);\n  fn=expression.accept(visitor);\n  assertTrue(fn.test(author));\n}\n",
        "File_Path": "elide/elide-core/src/test/java/com/yahoo/elide/core/filter/expression/InMemoryFilterExecutorTest.java",
        "Start": 8377,
        "Stop": 9941,
        "Project_Name": "data/projects/elide",
        "Method_Name": "isemptyAndNotemptyPredicateTest"
    }
]